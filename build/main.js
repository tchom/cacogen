(()=>{"use strict";var t={382:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(542),o=i(999),r=function(){function t(e){if(this.commandMap={},t.instanceMap[e])throw new Error("controller key for this Multiton key already constructed");this.multitonKey=e,this.logger=n.PureMVC.debug?n.PureMVC.logCommand:n.PureMVC.logNone,this.initializeController()}return t.removeController=function(t){delete this.instanceMap[t]},t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.prototype.registerCommand=function(t,e){this.commandMap[t]||this.view.registerObserver(t,this.executeCommand,this),this.commandMap[t]=e},t.prototype.hasCommand=function(t){return void 0!==this.commandMap[t]},t.prototype.removeCommand=function(t){this.hasCommand(t)&&(this.view.removeObserver(t,this.executeCommand,this),delete this.commandMap[t])},t.prototype.initializeController=function(){this.view=o.View.getInstance(this.multitonKey)},t.prototype.executeCommand=function(e){for(var i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];var o=this.commandMap[e];o&&(this.logger(t._consoleArgs,e,o.name),o.apply(void 0,[this.multitonKey,e].concat(i)))},t._consoleArgs=["","background: #3F234E","background: #6E2994","color: #D4BFE0; background: #8724BD;","background: #6E2994","background: #3F234E"],t.instanceMap={},t}();e.Controller=r},222:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(382),o=i(433),r=i(542),a=i(999),s=function(){function t(e){if(t.instanceMap[e])throw new Error("Facade instance for this Multiton key already constructed!");this.logger=r.PureMVC.debug?r.PureMVC.logNotification:r.PureMVC.logNone,this.initializeNotifier(e),this.initializeFacade()}return t.getInstance=function(e){return e?(t.instanceMap[e]||(t.instanceMap[e]=new t(e)),t.instanceMap[e]):null},t.hasCore=function(t){return void 0!==this.instanceMap[t]},t.removeCore=function(t){this.instanceMap[t]&&(o.Model.removeModel(t),a.View.removeView(t),n.Controller.removeController(t),delete this.instanceMap[t])},t.prototype.initializeFacade=function(){this.initializeModel(),this.initializeController(),this.initializeView()},t.prototype.registerCommand=function(t,e){this.controller.registerCommand(t,e)},t.prototype.removeCommand=function(t){this.controller.removeCommand(t)},t.prototype.hasCommand=function(t){return this.controller.hasCommand(t)},t.prototype.registerProxy=function(t){this.model.registerProxy(t)},t.prototype.retrieveProxy=function(t){return this.model.retrieveProxy(t)},t.prototype.removeProxy=function(t){return this.model?this.model.removeProxy(t):null},t.prototype.hasProxy=function(t){return this.model.hasProxy(t)},t.prototype.registerMediator=function(t){this.view.registerMediator(t)},t.prototype.retrieveMediator=function(t){return this.view.retrieveMediator(t)},t.prototype.removeMediator=function(t){return this.view.removeMediator(t)},t.prototype.sleepMediator=function(t){return this.view.sleepMediator(t)},t.prototype.awakeMediator=function(t){return this.view.awakeMediator(t)},t.prototype.hasMediator=function(t){return this.view.hasMediator(t)},t.prototype.sendNotification=function(e){for(var i,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];this.logger.apply(this,[t._consoleArgs,e].concat(n)),(i=this.view).notifyObservers.apply(i,[e].concat(n))},t.prototype.initializeNotifier=function(t){this.multitonKey=t},t.prototype.initializeController=function(){this.controller||(this.controller=n.Controller.getInstance(this.multitonKey))},t.prototype.initializeModel=function(){this.model||(this.model=o.Model.getInstance(this.multitonKey))},t.prototype.initializeView=function(){this.view||(this.view=a.View.getInstance(this.multitonKey))},t._consoleArgs=["","background: #757130","background: #DED434","color: #2F2E15; background: #FFF325;","background: #DED434","background: #757130"],t.instanceMap={},t}();e.Facade=s},651:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),a=i(542),s=function(t){function e(e,i){var n=t.call(this)||this;return n.logger=a.PureMVC.debug?a.PureMVC.logMediator:a.PureMVC.logNone,n.mediatorName=e||"Mediator",n.viewComponent=i,n.sleeping=!0,n.subscribedNotifications=[],n.notificationSubscriptionChange=null,n}return o(e,t),Object.defineProperty(e.prototype,"notifications",{get:function(){return this.subscribedNotifications},enumerable:!0,configurable:!0}),e.prototype.getMediatorName=function(){return this.mediatorName},e.prototype.setViewComponent=function(t){this.viewComponent=t},e.prototype.getViewComponent=function(){return this.viewComponent},e.prototype.onRegister=function(t){this.notificationSubscriptionChange=t,this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.notificationSubscriptionChange=null,this.logger(e._consoleArgs,this.constructor.name,"remove")},e.prototype.onSleep=function(){this.sleeping=!0,this.logger(e._consoleArgs,this.constructor.name,"sleep")},e.prototype.onAwake=function(){this.sleeping=!1,this.logger(e._consoleArgs,this.constructor.name,"awake")},Object.defineProperty(e.prototype,"isSleeping",{get:function(){return this.sleeping},enumerable:!0,configurable:!0}),e.prototype.subscribeNotification=function(t){this.changeSubscription(t,this.addSubscription)},e.prototype.unsubscribeNotification=function(t){this.changeSubscription(t,this.removeSubscription)},e.prototype.changeSubscription=function(t,e){var i=this,n=this.notifications.slice(),o=!1;t instanceof Array?t.forEach((function(t){o=e.call(i,t)||o})):o=e.call(this,t),o&&this.notificationSubscriptionChange&&this.notificationSubscriptionChange(this,n)},e.prototype.addSubscription=function(t){return-1===this.notifications.indexOf(t)&&(this.notifications.push(t),!0)},e.prototype.removeSubscription=function(t){var e=this.notifications.indexOf(t);return-1!==e&&(this.notifications.splice(e,1),!0)},e._consoleArgs=["","background: #2A3351","background: #364D98","color: #F4F6FE; background: #3656C1;","background: #364D98","background: #2A3351"],e}(r.Notifier);e.Mediator=s},433:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(e){if(this.proxyMap={},t.instanceMap[e])throw new Error("Model instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeModel()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeModel=function(t){delete this.instanceMap[t]},t.prototype.registerProxy=function(t){t.initializeNotifier(this.multitonKey),this.proxyMap[t.getProxyName()]=t,t.onRegister()},t.prototype.retrieveProxy=function(t){return this.proxyMap[t]},t.prototype.hasProxy=function(t){return void 0!==this.proxyMap[t]},t.prototype.removeProxy=function(t){if(this.proxyMap[t]){var e=this.proxyMap[t];return e.onRemove(),delete this.proxyMap[t],e}return null},t.prototype.initializeModel=function(){},t.instanceMap={},t}();e.Model=i},117:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(222),o=function(){function t(){}return t.prototype.initializeNotifier=function(t){this.multitonKey=t,this.facade=this.getFacade()},t.prototype.sendNotification=function(t){for(var e,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];this.facade&&(e=this.facade).sendNotification.apply(e,[t].concat(i))},t.prototype.getFacade=function(){if(null===this.multitonKey)throw new Error("multitonKey for this Notifier not yet initialized!");return n.Facade.getInstance(this.multitonKey)},t}();e.Notifier=o},413:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),a=i(542),s=function(t){function e(e,i){var n=t.call(this)||this;return n.proxyName=e||"Proxy",n.logger=a.PureMVC.debug?a.PureMVC.logProxy:a.PureMVC.logNone,i&&n.setData(i),n}return o(e,t),e.prototype.getProxyName=function(){return this.proxyName},e.prototype.setData=function(t){this.data=t},e.prototype.getData=function(){return this.data},e.prototype.onRegister=function(){this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.logger(e._consoleArgs,this.constructor.name,"remove")},e._consoleArgs=["","background: #295A34","background: #2FAA4A","color: #102415; background: #27D04C;","background: #2FAA4A","background: #295A34"],e}(r.Notifier);e.Proxy=s},542:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.logCommand=function(t,e,i){t[0]="%c %c %c "+e+" =>  "+i+" %c %c ",console.log.apply(console,t)},t.logNotification=function(t,e){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];t[0]="%c %c %c "+e+": args [ "+i+" ] %c %c ",console.log.apply(console,t)},t.logMediator=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logProxy=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logNone=function(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i]},t.debug=!0,t}();e.PureMVC=i},999:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(729),o=function(){function t(e){if(this.mediatorMap={},this.eventEmitter=new n,t.instanceMap[e])throw new Error("View instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeView()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeView=function(t){delete this.instanceMap[t]},t.prototype.removeObserver=function(t,e,i){this.eventEmitter.removeListener(t,e,i)},t.prototype.registerObserver=function(t,e,i){this.eventEmitter.on(t,e,i)},t.prototype.notifyObservers=function(t){for(var e,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];(e=this.eventEmitter).emit.apply(e,[t,t].concat(i))},t.prototype.registerMediator=function(t){this.mediatorMap[t.getMediatorName()]||(t.initializeNotifier(this.multitonKey),this.mediatorMap[t.getMediatorName()]=t,this.registerObservers(t),t.onRegister(this.onMediatorNotificationSubscriptionChange.bind(this)),t.onAwake())},t.prototype.awakeMediator=function(t){var e=this.mediatorMap[t];if(e){if(!e.isSleeping)return e;this.registerObservers(e),e.onAwake()}return e},t.prototype.retrieveMediator=function(t){return this.mediatorMap[t]},t.prototype.removeMediator=function(t){var e=this.mediatorMap[t];return e&&(this.removeObservers(e),delete this.mediatorMap[t],e.onSleep(),e.onRemove()),e},t.prototype.sleepMediator=function(t){var e=this.mediatorMap[t];if(e){if(e.isSleeping)return e;this.removeObservers(e),e.onSleep()}return e},t.prototype.hasMediator=function(t){return void 0!==this.mediatorMap[t]},t.prototype.initializeView=function(){},t.prototype.removeObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var n=0,o=i;n<o.length;n++){var r=o[n];this.removeObserver(r,t.handleNotification,t)}},t.prototype.registerObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var n=0,o=i;n<o.length;n++){var r=o[n];this.registerObserver(r,t.handleNotification,t)}},t.prototype.onMediatorNotificationSubscriptionChange=function(t,e){this.removeObservers(t,e),this.registerObservers(t)},t.instanceMap={},t}();e.View=o},710:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(382);e.Controller=n.Controller;var o=i(222);e.Facade=o.Facade;var r=i(651);e.Mediator=r.Mediator;var a=i(433);e.Model=a.Model;var s=i(117);e.Notifier=s.Notifier;var c=i(413);e.Proxy=c.Proxy;var h=i(542);e.PureMVC=h.PureMVC;var p=i(999);e.View=p.View},729:t=>{var e=Object.prototype.hasOwnProperty,i="~";function n(){}function o(t,e,i){this.fn=t,this.context=e,this.once=i||!1}function r(t,e,n,r,a){if("function"!=typeof n)throw new TypeError("The listener must be a function");var s=new o(n,r||t,a),c=i?i+e:e;return t._events[c]?t._events[c].fn?t._events[c]=[t._events[c],s]:t._events[c].push(s):(t._events[c]=s,t._eventsCount++),t}function a(t,e){0==--t._eventsCount?t._events=new n:delete t._events[e]}function s(){this._events=new n,this._eventsCount=0}Object.create&&(n.prototype=Object.create(null),(new n).__proto__||(i=!1)),s.prototype.eventNames=function(){var t,n,o=[];if(0===this._eventsCount)return o;for(n in t=this._events)e.call(t,n)&&o.push(i?n.slice(1):n);return Object.getOwnPropertySymbols?o.concat(Object.getOwnPropertySymbols(t)):o},s.prototype.listeners=function(t){var e=i?i+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var o=0,r=n.length,a=new Array(r);o<r;o++)a[o]=n[o].fn;return a},s.prototype.listenerCount=function(t){var e=i?i+t:t,n=this._events[e];return n?n.fn?1:n.length:0},s.prototype.emit=function(t,e,n,o,r,a){var s=i?i+t:t;if(!this._events[s])return!1;var c,h,p=this._events[s],u=arguments.length;if(p.fn){switch(p.once&&this.removeListener(t,p.fn,void 0,!0),u){case 1:return p.fn.call(p.context),!0;case 2:return p.fn.call(p.context,e),!0;case 3:return p.fn.call(p.context,e,n),!0;case 4:return p.fn.call(p.context,e,n,o),!0;case 5:return p.fn.call(p.context,e,n,o,r),!0;case 6:return p.fn.call(p.context,e,n,o,r,a),!0}for(h=1,c=new Array(u-1);h<u;h++)c[h-1]=arguments[h];p.fn.apply(p.context,c)}else{var d,l=p.length;for(h=0;h<l;h++)switch(p[h].once&&this.removeListener(t,p[h].fn,void 0,!0),u){case 1:p[h].fn.call(p[h].context);break;case 2:p[h].fn.call(p[h].context,e);break;case 3:p[h].fn.call(p[h].context,e,n);break;case 4:p[h].fn.call(p[h].context,e,n,o);break;default:if(!c)for(d=1,c=new Array(u-1);d<u;d++)c[d-1]=arguments[d];p[h].fn.apply(p[h].context,c)}}return!0},s.prototype.on=function(t,e,i){return r(this,t,e,i,!1)},s.prototype.once=function(t,e,i){return r(this,t,e,i,!0)},s.prototype.removeListener=function(t,e,n,o){var r=i?i+t:t;if(!this._events[r])return this;if(!e)return a(this,r),this;var s=this._events[r];if(s.fn)s.fn!==e||o&&!s.once||n&&s.context!==n||a(this,r);else{for(var c=0,h=[],p=s.length;c<p;c++)(s[c].fn!==e||o&&!s[c].once||n&&s[c].context!==n)&&h.push(s[c]);h.length?this._events[r]=1===h.length?h[0]:h:a(this,r)}return this},s.prototype.removeAllListeners=function(t){var e;return t?(e=i?i+t:t,this._events[e]&&a(this,e)):(this._events=new n,this._eventsCount=0),this},s.prototype.off=s.prototype.removeListener,s.prototype.addListener=s.prototype.on,s.prefixed=i,s.EventEmitter=s,t.exports=s},221:(t,e,i)=>{i.r(e),i.d(e,{GameFacade:()=>st});var n=i(68);class o{constructor(t,e,i){this.x=t,this.y=e,this.z=i,this.connectedNodes=[],this.occupied=!1}isConnected(t){return void 0!==this.connectedNodes.find((e=>e.x===t.x&&e.y===t.y&&e.z===t.z))}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}equalsPoint(t,e,i){return this.x===t&&this.y===e&&this.z===i}addConnectedNode(t){this.isConnected(t)||this.connectedNodes.push(t)}disconnectedNode(t){const e=this.connectedNodes.findIndex((e=>e.equals(t)));this.connectedNodes.splice(e,1)}}var r=i(434),a=i(917);pc.createScript("GameMapComponent").prototype.initialize=function(){},i(203);const{Mediator:s}=i(710);class c extends s{static get NAME(){return"GameMapMediator"}constructor(t){super(c.NAME),this.subscribeNotification([n.i.CHANGE_SCENE_COMPLETE])}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case n.i.CHANGE_SCENE_COMPLETE:this.facade.retrieveProxy(a.u.NAME).vo,pc.Application.getApplication()}}}var h=i(99);const{GameMediator:p}=i(23),{Facade:u}=i(710);function d(t,e){console.log("Parse map");const i=pc.Application.getApplication().root.findByTag("navigation_floor");let o=[];const r=[];for(const t of i){const e=t.script.NavigationComponent;r.push(e);const i=l(t);e.setGrid(i)}for(const t of r)for(const e of t.connectedComponents){const i=e.script.NavigationComponent;f(t.getGrid(),i.getGrid()),o=o.concat(t.getGrid())}u.getInstance(t).registerProxy(new h.h(o)),u.getInstance(t).registerMediator(new c),u.getInstance(t).sendNotification(n.i.MAP_GRID_CREATED)}function l(t){const e=[],i=t.getLocalPosition(),n=t.getLocalScale(),r=Math.round(n.x),a=Math.round(n.z),s=Math.round(i.x-r/2),c=i.y,h=Math.round(i.z-a/2);for(let t=h;t<h+a;t++)for(let i=s;i<s+r;i++){const n=new o(i,c,t);e.push(n)}for(const t of e)for(const i of e)(i.equalsPoint(t.x-1,t.y,t.z)||i.equalsPoint(t.x+1,t.y,t.z)||i.equalsPoint(t.x,t.y,t.z-1)||i.equalsPoint(t.x,t.y,t.z+1))&&t.addConnectedNode(i);return e}function f(t,e){for(const i of t)for(const t of e)(t.equalsPoint(i.x-1,i.y,i.z)||t.equalsPoint(i.x+1,i.y,i.z)||t.equalsPoint(i.x,i.y,i.z-1)||t.equalsPoint(i.x,i.y,i.z+1))&&i.addConnectedNode(t)}const{Proxy:A}=i(710);class g extends A{get vo(){return this.getData()}static get NAME(){return"WeaponsProxy"}constructor(t){super(g.NAME,t)}getDamage(t,e){console.log(this.vo);for(const i in this.vo)if(Object.hasOwnProperty.call(this.vo,i)){const n=this.vo[i];if(Object.hasOwnProperty.call(n,t))return n[t].damage[Math.min(e-1,6)]}throw new Error("Cannot find weapon:: "+t)}}const{Facade:m}=i(710);function y(t,e){m.getInstance(t).registerProxy(new a.u);const i=pc.Application.getApplication();if(i){const e=i.assets.get(40415631).resource;m.getInstance(t).registerProxy(new g(e))}}const{Facade:E}=i(710);function N(t,e,...i){const o=pc.Application.getApplication(),r=i[0];console.log("Changing scene "+r);const a=o.root.findByName("Root"),s=o.scenes.find(r);o.scenes.loadSceneHierarchy(s.url,(function(e,i){e?console.error(e):a&&a.destroy(),E.getInstance(t).sendNotification(n.i.CHANGE_SCENE_COMPLETE,r),E.getInstance(t).sendNotification(n.i.PARSE_GAMEMAP,r)}))}function M(t){let e=t.length,i=void 0,n=-1;for(;0!==e;)n=Math.floor(Math.random()*e),e-=1,i=t[e],t[e]=t[n],t[n]=i;return t}var _=i(958);const{Proxy:C}=i(710),{CombatVO:v}=i(201);class T extends C{get vo(){return this.getData()}static get NAME(){return"CombatProxy"}constructor(t){super(T.NAME,new v(t))}onRegister(){const t=this.vo.participants;this.participantProxies=new Map;for(const e of t){const t=this.facade.retrieveProxy(_.b.NAME+e);this.participantProxies.set(e,t)}}nextTurn(){const t=this.vo.roundInitiative;if(t&&t.length>0){const e=t.shift();if(this.vo.activeParticipant=e,"end_round"!==e){this.facade.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Turn "+e);const t=this.participantProxies.get(e);t.resetCombatTurnState(),t.isNPC?this.facade.sendNotification(n.i.ENEMY_TURN,e):this.facade.sendNotification(n.i.AWAIT_PLAYER_COMBAT_INPUT,e)}else this.facade.sendNotification(n.i.SHOW_TOAST_MESSAGE,"End round"),setTimeout((()=>{this.facade.sendNotification(n.i.NEXT_COMBAT_ROUND)}),3e3)}}nextRound(){console.log("/////////////////"),console.log("//  New round  //"),console.log("/////////////////");const t=[];for(const[e,i]of this.participantProxies.entries()){const n=i.vo;for(let i=0;i<n.initiative;i++)t.push(e)}if(0===t.length)return void this.facade.sendNotification(n.i.END_COMBAT);t.push("end_round");let e=M(t);for(;"end_round"===e[0];)e=M(e);this.vo.roundInitiative=e}get nextTurnCharacterId(){return this.vo.nextTurnCharacterId}get activeParticipant(){return this.vo.activeParticipant}set activeParticipant(t){this.vo.activeParticipant=t}removeCharacterFromCombat(t){this.participantProxies.delete(t),this.vo.roundInitiative=this.vo.roundInitiative.filter((e=>e!==t))}}var P=i(448);const{Facade:O}=i(710);function b(t,e,...i){const o=i[0],r=O.getInstance(t);r.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Start Combat"),r.retrieveProxy(a.u.NAME).updateGameStateType(P.gameplayModeTypes.COMBAT);const s=r.retrieveProxy(_.b.NAME+o),c=["player"].concat(o).concat(s.combatGroup).filter((function(t,e,i){return i.indexOf(t)==e})),h=r.retrieveProxy(_.b.NAME+"player");for(const t of c)r.sendNotification(n.i.END_MOVEMENT+t),"player"!==t?r.sendNotification(n.i.CHARACTER_LOOK_AT+t,h.currentNode):r.sendNotification(n.i.CHARACTER_LOOK_AT+t,s.currentNode);const p=new T(c);r.registerProxy(p),setTimeout((()=>{r.sendNotification(n.i.NEXT_COMBAT_ROUND)}),2e3)}const{Facade:S}=i(710);function x(t,e,...i){const n=S.getInstance(t),o=n.retrieveProxy(a.u.NAME),r=n.retrieveProxy(T.NAME);o.vo.gameplayMode===P.gameplayModeTypes.COMBAT&&r.nextTurn()}const{Facade:I}=i(710);function R(t,e,...i){const o=I.getInstance(t),r=o.retrieveProxy(a.u.NAME),s=o.retrieveProxy(T.NAME);r.vo.gameplayMode===P.gameplayModeTypes.COMBAT&&(s.nextRound(),o.sendNotification(n.i.NEXT_COMBAT_TURN,s.vo.nextTurnCharacterId))}const{Facade:D}=i(710);function w(t,e,...i){setTimeout((()=>{const e=D.getInstance(t),i=e.retrieveProxy(T.NAME);e.sendNotification(n.i.HIDE_WALKABLE_AREA),e.sendNotification(n.i.NEXT_COMBAT_TURN,i.nextTurnCharacterId)}),500)}const{Facade:G}=i(710);function L(t,e,...i){const o=i[0],a=G.getInstance(t),s=(a.retrieveProxy(h.h.NAME),a.retrieveProxy(_.b.NAME+o)),c=s.currentNode,p=a.retrieveProxy(_.b.NAME+"player"),u=p.currentNode.connectedNodes;if(u.some((t=>t.equals(c))))return a.sendNotification(n.i.RESOLVE_ATTACK,s.id,p.id),void setTimeout((()=>{a.sendNotification(n.i.END_COMBAT_TURN)}),2e3);const d=u.filter((t=>!t.occupied));if(d.length>0){let t=d.reduce(((t,e)=>k(c,t)<k(c,e)?t:e));const e=r.q.calculatePath(c,t);if(e&&e.length>0){const i=s.vo;for(;e.length>i.availableMovement;)e.shift();const r=e[0];u.some((t=>t.equals(r)))?a.sendNotification(n.i.MOVE_ALONG_PATH_AND_ATTACK,o,"player",e):a.sendNotification(n.i.NAVIGATE_ALONG_PATH+o,e),s.currentNode=t}else a.sendNotification(n.i.END_COMBAT_TURN)}else setTimeout((()=>{a.sendNotification(n.i.END_COMBAT_TURN)}),1500)}function k(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)}var V=i(710);function H(t,e,...i){const o=V.Facade.getInstance(t),r=o.retrieveProxy(a.u.NAME),s=i[0];r.currentMode===P.gameplayModeTypes.EXPLORATION?o.sendNotification(n.i.NAVIGATE_TO_NODE+"player",s):r.currentMode===P.gameplayModeTypes.COMBAT&&"player"===o.retrieveProxy(T.NAME).activeParticipant&&o.sendNotification(n.i.COMBAT_NAVIGATE_TO_NODE,"player",s)}const{Facade:B}=i(710);function F(t,e,...i){const n=B.getInstance(t),o=i[0],a=i[1],s=n.retrieveProxy(_.b.NAME+o),c=s.vo,h=r.q.breadthFirstSearch(c.currentNode,c.availableMovement);for(const t of h)t.equals(a)&&z(n,s,a)}function z(t,e,i){const o=e.vo,a=r.q.calculatePath(o.currentNode,i);a&&a.length>0&&(o.availableMovement-=a.length-1,e.currentNode=i,t.sendNotification(n.i.HIDE_WALKABLE_AREA),t.sendNotification(n.i.NAVIGATE_ALONG_PATH+o.id,a))}function U(t,e,...i){const n=i[0],o=pc.Application.getApplication(),r=o.assets.get(40235966),a=o.root.findByName("WorldObjects");for(const t of n){const e=r.resource.instantiate();e.setLocalPosition(t.x,t.y,t.z),a.addChild(e)}}function K(t,e,...i){const n=pc.Application.getApplication().root.findByTag("walkable_tile");for(const t of n)t.destroy()}function Y(t,e,...i){const o=i[0],a=V.Facade.getInstance(t),s=a.retrieveProxy(_.b.NAME+o).vo,c=r.q.breadthFirstSearch(s.currentNode,s.availableMovement);a.sendNotification(n.i.SHOW_WALKABLE_AREA,c)}function W(t,e,...i){const o=V.Facade.getInstance(t),r=i[0],s=i[1];if(o.retrieveProxy(_.b.NAME+r).currentNode=s,o.retrieveProxy(a.u.NAME).currentMode===P.gameplayModeTypes.COMBAT){const t=o.retrieveProxy(T.NAME);t&&("player"===t.activeParticipant?o.sendNotification(n.i.AWAIT_PLAYER_COMBAT_INPUT,r):o.sendNotification(n.i.END_COMBAT_TURN))}}function q(t,e,...i){const o=V.Facade.getInstance(t),r=i[0].script.GameCharacterComponent.characterId,s=o.retrieveProxy(a.u.NAME),c=o.retrieveProxy(_.b.NAME+r),h=o.retrieveProxy(_.b.NAME+"player");if(s.currentMode===P.gameplayModeTypes.EXPLORATION){const t=j(h,c);t&&o.sendNotification(n.i.NAVIGATE_ALONG_PATH+"player",t)}else if(s.currentMode===P.gameplayModeTypes.COMBAT){const t=o.retrieveProxy(T.NAME);if(!t||"player"!==t.activeParticipant)return;if(function(t,e){const i=e.currentNode;return t.currentNode.connectedNodes.some((t=>t.equals(i)))}(h,c))"attack"===s.currentAction&&"attack"===s.currentAction&&o.sendNotification(n.i.RESOLVE_ATTACK,h.id,c.id);else{const t=j(h,c);t&&t.length-1<=h.vo.availableMovement?"attack"===s.currentAction?o.sendNotification(n.i.MOVE_ALONG_PATH_AND_ATTACK,"player",c.id,t):o.sendNotification(n.i.COMBAT_NAVIGATE_TO_NODE,"player",t.shift()):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Cannot reach target")}}}function j(t,e){const i=e.currentNode.connectedNodes.filter((t=>!t.occupied));if(i.length>0){const e=t.currentNode;let n=r.q.calculatePath(e,i[0]);for(let t=1;t<i.length;t++){const o=r.q.calculatePath(e,i[t]);o.length<n.length&&(n=o)}return n}}function X(t,e,...i){const o=V.Facade.getInstance(t),r=i[0],s=o.retrieveProxy(a.u.NAME);s.currentAction===r?s.currentAction="none":s.currentAction=r,o.sendNotification(n.i.DISPLAY_PLAYER_ACTION,s.currentAction)}function Q(t,e,...i){const o=V.Facade.getInstance(t),r=i[0],a=o.retrieveProxy(_.b.NAME+r),s=i[1],c=o.retrieveProxy(_.b.NAME+s);o.sendNotification(n.i.CHARACTER_LOOK_AT+r,c.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+s,a.currentNode);const h=J(a.skill),p=J(a.skill),u=o.retrieveProxy(g.NAME);if(h===p)o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`Attack tied(${h}/${p})`);else if(h>p){const t=$(h,p),e=u.getDamage("sword",t);c.applyDamage(e),o.sendNotification(n.i.DISPLAY_ATTACK+r),c.isDead?(o.sendNotification(n.i.DISPLAY_DEATH+s),o.sendNotification(n.i.KILL_GAME_CHARACTER,s)):o.sendNotification(n.i.DISPLAY_HIT+s),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${r} damages ${s} for ${e}`)}else{const t=$(p,h),e=u.getDamage("sword",t);a.applyDamage(e),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${s} damages ${r} for ${e}`),o.sendNotification(n.i.DISPLAY_ATTACK+s),a.isDead?(o.sendNotification(n.i.DISPLAY_DEATH+r),o.sendNotification(n.i.KILL_GAME_CHARACTER,r)):o.sendNotification(n.i.DISPLAY_HIT+r)}}function $(t,e){return t-e}function J(t){return t+Z()+Z()}function Z(){return Math.round(6*Math.random())}var tt=i(321);const{Facade:et}=i(710);function it(t,e,...i){const o=et.getInstance(t),r=i[0],a=i[1],s=i[2];o.retrieveProxy(_.b.NAME+r).useMovement(s.length-1);const c=o.retrieveMediator(tt.y.NAME+r);o.sendNotification(n.i.HIDE_WALKABLE_AREA),c.handleNavigateAlongPathWithPromise(s).then((()=>{o.sendNotification(n.i.RESOLVE_ATTACK,r,a)}))}function nt(t,e,...i){const n=V.Facade.getInstance(t),o=i[0],r=n.retrieveProxy(_.b.NAME+o);r&&(r.currentNode.occupied=!1);const a=n.retrieveProxy(T.NAME);a&&a.removeCharacterFromCombat(o)}const{Facade:ot}=i(710);function rt(t,e,...i){const n=ot.getInstance(t);n.hasMediator(T.NAME)&&n.removeMediator(T.NAME),n.retrieveProxy(a.u.NAME).updateGameStateType(P.gameplayModeTypes.EXPLORATION)}const{Facade:at}=i(710);class st extends at{static getInstance(t){return at.instanceMap[t]||(at.instanceMap[t]=new st(t)),at.instanceMap[t]}static get KEY(){return"Cacogen"}static get NAME(){return"CacogenFacade"}static get STARTUP(){return st.NAME+"StartUp"}startup(t){this.sendNotification(st.STARTUP,t)}sendNotification(t,...e){super.sendNotification(t,...e)}initializeController(){super.initializeController(),this.registerCommand(st.STARTUP,y),this.registerCommand(n.i.CHANGE_SCENE,N),this.registerCommand(n.i.PARSE_GAMEMAP,d),this.registerCommand(n.i.START_COMBAT,b),this.registerCommand(n.i.NEXT_COMBAT_TURN,x),this.registerCommand(n.i.NEXT_COMBAT_ROUND,R),this.registerCommand(n.i.END_COMBAT_TURN,w),this.registerCommand(n.i.ENEMY_TURN,L),this.registerCommand(n.i.SELECTED_NODE,H),this.registerCommand(n.i.COMBAT_NAVIGATE_TO_NODE,F),this.registerCommand(n.i.SHOW_WALKABLE_AREA,U),this.registerCommand(n.i.HIDE_WALKABLE_AREA,K),this.registerCommand(n.i.AWAIT_PLAYER_COMBAT_INPUT,Y),this.registerCommand(n.i.FINISHED_MOVE,W),this.registerCommand(n.i.SELECT_GAME_CHARACTER,q),this.registerCommand(n.i.SET_PLAYER_ACTION,X),this.registerCommand(n.i.RESOLVE_ATTACK,Q),this.registerCommand(n.i.MOVE_ALONG_PATH_AND_ATTACK,it),this.registerCommand(n.i.KILL_GAME_CHARACTER,nt),this.registerCommand(n.i.END_COMBAT,rt)}}},68:(t,e,i)=>{i.d(e,{i:()=>n});class n{static get CHANGE_SCENE(){return"CHANGE_SCENE"}static get CHANGE_SCENE_COMPLETE(){return"CHANGE_SCENE_COMPLETE"}static get APP_INITIALISED(){return"APP_INITIALISED"}static get PARSE_GAMEMAP(){return"PARSE_GAMEMAP"}static get MAP_GRID_CREATED(){return"MAP_GRID_CREATED"}static get NAVIGATE_TO_NODE(){return"NAVIGATE_TO_NODE"}static get COMBAT_NAVIGATE_TO_NODE(){return"COMBAT_NAVIGATE_TO_NODE"}static get SET_CAMERA_TARGET(){return"SET_CAMERA_TARGET"}static get INPUT_DRAG_MOUSE(){return"INPUT_DRAG_MOUSE"}static get MOVED_TO_NODE(){return"MOVED_TO_NODE"}static get FINISHED_MOVE(){return"FINISHED_MOVE"}static get START_COMBAT(){return"START_COMBAT"}static get SHOW_TOAST_MESSAGE(){return"SHOW_TOAST_MESSAGE"}static get NEXT_COMBAT_TURN(){return"NEXT_COMBAT_TURN"}static get NEXT_COMBAT_ROUND(){return"NEXT_COMBAT_ROUND"}static get END_COMBAT(){return"END_COMBAT"}static get END_COMBAT_TURN(){return"END_COMBAT_TURN"}static get ENEMY_TURN(){return"ENEMY_TURN"}static get SELECTED_NODE(){return"SELECTED_NODE"}static get NAVIGATE_ALONG_PATH(){return"NAVIGATE_ALONG_PATH"}static get SHOW_WALKABLE_AREA(){return"SHOW_WALKABLE_AREA"}static get HIDE_WALKABLE_AREA(){return"HIDE_WALKABLE_AREA"}static get END_MOVEMENT(){return"END_MOVEMENT"}static get AWAIT_PLAYER_COMBAT_INPUT(){return"AWAIT_PLAYER_COMBAT_INPUT"}static get SET_CHARACTER_TO_NODE(){return"SET_CHARACTER_TO_NODE"}static get SELECT_GAME_CHARACTER(){return"SELECT_GAME_CHARACTER"}static get SET_PLAYER_ACTION(){return"SET_PLAYER_ACTION"}static get DISPLAY_PLAYER_ACTION(){return"DISPLAY_PLAYER_ACTION"}static get USE_PLAYER_ACTION(){return"USE_PLAYER_ACTION"}static get RESOLVE_ATTACK(){return"RESOLVE_ATTACK"}static get MOVE_ALONG_PATH_AND_ATTACK(){return"MOVE_ALONG_PATH_AND_ATTACK"}static get UPDATE_STAMINA(){return"UPDATE_STAMINA"}static get DISPLAY_DEATH(){return"DISPLAY_DEATH"}static get DISPLAY_ATTACK(){return"DISPLAY_ATTACK"}static get DISPLAY_HIT(){return"DISPLAY_HIT"}static get KILL_GAME_CHARACTER(){return"KILL_GAME_CHARACTER"}static get CHARACTER_LOOK_AT(){return"CHARACTER_LOOK_AT"}}},201:(t,e,i)=>{i.r(e),i.d(e,{CombatVO:()=>n});class n{constructor(t){this.participants=t,this.roundInitiative=[],this.activeParticipant=void 0}get nextTurnCharacterId(){return this.roundInitiative[0]}}},958:(t,e,i)=>{i.d(e,{b:()=>a});var n=i(68);const{Proxy:o}=i(710),{GameCharacterVO:r}=i(940);class a extends o{get vo(){return this.getData()}static get NAME(){return"GameCharacterProxy_"}constructor(t){super(a.NAME+t.id,new r(t))}resetCombatTurnState(){this.vo.availableMovement=this.vo.maxMovement,this.vo.availableAction=this.vo.maxActionsPerTurn}useMovement(t){this.vo.availableMovement-=t}applyDamage(t){this.vo.currentStamina-=t,this.vo.currentStamina>0?this.facade.sendNotification(n.i.UPDATE_STAMINA+this.id,this.vo.currentStamina,this.vo.maximumStamina):console.log(this.id+" died")}get id(){return this.vo.id}get currentNode(){return this.vo.currentNode}set currentNode(t){this.vo.currentNode&&(this.vo.currentNode.occupied=!1),this.vo.currentNode=t,this.vo.currentNode.occupied=!0}get combatGroup(){return this.vo.combatGroup}get isNPC(){return this.vo.isNPC}get availableActions(){return this.vo.availableAction}get skill(){return this.vo.skill}get currentStamina(){return this.vo.currentStamina}get currentLuck(){return this.vo.currentStamina}get isDead(){return this.vo.currentStamina<=0}}},940:(t,e,i)=>{i.r(e),i.d(e,{GameCharacterVO:()=>n});class n{constructor(t){this.id=t.id,this.isNPC=t.isNPC,this.combatGroup=t.combatGroup||[],this.currentNode=void 0,this.agroArea=void 0,this.initiative=2,this.maxMovement=6,this.maxActionsPerTurn=1,this.availableAction=this.maxActionsPerTurn,this.availableMovement=this.maxMovement,this.skill=t.skill||1,this.maxStamina=t.maxStamina||1,this.currentStamina=this.maxStamina,this.maxLuck=t.maxLuck||1,this.currentLuck=this.maxLuck,this.advancedSkills=t.advancedSkills||{}}}},99:(t,e,i)=>{i.d(e,{h:()=>a});var n=i(434);const{Proxy:o}=i(710),{GameMapVO:r}=i(438);class a extends o{get vo(){return this.getData()}static get NAME(){return"GameMapProxy"}constructor(t){super(a.NAME),this.setData({mapGrid:t})}onRegister(){}findNearestNode(t){const e=this.vo.mapGrid;let i=e[0],o=n.q.getDistSquared(i,t);for(const r of e){const e=n.q.getDistSquared(r,t);e<o&&(o=e,i=r)}return i}}},438:(t,e,i)=>{i.r(e),i.d(e,{GameMapVO:()=>n});class n{constructor(){this.mapGrid=[]}}},434:(t,e,i)=>{i.d(e,{q:()=>o});class n{constructor(){this.data=[]}push(t,e=0){return this.data.push({value:t,priority:e})}pop(){let t=0,e=1/0;for(let i=0;i<this.data.length;i++){let n=this.data[i].priority;Math.min(e,n)===n&&(e=n,t=i)}return this.data.splice(t,1)[0].value}size(){return this.data.length}empty(){return 0===this.data.length}}class o{static breadthFirstSearch(t,e){let i=[];const n=[];i.push(t);const o=new Map;o.set(t,t);let r=0;for(;i.length>0&&r<e;){const t=[];for(const e of i)for(let i=0;i<e.connectedNodes.length;i++){const r=e.connectedNodes[i];r.occupied||o.has(r)||(t.push(r),n.push(r),o.set(r,e))}i=t,r++}return n}static calculatePath(t,e){const i=new n;i.push(t,0);const o=new Map,r=new Map;for(o.set(t,t),r.set(t,0);!i.empty();){const t=i.pop();if(t.equals(e))break;for(let n=0;n<t.connectedNodes.length;n++){const a=t.connectedNodes[n],s=r.get(t)+1;if(!a.occupied&&(!r.has(a)||s<r.get(a))){r.set(a,s);let n=s+this.heuristic(a,e);i.push(a,n),o.set(a,t)}}}let a=e,s=!1;const c=[];for(c.push(a);!a.equals(t)&&!s;)o.has(a)||!a.equals(e)?(a=o.get(a),c.push(a)):s=!0;return s?void 0:c}static getDistSquared(t,e){return(t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y)+(t.z-e.z)*(t.z-e.z)}static heuristic(t,e){return Math.abs(t.x-e.x)+Math.abs(t.y-e.y)+Math.abs(t.z-e.z)}}},917:(t,e,i)=>{i.d(e,{u:()=>r});const{Proxy:n}=i(710),{GameStateVO:o}=i(448);class r extends n{get vo(){return this.getData()}static get NAME(){return"GameStateProxy"}constructor(){super(r.NAME,new o)}updateGameStateType(t){this.vo.gameplayMode=t}get currentMode(){return this.vo.gameplayMode}get currentAction(){return this.vo.selectedAction}set currentAction(t){this.vo.selectedAction=t}}},448:(t,e,i)=>{i.r(e),i.d(e,{gameplayModeTypes:()=>n,GameStateVO:()=>o});const n={EXPLORATION:"EXPLORATION",COMBAT:"COMBAT",DIALOGUE:"DIALOGUE"};class o{constructor(){this.gameplayMode=n.EXPLORATION,this.selectedAction="none"}}},23:(t,e,i)=>{i.r(e),i.d(e,{GameMediator:()=>r});var n=i(68);const{Mediator:o}=i(710);class r extends o{static get NAME(){return"GameMediator"}constructor(){console.log("Register mediator - GameMediator");const t=pc.Application.getApplication();super(r.NAME,t),this.subscribeNotification(n.i.APP_INITIALISED)}handleNotification(t,...e){switch(t){case n.i.APP_INITIALISED:}}}},442:(t,e,i)=>{var n=i(710),o=i(221),r=i(958),a=i(321);const s=pc.createScript("GameCharacterComponent");s.attributes.add("characterId",{type:"string",title:"Character Id"}),s.attributes.add("characterSpeed",{type:"number",title:"Character Speed",default:4}),s.attributes.add("isNPC",{type:"boolean",title:"is NPC",default:!0}),s.attributes.add("statsOverrides",{type:"json",title:"Stats Overrides",schema:[{name:"skill",title:"Skill",type:"number",default:1},{name:"maxStamina",title:"Stamina",type:"number",default:1},{name:"maxLuck",title:"Luck",type:"number",default:1},{name:"maxMovement",title:"Movement",type:"number",default:6}]}),s.attributes.add("advancedSkills",{type:"json",title:"Advanced Skills",schema:[{name:"skillName",title:"Skill Name",type:"string"},{name:"skillValue",title:"Skill Value",type:"string"}],array:!0}),s.attributes.add("combatGroupName",{type:"string",title:"Combat Group Name"}),s.prototype.preregisterNotification=function(t){this.preregisteredNotifications||(this.preregisteredNotifications=[]),this.preregisteredNotifications.push(t)},s.prototype.postInitialize=function(){this.movementPath=[],this.facade=n.Facade.getInstance(o.GameFacade.KEY),this.facade.hasMediator(a.y.NAME+this.characterId)&&this.facade.removeMediator(a.y.NAME+this.characterId),this.preregisteredNotifications||(this.preregisteredNotifications=[]);const t=this.statsOverrides,e={id:this.characterId,isNPC:this.isNPC,advancedSkills:this.advancedSkills,...t};if(this.combatGroupName&&""!==this.combatGroupName){const t=this.app.root.findByTag("combatGroup:"+this.combatGroupName),i=[];for(const e of t){const t=e.script.GameCharacterComponent.characterId;i.push(t)}e.combatGroup=i}this.facade.registerProxy(new r.b(e)),this.facade.registerMediator(new a.y(this.characterId,this.entity,this.preregisteredNotifications)),this.entity.animation.play("idle.glb",.1)},s.prototype.setPath=function(t){this.movementPath&&this.movementPath.length>0&&this.entity.fire("cancelMove"),this.movementPath=t,this.entity.animation.loop=!0,this.entity.animation.play("walk.glb",.1)},s.prototype.stopMovement=function(t){this.movementPath=[],this.entity.setLocalPosition(t.x,t.y,t.z),this.entity.animation.loop=!0,this.entity.animation.play("idle.glb",.1)},s.prototype.update=function(t){this.moveAlongPath(t)},s.prototype.moveAlongPath=function(t){if(this.movementPath.length>0){const e=this.movementPath[this.movementPath.length-1],i=this.entity.getLocalPosition(),n=new pc.Vec3,o=new pc.Vec3(t*this.characterSpeed,t*this.characterSpeed,t*this.characterSpeed),r=new pc.Vec3(e.x,e.y,e.z);if(n.sub2(r,i),n.normalize(),n.mul(o),n.add(i),this.entity.setLocalPosition(n),this.lookAtPoint(e),n.distance(r)<.15){const t=this.movementPath.pop();0===this.movementPath.length&&(this.entity.fire("finishedMove",t),this.entity.animation.loop=!0,this.entity.animation.play("idle.glb",.1)),this.entity.fire("updateCurrentNode",t)}}},s.prototype.lookAtPoint=function(t){const e=this.entity.getLocalPosition(),i=t.x-e.x,n=t.z-e.z,o=180*Math.atan2(i,n)/Math.PI;this.entity.setEulerAngles(0,o,0)},s.prototype.animateDeath=function(){this.entity.animation.loop=!1,this.entity.animation.play("die.glb",.1)},s.prototype.animateHit=function(){this.entity.animation.loop=!1,this.entity.animation.play("hit.glb",.1)},s.prototype.animateAttack=function(){this.entity.animation.loop=!1,this.entity.animation.play("attack.glb",.1)}},321:(t,e,i)=>{i.d(e,{y:()=>c});var n=i(68),o=i(99),r=(i(917),i(442),i(434)),a=i(958);i(448);const{Mediator:s}=i(710);class c extends s{static get NAME(){return"GameCharacterMediator_"}constructor(t,e,i){super(c.NAME+t),this.id=t;let o=[n.i.CHANGE_SCENE_COMPLETE,n.i.NAVIGATE_TO_NODE+this.id,n.i.NAVIGATE_ALONG_PATH+this.id,n.i.SET_CHARACTER_TO_NODE+this.id,n.i.DISPLAY_DEATH+this.id,n.i.DISPLAY_ATTACK+this.id,n.i.DISPLAY_HIT+this.id,n.i.CHARACTER_LOOK_AT+this.id,n.i.START_COMBAT,n.i.MAP_GRID_CREATED];o=o.concat(i),this.subscribeNotification(o),this.viewComponent=e,this.viewComponent.on("updateCurrentNode",this.updateCurrentNode,this),this.viewComponent.on("finishedMove",this.handleFinishedMode,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...e){this.viewComponent&&this.viewComponent.fire(t,this.id,...e);for(const i in this.viewComponent.script)if(Object.hasOwnProperty.call(this.viewComponent.script,i)){const n=this.viewComponent.script[i];"function"==typeof n.handleNotification&&n.handleNotification(t,this.id,...e)}switch(t){case n.i.START_COMBAT:this.handleStartCombat();break;case n.i.MAP_GRID_CREATED:const t=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(a.b.NAME+this.id);i.currentNode||(i.currentNode=t.findNearestNode(this.viewComponent.getLocalPosition()));break;case n.i.NAVIGATE_TO_NODE+this.id:this.handleNavigateToNode(e[0]);break;case n.i.NAVIGATE_ALONG_PATH+this.id:this.handleNavigateAlongPath(e[0]);break;case n.i.SET_CHARACTER_TO_NODE+this.id:this.handleSetCharacterToNode(e[0]);break;case n.i.CHARACTER_LOOK_AT+this.id:const r=e[0];this.viewComponent.script.GameCharacterComponent.lookAtPoint(r);break;case n.i.DISPLAY_DEATH+this.id:this.viewComponent.script.GameCharacterComponent.animateDeath();break;case n.i.DISPLAY_ATTACK+this.id:this.viewComponent.script.GameCharacterComponent.animateAttack();break;case n.i.DISPLAY_HIT+this.id:this.viewComponent.script.GameCharacterComponent.animateHit()}}handleNavigateToNode(t){console.log("NAVIGATING TO NODE");const e=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(a.b.NAME+this.id);i.currentNode||(i.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition()));const n=r.q.calculatePath(i.currentNode,t);n&&n.length>0&&(this.viewComponent.script.GameCharacterComponent.setPath(n),i.currentNode=t)}handleNavigateAlongPath(t){this.viewComponent.script.GameCharacterComponent.setPath(t)}handleNavigateAlongPathWithPromise(t){return this.viewComponent.script.GameCharacterComponent.setPath(t),new Promise(((t,e)=>{this.viewComponent.on("finishedMove",(()=>{t()})),this.viewComponent.on("cancelMove",(()=>{e()}))}))}updateCurrentNode(t){this.facade.sendNotification(n.i.MOVED_TO_NODE+this.id,t)}handleFinishedMode(t){this.facade.sendNotification(n.i.FINISHED_MOVE,this.id,t)}lookForCharacter(t,e){for(const i of this.searchArea)i.equals(e)&&(this.viewComponent.script.GameCharacterComponent.lookAtPoint(e),this.facade.sendNotification(n.i.START_COMBAT,this.viewComponent,[t]))}handleStartCombat(){this.facade.retrieveProxy(a.b.NAME+this.id).vo}handleSetCharacterToNode(t){this.facade.retrieveProxy(a.b.NAME+this.id).currentNode=t,this.viewComponent.script.GameCharacterComponent.stopMovement(t)}}},203:(t,e,i)=>{var n=i(710),o=i(221),r=i(68);i(917);const{Mediator:a}=i(710);class s extends a{static get NAME(){return"InputLayerMediator"}constructor(t){super(s.NAME),this.subscribeNotification([r.i.CHANGE_SCENE_COMPLETE]),this.viewComponent=t,this.viewComponent.on("picker:gameCharacter",this.handlePickerGameCharacter,this),this.viewComponent.on("picker:navigation",this.handlePickerNavigation,this),this.viewComponent.on("scrolling",this.handleScrolling,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case r.i.CHANGE_SCENE_COMPLETE:}}handlePickerGameCharacter(t){this.facade.sendNotification(r.i.SELECT_GAME_CHARACTER,t)}handlePickerNavigation(t){this.facade.sendNotification(r.i.SELECTED_NODE,t)}handleScrolling(t){this.facade.sendNotification(r.i.INPUT_DRAG_MOUSE,t)}}const c=pc.createScript("GameCamera");c.attributes.add("distance",{type:"number",default:100,title:"Distance"}),c.attributes.add("dragMultiplierX",{type:"number",default:.5,title:"Drag Multiplier"}),c.attributes.add("dragMultiplierY",{type:"number",default:.5,title:"Drag Multiplier"}),c.attributes.add("verticalScroll",{type:"boolean",default:!1,title:"Vertical Scroll"}),c.attributes.add("minCameraHeight",{type:"number",default:5,title:"Min Camera Height"}),c.attributes.add("maxCameraHeight",{type:"number",default:100,title:"Max Camera Height"}),c.prototype.initialize=function(){this.facade=n.Facade.getInstance(o.GameFacade.KEY),this.facade.hasMediator(p.NAME)&&this.facade.removeMediator(p.NAME),this.facade.registerMediator(new p(this.entity))},c.prototype.setCameraTarget=function(t){this.cameraTarget=t,this.rotation=this.entity.getEulerAngles().y,this.cameraHeight=this.entity.getLocalPosition().y},c.prototype.handleDrag=function(t){if(this.rotation+=t.x*this.dragMultiplierX,this.verticalScroll){let e=this.cameraHeight-t.y*this.dragMultiplierY;e=pc.math.clamp(e,this.minCameraHeight,this.maxCameraHeight),this.cameraHeight=e}},c.prototype.getTargetCameraPosition=function(t){const e=this.entity.getLocalPosition(),i=Math.sin(this.rotation*Math.PI/180)*this.distance,n=Math.cos(this.rotation*Math.PI/180)*this.distance;return new pc.Vec3(t.x+i,e.y,t.z+n)},c.prototype.update=function(t){if(this.cameraTarget){const t=this.cameraTarget.getLocalPosition(),e=this.getTargetCameraPosition(t),i=this.entity.getLocalPosition(),n=(e.x+9*i.x)/10,o=(this.cameraHeight+9*i.y)/10,r=(e.z+9*i.z)/10;this.entity.setLocalPosition(n,o,r),this.entity.lookAt(t)}};const{Mediator:h}=i(710);class p extends h{static get NAME(){return"GameCameraMediator"}constructor(t){super(p.NAME),this.subscribeNotification([r.i.CHANGE_SCENE_COMPLETE,r.i.INPUT_DRAG_MOUSE,r.i.SET_CAMERA_TARGET]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case r.i.SET_CAMERA_TARGET:this.viewComponent.script.GameCamera.setCameraTarget(e[0]);break;case r.i.INPUT_DRAG_MOUSE:this.viewComponent.script.GameCamera.handleDrag(e[0])}}}const u=pc.createScript("InputLayerComponent");u.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),u.attributes.add("dragTime",{type:"number",title:"Drag Time",default:.4}),u.prototype.window=window,u.prototype.initialize=function(){this.facade=n.Facade.getInstance(o.GameFacade.KEY),this.facade.hasMediator(s.NAME)&&this.facade.removeMediator(s.NAME),this.facade.registerMediator(new s(this.entity)),this.ray=new pc.Ray,this.inputQueue=[],this.app.mouse.disableContextMenu(),this.clickDownStart=0,this.isDragging=!1,this.app.on("picker:result",this.handlePickerResult,this),this.app.mouse&&(this.app.mouse.on(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.entity.element.on(pc.EVENT_MOUSEDOWN,this.onMouseDown,this),this.app.mouse.on(pc.EVENT_MOUSEUP,this.onMouseUp,this),this.entity.once("destroy",(()=>{this.app.mouse.off(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.app.mouse.off(pc.EVENT_MOUSEUP,this.onMouseUp,this)}))),this.app.touch&&(this.app.touch.on(pc.EVENT_TOUCHMOVE,(t=>{this.onMouseMove(t.touches[0])})),this.entity.element.on(pc.EVENT_TOUCHSTART,(t=>{console.log(t),this.onMouseDown(t.touches[0])})),this.entity.element.on(pc.EVENT_TOUCHEND,(t=>{this.onMouseUp()}))),this.onResize(),this.window.addEventListener("resize",this.onResize.bind(this),!1)},u.prototype.onResize=function(){const t=this.app.graphicsDevice;console.log("size",t.width,t.height),t.width<t.height?this.entity.element.screen.screen.scaleBlend=1:this.entity.element.screen.screen.scaleBlend=0},u.prototype.onMouseDown=function(t){this.isDragging=!0,this.clickDownStart=Date.now(),this.clickStartPoint={x:t.x,y:t.y}},u.prototype.onMouseMove=function(t){if(this.isDragging){const e=new pc.Vec2(this.clickStartPoint.x-t.x,this.clickStartPoint.y-t.y);this.entity.fire("scrolling",e),this.clickStartPoint={x:t.x,y:t.y}}},u.prototype.onMouseUp=function(){this.isDragging=!1,Date.now()-this.clickDownStart<1e3*this.dragTime&&this.clickStartPoint&&this.handleRaycastCollisions(this.clickStartPoint.x,this.clickStartPoint.y)},u.prototype.handleRaycastCollisions=function(t,e){const i=this.cameraEntity,n=this.cameraEntity.camera;n.screenToWorld(t,e,n.farClip,this.ray.direction),this.ray.origin.copy(i.getPosition()),this.ray.direction.sub(this.ray.origin).normalize(),this.app.fire("picker:raycast",this.ray,{x:t,y:e})},u.prototype.handlePickerResult=function(t,e,i){this.inputQueue.push({entity:t,hitPosition:e,screenPosition:i})},u.prototype.update=function(t){this.processInputQueue()},u.prototype.processInputQueue=function(){if(this.inputQueue.length>0){let e=this.inputQueue[0],i=-1;for(const n of this.inputQueue)((t=n.entity).tags.has("gameCharacter")?2:t.tags.has("navigation")?1:-1)>i&&(e=n);e.entity.tags.has("gameCharacter")&&this.pickedGameCharacter(e.entity,e.hitPosition),e.entity.tags.has("navigation")&&this.pickedNavigation(e.entity,e.hitPosition),this.inputQueue=[]}var t},u.prototype.pickedGameCharacter=function(t,e){this.entity.fire("picker:gameCharacter",t)},u.prototype.pickedNavigation=function(t,e){const i=t.script.NavigationComponent.getNearestNode(e);this.entity.fire("picker:navigation",i)}}},e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t=i(221),e=i(68);const{Facade:n}=i(710),{GameFacade:o}=i(221),r=pc.createScript("CacogenGame");r.prototype.initialize=function(){this.facade=n.getInstance(o.KEY),this.facade.sendNotification(e.i.APP_INITIALISED),this.facade.sendNotification(e.i.CHANGE_SCENE,"Map1")},r.prototype.update=function(t){};var a=i(434);const s=pc.createScript("NavigationComponent");s.attributes.add("connectedComponents",{type:"entity",array:!0,title:"Connected Components"}),s.prototype.initialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,.05,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.findByName("Plane").enabled=!1},s.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity,i,e)},s.prototype.setGrid=function(t){this.nodeGrid=t},s.prototype.getGrid=function(){return this.nodeGrid},s.prototype.getNearestNode=function(t){let e=this.nodeGrid[0],i=a.q.getDistSquared(e,t);for(const n of this.nodeGrid){const o=a.q.getDistSquared(n,t);o<i&&(i=o,e=n)}return e},i(442);var c=i(710),h=i(958),p=i(99),u=i(917),d=i(448);const l=pc.createScript("AgroGameCharacterComponent");l.attributes.add("sightRange",{type:"number",title:"Sight Range",default:5}),l.prototype.initialize=function(){this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MAP_GRID_CREATED),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MOVED_TO_NODE+"player"),this.entity.on(e.i.MAP_GRID_CREATED,this.handleMapGridCreated,this),this.entity.on(e.i.MOVED_TO_NODE+"player",this.handleMovedToNode,this)},l.prototype.handleMapGridCreated=function(e,...i){const n=c.Facade.getInstance(t.GameFacade.KEY),o=n.retrieveProxy(h.b.NAME+e),r=o.vo;if(!r.currentNode){const t=n.retrieveProxy(p.h.NAME);o.currentNode=t.findNearestNode(this.entity.getLocalPosition()),r.agroArea=a.q.breadthFirstSearch(r.currentNode,this.sightRange)}},l.prototype.handleMovedToNode=function(i,n){const o=c.Facade.getInstance(t.GameFacade.KEY),r=o.retrieveProxy(h.b.NAME+i).vo,a=o.retrieveProxy(u.u.NAME).vo,s=o.retrieveProxy(h.b.NAME+i);if(a.gameplayMode===d.gameplayModeTypes.EXPLORATION&&!s.isDead)for(const t of r.agroArea)t.equals(n)&&(this.entity.script.GameCharacterComponent.lookAtPoint(n),o.sendNotification(e.i.SET_CHARACTER_TO_NODE+"player",n),o.sendNotification(e.i.START_COMBAT,i))};const{Mediator:f}=i(710);class A extends f{static get NAME(){return"ToastMessageMediator"}constructor(t){super(A.NAME),this.subscribeNotification([e.i.SHOW_TOAST_MESSAGE]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SHOW_TOAST_MESSAGE:this.viewComponent.script.ToastMessageComponent.addMessage(i[0])}}}const g=pc.createScript("ToastMessageComponent");g.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),g.attributes.add("messageTime",{type:"number",default:5,title:"Message Time"}),g.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(A.NAME)&&this.facade.removeMediator(A.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new A(this.entity))},g.prototype.addMessage=function(t){0===this.messageQueue.length?(this.messageQueue.push(t),this.showNextMessage()):this.messageQueue.push(t)},g.prototype.showNextMessage=function(){if(this.messageQueue.length>0){const t=this.messageQueue[0];this.labelEntity.element.text=t,setTimeout((()=>{this.messageQueue.shift(),this.showNextMessage()}),1e3*this.messageTime)}else this.labelEntity.element.text=""},pc.createScript("SetCameraTargetComponent").prototype.postInitialize=function(){c.Facade.getInstance(t.GameFacade.KEY).sendNotification(e.i.SET_CAMERA_TARGET,this.entity)},i(203);const{Mediator:m}=i(710);class y extends m{static get NAME(){return"PlayerCombatPanelMediator"}constructor(t){super(y.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.AWAIT_PLAYER_COMBAT_INPUT,e.i.END_COMBAT_TURN]),this.viewComponent=t,this.viewComponent.on("click:endTurn",this.handleEndTurn,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:this.viewComponent.enabled=!1;break;case e.i.AWAIT_PLAYER_COMBAT_INPUT:this.viewComponent.enabled=!0;break;case e.i.END_COMBAT_TURN:this.viewComponent.enabled=!1}}handleEndTurn(t){this.sendNotification(e.i.END_COMBAT_TURN)}}const E=pc.createScript("PlayerCombatPanelComponent");E.attributes.add("endTurnButton",{type:"entity",title:"End Turn button"}),E.prototype.initialize=function(){},E.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(y.NAME)&&this.facade.removeMediator(y.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new y(this.entity)),this.endTurnButton.element.on("click",this.clickEndTurn,this)},E.prototype.clickEndTurn=function(t){this.entity.fire("click:endTurn")};const N=pc.createScript("HitboxComponent");N.prototype.initialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,t.y/2,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.model.enabled=!1},N.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity.parent,i,e)},N.prototype.update=function(t){this.aabb.center.copy(this.entity.getPosition())};const{Mediator:M}=i(710);class _ extends M{static get NAME(){return"ActionPanelMediator"}constructor(t){super(_.NAME),this.subscribeNotification([e.i.SET_PLAYER_ACTION,e.i.DISPLAY_PLAYER_ACTION,e.i.USE_PLAYER_ACTION]),this.viewComponent=t,this.viewComponent.on("click:actionButton",this.handleClickActionButton,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.DISPLAY_PLAYER_ACTION:const t=i[0];this.viewComponent.script.ActionPanelComponent.selectAction(t);break;case e.i.USE_PLAYER_ACTION:}}handleClickActionButton(t){this.facade.sendNotification(e.i.SET_PLAYER_ACTION,t)}}const C=pc.createScript("ActionButtonComponent");C.attributes.add("action",{type:"string",title:"Action"}),C.attributes.add("highlightEntity",{type:"entity",title:"Highlight Entity"}),C.attributes.add("iconEntity",{type:"entity",title:"Icon Entity"}),C.attributes.add("iconAsset",{type:"asset",title:"Icon Asset"}),C.prototype.initialize=function(){this.highlightEntity.enabled=!1,this.entity.on("select:action",this.handleChangeAction,this),this.entity.element.on("click",this.handleClick,this)},C.prototype.handleClick=function(t){this.entity.parent.fire("click:actionButton",this.action)},C.prototype.handleChangeAction=function(t){this.highlightEntity.enabled=this.action===t};const v=pc.createScript("ActionPanelComponent");v.attributes.add("actionButtons",{type:"entity",title:"Action Buttons",array:!0}),v.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(_.NAME)&&this.facade.removeMediator(_.NAME),this.facade.registerMediator(new _(this.entity))},v.prototype.selectAction=function(t){for(const e of this.actionButtons)e.fire("select:action",t)},pc.createScript("UIStopPropagation").prototype.initialize=function(){this.entity.element.on(pc.EVENT_MOUSEDOWN,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_MOUSEDOWN,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHSTART,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHMOVE,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHEND,(t=>{t.stopPropagation()}))};const{Facade:T}=i(710),{PureMVC:P}=i(710);new class{constructor(){console.log("Main start"),P.debug=!0,T.getInstance=t.GameFacade.getInstance,console.log(T),this.facade=T.getInstance(t.GameFacade.KEY),this.facade.startup(this)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvRmFjYWRlLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vbm9kZV9tb2R1bGVzL0Brb3JlZXovcHVyZS1tdmMvbGliL2NvbS9rb3JlZXovcHVyZW12Yy9NZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvTW9kZWwuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9ub2RlX21vZHVsZXMvQGtvcmVlei9wdXJlLW12Yy9saWIvY29tL2tvcmVlei9wdXJlbXZjL05vdGlmaWVyLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vbm9kZV9tb2R1bGVzL0Brb3JlZXovcHVyZS1tdmMvbGliL2NvbS9rb3JlZXovcHVyZW12Yy9Qcm94eS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvUHVyZU1WQy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvVmlldy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uTm9kZS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2dhbWVNYXAvR2FtZU1hcENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2dhbWVNYXAvR2FtZU1hcE1lZGlhdG9yLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvUGFyc2VHYW1lTWFwQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC93ZWFwb25zL1dlYXBvbnNQcm94eS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1N0YXJ0dXBDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvQ2hhbmdlU2NlbmVDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3V0aWxzL1NodWZmbGVBcnJheS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHkuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9TdGFydENvbWJhdENvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9OZXh0Q29tYmF0VHVybkNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9OZXh0Q29tYmF0Um91bmRDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvRW5kQ29tYmF0VHVybkNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9FbmVteVR1cm5Db21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvU2VsZWN0ZWROb2RlQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0NvbWJhdE5hdmlnYXRlVG9Ob2RlQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1Nob3dXYWxrYWJsZUFyZWFDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvSGlkZVdhbGthYmxlQXJlYUNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9Bd2FpdFBsYXllckNvbWJhdElucHV0Q29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0VuZE1vdmVtZW50Q29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1NlbGVjdGVkR2FtZUNoYXJhY3RlckNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9DaGFuZ2VQbGF5ZXJBY3Rpb25Db21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvUmVzb2x2ZUF0dGFja0NvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9Nb3ZlQWxvbmdQYXRoQW5kQXR0YWNrQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0tpbGxHYW1lQ2hhcmFjdGVyQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0VuZENvbWJhdENvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvR2FtZUZhY2FkZS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0dhbWVDb21tYW5kcy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9jb21iYXQvQ29tYmF0Vk8uanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHkuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyVk8uanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvZ2FtZU1hcC9HYW1lTWFwUHJveHkuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvZ2FtZU1hcC9HYW1lTWFwVk8uanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL1ByaW9yaXR5UXVldWUuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk8uanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9HYW1lTWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2lucHV0TGF5ZXIvSW5wdXRMYXllck1lZGlhdG9yLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvZ2FtZUNhbWVyYS9HYW1lQ2FtZXJhLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvZ2FtZUNhbWVyYS9HYW1lQ2FtZXJhTWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9pbnB1dExheWVyL0lucHV0TGF5ZXJDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L0NhY29nZW5HYW1lLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbXBvbmVudHMvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvZ2FtZUNoYXJhY3Rlci9hZ2dyby9BZ3JvR2FtZUNoYXJhY3RlckNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L3RvYXN0TWVzc2FnZS9Ub2FzdE1lc3NhZ2VNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L3RvYXN0TWVzc2FnZS9Ub2FzdE1lc3NhZ2VDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9nYW1lQ2hhcmFjdGVyL3NldENhbWVyYVRhcmdldC9TZXRDYW1lcmFUYXJnZXRDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9wbGF5ZXJDb21iYXRQYW5lbC9QbGF5ZXJDb21iYXRQYW5lbE1lZGlhdG9yLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvcGxheWVyQ29tYmF0UGFuZWwvUGxheWVyQ29tYmF0UGFuZWxDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29tcG9uZW50cy9jb2xsaXNpb24vSGl0Ym94Q29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvYWN0aW9uUGFuZWwvQWN0aW9uUGFuZWxNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2FjdGlvblBhbmVsL0FjdGlvbkJ1dHRvbkNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2FjdGlvblBhbmVsL0FjdGlvblBhbmVsQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbXBvbmVudHMvVUlTdG9wUHJvcGFnYXRpb24uanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJQdXJlTVZDXzEiLCJWaWV3XzEiLCJDb250cm9sbGVyIiwia2V5IiwidGhpcyIsImNvbW1hbmRNYXAiLCJpbnN0YW5jZU1hcCIsIkVycm9yIiwibXVsdGl0b25LZXkiLCJsb2dnZXIiLCJQdXJlTVZDIiwiZGVidWciLCJsb2dDb21tYW5kIiwibG9nTm9uZSIsImluaXRpYWxpemVDb250cm9sbGVyIiwicmVtb3ZlQ29udHJvbGxlciIsImdldEluc3RhbmNlIiwicHJvdG90eXBlIiwicmVnaXN0ZXJDb21tYW5kIiwibm90aWZpY2F0aW9uTmFtZSIsImNvbW1hbmRDbGFzc1JlZiIsInZpZXciLCJyZWdpc3Rlck9ic2VydmVyIiwiZXhlY3V0ZUNvbW1hbmQiLCJoYXNDb21tYW5kIiwidW5kZWZpbmVkIiwicmVtb3ZlQ29tbWFuZCIsInJlbW92ZU9ic2VydmVyIiwiVmlldyIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImNvbW1hbmQiLCJfY29uc29sZUFyZ3MiLCJuYW1lIiwiYXBwbHkiLCJjb25jYXQiLCJDb250cm9sbGVyXzEiLCJNb2RlbF8xIiwiRmFjYWRlIiwibG9nTm90aWZpY2F0aW9uIiwiaW5pdGlhbGl6ZU5vdGlmaWVyIiwiaW5pdGlhbGl6ZUZhY2FkZSIsImhhc0NvcmUiLCJyZW1vdmVDb3JlIiwiTW9kZWwiLCJyZW1vdmVNb2RlbCIsInJlbW92ZVZpZXciLCJpbml0aWFsaXplTW9kZWwiLCJpbml0aWFsaXplVmlldyIsImNvbnRyb2xsZXIiLCJyZWdpc3RlclByb3h5IiwicHJveHkiLCJtb2RlbCIsInJldHJpZXZlUHJveHkiLCJwcm94eU5hbWUiLCJyZW1vdmVQcm94eSIsImhhc1Byb3h5IiwicmVnaXN0ZXJNZWRpYXRvciIsIm1lZGlhdG9yIiwicmV0cmlldmVNZWRpYXRvciIsIm1lZGlhdG9yTmFtZSIsInJlbW92ZU1lZGlhdG9yIiwic2xlZXBNZWRpYXRvciIsImF3YWtlTWVkaWF0b3IiLCJoYXNNZWRpYXRvciIsInNlbmROb3RpZmljYXRpb24iLCJfYSIsIm5vdGlmeU9ic2VydmVycyIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJkIiwiYiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJfXyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiTm90aWZpZXJfMSIsIk1lZGlhdG9yIiwiX3N1cGVyIiwidmlld0NvbXBvbmVudCIsIl90aGlzIiwiY2FsbCIsImxvZ01lZGlhdG9yIiwic2xlZXBpbmciLCJzdWJzY3JpYmVkTm90aWZpY2F0aW9ucyIsIm5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSIsImdldCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJnZXRNZWRpYXRvck5hbWUiLCJzZXRWaWV3Q29tcG9uZW50IiwiZ2V0Vmlld0NvbXBvbmVudCIsIm9uUmVnaXN0ZXIiLCJvblJlbW92ZSIsIm9uU2xlZXAiLCJvbkF3YWtlIiwic3Vic2NyaWJlTm90aWZpY2F0aW9uIiwiY2hhbmdlU3Vic2NyaXB0aW9uIiwiYWRkU3Vic2NyaXB0aW9uIiwidW5zdWJzY3JpYmVOb3RpZmljYXRpb24iLCJyZW1vdmVTdWJzY3JpcHRpb24iLCJhY3Rpb24iLCJvbGROb3RpZmljYXRpb25zIiwibm90aWZpY2F0aW9ucyIsInNsaWNlIiwiY2hhbmdlZCIsImZvckVhY2giLCJub3RpZmljYXRpb24iLCJpbmRleE9mIiwicHVzaCIsImluZGV4Iiwic3BsaWNlIiwiTm90aWZpZXIiLCJwcm94eU1hcCIsImdldFByb3h5TmFtZSIsIkZhY2FkZV8xIiwiZmFjYWRlIiwiZ2V0RmFjYWRlIiwiUHJveHkiLCJkYXRhIiwibG9nUHJveHkiLCJzZXREYXRhIiwiZ2V0RGF0YSIsImNvbnNvbGVBcmdzIiwiY29tbWFuZE5hbWUiLCJjb25zb2xlIiwibG9nIiwiRXZlbnRFbWl0dGVyIiwibWVkaWF0b3JNYXAiLCJldmVudEVtaXR0ZXIiLCJvYnNlcnZlck1ldGhvZCIsImNvbnRleHQiLCJyZW1vdmVMaXN0ZW5lciIsIm9uIiwiZW1pdCIsInJlZ2lzdGVyT2JzZXJ2ZXJzIiwib25NZWRpYXRvck5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSIsImJpbmQiLCJpc1NsZWVwaW5nIiwicmVtb3ZlT2JzZXJ2ZXJzIiwiaW50ZXJlc3RzIiwibm90aWZpY2F0aW9uSW50ZXJlc3RzIiwibm90aWZpY2F0aW9uSW50ZXJlc3RzXzEiLCJpbnRlcmVzdCIsImhhbmRsZU5vdGlmaWNhdGlvbiIsIm5vdGlmaWNhdGlvbkludGVyZXN0c18yIiwiTWVkaWF0b3JfMSIsIlByb3h5XzEiLCJoYXMiLCJwcmVmaXgiLCJFdmVudHMiLCJFRSIsImZuIiwib25jZSIsImFkZExpc3RlbmVyIiwiZW1pdHRlciIsImV2ZW50IiwiVHlwZUVycm9yIiwibGlzdGVuZXIiLCJldnQiLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiY2xlYXJFdmVudCIsImV2ZW50TmFtZXMiLCJldmVudHMiLCJuYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImxpc3RlbmVycyIsImhhbmRsZXJzIiwiaSIsImwiLCJlZSIsImxpc3RlbmVyQ291bnQiLCJhMSIsImEyIiwiYTMiLCJhNCIsImE1IiwibGVuIiwiaiIsInJlbW92ZUFsbExpc3RlbmVycyIsIm9mZiIsInByZWZpeGVkIiwibW9kdWxlIiwiTmF2aWdhdGlvbk5vZGUiLCJ4IiwieSIsInoiLCJjb25uZWN0ZWROb2RlcyIsIm9jY3VwaWVkIiwib3RoZXJOb2RlIiwiZmluZCIsIm5vZGUiLCJpc0Nvbm5lY3RlZCIsImNvbm5lY3RlZE5vZGVJbmRleCIsImZpbmRJbmRleCIsImVxdWFscyIsInBjIiwiY3JlYXRlU2NyaXB0IiwiaW5pdGlhbGl6ZSIsIkdhbWVNYXBNZWRpYXRvciIsIm1hcEdyaWQiLCJzdXBlciIsIk5BTUUiLCJHYW1lQ29tbWFuZHMiLCJHYW1lU3RhdGVQcm94eSIsInZvIiwiQXBwbGljYXRpb24iLCJnZXRBcHBsaWNhdGlvbiIsIkdhbWVNZWRpYXRvciIsInBhcnNlR2FtZU1hcENvbW1hbmQiLCJuYXZpZ2F0aW9uRmxvb3JzIiwicm9vdCIsImZpbmRCeVRhZyIsImNvbXBsZXRlZEdyaWQiLCJuYXZpZ2F0aW9uQ29tcG9uZW50cyIsImZsb29yRW50aXR5IiwibmF2Q29tcCIsInNjcmlwdCIsImZsb29yR3JpZCIsImNyZWF0ZVBhcnRpYWxHcmlkRnJvbUZsb29yIiwic2V0R3JpZCIsIm5hdmlnYXRpb25Db21wIiwiY29ubmVjdGVkQ29tcEVudGl0eSIsImNvbm5lY3RlZENvbXBvbmVudHMiLCJjb25uZWN0ZWROYXZDb21wIiwiam9pblRvQWRqYWNlbnRHcmlkIiwiZ2V0R3JpZCIsIkdhbWVNYXBQcm94eSIsImdyaWQiLCJmbG9vclBvc2l0aW9uIiwiZ2V0TG9jYWxQb3NpdGlvbiIsImZsb29yU2l6ZSIsImdldExvY2FsU2NhbGUiLCJzbmFwcGVkV2lkdGgiLCJNYXRoIiwicm91bmQiLCJzbmFwcGVkQnJlYWR0aCIsInNuYXBwZWRYIiwic25hcHBlZFkiLCJzbmFwcGVkWiIsImVxdWFsc1BvaW50IiwiYWRkQ29ubmVjdGVkTm9kZSIsImdyaWRUb0pvaW4iLCJXZWFwb25zUHJveHkiLCJ3ZWFwb25OYW1lIiwiZGFtYWdlVGllciIsImNhdGVnb3J5S2V5IiwiY2F0ZWdvcnkiLCJkYW1hZ2UiLCJtaW4iLCJzdGFydHVwQ29tbWFuZCIsImFwcCIsIndlYXBvbnNEYXRhIiwiYXNzZXRzIiwicmVzb3VyY2UiLCJjaGFuZ2VTY2VuZUNvbW1hbmQiLCJzY2VuZU5hbWUiLCJvbGRIaWVyYXJjaHkiLCJmaW5kQnlOYW1lIiwic2NlbmUiLCJzY2VuZXMiLCJsb2FkU2NlbmVIaWVyYXJjaHkiLCJ1cmwiLCJlcnIiLCJwYXJlbnQiLCJlcnJvciIsImRlc3Ryb3kiLCJzaHVmZmxlQXJyYXkiLCJhcnJheSIsImN1cnJlbnRJbmRleCIsInRlbXBvcmFyeVZhbHVlIiwicmFuZG9tSW5kZXgiLCJmbG9vciIsInJhbmRvbSIsIkNvbWJhdFZPIiwiQ29tYmF0UHJveHkiLCJwYXJ0aWNpcGFudHMiLCJwYXJ0aWNpcGFudFByb3hpZXMiLCJNYXAiLCJwYXJ0aWNpcGFudCIsInBhcnRpY2lwYW50UHJveHkiLCJHYW1lQ2hhcmFjdGVyUHJveHkiLCJzZXQiLCJyb3VuZEluaXRpYXRpdmUiLCJuZXh0VHVybklkIiwic2hpZnQiLCJhY3RpdmVQYXJ0aWNpcGFudCIsInJlc2V0Q29tYmF0VHVyblN0YXRlIiwiaXNOUEMiLCJzZXRUaW1lb3V0IiwiaW5pdGlhdGl2ZXMiLCJjaGFyYWN0ZXJJZCIsImVudHJpZXMiLCJpbml0aWF0aXZlIiwic2h1ZmZsZWRJbml0aWF0aXZlIiwibmV4dFR1cm5DaGFyYWN0ZXJJZCIsImRlbGV0ZSIsImZpbHRlciIsImUiLCJzdGFydENvbWJhdENvbW1hbmQiLCJpbnN0aWdhdGluZ0NoYXJhY3RlcklkIiwidXBkYXRlR2FtZVN0YXRlVHlwZSIsImdhbWVwbGF5TW9kZVR5cGVzIiwiaW5zdGlnYXRpbmdDaGFyYWN0ZXJQcm94eSIsImNsZWFuUGFydGljaXBhbnRzIiwiY29tYmF0R3JvdXAiLCJpdGVtIiwicG9zIiwic2VsZiIsInBsYXllclByb3h5IiwiY3VycmVudE5vZGUiLCJjb21iYXRQcm94eSIsIm5leHRDb21iYXRUdXJuQ29tbWFuZCIsImdhbWVTdGF0ZSIsImdhbWVwbGF5TW9kZSIsIm5leHRUdXJuIiwibmV4dENvbWJhdFJvdW5kQ29tbWFuZCIsIm5leHRSb3VuZCIsImVuZENvbWJhdFR1cm5Db21tYW5kIiwiZW5lbXlUdXJuQ29tbWFuZCIsImVuZW15SWQiLCJlbmVteVByb3h5IiwiZW5lbXlDdXJyZW50Tm9kZSIsInNvbWUiLCJuIiwiaWQiLCJyZXN1bHQiLCJyZWR1Y2UiLCJhIiwiZGlzdGFuY2VTcXJ0IiwicGF0aCIsIkFzdGFyIiwiYXZhaWxhYmxlTW92ZW1lbnQiLCJlbmRQb2ludCIsInAxIiwicDIiLCJwb3ciLCJzZWxlY3RlZE5vZGVDb21tYW5kIiwiZ2FtZVN0YXRlUHJveHkiLCJjdXJyZW50TW9kZSIsImNvbWJhdE5hdmlnYXRlVG9Ob2RlQ29tbWFuZCIsInRhcmdldE5vZGUiLCJnYW1lQ2hhcmFjdGVyUHJveHkiLCJtb3ZlYWJsZU5vZGVzIiwiaGFuZGxlVmFsaWRNb3ZlIiwiY2hhcmFjdGVyUHJveHkiLCJzaG93V2Fsa2FibGVBcmVhQ29tbWFuZCIsIndhbGthYmxlTm9kZXMiLCJ3YWxrYWJsZVRpbGVBc3NldCIsImNvbnRhaW5lciIsInRpbGUiLCJpbnN0YW50aWF0ZSIsInNldExvY2FsUG9zaXRpb24iLCJhZGRDaGlsZCIsImhpZGVXYWxrYWJsZUFyZWFDb21tYW5kIiwid2Fsa2FibGVUaWxlRW50aXRpZXMiLCJ3YWxrYWJsZVRpbGVFbnRpdHkiLCJhd2FpdFBsYXllckNvbWJhdElucHV0Q29tbWFuZCIsImVuZE1vdmVtZW50Q29tbWFuZCIsImVuZE5vZGUiLCJzZWxlY3RlZEdhbWVDaGFyYWN0ZXJDb21tYW5kIiwidGFyZ2V0Q2hhcmFjdGVyUHJveHkiLCJwbGF5ZXJDaGFyYWN0ZXJQcm94eSIsInBhdGhUb1RhcmdldCIsIm5hdmlnYXRlVG9DaGFyYWN0ZXIiLCJ0YXJnZXRDdXJycmVudE5vZGUiLCJpc1RhcmdldEFkamFjZW50IiwiY3VycmVudEFjdGlvbiIsInVub2NjdXBpZWROb2RlcyIsInBsYXllck5vZGUiLCJzaG9ydGVzdFBhdGgiLCJvdGhlclBhdGgiLCJjaGFuZ2VQbGF5ZXJBY3Rpb25Db21tYW5kIiwiYWN0aW9uTmFtZSIsInJlc29sdmVBdHRhY2tDb21tYW5kIiwiYXR0YWNrZXJJZCIsImF0dGFja2VyUHJveHkiLCJkZWZlbmRlcklkIiwiZGVmZW5kZXJQcm94eSIsImF0dGFja2VyUm9sbCIsInJvbGxBdHRhY2tTa2lsbCIsInNraWxsIiwiZGVmZW5kZXJSb2xsIiwid2VhcG9uc1Byb3h5IiwiZGV0ZXJtaW5lRGFtYWdlVGllciIsImdldERhbWFnZSIsImFwcGx5RGFtYWdlIiwiaXNEZWFkIiwiaGlnaERhbWFnZSIsImxvd0RhbWFnZSIsInJvbGxEaWNlIiwibW92ZUFsb25nUGF0aEFuZEF0dGFja0NvbW1hbmQiLCJ0YXJnZXRJZCIsInVzZU1vdmVtZW50IiwiY2hhcmFjdGVyTWVkaWF0b3IiLCJHYW1lQ2hhcmFjdGVyTWVkaWF0b3IiLCJoYW5kbGVOYXZpZ2F0ZUFsb25nUGF0aFdpdGhQcm9taXNlIiwidGhlbiIsImtpbGxHYW1lQ2hhcmFjdGVyQ29tbWFuZCIsInJlbW92ZUNoYXJhY3RlckZyb21Db21iYXQiLCJlbmRDb21iYXRDb21tYW5kIiwiR2FtZUZhY2FkZSIsImdhbWUiLCJTVEFSVFVQIiwiR2FtZUNoYXJhY3RlclZPIiwicGFyYW1zIiwibWF4TW92ZW1lbnQiLCJhdmFpbGFibGVBY3Rpb24iLCJtYXhBY3Rpb25zUGVyVHVybiIsImNvc3QiLCJkYW1hbmdlIiwiY3VycmVudFN0YW1pbmEiLCJtYXhpbXVtU3RhbWluYSIsImFncm9BcmVhIiwibWF4U3RhbWluYSIsIm1heEx1Y2siLCJjdXJyZW50THVjayIsImFkdmFuY2VkU2tpbGxzIiwiR2FtZU1hcFZPIiwidGFyZ2V0UG9pbnQiLCJuZWFyZXN0Tm9kZSIsImRpc3RTcXJ0VG9OZWFyZXN0Tm9kZSIsImRpc3RUb05vZGUiLCJQcmlvcml0eVF1ZXVlIiwicHJpb3JpdHkiLCJJbmZpbml0eSIsInN0YXJ0IiwicmFuZ2VMaW1pdCIsImZyb250aWVyIiwic2VhcmNoZWRBcmVhIiwiY2FtZUZyb20iLCJyYW5nZSIsIm5ld0Zyb250aWVyIiwiY3VycmVudCIsIm5leHQiLCJnb2FsIiwiY29zdFNvRmFyIiwiZW1wdHkiLCJwb3AiLCJuZXdDb3N0IiwiaGV1cmlzdGljIiwicGF0aElzQnJva2VuIiwicHQxIiwicHQyIiwiYWJzIiwiR2FtZVN0YXRlVk8iLCJuZXdTdGF0ZVR5cGUiLCJzZWxlY3RlZEFjdGlvbiIsIkVYUExPUkFUSU9OIiwiQ09NQkFUIiwiRElBTE9HVUUiLCJHYW1lQ2hhcmFjdGVyQ29tcG9uZW50IiwiYXR0cmlidXRlcyIsImFkZCIsInR5cGUiLCJ0aXRsZSIsImRlZmF1bHQiLCJzY2hlbWEiLCJwcmVyZWdpc3Rlck5vdGlmaWNhdGlvbiIsInByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zIiwicG9zdEluaXRpYWxpemUiLCJtb3ZlbWVudFBhdGgiLCJzdGF0c092ZXJyaWRlcyIsInByb3h5UGFyYW1zIiwiY29tYmF0R3JvdXBOYW1lIiwiY29tcmFkZUVudGl0aWVzIiwiY29tcmFkZUVudGl0eSIsImNvbXJhZGVJZCIsImVudGl0eSIsImFuaW1hdGlvbiIsInBsYXkiLCJzZXRQYXRoIiwiZmlyZSIsImxvb3AiLCJzdG9wTW92ZW1lbnQiLCJ1cGRhdGUiLCJkdCIsIm1vdmVBbG9uZ1BhdGgiLCJuZXh0UGF0aFBvaW50IiwibG9jYWxQb3MiLCJuZXdQb3NpdGlvbiIsIlZlYzMiLCJzcGVlZCIsImNoYXJhY3RlclNwZWVkIiwibm9kZVBvaW50Iiwic3ViMiIsIm5vcm1hbGl6ZSIsIm11bCIsImxvb2tBdFBvaW50IiwiZGlzdGFuY2UiLCJwb2ludCIsImR4IiwiZHoiLCJhbmdsZVRvRGVzdCIsImF0YW4yIiwiUEkiLCJzZXRFdWxlckFuZ2xlcyIsImFuaW1hdGVEZWF0aCIsImFuaW1hdGVIaXQiLCJhbmltYXRlQXR0YWNrIiwidXBkYXRlQ3VycmVudE5vZGUiLCJoYW5kbGVGaW5pc2hlZE1vZGUiLCJzY3JpcHRLZXkiLCJzY3JpcHRDb21wb25lbnQiLCJoYW5kbGVTdGFydENvbWJhdCIsImdhbWVNYXBQcm94eSIsImZpbmROZWFyZXN0Tm9kZSIsImhhbmRsZU5hdmlnYXRlVG9Ob2RlIiwiaGFuZGxlTmF2aWdhdGVBbG9uZ1BhdGgiLCJoYW5kbGVTZXRDaGFyYWN0ZXJUb05vZGUiLCJsb29rUG9pbnQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5ld05vZGUiLCJzZWFyY2hOb2RlIiwic2VhcmNoQXJlYSIsIklucHV0TGF5ZXJNZWRpYXRvciIsImhhbmRsZVBpY2tlckdhbWVDaGFyYWN0ZXIiLCJoYW5kbGVQaWNrZXJOYXZpZ2F0aW9uIiwiaGFuZGxlU2Nyb2xsaW5nIiwiY2hhcmFjdGVyRW50aXR5IiwiZGlyZWN0aW9uIiwiR2FtZUNhbWVyYSIsIkdhbWVDYW1lcmFNZWRpYXRvciIsInNldENhbWVyYVRhcmdldCIsImNhbWVyYVRhcmdldCIsInJvdGF0aW9uIiwiZ2V0RXVsZXJBbmdsZXMiLCJjYW1lcmFIZWlnaHQiLCJoYW5kbGVEcmFnIiwiZHJhZ011bHRpcGxpZXJYIiwidmVydGljYWxTY3JvbGwiLCJuZXdDYW1lcmFIZWlnaHQiLCJkcmFnTXVsdGlwbGllclkiLCJtYXRoIiwiY2xhbXAiLCJtaW5DYW1lcmFIZWlnaHQiLCJtYXhDYW1lcmFIZWlnaHQiLCJnZXRUYXJnZXRDYW1lcmFQb3NpdGlvbiIsImZvY3VzUG9pbnQiLCJjYW1lcmFQb3NpdGlvbiIsInRhcmdldFgiLCJzaW4iLCJ0YXJnZXRaIiwiY29zIiwiY2FtZXJhVGFyZ2V0UG9zaXRpb24iLCJ0YXJnZXRQb3NpdGlvbiIsImN1cnJlbnRQb3MiLCJ0d2VlblgiLCJ0d2VlblkiLCJ0d2VlbloiLCJsb29rQXQiLCJJbnB1dExheWVyQ29tcG9uZW50Iiwid2luZG93IiwicmF5IiwiUmF5IiwiaW5wdXRRdWV1ZSIsIm1vdXNlIiwiZGlzYWJsZUNvbnRleHRNZW51IiwiY2xpY2tEb3duU3RhcnQiLCJpc0RyYWdnaW5nIiwiaGFuZGxlUGlja2VyUmVzdWx0IiwiRVZFTlRfTU9VU0VNT1ZFIiwib25Nb3VzZU1vdmUiLCJlbGVtZW50IiwiRVZFTlRfTU9VU0VET1dOIiwib25Nb3VzZURvd24iLCJFVkVOVF9NT1VTRVVQIiwib25Nb3VzZVVwIiwidG91Y2giLCJFVkVOVF9UT1VDSE1PVkUiLCJ0b3VjaEV2dCIsInRvdWNoZXMiLCJFVkVOVF9UT1VDSFNUQVJUIiwiRVZFTlRfVE9VQ0hFTkQiLCJvblJlc2l6ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJncmFwaGljc0RldmljZSIsIndpZHRoIiwiaGVpZ2h0Iiwic2NyZWVuIiwic2NhbGVCbGVuZCIsIkRhdGUiLCJub3ciLCJjbGlja1N0YXJ0UG9pbnQiLCJWZWMyIiwiZHJhZ1RpbWUiLCJoYW5kbGVSYXljYXN0Q29sbGlzaW9ucyIsImNhbWVyYUVudGl0eSIsImNhbWVyYUNvbXBvbmVudCIsImNhbWVyYSIsInNjcmVlblRvV29ybGQiLCJmYXJDbGlwIiwib3JpZ2luIiwiY29weSIsImdldFBvc2l0aW9uIiwic3ViIiwicGlja2VkRW50aXR5IiwiaGl0UG9zaXRpb24iLCJzY3JlZW5Qb3MiLCJzY3JlZW5Qb3NpdGlvbiIsInByb2Nlc3NJbnB1dFF1ZXVlIiwiaGlnaGVzdFByaW9yaXR5UGljayIsImhpZ2hlc3RQcmlvcml0eSIsInBpY2siLCJ0YWdzIiwicGlja2VkR2FtZUNoYXJhY3RlciIsInBpY2tlZE5hdmlnYXRpb24iLCJnZXROZWFyZXN0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwibyIsIm9iaiIsInByb3AiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJDYWNvZ2VuR2FtZSIsIktFWSIsIk5hdmlnYXRpb25Db21wb25lbnQiLCJzY2FsZSIsImhhbGZFeHRlbnRzIiwiYWFiYiIsIkJvdW5kaW5nQm94IiwiaGFuZGxlUmF5Q2FzdCIsImVuYWJsZWQiLCJpbnRlcnNlY3RzUmF5Iiwibm9kZUdyaWQiLCJBZ3JvR2FtZUNoYXJhY3RlckNvbXBvbmVudCIsImhhbmRsZU1hcEdyaWRDcmVhdGVkIiwiaGFuZGxlTW92ZWRUb05vZGUiLCJzaWdodFJhbmdlIiwiYWdyb05vZGUiLCJUb2FzdE1lc3NhZ2VNZWRpYXRvciIsImFkZE1lc3NhZ2UiLCJUb2FzdE1lc3NhZ2VDb21wb25lbnQiLCJtZXNzYWdlUXVldWUiLCJjdXJyZW50VGltZW91dCIsIm1lc3NhZ2UiLCJzaG93TmV4dE1lc3NhZ2UiLCJuZXh0TWVzc2FnZSIsImxhYmVsRW50aXR5IiwidGV4dCIsIm1lc3NhZ2VUaW1lIiwiUGxheWVyQ29tYmF0UGFuZWxNZWRpYXRvciIsImhhbmRsZUVuZFR1cm4iLCJQbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudCIsImVuZFR1cm5CdXR0b24iLCJjbGlja0VuZFR1cm4iLCJIaXRib3hDb21wb25lbnQiLCJjZW50ZXIiLCJBY3Rpb25QYW5lbE1lZGlhdG9yIiwiaGFuZGxlQ2xpY2tBY3Rpb25CdXR0b24iLCJzZWxlY3RBY3Rpb24iLCJBY3Rpb25CdXR0b25Db21wb25lbnQiLCJoaWdobGlnaHRFbnRpdHkiLCJoYW5kbGVDaGFuZ2VBY3Rpb24iLCJoYW5kbGVDbGljayIsIkFjdGlvblBhbmVsQ29tcG9uZW50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R2dFLEdBQUdrWCxpQkFBa0J4WixJQUN4Q0EsRUFBSTJmLHFCQUdSNXBCLEtBQUt1ZCxPQUFPaUcsUUFBUWpiLEdBQUdnRSxHQUFHa1gsaUJBQWtCeFosSUFDeENBLEVBQUkyZixxQkFHUjVwQixLQUFLdWQsT0FBT2lHLFFBQVFqYixHQUFHZ0UsR0FBRzBYLGtCQUFtQmhhLElBQ3pDQSxFQUFJMmYscUJBR1I1cEIsS0FBS3VkLE9BQU9pRyxRQUFRamIsR0FBR2dFLEdBQUd1WCxpQkFBa0I3WixJQUN4Q0EsRUFBSTJmLHFCQUdSNXBCLEtBQUt1ZCxPQUFPaUcsUUFBUWpiLEdBQUdnRSxHQUFHMlgsZ0JBQWlCamEsSUFDdkNBLEVBQUkyZixzQkNwQlosTUFBUXhuQixPQUFNLEdBQUssRUFBUSxNQUNyQixRQUFFOUIsR0FBWSxFQUFRLEtBMEJmLElBWmIsTUFDSSxjQUNJeUgsUUFBUUMsSUFBSSxjQUNaMUgsRUFBUUMsT0FBUSxFQUNoQixFQUFPSyxZQUFjd1ksRUFBVyxXQUFYLFlBQ3JCclIsUUFBUUMsSUFBSSxHQUVaaEksS0FBS3NILE9BQVMsRUFBTzFHLFlBQVl3WSxFQUFXLFdBQVgsS0FDakNwWixLQUFLc0gsT0FBT3VpQixRQUFRN3BCLFMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFB1cmVNVkNfMSA9IHJlcXVpcmUoXCIuL1B1cmVNVkNcIik7XG52YXIgVmlld18xID0gcmVxdWlyZShcIi4vVmlld1wiKTtcbnZhciBNVUxUSVRPTl9NU0cgPSBcImNvbnRyb2xsZXIga2V5IGZvciB0aGlzIE11bHRpdG9uIGtleSBhbHJlYWR5IGNvbnN0cnVjdGVkXCI7XG52YXIgQ29udHJvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb250cm9sbGVyKGtleSkge1xuICAgICAgICB0aGlzLmNvbW1hbmRNYXAgPSB7fTtcbiAgICAgICAgaWYgKENvbnRyb2xsZXIuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE1VTFRJVE9OX01TRyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tdWx0aXRvbktleSA9IGtleTtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBQdXJlTVZDXzEuUHVyZU1WQy5kZWJ1ZyA/IFB1cmVNVkNfMS5QdXJlTVZDLmxvZ0NvbW1hbmQgOiBQdXJlTVZDXzEuUHVyZU1WQy5sb2dOb25lO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVDb250cm9sbGVyKCk7XG4gICAgfVxuICAgIENvbnRyb2xsZXIucmVtb3ZlQ29udHJvbGxlciA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuaW5zdGFuY2VNYXBba2V5XTtcbiAgICB9O1xuICAgIENvbnRyb2xsZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZU1hcFtrZXldID0gbmV3IENvbnRyb2xsZXIoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZU1hcFtrZXldO1xuICAgIH07XG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUucmVnaXN0ZXJDb21tYW5kID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUsIGNvbW1hbmRDbGFzc1JlZikge1xuICAgICAgICBpZiAoIXRoaXMuY29tbWFuZE1hcFtub3RpZmljYXRpb25OYW1lXSkge1xuICAgICAgICAgICAgdGhpcy52aWV3LnJlZ2lzdGVyT2JzZXJ2ZXIobm90aWZpY2F0aW9uTmFtZSwgdGhpcy5leGVjdXRlQ29tbWFuZCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21tYW5kTWFwW25vdGlmaWNhdGlvbk5hbWVdID0gY29tbWFuZENsYXNzUmVmO1xuICAgIH07XG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUuaGFzQ29tbWFuZCA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRNYXBbbm90aWZpY2F0aW9uTmFtZV0gIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIENvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZUNvbW1hbmQgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICBpZiAodGhpcy5oYXNDb21tYW5kKG5vdGlmaWNhdGlvbk5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcucmVtb3ZlT2JzZXJ2ZXIobm90aWZpY2F0aW9uTmFtZSwgdGhpcy5leGVjdXRlQ29tbWFuZCwgdGhpcyk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5jb21tYW5kTWFwW25vdGlmaWNhdGlvbk5hbWVdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250cm9sbGVyLnByb3RvdHlwZS5pbml0aWFsaXplQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy52aWV3ID0gVmlld18xLlZpZXcuZ2V0SW5zdGFuY2UodGhpcy5tdWx0aXRvbktleSk7XG4gICAgfTtcbiAgICBDb250cm9sbGVyLnByb3RvdHlwZS5leGVjdXRlQ29tbWFuZCA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb21tYW5kID0gdGhpcy5jb21tYW5kTWFwW25vdGlmaWNhdGlvbk5hbWVdO1xuICAgICAgICBpZiAoIWNvbW1hbmQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvZ2dlcihDb250cm9sbGVyLl9jb25zb2xlQXJncywgbm90aWZpY2F0aW9uTmFtZSwgY29tbWFuZC5uYW1lKTtcbiAgICAgICAgY29tbWFuZC5hcHBseSh2b2lkIDAsIFt0aGlzLm11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lXS5jb25jYXQoYXJncykpO1xuICAgIH07XG4gICAgQ29udHJvbGxlci5fY29uc29sZUFyZ3MgPSBbXG4gICAgICAgIFwiXCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMzRjIzNEVcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzZFMjk5NFwiLFxuICAgICAgICBcImNvbG9yOiBcIiArIFwiI0Q0QkZFMFwiICsgXCI7IGJhY2tncm91bmQ6IFwiICsgXCIjODcyNEJEXCIgKyBcIjtcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzZFMjk5NFwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjM0YyMzRFXCJcbiAgICBdO1xuICAgIENvbnRyb2xsZXIuaW5zdGFuY2VNYXAgPSB7fTtcbiAgICByZXR1cm4gQ29udHJvbGxlcjtcbn0oKSk7XG5leHBvcnRzLkNvbnRyb2xsZXIgPSBDb250cm9sbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29udHJvbGxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ3JlYXRlZCBieSBzYXJnaXMgb24gNy80LzE3LlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ29udHJvbGxlcl8xID0gcmVxdWlyZShcIi4vQ29udHJvbGxlclwiKTtcbnZhciBNb2RlbF8xID0gcmVxdWlyZShcIi4vTW9kZWxcIik7XG52YXIgUHVyZU1WQ18xID0gcmVxdWlyZShcIi4vUHVyZU1WQ1wiKTtcbnZhciBWaWV3XzEgPSByZXF1aXJlKFwiLi9WaWV3XCIpO1xudmFyIE1VTFRJVE9OX01TRyA9IFwiRmFjYWRlIGluc3RhbmNlIGZvciB0aGlzIE11bHRpdG9uIGtleSBhbHJlYWR5IGNvbnN0cnVjdGVkIVwiO1xudmFyIEZhY2FkZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGYWNhZGUoa2V5KSB7XG4gICAgICAgIGlmIChGYWNhZGUuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE1VTFRJVE9OX01TRyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2dnZXIgPSBQdXJlTVZDXzEuUHVyZU1WQy5kZWJ1ZyA/IFB1cmVNVkNfMS5QdXJlTVZDLmxvZ05vdGlmaWNhdGlvbiA6IFB1cmVNVkNfMS5QdXJlTVZDLmxvZ05vbmU7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZU5vdGlmaWVyKGtleSk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZUZhY2FkZSgpO1xuICAgIH1cbiAgICBGYWNhZGUuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUZhY2FkZS5pbnN0YW5jZU1hcFtrZXldKSB7XG4gICAgICAgICAgICBGYWNhZGUuaW5zdGFuY2VNYXBba2V5XSA9IG5ldyBGYWNhZGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRmFjYWRlLmluc3RhbmNlTWFwW2tleV07XG4gICAgfTtcbiAgICBGYWNhZGUuaGFzQ29yZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VNYXBba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgRmFjYWRlLnJlbW92ZUNvcmUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghdGhpcy5pbnN0YW5jZU1hcFtrZXldKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgTW9kZWxfMS5Nb2RlbC5yZW1vdmVNb2RlbChrZXkpO1xuICAgICAgICBWaWV3XzEuVmlldy5yZW1vdmVWaWV3KGtleSk7XG4gICAgICAgIENvbnRyb2xsZXJfMS5Db250cm9sbGVyLnJlbW92ZUNvbnRyb2xsZXIoa2V5KTtcbiAgICAgICAgZGVsZXRlIHRoaXMuaW5zdGFuY2VNYXBba2V5XTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuaW5pdGlhbGl6ZUZhY2FkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplTW9kZWwoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplQ29udHJvbGxlcigpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVWaWV3KCk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnJlZ2lzdGVyQ29tbWFuZCA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lLCBjb21tYW5kQ2xhc3NSZWYpIHtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyLnJlZ2lzdGVyQ29tbWFuZChub3RpZmljYXRpb25OYW1lLCBjb21tYW5kQ2xhc3NSZWYpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5yZW1vdmVDb21tYW5kID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyLnJlbW92ZUNvbW1hbmQobm90aWZpY2F0aW9uTmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLmhhc0NvbW1hbmQgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyLmhhc0NvbW1hbmQobm90aWZpY2F0aW9uTmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnJlZ2lzdGVyUHJveHkgPSBmdW5jdGlvbiAocHJveHkpIHtcbiAgICAgICAgdGhpcy5tb2RlbC5yZWdpc3RlclByb3h5KHByb3h5KTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUucmV0cmlldmVQcm94eSA9IGZ1bmN0aW9uIChwcm94eU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwucmV0cmlldmVQcm94eShwcm94eU5hbWUpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5yZW1vdmVQcm94eSA9IGZ1bmN0aW9uIChwcm94eU5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsLnJlbW92ZVByb3h5KHByb3h5TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLmhhc1Byb3h5ID0gZnVuY3Rpb24gKHByb3h5TmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5oYXNQcm94eShwcm94eU5hbWUpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5yZWdpc3Rlck1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yKSB7XG4gICAgICAgIHRoaXMudmlldy5yZWdpc3Rlck1lZGlhdG9yKG1lZGlhdG9yKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUucmV0cmlldmVNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5yZXRyaWV2ZU1lZGlhdG9yKG1lZGlhdG9yTmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnJlbW92ZU1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LnJlbW92ZU1lZGlhdG9yKG1lZGlhdG9yTmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnNsZWVwTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuc2xlZXBNZWRpYXRvcihtZWRpYXRvck5hbWUpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5hd2FrZU1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LmF3YWtlTWVkaWF0b3IobWVkaWF0b3JOYW1lKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuaGFzTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuaGFzTWVkaWF0b3IobWVkaWF0b3JOYW1lKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuc2VuZE5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5sb2dnZXIuYXBwbHkodGhpcywgW0ZhY2FkZS5fY29uc29sZUFyZ3MsIG5vdGlmaWNhdGlvbk5hbWVdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIChfYSA9IHRoaXMudmlldykubm90aWZ5T2JzZXJ2ZXJzLmFwcGx5KF9hLCBbbm90aWZpY2F0aW9uTmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuaW5pdGlhbGl6ZU5vdGlmaWVyID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0aGlzLm11bHRpdG9uS2V5ID0ga2V5O1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5pbml0aWFsaXplQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udHJvbGxlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IENvbnRyb2xsZXJfMS5Db250cm9sbGVyLmdldEluc3RhbmNlKHRoaXMubXVsdGl0b25LZXkpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5pbml0aWFsaXplTW9kZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm1vZGVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb2RlbCA9IE1vZGVsXzEuTW9kZWwuZ2V0SW5zdGFuY2UodGhpcy5tdWx0aXRvbktleSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLmluaXRpYWxpemVWaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy52aWV3KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52aWV3ID0gVmlld18xLlZpZXcuZ2V0SW5zdGFuY2UodGhpcy5tdWx0aXRvbktleSk7XG4gICAgfTtcbiAgICBGYWNhZGUuX2NvbnNvbGVBcmdzID0gW1xuICAgICAgICBcIlwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjNzU3MTMwXCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiNERUQ0MzRcIixcbiAgICAgICAgXCJjb2xvcjogXCIgKyBcIiMyRjJFMTVcIiArIFwiOyBiYWNrZ3JvdW5kOiBcIiArIFwiI0ZGRjMyNVwiICsgXCI7XCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiNERUQ0MzRcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzc1NzEzMFwiXG4gICAgXTtcbiAgICBGYWNhZGUuaW5zdGFuY2VNYXAgPSB7fTtcbiAgICByZXR1cm4gRmFjYWRlO1xufSgpKTtcbmV4cG9ydHMuRmFjYWRlID0gRmFjYWRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmFjYWRlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTm90aWZpZXJfMSA9IHJlcXVpcmUoXCIuL05vdGlmaWVyXCIpO1xudmFyIFB1cmVNVkNfMSA9IHJlcXVpcmUoXCIuL1B1cmVNVkNcIik7XG52YXIgTkFNRSA9IFwiTWVkaWF0b3JcIjtcbnZhciBNZWRpYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWVkaWF0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWVkaWF0b3IobWVkaWF0b3JOYW1lLCB2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmxvZ2dlciA9IFB1cmVNVkNfMS5QdXJlTVZDLmRlYnVnID8gUHVyZU1WQ18xLlB1cmVNVkMubG9nTWVkaWF0b3IgOiBQdXJlTVZDXzEuUHVyZU1WQy5sb2dOb25lO1xuICAgICAgICBfdGhpcy5tZWRpYXRvck5hbWUgPSBtZWRpYXRvck5hbWUgfHwgTkFNRTtcbiAgICAgICAgX3RoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgICAgIF90aGlzLnNsZWVwaW5nID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuc3Vic2NyaWJlZE5vdGlmaWNhdGlvbnMgPSBbXTtcbiAgICAgICAgX3RoaXMubm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVkaWF0b3IucHJvdG90eXBlLCBcIm5vdGlmaWNhdGlvbnNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN1YnNjcmliZWROb3RpZmljYXRpb25zO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNZWRpYXRvci5wcm90b3R5cGUuZ2V0TWVkaWF0b3JOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZWRpYXRvck5hbWU7XG4gICAgfTtcbiAgICBNZWRpYXRvci5wcm90b3R5cGUuc2V0Vmlld0NvbXBvbmVudCA9IGZ1bmN0aW9uICh2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgfTtcbiAgICBNZWRpYXRvci5wcm90b3R5cGUuZ2V0Vmlld0NvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0NvbXBvbmVudDtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5vblJlZ2lzdGVyID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSA9IG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZTtcbiAgICAgICAgdGhpcy5sb2dnZXIoTWVkaWF0b3IuX2NvbnNvbGVBcmdzLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIFwicmVnaXN0ZXJcIik7XG4gICAgfTtcbiAgICBNZWRpYXRvci5wcm90b3R5cGUub25SZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5sb2dnZXIoTWVkaWF0b3IuX2NvbnNvbGVBcmdzLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIFwicmVtb3ZlXCIpO1xuICAgIH07XG4gICAgTWVkaWF0b3IucHJvdG90eXBlLm9uU2xlZXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2xlZXBpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmxvZ2dlcihNZWRpYXRvci5fY29uc29sZUFyZ3MsIHRoaXMuY29uc3RydWN0b3IubmFtZSwgXCJzbGVlcFwiKTtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5vbkF3YWtlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNsZWVwaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9nZ2VyKE1lZGlhdG9yLl9jb25zb2xlQXJncywgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBcImF3YWtlXCIpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lZGlhdG9yLnByb3RvdHlwZSwgXCJpc1NsZWVwaW5nXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zbGVlcGluZztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTWVkaWF0b3IucHJvdG90eXBlLnN1YnNjcmliZU5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlU3Vic2NyaXB0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIHRoaXMuYWRkU3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS51bnN1YnNjcmliZU5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlU3Vic2NyaXB0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIHRoaXMucmVtb3ZlU3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5jaGFuZ2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSwgYWN0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBvbGROb3RpZmljYXRpb25zID0gdGhpcy5ub3RpZmljYXRpb25zLnNsaWNlKCk7XG4gICAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIGlmIChub3RpZmljYXRpb25OYW1lIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbk5hbWUuZm9yRWFjaChmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlZCA9IGFjdGlvbi5jYWxsKF90aGlzLCBub3RpZmljYXRpb24pIHx8IGNoYW5nZWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNoYW5nZWQgPSBhY3Rpb24uY2FsbCh0aGlzLCBub3RpZmljYXRpb25OYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhbmdlZCAmJiB0aGlzLm5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UodGhpcywgb2xkTm90aWZpY2F0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5hZGRTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmaWNhdGlvbnMuaW5kZXhPZihub3RpZmljYXRpb24pID09PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnB1c2gobm90aWZpY2F0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5yZW1vdmVTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMubm90aWZpY2F0aW9ucy5pbmRleE9mKG5vdGlmaWNhdGlvbik7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgTWVkaWF0b3IuX2NvbnNvbGVBcmdzID0gW1xuICAgICAgICBcIlwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjMkEzMzUxXCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMzNjREOThcIixcbiAgICAgICAgXCJjb2xvcjogXCIgKyBcIiNGNEY2RkVcIiArIFwiOyBiYWNrZ3JvdW5kOiBcIiArIFwiIzM2NTZDMVwiICsgXCI7XCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMzNjREOThcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzJBMzM1MVwiXG4gICAgXTtcbiAgICByZXR1cm4gTWVkaWF0b3I7XG59KE5vdGlmaWVyXzEuTm90aWZpZXIpKTtcbmV4cG9ydHMuTWVkaWF0b3IgPSBNZWRpYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1lZGlhdG9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE1VTFRJVE9OX01TRyA9IFwiTW9kZWwgaW5zdGFuY2UgZm9yIHRoaXMgTXVsdGl0b24ga2V5IGFscmVhZHkgY29uc3RydWN0ZWQhXCI7XG52YXIgTW9kZWwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kZWwoa2V5KSB7XG4gICAgICAgIHRoaXMucHJveHlNYXAgPSB7fTtcbiAgICAgICAgaWYgKE1vZGVsLmluc3RhbmNlTWFwW2tleV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihNVUxUSVRPTl9NU0cpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubXVsdGl0b25LZXkgPSBrZXk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZU1vZGVsKCk7XG4gICAgfVxuICAgIE1vZGVsLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlTWFwW2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VNYXBba2V5XSA9IG5ldyBNb2RlbChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlTWFwW2tleV07XG4gICAgfTtcbiAgICBNb2RlbC5yZW1vdmVNb2RlbCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuaW5zdGFuY2VNYXBba2V5XTtcbiAgICB9O1xuICAgIE1vZGVsLnByb3RvdHlwZS5yZWdpc3RlclByb3h5ID0gZnVuY3Rpb24gKHByb3h5KSB7XG4gICAgICAgIHByb3h5LmluaXRpYWxpemVOb3RpZmllcih0aGlzLm11bHRpdG9uS2V5KTtcbiAgICAgICAgdGhpcy5wcm94eU1hcFtwcm94eS5nZXRQcm94eU5hbWUoKV0gPSBwcm94eTtcbiAgICAgICAgcHJveHkub25SZWdpc3RlcigpO1xuICAgIH07XG4gICAgTW9kZWwucHJvdG90eXBlLnJldHJpZXZlUHJveHkgPSBmdW5jdGlvbiAocHJveHlOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3h5TWFwW3Byb3h5TmFtZV07XG4gICAgfTtcbiAgICBNb2RlbC5wcm90b3R5cGUuaGFzUHJveHkgPSBmdW5jdGlvbiAocHJveHlOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3h5TWFwW3Byb3h5TmFtZV0gIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIE1vZGVsLnByb3RvdHlwZS5yZW1vdmVQcm94eSA9IGZ1bmN0aW9uIChwcm94eU5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMucHJveHlNYXBbcHJveHlOYW1lXSkge1xuICAgICAgICAgICAgdmFyIHByb3h5ID0gdGhpcy5wcm94eU1hcFtwcm94eU5hbWVdO1xuICAgICAgICAgICAgcHJveHkub25SZW1vdmUoKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnByb3h5TWFwW3Byb3h5TmFtZV07XG4gICAgICAgICAgICByZXR1cm4gcHJveHk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBNb2RlbC5wcm90b3R5cGUuaW5pdGlhbGl6ZU1vZGVsID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIE1vZGVsLmluc3RhbmNlTWFwID0ge307XG4gICAgcmV0dXJuIE1vZGVsO1xufSgpKTtcbmV4cG9ydHMuTW9kZWwgPSBNb2RlbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1vZGVsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHNhcmdpcyBvbiA3LzQvMTcuXG4gKi9cbnZhciBGYWNhZGVfMSA9IHJlcXVpcmUoXCIuL0ZhY2FkZVwiKTtcbnZhciBNVUxUSVRPTl9NU0cgPSBcIm11bHRpdG9uS2V5IGZvciB0aGlzIE5vdGlmaWVyIG5vdCB5ZXQgaW5pdGlhbGl6ZWQhXCI7XG52YXIgTm90aWZpZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm90aWZpZXIoKSB7XG4gICAgfVxuICAgIE5vdGlmaWVyLnByb3RvdHlwZS5pbml0aWFsaXplTm90aWZpZXIgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHRoaXMubXVsdGl0b25LZXkgPSBrZXk7XG4gICAgICAgIHRoaXMuZmFjYWRlID0gdGhpcy5nZXRGYWNhZGUoKTtcbiAgICB9O1xuICAgIE5vdGlmaWVyLnByb3RvdHlwZS5zZW5kTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5mYWNhZGUpIHtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuZmFjYWRlKS5zZW5kTm90aWZpY2F0aW9uLmFwcGx5KF9hLCBbbm90aWZpY2F0aW9uTmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTm90aWZpZXIucHJvdG90eXBlLmdldEZhY2FkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubXVsdGl0b25LZXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihNVUxUSVRPTl9NU0cpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBGYWNhZGVfMS5GYWNhZGUuZ2V0SW5zdGFuY2UodGhpcy5tdWx0aXRvbktleSk7XG4gICAgfTtcbiAgICByZXR1cm4gTm90aWZpZXI7XG59KCkpO1xuZXhwb3J0cy5Ob3RpZmllciA9IE5vdGlmaWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQ3JlYXRlZCBieSBzYXJnaXMgb24gNy80LzE3LlxuICovXG52YXIgTm90aWZpZXJfMSA9IHJlcXVpcmUoXCIuL05vdGlmaWVyXCIpO1xudmFyIFB1cmVNVkNfMSA9IHJlcXVpcmUoXCIuL1B1cmVNVkNcIik7XG52YXIgTkFNRSA9IFwiUHJveHlcIjtcbnZhciBQcm94eSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUHJveHksIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUHJveHkocHJveHlOYW1lLCBkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb3h5TmFtZSA9IHByb3h5TmFtZSB8fCBOQU1FO1xuICAgICAgICBfdGhpcy5sb2dnZXIgPSBQdXJlTVZDXzEuUHVyZU1WQy5kZWJ1ZyA/IFB1cmVNVkNfMS5QdXJlTVZDLmxvZ1Byb3h5IDogUHVyZU1WQ18xLlB1cmVNVkMubG9nTm9uZTtcbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIF90aGlzLnNldERhdGEoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBQcm94eS5wcm90b3R5cGUuZ2V0UHJveHlOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm94eU5hbWU7XG4gICAgfTtcbiAgICBQcm94eS5wcm90b3R5cGUuc2V0RGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfTtcbiAgICBQcm94eS5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgICB9O1xuICAgIFByb3h5LnByb3RvdHlwZS5vblJlZ2lzdGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxvZ2dlcihQcm94eS5fY29uc29sZUFyZ3MsIHRoaXMuY29uc3RydWN0b3IubmFtZSwgXCJyZWdpc3RlclwiKTtcbiAgICB9O1xuICAgIFByb3h5LnByb3RvdHlwZS5vblJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIoUHJveHkuX2NvbnNvbGVBcmdzLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIFwicmVtb3ZlXCIpO1xuICAgIH07XG4gICAgUHJveHkuX2NvbnNvbGVBcmdzID0gW1xuICAgICAgICBcIlwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjMjk1QTM0XCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMyRkFBNEFcIixcbiAgICAgICAgXCJjb2xvcjogXCIgKyBcIiMxMDI0MTVcIiArIFwiOyBiYWNrZ3JvdW5kOiBcIiArIFwiIzI3RDA0Q1wiICsgXCI7XCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMyRkFBNEFcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzI5NUEzNFwiXG4gICAgXTtcbiAgICByZXR1cm4gUHJveHk7XG59KE5vdGlmaWVyXzEuTm90aWZpZXIpKTtcbmV4cG9ydHMuUHJveHkgPSBQcm94eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByb3h5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFB1cmVNVkMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHVyZU1WQygpIHtcbiAgICB9XG4gICAgUHVyZU1WQy5sb2dDb21tYW5kID0gZnVuY3Rpb24gKGNvbnNvbGVBcmdzLCBub3RpZmljYXRpb25OYW1lLCBjb21tYW5kTmFtZSkge1xuICAgICAgICBjb25zb2xlQXJnc1swXSA9IFwiJWMgJWMgJWMgXCIgKyBub3RpZmljYXRpb25OYW1lICsgXCIgPT4gIFwiICsgY29tbWFuZE5hbWUgKyBcIiAlYyAlYyBcIjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgY29uc29sZUFyZ3MpO1xuICAgIH07XG4gICAgUHVyZU1WQy5sb2dOb3RpZmljYXRpb24gPSBmdW5jdGlvbiAoY29uc29sZUFyZ3MsIG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZUFyZ3NbMF0gPSBcIiVjICVjICVjIFwiICsgbm90aWZpY2F0aW9uTmFtZSArIFwiOiBhcmdzIFsgXCIgKyBhcmdzICsgXCIgXSAlYyAlYyBcIjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgY29uc29sZUFyZ3MpO1xuICAgIH07XG4gICAgUHVyZU1WQy5sb2dNZWRpYXRvciA9IGZ1bmN0aW9uIChjb25zb2xlQXJncywgbmFtZSwgYWN0aW9uKSB7XG4gICAgICAgIGNvbnNvbGVBcmdzWzBdID0gXCIlYyAlYyAlYyBcIiArIG5hbWUgKyBcIjogXCIgKyBhY3Rpb24gKyBcIiAlYyAlYyBcIjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgY29uc29sZUFyZ3MpO1xuICAgIH07XG4gICAgUHVyZU1WQy5sb2dQcm94eSA9IGZ1bmN0aW9uIChjb25zb2xlQXJncywgbmFtZSwgYWN0aW9uKSB7XG4gICAgICAgIGNvbnNvbGVBcmdzWzBdID0gXCIlYyAlYyAlYyBcIiArIG5hbWUgKyBcIjogXCIgKyBhY3Rpb24gKyBcIiAlYyAlYyBcIjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgY29uc29sZUFyZ3MpO1xuICAgIH07XG4gICAgUHVyZU1WQy5sb2dOb25lID0gZnVuY3Rpb24gKGNvbnNvbGVBcmdzKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQdXJlTVZDLmRlYnVnID0gdHJ1ZTtcbiAgICByZXR1cm4gUHVyZU1WQztcbn0oKSk7XG5leHBvcnRzLlB1cmVNVkMgPSBQdXJlTVZDO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHVyZU1WQy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiZXZlbnRlbWl0dGVyM1wiKTtcbnZhciBNVUxUSVRPTl9NU0cgPSBcIlZpZXcgaW5zdGFuY2UgZm9yIHRoaXMgTXVsdGl0b24ga2V5IGFscmVhZHkgY29uc3RydWN0ZWQhXCI7XG52YXIgVmlldyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWaWV3KGtleSkge1xuICAgICAgICB0aGlzLm1lZGlhdG9yTWFwID0ge307XG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICBpZiAoVmlldy5pbnN0YW5jZU1hcFtrZXldKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTVVMVElUT05fTVNHKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm11bHRpdG9uS2V5ID0ga2V5O1xuICAgICAgICB0aGlzLmluaXRpYWxpemVWaWV3KCk7XG4gICAgfVxuICAgIFZpZXcuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZU1hcFtrZXldID0gbmV3IFZpZXcoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZU1hcFtrZXldO1xuICAgIH07XG4gICAgVmlldy5yZW1vdmVWaWV3ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWxldGUgdGhpcy5pbnN0YW5jZU1hcFtrZXldO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmVtb3ZlT2JzZXJ2ZXIgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSwgb2JzZXJ2ZXJNZXRob2QsIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobm90aWZpY2F0aW9uTmFtZSwgb2JzZXJ2ZXJNZXRob2QsIGNvbnRleHQpO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmVnaXN0ZXJPYnNlcnZlciA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lLCBvYnNlcnZlck1ldGhvZCwgY29udGV4dCkge1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5vbihub3RpZmljYXRpb25OYW1lLCBvYnNlcnZlck1ldGhvZCwgY29udGV4dCk7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5ub3RpZnlPYnNlcnZlcnMgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuZXZlbnRFbWl0dGVyKS5lbWl0LmFwcGx5KF9hLCBbbm90aWZpY2F0aW9uTmFtZSwgbm90aWZpY2F0aW9uTmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnJlZ2lzdGVyTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3IpIHtcbiAgICAgICAgaWYgKHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3IuZ2V0TWVkaWF0b3JOYW1lKCldKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbWVkaWF0b3IuaW5pdGlhbGl6ZU5vdGlmaWVyKHRoaXMubXVsdGl0b25LZXkpO1xuICAgICAgICAvLyByZWdpc3RlciB0aGUgbWVkaWF0b3IgZm9yIHJldHJpZXZhbCBieSBuYW1lXG4gICAgICAgIHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3IuZ2V0TWVkaWF0b3JOYW1lKCldID0gbWVkaWF0b3I7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJPYnNlcnZlcnMobWVkaWF0b3IpO1xuICAgICAgICBtZWRpYXRvci5vblJlZ2lzdGVyKHRoaXMub25NZWRpYXRvck5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgbWVkaWF0b3Iub25Bd2FrZSgpO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUuYXdha2VNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvck5hbWUpIHtcbiAgICAgICAgdmFyIG1lZGlhdG9yID0gdGhpcy5tZWRpYXRvck1hcFttZWRpYXRvck5hbWVdO1xuICAgICAgICBpZiAobWVkaWF0b3IpIHtcbiAgICAgICAgICAgIGlmICghbWVkaWF0b3IuaXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZWRpYXRvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJPYnNlcnZlcnMobWVkaWF0b3IpO1xuICAgICAgICAgICAgLy8gYWxlcnQgdGhlIG1lZGlhdG9yIHRoYXQgaXQgaGFzIGJlZW4gYXdha2VuXG4gICAgICAgICAgICBtZWRpYXRvci5vbkF3YWtlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lZGlhdG9yO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmV0cmlldmVNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3JOYW1lXTtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnJlbW92ZU1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yTmFtZSkge1xuICAgICAgICB2YXIgbWVkaWF0b3IgPSB0aGlzLm1lZGlhdG9yTWFwW21lZGlhdG9yTmFtZV07XG4gICAgICAgIGlmIChtZWRpYXRvcikge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVPYnNlcnZlcnMobWVkaWF0b3IpO1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBtZWRpYXRvciBmcm9tIHRoZSBtYXBcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm1lZGlhdG9yTWFwW21lZGlhdG9yTmFtZV07XG4gICAgICAgICAgICBtZWRpYXRvci5vblNsZWVwKCk7XG4gICAgICAgICAgICAvLyBhbGVydCB0aGUgbWVkaWF0b3IgdGhhdCBpdCBoYXMgYmVlbiByZW1vdmVkXG4gICAgICAgICAgICBtZWRpYXRvci5vblJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZWRpYXRvcjtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnNsZWVwTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHZhciBtZWRpYXRvciA9IHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3JOYW1lXTtcbiAgICAgICAgaWYgKG1lZGlhdG9yKSB7XG4gICAgICAgICAgICBpZiAobWVkaWF0b3IuaXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZWRpYXRvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVtb3ZlT2JzZXJ2ZXJzKG1lZGlhdG9yKTtcbiAgICAgICAgICAgIC8vIGFsZXJ0IHRoZSBtZWRpYXRvciB0aGF0IGl0IGhhcyBiZWVuIHNsZXB0XG4gICAgICAgICAgICBtZWRpYXRvci5vblNsZWVwKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lZGlhdG9yO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUuaGFzTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lZGlhdG9yTWFwW21lZGlhdG9yTmFtZV0gIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLmluaXRpYWxpemVWaWV3ID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIFZpZXcucHJvdG90eXBlLnJlbW92ZU9ic2VydmVycyA9IGZ1bmN0aW9uIChtZWRpYXRvciwgaW50ZXJlc3RzKSB7XG4gICAgICAgIC8vIGZvciBldmVyeSBub3RpZmljYXRpb24gdGhlIG1lZGlhdG9yIGlzIGludGVyZXN0ZWQgaW4uLi5cbiAgICAgICAgdmFyIG5vdGlmaWNhdGlvbkludGVyZXN0cyA9IGludGVyZXN0cyB8fCBtZWRpYXRvci5ub3RpZmljYXRpb25zO1xuICAgICAgICBpZiAobm90aWZpY2F0aW9uSW50ZXJlc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgbm90aWZpY2F0aW9uSW50ZXJlc3RzXzEgPSBub3RpZmljYXRpb25JbnRlcmVzdHM7IF9pIDwgbm90aWZpY2F0aW9uSW50ZXJlc3RzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGludGVyZXN0ID0gbm90aWZpY2F0aW9uSW50ZXJlc3RzXzFbX2ldO1xuICAgICAgICAgICAgICAgIC8vIGludGVyZXN0XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVPYnNlcnZlcihpbnRlcmVzdCwgbWVkaWF0b3IuaGFuZGxlTm90aWZpY2F0aW9uLCBtZWRpYXRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnJlZ2lzdGVyT2JzZXJ2ZXJzID0gZnVuY3Rpb24gKG1lZGlhdG9yLCBpbnRlcmVzdHMpIHtcbiAgICAgICAgLy8gZ2V0IG5vdGlmaWNhdGlvbiBpbnRlcmVzdHMgaWYgYW55XG4gICAgICAgIHZhciBub3RpZmljYXRpb25JbnRlcmVzdHMgPSBpbnRlcmVzdHMgfHwgbWVkaWF0b3Iubm90aWZpY2F0aW9ucztcbiAgICAgICAgLy8gcmVnaXN0ZXIgbWVkaWF0b3IgYXMgYW4gb2JzZXJ2ZXIgZm9yIGVhY2ggbm90aWZpY2F0aW9uXG4gICAgICAgIGlmIChub3RpZmljYXRpb25JbnRlcmVzdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBub3RpZmljYXRpb25JbnRlcmVzdHNfMiA9IG5vdGlmaWNhdGlvbkludGVyZXN0czsgX2kgPCBub3RpZmljYXRpb25JbnRlcmVzdHNfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJlc3QgPSBub3RpZmljYXRpb25JbnRlcmVzdHNfMltfaV07XG4gICAgICAgICAgICAgICAgdGhpcy5yZWdpc3Rlck9ic2VydmVyKGludGVyZXN0LCBtZWRpYXRvci5oYW5kbGVOb3RpZmljYXRpb24sIG1lZGlhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUub25NZWRpYXRvck5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSA9IGZ1bmN0aW9uIChtZWRpYXRvciwgb2xkTm90aWZpY2F0aW9ucykge1xuICAgICAgICB0aGlzLnJlbW92ZU9ic2VydmVycyhtZWRpYXRvciwgb2xkTm90aWZpY2F0aW9ucyk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJPYnNlcnZlcnMobWVkaWF0b3IpO1xuICAgIH07XG4gICAgVmlldy5pbnN0YW5jZU1hcCA9IHt9O1xuICAgIHJldHVybiBWaWV3O1xufSgpKTtcbmV4cG9ydHMuVmlldyA9IFZpZXc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WaWV3LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIENvbnRyb2xsZXJfMSA9IHJlcXVpcmUoXCIuL2NvbS9rb3JlZXovcHVyZW12Yy9Db250cm9sbGVyXCIpO1xuZXhwb3J0cy5Db250cm9sbGVyID0gQ29udHJvbGxlcl8xLkNvbnRyb2xsZXI7XG52YXIgRmFjYWRlXzEgPSByZXF1aXJlKFwiLi9jb20va29yZWV6L3B1cmVtdmMvRmFjYWRlXCIpO1xuZXhwb3J0cy5GYWNhZGUgPSBGYWNhZGVfMS5GYWNhZGU7XG52YXIgTWVkaWF0b3JfMSA9IHJlcXVpcmUoXCIuL2NvbS9rb3JlZXovcHVyZW12Yy9NZWRpYXRvclwiKTtcbmV4cG9ydHMuTWVkaWF0b3IgPSBNZWRpYXRvcl8xLk1lZGlhdG9yO1xudmFyIE1vZGVsXzEgPSByZXF1aXJlKFwiLi9jb20va29yZWV6L3B1cmVtdmMvTW9kZWxcIik7XG5leHBvcnRzLk1vZGVsID0gTW9kZWxfMS5Nb2RlbDtcbnZhciBOb3RpZmllcl8xID0gcmVxdWlyZShcIi4vY29tL2tvcmVlei9wdXJlbXZjL05vdGlmaWVyXCIpO1xuZXhwb3J0cy5Ob3RpZmllciA9IE5vdGlmaWVyXzEuTm90aWZpZXI7XG52YXIgUHJveHlfMSA9IHJlcXVpcmUoXCIuL2NvbS9rb3JlZXovcHVyZW12Yy9Qcm94eVwiKTtcbmV4cG9ydHMuUHJveHkgPSBQcm94eV8xLlByb3h5O1xudmFyIFB1cmVNVkNfMSA9IHJlcXVpcmUoXCIuL2NvbS9rb3JlZXovcHVyZW12Yy9QdXJlTVZDXCIpO1xuZXhwb3J0cy5QdXJlTVZDID0gUHVyZU1WQ18xLlB1cmVNVkM7XG52YXIgVmlld18xID0gcmVxdWlyZShcIi4vY29tL2tvcmVlei9wdXJlbXZjL1ZpZXdcIik7XG5leHBvcnRzLlZpZXcgPSBWaWV3XzEuVmlldztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCBwcmVmaXggPSAnfic7XG5cbi8qKlxuICogQ29uc3RydWN0b3IgdG8gY3JlYXRlIGEgc3RvcmFnZSBmb3Igb3VyIGBFRWAgb2JqZWN0cy5cbiAqIEFuIGBFdmVudHNgIGluc3RhbmNlIGlzIGEgcGxhaW4gb2JqZWN0IHdob3NlIHByb3BlcnRpZXMgYXJlIGV2ZW50IG5hbWVzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRXZlbnRzKCkge31cblxuLy9cbi8vIFdlIHRyeSB0byBub3QgaW5oZXJpdCBmcm9tIGBPYmplY3QucHJvdG90eXBlYC4gSW4gc29tZSBlbmdpbmVzIGNyZWF0aW5nIGFuXG4vLyBpbnN0YW5jZSBpbiB0aGlzIHdheSBpcyBmYXN0ZXIgdGhhbiBjYWxsaW5nIGBPYmplY3QuY3JlYXRlKG51bGwpYCBkaXJlY3RseS5cbi8vIElmIGBPYmplY3QuY3JlYXRlKG51bGwpYCBpcyBub3Qgc3VwcG9ydGVkIHdlIHByZWZpeCB0aGUgZXZlbnQgbmFtZXMgd2l0aCBhXG4vLyBjaGFyYWN0ZXIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGJ1aWx0LWluIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBub3Rcbi8vIG92ZXJyaWRkZW4gb3IgdXNlZCBhcyBhbiBhdHRhY2sgdmVjdG9yLlxuLy9cbmlmIChPYmplY3QuY3JlYXRlKSB7XG4gIEV2ZW50cy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vXG4gIC8vIFRoaXMgaGFjayBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgYF9fcHJvdG9fX2AgcHJvcGVydHkgaXMgc3RpbGwgaW5oZXJpdGVkIGluXG4gIC8vIHNvbWUgb2xkIGJyb3dzZXJzIGxpa2UgQW5kcm9pZCA0LCBpUGhvbmUgNS4xLCBPcGVyYSAxMSBhbmQgU2FmYXJpIDUuXG4gIC8vXG4gIGlmICghbmV3IEV2ZW50cygpLl9fcHJvdG9fXykgcHJlZml4ID0gZmFsc2U7XG59XG5cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgZXZlbnQgbGlzdGVuZXIuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29uY2U9ZmFsc2VdIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEVFKGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHRoaXMuZm4gPSBmbjtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5vbmNlID0gb25jZSB8fCBmYWxzZTtcbn1cblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyID0gbmV3IEVFKGZuLCBjb250ZXh0IHx8IGVtaXR0ZXIsIG9uY2UpXG4gICAgLCBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0pIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gbGlzdGVuZXIsIGVtaXR0ZXIuX2V2ZW50c0NvdW50Kys7XG4gIGVsc2UgaWYgKCFlbWl0dGVyLl9ldmVudHNbZXZ0XS5mbikgZW1pdHRlci5fZXZlbnRzW2V2dF0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2UgZW1pdHRlci5fZXZlbnRzW2V2dF0gPSBbZW1pdHRlci5fZXZlbnRzW2V2dF0sIGxpc3RlbmVyXTtcblxuICByZXR1cm4gZW1pdHRlcjtcbn1cblxuLyoqXG4gKiBDbGVhciBldmVudCBieSBuYW1lLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIFJlZmVyZW5jZSB0byB0aGUgYEV2ZW50RW1pdHRlcmAgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZ0IFRoZSBFdmVudCBuYW1lLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJFdmVudChlbWl0dGVyLCBldnQpIHtcbiAgaWYgKC0tZW1pdHRlci5fZXZlbnRzQ291bnQgPT09IDApIGVtaXR0ZXIuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgZWxzZSBkZWxldGUgZW1pdHRlci5fZXZlbnRzW2V2dF07XG59XG5cbi8qKlxuICogTWluaW1hbCBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UgdGhhdCBpcyBtb2xkZWQgYWdhaW5zdCB0aGUgTm9kZS5qc1xuICogYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiBhbiBhcnJheSBsaXN0aW5nIHRoZSBldmVudHMgZm9yIHdoaWNoIHRoZSBlbWl0dGVyIGhhcyByZWdpc3RlcmVkXG4gKiBsaXN0ZW5lcnMuXG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICB2YXIgbmFtZXMgPSBbXVxuICAgICwgZXZlbnRzXG4gICAgLCBuYW1lO1xuXG4gIGlmICh0aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgcmV0dXJuIG5hbWVzO1xuXG4gIGZvciAobmFtZSBpbiAoZXZlbnRzID0gdGhpcy5fZXZlbnRzKSkge1xuICAgIGlmIChoYXMuY2FsbChldmVudHMsIG5hbWUpKSBuYW1lcy5wdXNoKHByZWZpeCA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lKTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgcmV0dXJuIG5hbWVzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGV2ZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIHJlZ2lzdGVyZWQgbGlzdGVuZXJzLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgaGFuZGxlcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAoIWhhbmRsZXJzKSByZXR1cm4gW107XG4gIGlmIChoYW5kbGVycy5mbikgcmV0dXJuIFtoYW5kbGVycy5mbl07XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBoYW5kbGVycy5sZW5ndGgsIGVlID0gbmV3IEFycmF5KGwpOyBpIDwgbDsgaSsrKSB7XG4gICAgZWVbaV0gPSBoYW5kbGVyc1tpXS5mbjtcbiAgfVxuXG4gIHJldHVybiBlZTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBudW1iZXIgb2YgbGlzdGVuZXJzIGxpc3RlbmluZyB0byBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1iZXIgb2YgbGlzdGVuZXJzLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiBsaXN0ZW5lckNvdW50KGV2ZW50KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAoIWxpc3RlbmVycykgcmV0dXJuIDA7XG4gIGlmIChsaXN0ZW5lcnMuZm4pIHJldHVybiAxO1xuICByZXR1cm4gbGlzdGVuZXJzLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQ2FsbHMgZWFjaCBvZiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgZXZlbnQgaGFkIGxpc3RlbmVycywgZWxzZSBgZmFsc2VgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XVxuICAgICwgbGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgYXJnc1xuICAgICwgaTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKGxpc3RlbmVycy5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnMuZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgY2FzZSAxOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQpLCB0cnVlO1xuICAgICAgY2FzZSAyOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExKSwgdHJ1ZTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIpLCB0cnVlO1xuICAgICAgY2FzZSA0OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMpLCB0cnVlO1xuICAgICAgY2FzZSA1OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgNjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCwgYTUpLCB0cnVlO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm4uYXBwbHkobGlzdGVuZXJzLmNvbnRleHQsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoXG4gICAgICAsIGo7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChsaXN0ZW5lcnNbaV0ub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzW2ldLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgICBjYXNlIDE6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMik7IGJyZWFrO1xuICAgICAgICBjYXNlIDQ6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIsIGEzKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKCFhcmdzKSBmb3IgKGogPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgYXJnc1tqIC0gMV0gPSBhcmd1bWVudHNbal07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGlzdGVuZXJzW2ldLmZuLmFwcGx5KGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbihldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIGFkZExpc3RlbmVyKHRoaXMsIGV2ZW50LCBmbiwgY29udGV4dCwgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBvbmUtdGltZSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZShldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIGFkZExpc3RlbmVyKHRoaXMsIGV2ZW50LCBmbiwgY29udGV4dCwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgbGlzdGVuZXJzIG9mIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IG1hdGNoIHRoaXMgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IGhhdmUgdGhpcyBjb250ZXh0LlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIE9ubHkgcmVtb3ZlIG9uZS10aW1lIGxpc3RlbmVycy5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gdGhpcztcbiAgaWYgKCFmbikge1xuICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKFxuICAgICAgbGlzdGVuZXJzLmZuID09PSBmbiAmJlxuICAgICAgKCFvbmNlIHx8IGxpc3RlbmVycy5vbmNlKSAmJlxuICAgICAgKCFjb250ZXh0IHx8IGxpc3RlbmVycy5jb250ZXh0ID09PSBjb250ZXh0KVxuICAgICkge1xuICAgICAgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMCwgZXZlbnRzID0gW10sIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKFxuICAgICAgICBsaXN0ZW5lcnNbaV0uZm4gIT09IGZuIHx8XG4gICAgICAgIChvbmNlICYmICFsaXN0ZW5lcnNbaV0ub25jZSkgfHxcbiAgICAgICAgKGNvbnRleHQgJiYgbGlzdGVuZXJzW2ldLmNvbnRleHQgIT09IGNvbnRleHQpXG4gICAgICApIHtcbiAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIFJlc2V0IHRoZSBhcnJheSwgb3IgcmVtb3ZlIGl0IGNvbXBsZXRlbHkgaWYgd2UgaGF2ZSBubyBtb3JlIGxpc3RlbmVycy5cbiAgICAvL1xuICAgIGlmIChldmVudHMubGVuZ3RoKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGV2ZW50cy5sZW5ndGggPT09IDEgPyBldmVudHNbMF0gOiBldmVudHM7XG4gICAgZWxzZSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBsaXN0ZW5lcnMsIG9yIHRob3NlIG9mIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IFtldmVudF0gVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQ7XG5cbiAgaWYgKGV2ZW50KSB7XG4gICAgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcbiAgICBpZiAodGhpcy5fZXZlbnRzW2V2dF0pIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gQWxpYXMgbWV0aG9kcyBuYW1lcyBiZWNhdXNlIHBlb3BsZSByb2xsIGxpa2UgdGhhdC5cbi8vXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbjtcblxuLy9cbi8vIEV4cG9zZSB0aGUgcHJlZml4LlxuLy9cbkV2ZW50RW1pdHRlci5wcmVmaXhlZCA9IHByZWZpeDtcblxuLy9cbi8vIEFsbG93IGBFdmVudEVtaXR0ZXJgIHRvIGJlIGltcG9ydGVkIGFzIG1vZHVsZSBuYW1lc3BhY2UuXG4vL1xuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG1vZHVsZSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbn1cbiIsImV4cG9ydCBjbGFzcyBOYXZpZ2F0aW9uTm9kZSB7XG4gICAgY29uc3RydWN0b3IoeCwgeSwgeikge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLnogPSB6O1xuICAgICAgICB0aGlzLmNvbm5lY3RlZE5vZGVzID0gW107XG4gICAgICAgIHRoaXMub2NjdXBpZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpc0Nvbm5lY3RlZChvdGhlck5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGVkTm9kZXMuZmluZChub2RlID0+IG5vZGUueCA9PT0gb3RoZXJOb2RlLnhcbiAgICAgICAgICAgICYmIG5vZGUueSA9PT0gb3RoZXJOb2RlLnkgJiYgbm9kZS56ID09PSBvdGhlck5vZGUueikgIT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBlcXVhbHMob3RoZXJOb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggPT09IG90aGVyTm9kZS54ICYmIHRoaXMueSA9PT0gb3RoZXJOb2RlLnkgJiYgdGhpcy56ID09PSBvdGhlck5vZGUuejtcbiAgICB9XG5cbiAgICBlcXVhbHNQb2ludCh4LCB5LCB6KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggPT09IHggJiYgdGhpcy55ID09PSB5ICYmIHRoaXMueiA9PT0gejtcbiAgICB9XG5cbiAgICBhZGRDb25uZWN0ZWROb2RlKG90aGVyTm9kZSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNDb25uZWN0ZWQob3RoZXJOb2RlKSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWROb2Rlcy5wdXNoKG90aGVyTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNjb25uZWN0ZWROb2RlKG90aGVyTm9kZSkge1xuICAgICAgICBjb25zdCBjb25uZWN0ZWROb2RlSW5kZXggPSB0aGlzLmNvbm5lY3RlZE5vZGVzLmZpbmRJbmRleChub2RlID0+IG5vZGUuZXF1YWxzKG90aGVyTm9kZSkpO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZE5vZGVzLnNwbGljZShjb25uZWN0ZWROb2RlSW5kZXgsIDEpO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgR2FtZU1hcENvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnR2FtZU1hcENvbXBvbmVudCcpO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuR2FtZU1hcENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIlxuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi8uLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgR2FtZU1hcENvbXBvbmVudCB9IGZyb20gJy4vR2FtZU1hcENvbXBvbmVudCc7XG5pbXBvcnQgeyBJbnB1dExheWVyQ29tcG9uZW50IH0gZnJvbSAnLi4vaW5wdXRMYXllci9JbnB1dExheWVyQ29tcG9uZW50JztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIEdhbWVNYXBNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkdhbWVNYXBNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3RvcihtYXBHcmlkKSB7XG4gICAgICAgIHN1cGVyKEdhbWVNYXBNZWRpYXRvci5OQU1FKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24oW1xuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkNIQU5HRV9TQ0VORV9DT01QTEVURVxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkVfQ09NUExFVEU6XG4gICAgICAgICAgICAgICAgY29uc3QgZ2FtZVN0YXRlID0gdGhpcy5mYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKS52bztcbiAgICAgICAgICAgICAgICBjb25zdCBhcHAgPSBwYy5BcHBsaWNhdGlvbi5nZXRBcHBsaWNhdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmIChhcHApIHtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiY29uc3QgeyBHYW1lTWVkaWF0b3IgfSA9IHJlcXVpcmUoJy4uL3ZpZXcvR2FtZU1lZGlhdG9yJyk7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uTm9kZSB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uTm9kZSc7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhcic7XG5pbXBvcnQgeyBHYW1lTWFwTWVkaWF0b3IgfSBmcm9tICcuLi92aWV3L2dhbWVNYXAvR2FtZU1hcE1lZGlhdG9yJztcbmltcG9ydCB7IEdhbWVNYXBQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvR2FtZU1hcFByb3h5JztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUdhbWVNYXBDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lKSB7XG4gICAgLy8gT25jZSBhIGdhbWVNYXAgc2NlbmUgaXMgbG9hZGVkLCBwYXJzZSBnYW1lTWFwIFZPLCBnZW5lcmF0ZSBuYXYgbWVzaCwgZXRjXG4gICAgY29uc29sZS5sb2coJ1BhcnNlIG1hcCcpO1xuXG4gICAgLy8gR2V0IG5hdmlnYXRpb24gZmxvb3JzXG4gICAgY29uc3QgYXBwID0gcGMuQXBwbGljYXRpb24uZ2V0QXBwbGljYXRpb24oKTtcbiAgICBjb25zdCBuYXZpZ2F0aW9uRmxvb3JzID0gYXBwLnJvb3QuZmluZEJ5VGFnKCduYXZpZ2F0aW9uX2Zsb29yJyk7XG5cbiAgICBsZXQgY29tcGxldGVkR3JpZCA9IFtdO1xuXG4gICAgY29uc3QgbmF2aWdhdGlvbkNvbXBvbmVudHMgPSBbXTtcbiAgICAvLyBGaXJzdCBwYXJzZSAtIGNyZWF0ZSBub2RlcyBhbmQgY29ubmVjdGlvbnMgZm9yIGluZGl2aWR1YWwgXG4gICAgLy8gbmF2aWdhdGlvbiBjb21wb25lbnRzXG4gICAgZm9yIChjb25zdCBmbG9vckVudGl0eSBvZiBuYXZpZ2F0aW9uRmxvb3JzKSB7XG4gICAgICAgIGNvbnN0IG5hdkNvbXAgPSBmbG9vckVudGl0eS5zY3JpcHRbJ05hdmlnYXRpb25Db21wb25lbnQnXTtcbiAgICAgICAgbmF2aWdhdGlvbkNvbXBvbmVudHMucHVzaChuYXZDb21wKTtcblxuICAgICAgICBjb25zdCBmbG9vckdyaWQgPSBjcmVhdGVQYXJ0aWFsR3JpZEZyb21GbG9vcihmbG9vckVudGl0eSlcbiAgICAgICAgbmF2Q29tcC5zZXRHcmlkKGZsb29yR3JpZCk7XG4gICAgfVxuXG4gICAgLy8gU2Vjb25kIHBhcnNlIC0gc3RpdGNoIHRvZ2V0aGVyIGFkamFjZW50IG5vZGVzIGluIFxuICAgIC8vIGNvbm5lY3RlZCBuYXZpZ2F0aW9uIG1lc2hlc1xuICAgIGZvciAoY29uc3QgbmF2aWdhdGlvbkNvbXAgb2YgbmF2aWdhdGlvbkNvbXBvbmVudHMpIHtcbiAgICAgICAgZm9yIChjb25zdCBjb25uZWN0ZWRDb21wRW50aXR5IG9mIG5hdmlnYXRpb25Db21wLmNvbm5lY3RlZENvbXBvbmVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbm5lY3RlZE5hdkNvbXAgPSBjb25uZWN0ZWRDb21wRW50aXR5LnNjcmlwdFsnTmF2aWdhdGlvbkNvbXBvbmVudCddO1xuXG4gICAgICAgICAgICBqb2luVG9BZGphY2VudEdyaWQobmF2aWdhdGlvbkNvbXAuZ2V0R3JpZCgpLCBjb25uZWN0ZWROYXZDb21wLmdldEdyaWQoKSk7XG4gICAgICAgICAgICBjb21wbGV0ZWRHcmlkID0gY29tcGxldGVkR3JpZC5jb25jYXQobmF2aWdhdGlvbkNvbXAuZ2V0R3JpZCgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlZ2lzdGVyIG1lZGlhdG9yc1xuICAgIEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSkucmVnaXN0ZXJQcm94eShuZXcgR2FtZU1hcFByb3h5KGNvbXBsZXRlZEdyaWQpKTtcbiAgICBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpLnJlZ2lzdGVyTWVkaWF0b3IobmV3IEdhbWVNYXBNZWRpYXRvcigpKTtcblxuICAgIEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSkuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTUFQX0dSSURfQ1JFQVRFRCk7XG5cbn1cblxuZnVuY3Rpb24gY3JlYXRlUGFydGlhbEdyaWRGcm9tRmxvb3IoZmxvb3JFbnRpdHkpIHtcbiAgICAvLyBzbmFwIHRvIGdyaWRcbiAgICBjb25zdCBncmlkID0gW107XG5cbiAgICBjb25zdCBmbG9vclBvc2l0aW9uID0gZmxvb3JFbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpO1xuICAgIGNvbnN0IGZsb29yU2l6ZSA9IGZsb29yRW50aXR5LmdldExvY2FsU2NhbGUoKTtcblxuICAgIGNvbnN0IHNuYXBwZWRXaWR0aCA9IE1hdGgucm91bmQoZmxvb3JTaXplLngpO1xuICAgIGNvbnN0IHNuYXBwZWRCcmVhZHRoID0gTWF0aC5yb3VuZChmbG9vclNpemUueik7XG5cbiAgICBjb25zdCBzbmFwcGVkWCA9IE1hdGgucm91bmQoZmxvb3JQb3NpdGlvbi54IC0gKHNuYXBwZWRXaWR0aCAvIDIpKTtcbiAgICBjb25zdCBzbmFwcGVkWSA9IGZsb29yUG9zaXRpb24ueTtcbiAgICBjb25zdCBzbmFwcGVkWiA9IE1hdGgucm91bmQoZmxvb3JQb3NpdGlvbi56IC0gKHNuYXBwZWRCcmVhZHRoIC8gMikpO1xuXG5cblxuICAgIGZvciAobGV0IHogPSBzbmFwcGVkWjsgeiA8IHNuYXBwZWRaICsgc25hcHBlZEJyZWFkdGg7IHorKykge1xuICAgICAgICBmb3IgKGxldCB4ID0gc25hcHBlZFg7IHggPCBzbmFwcGVkWCArIHNuYXBwZWRXaWR0aDsgeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbmV3IE5hdmlnYXRpb25Ob2RlKHgsIHNuYXBwZWRZLCB6KTtcbiAgICAgICAgICAgIGdyaWQucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbm5lY3QgbmVpZ2hib3Vyc1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBncmlkKSB7XG4gICAgICAgIGZvciAoY29uc3Qgb3RoZXJOb2RlIG9mIGdyaWQpIHtcbiAgICAgICAgICAgIGlmIChvdGhlck5vZGUuZXF1YWxzUG9pbnQobm9kZS54IC0gMSwgbm9kZS55LCBub2RlLnopIHx8XG4gICAgICAgICAgICAgICAgb3RoZXJOb2RlLmVxdWFsc1BvaW50KG5vZGUueCArIDEsIG5vZGUueSwgbm9kZS56KSB8fFxuICAgICAgICAgICAgICAgIG90aGVyTm9kZS5lcXVhbHNQb2ludChub2RlLngsIG5vZGUueSwgbm9kZS56IC0gMSkgfHxcbiAgICAgICAgICAgICAgICBvdGhlck5vZGUuZXF1YWxzUG9pbnQobm9kZS54LCBub2RlLnksIG5vZGUueiArIDEpKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5hZGRDb25uZWN0ZWROb2RlKG90aGVyTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ3JpZDtcbn1cblxuZnVuY3Rpb24gam9pblRvQWRqYWNlbnRHcmlkKGdyaWQsIGdyaWRUb0pvaW4pIHtcbiAgICAvLyBDb25uZWN0IG5laWdoYm91cnNcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgZ3JpZCkge1xuICAgICAgICBmb3IgKGNvbnN0IG90aGVyTm9kZSBvZiBncmlkVG9Kb2luKSB7XG4gICAgICAgICAgICBpZiAob3RoZXJOb2RlLmVxdWFsc1BvaW50KG5vZGUueCAtIDEsIG5vZGUueSwgbm9kZS56KSB8fFxuICAgICAgICAgICAgICAgIG90aGVyTm9kZS5lcXVhbHNQb2ludChub2RlLnggKyAxLCBub2RlLnksIG5vZGUueikgfHxcbiAgICAgICAgICAgICAgICBvdGhlck5vZGUuZXF1YWxzUG9pbnQobm9kZS54LCBub2RlLnksIG5vZGUueiAtIDEpIHx8XG4gICAgICAgICAgICAgICAgb3RoZXJOb2RlLmVxdWFsc1BvaW50KG5vZGUueCwgbm9kZS55LCBub2RlLnogKyAxKSkge1xuICAgICAgICAgICAgICAgIG5vZGUuYWRkQ29ubmVjdGVkTm9kZShvdGhlck5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsImNvbnN0IHsgUHJveHkgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuXG5leHBvcnQgY2xhc3MgV2VhcG9uc1Byb3h5IGV4dGVuZHMgUHJveHkge1xuICAgIGdldCB2bygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YSgpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIldlYXBvbnNQcm94eVwiIH07XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKFdlYXBvbnNQcm94eS5OQU1FLCBkYXRhKTtcbiAgICB9XG5cbiAgICBnZXREYW1hZ2Uod2VhcG9uTmFtZSwgZGFtYWdlVGllcikge1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnZvKTtcbiAgICAgICAgZm9yIChjb25zdCBjYXRlZ29yeUtleSBpbiB0aGlzLnZvKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodGhpcy52bywgY2F0ZWdvcnlLZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSB0aGlzLnZvW2NhdGVnb3J5S2V5XTtcblxuICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChjYXRlZ29yeSwgd2VhcG9uTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhdGVnb3J5W3dlYXBvbk5hbWVdLmRhbWFnZVtNYXRoLm1pbihkYW1hZ2VUaWVyIC0gMSwgNildO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGZpbmQgd2VhcG9uOjogJHt3ZWFwb25OYW1lfWApO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBXZWFwb25zUHJveHkgfSBmcm9tICcuLi9tb2RlbC93ZWFwb25zL1dlYXBvbnNQcm94eSc7XG5jb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnR1cENvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAvLyBSZWdpc3RlciBhcHAtbGV2ZWwgbWVkaWF0b3JzL3Byb3hpZXMvY29tbWFuZHMgaGVyZVxuXG4gICAgLy8gQ3JlYXRlIGdhbWUgc3RhdGUgcHJveHlcbiAgICBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpLnJlZ2lzdGVyUHJveHkobmV3IEdhbWVTdGF0ZVByb3h5KCkpO1xuXG4gICAgLy8gTG9hZCB3ZWFwb25zIGRhdGEgYW5kIGNyZWF0ZSBwcm94eVxuICAgIGNvbnN0IGFwcCA9IHBjLkFwcGxpY2F0aW9uLmdldEFwcGxpY2F0aW9uKCk7XG4gICAgaWYgKGFwcCkge1xuICAgICAgICBjb25zdCB3ZWFwb25zRGF0YSA9IGFwcC5hc3NldHMuZ2V0KDQwNDE1NjMxKS5yZXNvdXJjZTtcbiAgICAgICAgRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KS5yZWdpc3RlclByb3h5KG5ldyBXZWFwb25zUHJveHkod2VhcG9uc0RhdGEpKTtcbiAgICB9XG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZVNjZW5lQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGFwcCA9IHBjLkFwcGxpY2F0aW9uLmdldEFwcGxpY2F0aW9uKCk7XG4gICAgY29uc3Qgc2NlbmVOYW1lID0gYXJnc1swXTtcbiAgICBjb25zb2xlLmxvZyhgQ2hhbmdpbmcgc2NlbmUgJHtzY2VuZU5hbWV9YCk7XG5cbiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHNjZW5lJ3Mgcm9vdCBvYmplY3RcbiAgICBjb25zdCBvbGRIaWVyYXJjaHkgPSBhcHAucm9vdC5maW5kQnlOYW1lKCdSb290Jyk7XG5cbiAgICAvLyBHZXQgdGhlIHBhdGggdG8gdGhlIHNjZW5lXG4gICAgY29uc3Qgc2NlbmUgPSBhcHAuc2NlbmVzLmZpbmQoc2NlbmVOYW1lKTtcblxuICAgIC8vIExvYWQgdGhlIHNjZW5lcyBlbnRpdHkgaGllcmFyY2h5XG4gICAgYXBwLnNjZW5lcy5sb2FkU2NlbmVIaWVyYXJjaHkoc2NlbmUudXJsLCBmdW5jdGlvbiAoZXJyLCBwYXJlbnQpIHtcbiAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgIGlmIChvbGRIaWVyYXJjaHkpIHtcbiAgICAgICAgICAgICAgICBvbGRIaWVyYXJjaHkuZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSkuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FX0NPTVBMRVRFLCBzY2VuZU5hbWUpO1xuICAgICAgICBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlBBUlNFX0dBTUVNQVAsIHNjZW5lTmFtZSk7XG5cbiAgICB9KTtcbn0iLCJleHBvcnQgZnVuY3Rpb24gc2h1ZmZsZUFycmF5KGFycmF5KSB7XG4gICAgbGV0IGN1cnJlbnRJbmRleCA9IGFycmF5Lmxlbmd0aFxuICAgIGxldCB0ZW1wb3JhcnlWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICBsZXQgcmFuZG9tSW5kZXggPSAtMTtcblxuICAgIC8vIFdoaWxlIHRoZXJlIHJlbWFpbiBlbGVtZW50cyB0byBzaHVmZmxlLi4uXG4gICAgd2hpbGUgKDAgIT09IGN1cnJlbnRJbmRleCkge1xuXG4gICAgICAgIC8vIFBpY2sgYSByZW1haW5pbmcgZWxlbWVudC4uLlxuICAgICAgICByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1cnJlbnRJbmRleCk7XG4gICAgICAgIGN1cnJlbnRJbmRleCAtPSAxO1xuXG4gICAgICAgIC8vIEFuZCBzd2FwIGl0IHdpdGggdGhlIGN1cnJlbnQgZWxlbWVudC5cbiAgICAgICAgdGVtcG9yYXJ5VmFsdWUgPSBhcnJheVtjdXJyZW50SW5kZXhdO1xuICAgICAgICBhcnJheVtjdXJyZW50SW5kZXhdID0gYXJyYXlbcmFuZG9tSW5kZXhdO1xuICAgICAgICBhcnJheVtyYW5kb21JbmRleF0gPSB0ZW1wb3JhcnlWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59XG4iLCJjb25zdCB7IFByb3h5IH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBzaHVmZmxlQXJyYXkgfSBmcm9tICcuLi8uLi91dGlscy9TaHVmZmxlQXJyYXknO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuY29uc3QgeyBDb21iYXRWTyB9ID0gcmVxdWlyZSgnLi9Db21iYXRWTycpO1xuXG5cbmV4cG9ydCBjbGFzcyBDb21iYXRQcm94eSBleHRlbmRzIFByb3h5IHtcbiAgICBnZXQgdm8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGEoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJDb21iYXRQcm94eVwiIH07XG5cbiAgICBjb25zdHJ1Y3RvcihwYXJ0aWNpcGFudHMpIHtcbiAgICAgICAgc3VwZXIoQ29tYmF0UHJveHkuTkFNRSwgbmV3IENvbWJhdFZPKHBhcnRpY2lwYW50cykpO1xuICAgIH1cblxuICAgIG9uUmVnaXN0ZXIoKSB7XG4gICAgICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IHRoaXMudm8ucGFydGljaXBhbnRzO1xuICAgICAgICB0aGlzLnBhcnRpY2lwYW50UHJveGllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0aWNpcGFudCBvZiBwYXJ0aWNpcGFudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRpY2lwYW50UHJveHkgPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgcGFydGljaXBhbnQpO1xuICAgICAgICAgICAgdGhpcy5wYXJ0aWNpcGFudFByb3hpZXMuc2V0KHBhcnRpY2lwYW50LCBwYXJ0aWNpcGFudFByb3h5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5leHRUdXJuKCkge1xuICAgICAgICBjb25zdCByb3VuZEluaXRpYXRpdmUgPSB0aGlzLnZvLnJvdW5kSW5pdGlhdGl2ZTtcblxuICAgICAgICBpZiAocm91bmRJbml0aWF0aXZlICYmIHJvdW5kSW5pdGlhdGl2ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0VHVybklkID0gcm91bmRJbml0aWF0aXZlLnNoaWZ0KCk7XG4gICAgICAgICAgICB0aGlzLnZvLmFjdGl2ZVBhcnRpY2lwYW50ID0gbmV4dFR1cm5JZDtcblxuICAgICAgICAgICAgaWYgKG5leHRUdXJuSWQgIT09ICdlbmRfcm91bmQnKSB7XG4gICAgICAgICAgICAgICAgLy8gTmV4dCBUdXJuXG4gICAgICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFLCBgVHVybiAke25leHRUdXJuSWR9YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJveHkgPSB0aGlzLnBhcnRpY2lwYW50UHJveGllcy5nZXQobmV4dFR1cm5JZCk7XG4gICAgICAgICAgICAgICAgcHJveHkucmVzZXRDb21iYXRUdXJuU3RhdGUoKTtcblxuICAgICAgICAgICAgICAgIGlmIChwcm94eS5pc05QQykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5FTkVNWV9UVVJOLCBuZXh0VHVybklkKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5BV0FJVF9QTEFZRVJfQ09NQkFUX0lOUFVULCBuZXh0VHVybklkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEVuZCByb3VuZFxuICAgICAgICAgICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNIT1dfVE9BU1RfTUVTU0FHRSwgYEVuZCByb3VuZGApO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ORVhUX0NPTUJBVF9ST1VORCk7XG4gICAgICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZXh0Um91bmQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCcvLy8vLy8vLy8vLy8vLy8vLycpO1xuICAgICAgICBjb25zb2xlLmxvZygnLy8gIE5ldyByb3VuZCAgLy8nKTtcbiAgICAgICAgY29uc29sZS5sb2coJy8vLy8vLy8vLy8vLy8vLy8vJyk7XG4gICAgICAgIGNvbnN0IGluaXRpYXRpdmVzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgW2NoYXJhY3RlcklkLCBwcm94eV0gb2YgdGhpcy5wYXJ0aWNpcGFudFByb3hpZXMuZW50cmllcygpKSB7XG4gICAgICAgICAgICBjb25zdCB2byA9IHByb3h5LnZvO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2by5pbml0aWF0aXZlOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpbml0aWF0aXZlcy5wdXNoKGNoYXJhY3RlcklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbml0aWF0aXZlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIEV2ZXJ5b25lIGlzIG91dCBvZiB0aGUgY29tYmF0IHNvbWVob3csIHByb2JhYmx5IGRlYWRcbiAgICAgICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkVORF9DT01CQVQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGVuZCBvZiByb3VuZCB0b2tlblxuICAgICAgICBpbml0aWF0aXZlcy5wdXNoKCdlbmRfcm91bmQnKTtcblxuICAgICAgICBsZXQgc2h1ZmZsZWRJbml0aWF0aXZlID0gc2h1ZmZsZUFycmF5KGluaXRpYXRpdmVzKTtcbiAgICAgICAgLy8gZW5zdXJlIHJvdW5kIGRvZXNuJ3Qgc3RhcnQgd2l0aCBcImVuZF9yb3VuZFwiXG4gICAgICAgIHdoaWxlIChzaHVmZmxlZEluaXRpYXRpdmVbMF0gPT09IFwiZW5kX3JvdW5kXCIpIHtcbiAgICAgICAgICAgIHNodWZmbGVkSW5pdGlhdGl2ZSA9IHNodWZmbGVBcnJheShzaHVmZmxlZEluaXRpYXRpdmUpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnZvLnJvdW5kSW5pdGlhdGl2ZSA9IHNodWZmbGVkSW5pdGlhdGl2ZTtcbiAgICB9XG5cbiAgICBnZXQgbmV4dFR1cm5DaGFyYWN0ZXJJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8ubmV4dFR1cm5DaGFyYWN0ZXJJZDtcbiAgICB9XG5cbiAgICBnZXQgYWN0aXZlUGFydGljaXBhbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmFjdGl2ZVBhcnRpY2lwYW50O1xuICAgIH1cblxuICAgIHNldCBhY3RpdmVQYXJ0aWNpcGFudCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZvLmFjdGl2ZVBhcnRpY2lwYW50ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmVtb3ZlQ2hhcmFjdGVyRnJvbUNvbWJhdChjaGFyYWN0ZXJJZCkge1xuICAgICAgICAvLyByZW1vdmUgZnJvbSBwYXJ0aWNjaXBhbnRzXG4gICAgICAgIHRoaXMucGFydGljaXBhbnRQcm94aWVzLmRlbGV0ZShjaGFyYWN0ZXJJZCk7XG4gICAgICAgIC8vIHJlbW92ZSBmcm9tIGluaXRpYXRpdmVcbiAgICAgICAgdGhpcy52by5yb3VuZEluaXRpYXRpdmUgPSB0aGlzLnZvLnJvdW5kSW5pdGlhdGl2ZS5maWx0ZXIoZSA9PiBlICE9PSBjaGFyYWN0ZXJJZCk7XG4gICAgfVxuXG59XG4iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgQ29tYmF0UHJveHkgfSBmcm9tICcuLi9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHknO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk8nO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRDb21iYXRDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgaW5zdGlnYXRpbmdDaGFyYWN0ZXJJZCA9IGFyZ3NbMF07XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFLCBcIlN0YXJ0IENvbWJhdFwiKTtcblxuICAgIGNvbnN0IGdhbWVTdGF0ZVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZVN0YXRlUHJveHkuTkFNRSk7XG4gICAgZ2FtZVN0YXRlUHJveHkudXBkYXRlR2FtZVN0YXRlVHlwZShnYW1lcGxheU1vZGVUeXBlcy5DT01CQVQpO1xuXG4gICAgY29uc3QgaW5zdGlnYXRpbmdDaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgaW5zdGlnYXRpbmdDaGFyYWN0ZXJJZCk7XG5cbiAgICAvLyBTZXR1cCB0aGUgY29tYmF0XG4gICAgY29uc3QgZGlydHlQYXJ0aWNpcGFudHMgPSBbJ3BsYXllciddLmNvbmNhdChpbnN0aWdhdGluZ0NoYXJhY3RlcklkKS5jb25jYXQoaW5zdGlnYXRpbmdDaGFyYWN0ZXJQcm94eS5jb21iYXRHcm91cCk7XG4gICAgLy8gcmVtb3ZlIGR1cGxpY2F0ZXNcbiAgICBjb25zdCBjbGVhblBhcnRpY2lwYW50cyA9IGRpcnR5UGFydGljaXBhbnRzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSwgcG9zLCBzZWxmKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmluZGV4T2YoaXRlbSkgPT0gcG9zO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcGxheWVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIFwicGxheWVyXCIpO1xuXG4gICAgZm9yIChjb25zdCBwYXJ0aWNpcGFudCBvZiBjbGVhblBhcnRpY2lwYW50cykge1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRU5EX01PVkVNRU5UICsgcGFydGljaXBhbnQpO1xuICAgICAgICBpZiAocGFydGljaXBhbnQgIT09IFwicGxheWVyXCIpIHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5DSEFSQUNURVJfTE9PS19BVCArIHBhcnRpY2lwYW50LCBwbGF5ZXJQcm94eS5jdXJyZW50Tm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBUkFDVEVSX0xPT0tfQVQgKyBwYXJ0aWNpcGFudCwgaW5zdGlnYXRpbmdDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGNvbnN0IGNvbWJhdFByb3h5ID0gbmV3IENvbWJhdFByb3h5KGNsZWFuUGFydGljaXBhbnRzKTtcbiAgICAvLyBjb25zb2xlLmxvZyhwYXJ0aWNpcGFudHMpO1xuICAgIGZhY2FkZS5yZWdpc3RlclByb3h5KGNvbWJhdFByb3h5KTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkVYVF9DT01CQVRfUk9VTkQpO1xuICAgIH0sIDIwMDApO1xufSIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBDb21iYXRQcm94eSB9IGZyb20gJy4uL21vZGVsL2NvbWJhdC9Db21iYXRQcm94eSc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Q29tYmF0VHVybkNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuXG4gICAgY29uc3QgZ2FtZVN0YXRlID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZVN0YXRlUHJveHkuTkFNRSk7XG4gICAgY29uc3QgY29tYmF0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShDb21iYXRQcm94eS5OQU1FKTtcblxuICAgIGlmIChnYW1lU3RhdGUudm8uZ2FtZXBsYXlNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5DT01CQVQpIHtcbiAgICAgICAgY29tYmF0UHJveHkubmV4dFR1cm4oKTtcbiAgICB9XG5cbn0iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgQ29tYmF0UHJveHkgfSBmcm9tICcuLi9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHknO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk8nO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbmV4dENvbWJhdFJvdW5kQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG5cbiAgICBjb25zdCBnYW1lU3RhdGUgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcbiAgICBjb25zdCBjb21iYXRQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KENvbWJhdFByb3h5Lk5BTUUpO1xuXG4gICAgaWYgKGdhbWVTdGF0ZS52by5nYW1lcGxheU1vZGUgPT09IGdhbWVwbGF5TW9kZVR5cGVzLkNPTUJBVCkge1xuICAgICAgICBjb21iYXRQcm94eS5uZXh0Um91bmQoKTtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5FWFRfQ09NQkFUX1RVUk4sIGNvbWJhdFByb3h5LnZvLm5leHRUdXJuQ2hhcmFjdGVySWQpO1xuXG4gICAgfVxuXG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGVuZENvbWJhdFR1cm5Db21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgICAgIGNvbnN0IGNvbWJhdFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoQ29tYmF0UHJveHkuTkFNRSk7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ISURFX1dBTEtBQkxFX0FSRUEpO1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkVYVF9DT01CQVRfVFVSTiwgY29tYmF0UHJveHkubmV4dFR1cm5DaGFyYWN0ZXJJZCk7XG4gICAgfSwgNTAwKTtcbn1cbiIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBDb21iYXRQcm94eSB9IGZyb20gJy4uL21vZGVsL2NvbWJhdC9Db21iYXRQcm94eSc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lTWFwUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lTWFwL0dhbWVNYXBQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmVteVR1cm5Db21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZW5lbXlJZCA9IGFyZ3NbMF07XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBnYW1lTWFwUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lTWFwUHJveHkuTkFNRSk7XG5cbiAgICBjb25zdCBlbmVteVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBlbmVteUlkKTtcbiAgICBjb25zdCBlbmVteUN1cnJlbnROb2RlID0gZW5lbXlQcm94eS5jdXJyZW50Tm9kZTtcbiAgICAvLyBmaW5kIGRlc2lyZWQgbW92ZSBwb3NpdGlvblxuICAgIGNvbnN0IHBsYXllclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBcInBsYXllclwiKTtcbiAgICBjb25zdCBwbGF5ZXJOb2RlID0gcGxheWVyUHJveHkuY3VycmVudE5vZGU7XG4gICAgY29uc3QgY29ubmVjdGVkTm9kZXMgPSBwbGF5ZXJOb2RlLmNvbm5lY3RlZE5vZGVzO1xuXG4gICAgLy8gQ2hlY2sgaWYgY2hhcmFjdGVyIGlzIGFscmVhZHkgYWRqYWNlbnQgdG8gdGFyZ2V0XG4gICAgY29uc3QgaXNBZGphY2VudCA9IGNvbm5lY3RlZE5vZGVzLnNvbWUobiA9PiBuLmVxdWFscyhlbmVteUN1cnJlbnROb2RlKSk7XG5cbiAgICAvLyB3ZSdyZSBhbHJlYWR5IHRoZXJlXG4gICAgaWYgKGlzQWRqYWNlbnQpIHtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlJFU09MVkVfQVRUQUNLLCBlbmVteVByb3h5LmlkLCBwbGF5ZXJQcm94eS5pZCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkVORF9DT01CQVRfVFVSTik7XG4gICAgICAgIH0sIDIwMDApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gY29ubmVjdGVkTm9kZXMuZmlsdGVyKG5vZGUgPT4gIW5vZGUub2NjdXBpZWQpO1xuXG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIEZpbmQgbmVhcmVzdCBub2RlXG4gICAgICAgIGxldCBub2RlID0gcmVzdWx0LnJlZHVjZSgoYSwgYikgPT4gZGlzdGFuY2VTcXJ0KGVuZW15Q3VycmVudE5vZGUsIGEpIDwgZGlzdGFuY2VTcXJ0KGVuZW15Q3VycmVudE5vZGUsIGIpID8gYSA6IGIpO1xuXG5cbiAgICAgICAgY29uc3QgcGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgoZW5lbXlDdXJyZW50Tm9kZSwgbm9kZSk7XG4gICAgICAgIGlmIChwYXRoICYmIHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gdHJpbSBtb3ZlbWVudFxuICAgICAgICAgICAgY29uc3Qgdm8gPSBlbmVteVByb3h5LnZvO1xuICAgICAgICAgICAgd2hpbGUgKHBhdGgubGVuZ3RoID4gdm8uYXZhaWxhYmxlTW92ZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBwYXRoLnNoaWZ0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBlbmQgcG9pbnQgaW4gYWRqYWNlbnQgdG8gdGFyZ2V0XG4gICAgICAgICAgICBjb25zdCBlbmRQb2ludCA9IHBhdGhbMF07XG4gICAgICAgICAgICBjb25zdCBlbmRwb2ludElzQWRqYWNlbnQgPSBjb25uZWN0ZWROb2Rlcy5zb21lKG4gPT4gbi5lcXVhbHMoZW5kUG9pbnQpKTtcblxuICAgICAgICAgICAgaWYgKGVuZHBvaW50SXNBZGphY2VudCkge1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5NT1ZFX0FMT05HX1BBVEhfQU5EX0FUVEFDSywgZW5lbXlJZCwgXCJwbGF5ZXJcIiwgcGF0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5OQVZJR0FURV9BTE9OR19QQVRIICsgZW5lbXlJZCwgcGF0aCk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgZW5lbXlQcm94eS5jdXJyZW50Tm9kZSA9IG5vZGU7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5FTkRfQ09NQkFUX1RVUk4pO1xuICAgICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5FTkRfQ09NQkFUX1RVUk4pO1xuICAgICAgICB9LCAxNTAwKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpc3RhbmNlU3FydChwMSwgcDIpIHtcbiAgICByZXR1cm4gTWF0aC5wb3cocDIueCAtIHAxLngsIDIpICsgTWF0aC5wb3cocDIueSAtIHAxLnksIDIpO1xufVxuIiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSBcIkBrb3JlZXovcHVyZS1tdmNcIjtcbmltcG9ydCB7IEdhbWVTdGF0ZVByb3h5IH0gZnJvbSBcIi4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eVwiO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tIFwiLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVZPXCI7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBDb21iYXRQcm94eSB9IGZyb20gJy4uL21vZGVsL2NvbWJhdC9Db21iYXRQcm94eSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RlZE5vZGVDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBnYW1lU3RhdGVQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVTdGF0ZVByb3h5Lk5BTUUpO1xuICAgIGNvbnN0IG5vZGUgPSBhcmdzWzBdO1xuXG4gICAgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5FWFBMT1JBVElPTikge1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkFWSUdBVEVfVE9fTk9ERSArIFwicGxheWVyXCIsIG5vZGUpO1xuICAgIH0gZWxzZSBpZiAoZ2FtZVN0YXRlUHJveHkuY3VycmVudE1vZGUgPT09IGdhbWVwbGF5TW9kZVR5cGVzLkNPTUJBVCkge1xuICAgICAgICBjb25zdCBjb21iYXRQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KENvbWJhdFByb3h5Lk5BTUUpO1xuICAgICAgICBpZiAoY29tYmF0UHJveHkuYWN0aXZlUGFydGljaXBhbnQgPT09IFwicGxheWVyXCIpIHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5DT01CQVRfTkFWSUdBVEVfVE9fTk9ERSwgXCJwbGF5ZXJcIiwgbm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IEdhbWVTdGF0ZVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVByb3h5JztcbmltcG9ydCB7IGdhbWVwbGF5TW9kZVR5cGVzIH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVZPJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbWJhdE5hdmlnYXRlVG9Ob2RlQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgaWQgPSBhcmdzWzBdO1xuICAgIGNvbnN0IHRhcmdldE5vZGUgPSBhcmdzWzFdO1xuXG4gICAgY29uc3QgZ2FtZUNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBpZCk7XG4gICAgY29uc3Qgdm8gPSBnYW1lQ2hhcmFjdGVyUHJveHkudm87XG4gICAgY29uc3QgbW92ZWFibGVOb2RlcyA9IEFzdGFyLmJyZWFkdGhGaXJzdFNlYXJjaCh2by5jdXJyZW50Tm9kZSwgdm8uYXZhaWxhYmxlTW92ZW1lbnQpO1xuXG4gICAgZm9yIChjb25zdCBub2RlIG9mIG1vdmVhYmxlTm9kZXMpIHtcbiAgICAgICAgaWYgKG5vZGUuZXF1YWxzKHRhcmdldE5vZGUpKSB7XG4gICAgICAgICAgICBoYW5kbGVWYWxpZE1vdmUoZmFjYWRlLCBnYW1lQ2hhcmFjdGVyUHJveHksIHRhcmdldE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVWYWxpZE1vdmUoZmFjYWRlLCBjaGFyYWN0ZXJQcm94eSwgdGFyZ2V0Tm9kZSkge1xuICAgIGNvbnN0IHZvID0gY2hhcmFjdGVyUHJveHkudm87XG4gICAgY29uc3QgcGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgodm8uY3VycmVudE5vZGUsIHRhcmdldE5vZGUpO1xuICAgIGlmIChwYXRoICYmIHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICB2by5hdmFpbGFibGVNb3ZlbWVudCAtPSAocGF0aC5sZW5ndGggLSAxKTsgLy8gRGV0cmFjdCBieSBvbmUuLi4gdGhlIGZpcnN0IHBhdGggbm9kZSBkb2Vzbid0IGNvdW50XG4gICAgICAgIGNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkhJREVfV0FMS0FCTEVfQVJFQSk7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5OQVZJR0FURV9BTE9OR19QQVRIICsgdm8uaWQsIHBhdGgpO1xuICAgIH1cbn0iLCJleHBvcnQgZnVuY3Rpb24gc2hvd1dhbGthYmxlQXJlYUNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCB3YWxrYWJsZU5vZGVzID0gYXJnc1swXTtcbiAgICBjb25zdCBhcHAgPSBwYy5BcHBsaWNhdGlvbi5nZXRBcHBsaWNhdGlvbigpO1xuICAgIGNvbnN0IHdhbGthYmxlVGlsZUFzc2V0ID0gYXBwLmFzc2V0cy5nZXQoNDAyMzU5NjYpO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGFwcC5yb290LmZpbmRCeU5hbWUoXCJXb3JsZE9iamVjdHNcIik7XG5cbiAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygd2Fsa2FibGVOb2Rlcykge1xuICAgICAgICBjb25zdCB0aWxlID0gd2Fsa2FibGVUaWxlQXNzZXQucmVzb3VyY2UuaW5zdGFudGlhdGUoKTtcbiAgICAgICAgdGlsZS5zZXRMb2NhbFBvc2l0aW9uKG5vZGUueCwgbm9kZS55LCBub2RlLnopO1xuICAgICAgICBjb250YWluZXIuYWRkQ2hpbGQodGlsZSk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gaGlkZVdhbGthYmxlQXJlYUNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBhcHAgPSBwYy5BcHBsaWNhdGlvbi5nZXRBcHBsaWNhdGlvbigpO1xuICAgIGNvbnN0IHdhbGthYmxlVGlsZUVudGl0aWVzID0gYXBwLnJvb3QuZmluZEJ5VGFnKCd3YWxrYWJsZV90aWxlJyk7XG4gICAgZm9yIChjb25zdCB3YWxrYWJsZVRpbGVFbnRpdHkgb2Ygd2Fsa2FibGVUaWxlRW50aXRpZXMpIHtcbiAgICAgICAgd2Fsa2FibGVUaWxlRW50aXR5LmRlc3Ryb3koKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuaW1wb3J0IHsgQXN0YXIgfSBmcm9tIFwiLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyXCI7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhd2FpdFBsYXllckNvbWJhdElucHV0Q29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGNoYXJhY3RlcklkID0gYXJnc1swXTtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuXG4gICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGNoYXJhY3RlcklkKTtcbiAgICBjb25zdCB2byA9IGNoYXJhY3RlclByb3h5LnZvO1xuICAgIGNvbnN0IG1vdmVhYmxlTm9kZXMgPSBBc3Rhci5icmVhZHRoRmlyc3RTZWFyY2godm8uY3VycmVudE5vZGUsIHZvLmF2YWlsYWJsZU1vdmVtZW50KTtcblxuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1dBTEtBQkxFX0FSRUEsIG1vdmVhYmxlTm9kZXMpO1xuXG59XG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tIFwiLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVZPXCI7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tIFwiLi9HYW1lQ29tbWFuZHNcIjtcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGVuZE1vdmVtZW50Q29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgaWQgPSBhcmdzWzBdO1xuICAgIGNvbnN0IGVuZE5vZGUgPSBhcmdzWzFdO1xuXG4gICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGlkKTtcbiAgICBjaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IGVuZE5vZGU7XG5cbiAgICBjb25zdCBnYW1lU3RhdGUgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcbiAgICBpZiAoZ2FtZVN0YXRlLmN1cnJlbnRNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5DT01CQVQpIHtcbiAgICAgICAgY29uc3QgY29tYmF0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShDb21iYXRQcm94eS5OQU1FKTtcblxuICAgICAgICBpZiAoY29tYmF0UHJveHkpIHtcbiAgICAgICAgICAgIGlmIChjb21iYXRQcm94eS5hY3RpdmVQYXJ0aWNpcGFudCA9PT0gXCJwbGF5ZXJcIikge1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5BV0FJVF9QTEFZRVJfQ09NQkFUX0lOUFVULCBpZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5FTkRfQ09NQkFUX1RVUk4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSAnQGtvcmVlei9wdXJlLW12Yyc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhcic7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBDb21iYXRQcm94eSB9IGZyb20gJy4uL21vZGVsL2NvbWJhdC9Db21iYXRQcm94eSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RlZEdhbWVDaGFyYWN0ZXJDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBnYW1lQ2hhcmFjdGVyRW50aXR5ID0gYXJnc1swXTtcbiAgICBjb25zdCBpZCA9IGdhbWVDaGFyYWN0ZXJFbnRpdHkuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uY2hhcmFjdGVySWQ7XG4gICAgY29uc3QgZ2FtZVN0YXRlUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcbiAgICBjb25zdCB0YXJnZXRDaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgaWQpO1xuICAgIGNvbnN0IHBsYXllckNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBcInBsYXllclwiKTtcblxuICAgIGlmIChnYW1lU3RhdGVQcm94eS5jdXJyZW50TW9kZSA9PT0gZ2FtZXBsYXlNb2RlVHlwZXMuRVhQTE9SQVRJT04pIHtcblxuICAgICAgICBjb25zdCBwYXRoVG9UYXJnZXQgPSBuYXZpZ2F0ZVRvQ2hhcmFjdGVyKHBsYXllckNoYXJhY3RlclByb3h5LCB0YXJnZXRDaGFyYWN0ZXJQcm94eSk7XG4gICAgICAgIGlmIChwYXRoVG9UYXJnZXQpIHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5OQVZJR0FURV9BTE9OR19QQVRIICsgXCJwbGF5ZXJcIiwgcGF0aFRvVGFyZ2V0KTtcblxuICAgICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5DT01CQVQpIHtcbiAgICAgICAgY29uc3QgY29tYmF0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShDb21iYXRQcm94eS5OQU1FKTtcbiAgICAgICAgaWYgKCFjb21iYXRQcm94eSB8fCBjb21iYXRQcm94eS5hY3RpdmVQYXJ0aWNpcGFudCAhPT0gXCJwbGF5ZXJcIikge1xuICAgICAgICAgICAgLy8gbm90IHlvdXIgdHVyblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1RhcmdldEFkamFjZW50KHBsYXllckNoYXJhY3RlclByb3h5LCB0YXJnZXRDaGFyYWN0ZXJQcm94eSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhUb1RhcmdldCA9IG5hdmlnYXRlVG9DaGFyYWN0ZXIocGxheWVyQ2hhcmFjdGVyUHJveHksIHRhcmdldENoYXJhY3RlclByb3h5KTtcbiAgICAgICAgICAgIC8vIHBhdGggbGVuZ3RoIGluY2x1ZGVzIGN1cnJlbnQgbm9kZSwgc28gZGVkdWN0IG9uIHRvIHdvcmsgb3V0IGFjdHVhbCBtb3ZlYWJsZSBkaXN0YW5jZVxuICAgICAgICAgICAgaWYgKHBhdGhUb1RhcmdldCAmJiBwYXRoVG9UYXJnZXQubGVuZ3RoIC0gMSA8PSBwbGF5ZXJDaGFyYWN0ZXJQcm94eS52by5hdmFpbGFibGVNb3ZlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChnYW1lU3RhdGVQcm94eS5jdXJyZW50QWN0aW9uID09PSAnYXR0YWNrJykge1xuICAgICAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTU9WRV9BTE9OR19QQVRIX0FORF9BVFRBQ0ssIFwicGxheWVyXCIsIHRhcmdldENoYXJhY3RlclByb3h5LmlkLCBwYXRoVG9UYXJnZXQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5DT01CQVRfTkFWSUdBVEVfVE9fTk9ERSwgXCJwbGF5ZXJcIiwgcGF0aFRvVGFyZ2V0LnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNIT1dfVE9BU1RfTUVTU0FHRSwgXCJDYW5ub3QgcmVhY2ggdGFyZ2V0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRBY3Rpb24gPT09ICdhdHRhY2snKSB7XG4gICAgICAgICAgICBpZiAoZ2FtZVN0YXRlUHJveHkuY3VycmVudEFjdGlvbiA9PT0gJ2F0dGFjaycpIHtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuUkVTT0xWRV9BVFRBQ0ssIHBsYXllckNoYXJhY3RlclByb3h5LmlkLCB0YXJnZXRDaGFyYWN0ZXJQcm94eS5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5hdmlnYXRlVG9DaGFyYWN0ZXIocGxheWVyQ2hhcmFjdGVyUHJveHksIHRhcmdldENoYXJhY3RlclByb3h5KSB7XG4gICAgY29uc3QgY29ubmVjdGVkTm9kZXMgPSB0YXJnZXRDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZS5jb25uZWN0ZWROb2RlcztcblxuICAgIGNvbnN0IHVub2NjdXBpZWROb2RlcyA9IGNvbm5lY3RlZE5vZGVzLmZpbHRlcihub2RlID0+ICFub2RlLm9jY3VwaWVkKTtcbiAgICBpZiAodW5vY2N1cGllZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgcGxheWVyTm9kZSA9IHBsYXllckNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlO1xuXG4gICAgICAgIGxldCBzaG9ydGVzdFBhdGggPSBBc3Rhci5jYWxjdWxhdGVQYXRoKHBsYXllck5vZGUsIHVub2NjdXBpZWROb2Rlc1swXSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB1bm9jY3VwaWVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG90aGVyUGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgocGxheWVyTm9kZSwgdW5vY2N1cGllZE5vZGVzW2ldKTtcbiAgICAgICAgICAgIGlmIChvdGhlclBhdGgubGVuZ3RoIDwgc2hvcnRlc3RQYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNob3J0ZXN0UGF0aCA9IG90aGVyUGF0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzaG9ydGVzdFBhdGg7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzVGFyZ2V0QWRqYWNlbnQocGxheWVyQ2hhcmFjdGVyUHJveHksIHRhcmdldENoYXJhY3RlclByb3h5KSB7XG4gICAgY29uc3QgdGFyZ2V0Q3VycnJlbnROb2RlID0gdGFyZ2V0Q2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGU7XG4gICAgY29uc3QgY29ubmVjdGVkTm9kZXMgPSBwbGF5ZXJDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZS5jb25uZWN0ZWROb2RlcztcbiAgICByZXR1cm4gY29ubmVjdGVkTm9kZXMuc29tZShuID0+IG4uZXF1YWxzKHRhcmdldEN1cnJyZW50Tm9kZSkpO1xufSIsImltcG9ydCB7IEdhbWVTdGF0ZVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVByb3h5JztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlUGxheWVyQWN0aW9uQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgYWN0aW9uTmFtZSA9IGFyZ3NbMF07XG4gICAgY29uc3QgZ2FtZVN0YXRlUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcblxuICAgIGlmIChnYW1lU3RhdGVQcm94eS5jdXJyZW50QWN0aW9uID09PSBhY3Rpb25OYW1lKSB7XG4gICAgICAgIC8vIERlc2VsZWN0IGFjdGlvblxuICAgICAgICBnYW1lU3RhdGVQcm94eS5jdXJyZW50QWN0aW9uID0gXCJub25lXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2FtZVN0YXRlUHJveHkuY3VycmVudEFjdGlvbiA9IGFjdGlvbk5hbWU7XG4gICAgfVxuXG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfUExBWUVSX0FDVElPTiwgZ2FtZVN0YXRlUHJveHkuY3VycmVudEFjdGlvbik7XG59IiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSBcIkBrb3JlZXovcHVyZS1tdmNcIjtcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IFdlYXBvbnNQcm94eSB9IGZyb20gJy4uL21vZGVsL3dlYXBvbnMvV2VhcG9uc1Byb3h5JztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVBdHRhY2tDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcblxuICAgIGNvbnN0IGF0dGFja2VySWQgPSBhcmdzWzBdO1xuICAgIGNvbnN0IGF0dGFja2VyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGF0dGFja2VySWQpO1xuICAgIGNvbnN0IGRlZmVuZGVySWQgPSBhcmdzWzFdO1xuICAgIGNvbnN0IGRlZmVuZGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGRlZmVuZGVySWQpO1xuXG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkNIQVJBQ1RFUl9MT09LX0FUICsgYXR0YWNrZXJJZCwgZGVmZW5kZXJQcm94eS5jdXJyZW50Tm9kZSk7XG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkNIQVJBQ1RFUl9MT09LX0FUICsgZGVmZW5kZXJJZCwgYXR0YWNrZXJQcm94eS5jdXJyZW50Tm9kZSk7XG5cbiAgICBjb25zdCBhdHRhY2tlclJvbGwgPSByb2xsQXR0YWNrU2tpbGwoYXR0YWNrZXJQcm94eS5za2lsbCk7XG4gICAgY29uc3QgZGVmZW5kZXJSb2xsID0gcm9sbEF0dGFja1NraWxsKGF0dGFja2VyUHJveHkuc2tpbGwpO1xuXG4gICAgY29uc3Qgd2VhcG9uc1Byb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoV2VhcG9uc1Byb3h5Lk5BTUUpO1xuXG4gICAgLy8gRGV0ZXJtaW5lIHdpbm5lclxuICAgIGlmIChhdHRhY2tlclJvbGwgPT09IGRlZmVuZGVyUm9sbCkge1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFLCBgQXR0YWNrIHRpZWQoJHthdHRhY2tlclJvbGx9LyR7ZGVmZW5kZXJSb2xsfSlgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYXR0YWNrZXJSb2xsID4gZGVmZW5kZXJSb2xsKSB7XG4gICAgICAgICAgICAvLyBBdHRhY2tlciB3aW5zXG4gICAgICAgICAgICBjb25zdCBkYW1hZ2VUaWVyID0gZGV0ZXJtaW5lRGFtYWdlVGllcihhdHRhY2tlclJvbGwsIGRlZmVuZGVyUm9sbCk7XG4gICAgICAgICAgICBjb25zdCBkYW1hZ2UgPSB3ZWFwb25zUHJveHkuZ2V0RGFtYWdlKFwic3dvcmRcIiwgZGFtYWdlVGllcik7XG4gICAgICAgICAgICBkZWZlbmRlclByb3h5LmFwcGx5RGFtYWdlKGRhbWFnZSk7XG5cbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ESVNQTEFZX0FUVEFDSyArIGF0dGFja2VySWQpO1xuXG4gICAgICAgICAgICBpZiAoZGVmZW5kZXJQcm94eS5pc0RlYWQpIHtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRElTUExBWV9ERUFUSCArIGRlZmVuZGVySWQpO1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5LSUxMX0dBTUVfQ0hBUkFDVEVSLCBkZWZlbmRlcklkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfSElUICsgZGVmZW5kZXJJZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIGAke2F0dGFja2VySWR9IGRhbWFnZXMgJHtkZWZlbmRlcklkfSBmb3IgJHtkYW1hZ2V9YCk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIERlZmVuZGVyIHdpbnNcbiAgICAgICAgICAgIGNvbnN0IGRhbWFnZVRpZXIgPSBkZXRlcm1pbmVEYW1hZ2VUaWVyKGRlZmVuZGVyUm9sbCwgYXR0YWNrZXJSb2xsKTtcbiAgICAgICAgICAgIGNvbnN0IGRhbWFnZSA9IHdlYXBvbnNQcm94eS5nZXREYW1hZ2UoXCJzd29yZFwiLCBkYW1hZ2VUaWVyKTtcbiAgICAgICAgICAgIGF0dGFja2VyUHJveHkuYXBwbHlEYW1hZ2UoZGFtYWdlKTtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIGAke2RlZmVuZGVySWR9IGRhbWFnZXMgJHthdHRhY2tlcklkfSBmb3IgJHtkYW1hZ2V9YCk7XG5cbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ESVNQTEFZX0FUVEFDSyArIGRlZmVuZGVySWQpO1xuXG4gICAgICAgICAgICBpZiAoYXR0YWNrZXJQcm94eS5pc0RlYWQpIHtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRElTUExBWV9ERUFUSCArIGF0dGFja2VySWQpO1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5LSUxMX0dBTUVfQ0hBUkFDVEVSLCBhdHRhY2tlcklkKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRElTUExBWV9ISVQgKyBhdHRhY2tlcklkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZXRlcm1pbmVEYW1hZ2VUaWVyKGhpZ2hEYW1hZ2UsIGxvd0RhbWFnZSkge1xuICAgIHJldHVybiBoaWdoRGFtYWdlIC0gbG93RGFtYWdlO1xufVxuXG5mdW5jdGlvbiByb2xsQXR0YWNrU2tpbGwoc2tpbGwpIHtcbiAgICByZXR1cm4gc2tpbGwgKyByb2xsRGljZSgpICsgcm9sbERpY2UoKTtcbn1cblxuZnVuY3Rpb24gcm9sbERpY2UoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDYpO1xufSIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyTWVkaWF0b3IgfSBmcm9tICcuLi92aWV3L2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3Rlck1lZGlhdG9yJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVBbG9uZ1BhdGhBbmRBdHRhY2tDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IGFyZ3NbMF07XG4gICAgY29uc3QgdGFyZ2V0SWQgPSBhcmdzWzFdO1xuICAgIGNvbnN0IHBhdGggPSBhcmdzWzJdO1xuXG4gICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGNoYXJhY3RlcklkKTtcbiAgICBjaGFyYWN0ZXJQcm94eS51c2VNb3ZlbWVudChwYXRoLmxlbmd0aCAtIDEpO1xuICAgIGNvbnN0IGNoYXJhY3Rlck1lZGlhdG9yID0gZmFjYWRlLnJldHJpZXZlTWVkaWF0b3IoR2FtZUNoYXJhY3Rlck1lZGlhdG9yLk5BTUUgKyBjaGFyYWN0ZXJJZCk7XG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkhJREVfV0FMS0FCTEVfQVJFQSk7XG5cbiAgICBjb25zdCBmaW5pc2hNb3ZlUHJvbWlzZSA9IGNoYXJhY3Rlck1lZGlhdG9yLmhhbmRsZU5hdmlnYXRlQWxvbmdQYXRoV2l0aFByb21pc2UocGF0aCk7XG4gICAgZmluaXNoTW92ZVByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5SRVNPTFZFX0FUVEFDSywgY2hhcmFjdGVySWQsIHRhcmdldElkKTtcblxuICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSBcIkBrb3JlZXovcHVyZS1tdmNcIjtcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcblxuXG5leHBvcnQgZnVuY3Rpb24ga2lsbEdhbWVDaGFyYWN0ZXJDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IGFyZ3NbMF07XG4gICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGNoYXJhY3RlcklkKTtcbiAgICBpZiAoY2hhcmFjdGVyUHJveHkpIHtcbiAgICAgICAgY2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUub2NjdXBpZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBjb21iYXRQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KENvbWJhdFByb3h5Lk5BTUUpO1xuICAgIGlmIChjb21iYXRQcm94eSkge1xuICAgICAgICBjb21iYXRQcm94eS5yZW1vdmVDaGFyYWN0ZXJGcm9tQ29tYmF0KGNoYXJhY3RlcklkKTtcbiAgICB9XG5cbn0iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgQ29tYmF0UHJveHkgfSBmcm9tICcuLi9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHknO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk8nO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5kQ29tYmF0Q29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgaWYgKGZhY2FkZS5oYXNNZWRpYXRvcihDb21iYXRQcm94eS5OQU1FKSkge1xuICAgICAgICBmYWNhZGUucmVtb3ZlTWVkaWF0b3IoQ29tYmF0UHJveHkuTkFNRSk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2FtZVN0YXRlUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcbiAgICBnYW1lU3RhdGVQcm94eS51cGRhdGVHYW1lU3RhdGVUeXBlKGdhbWVwbGF5TW9kZVR5cGVzLkVYUExPUkFUSU9OKTtcbn1cbiIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IHBhcnNlR2FtZU1hcENvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvUGFyc2VHYW1lTWFwQ29tbWFuZCc7XG5pbXBvcnQgeyBzdGFydHVwQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9TdGFydHVwQ29tbWFuZCc7XG5pbXBvcnQgeyBjaGFuZ2VTY2VuZUNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvQ2hhbmdlU2NlbmVDb21tYW5kJztcbmltcG9ydCB7IHN0YXJ0Q29tYmF0Q29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9TdGFydENvbWJhdENvbW1hbmQnO1xuaW1wb3J0IHsgbmV4dENvbWJhdFR1cm5Db21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL05leHRDb21iYXRUdXJuQ29tbWFuZCc7XG5pbXBvcnQgeyBuZXh0Q29tYmF0Um91bmRDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL05leHRDb21iYXRSb3VuZENvbW1hbmQnO1xuaW1wb3J0IHsgZW5kQ29tYmF0VHVybkNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvRW5kQ29tYmF0VHVybkNvbW1hbmQnO1xuaW1wb3J0IHsgZW5lbXlUdXJuQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9FbmVteVR1cm5Db21tYW5kJztcbmltcG9ydCB7IHNlbGVjdGVkTm9kZUNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvU2VsZWN0ZWROb2RlQ29tbWFuZCc7XG5pbXBvcnQgeyBjb21iYXROYXZpZ2F0ZVRvTm9kZUNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvQ29tYmF0TmF2aWdhdGVUb05vZGVDb21tYW5kJztcbmltcG9ydCB7IHNob3dXYWxrYWJsZUFyZWFDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL1Nob3dXYWxrYWJsZUFyZWFDb21tYW5kJztcbmltcG9ydCB7IGhpZGVXYWxrYWJsZUFyZWFDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0hpZGVXYWxrYWJsZUFyZWFDb21tYW5kJztcbmltcG9ydCB7IGF3YWl0UGxheWVyQ29tYmF0SW5wdXRDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0F3YWl0UGxheWVyQ29tYmF0SW5wdXRDb21tYW5kJztcbmltcG9ydCB7IGVuZE1vdmVtZW50Q29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9FbmRNb3ZlbWVudENvbW1hbmQnO1xuaW1wb3J0IHsgc2VsZWN0ZWRHYW1lQ2hhcmFjdGVyQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9TZWxlY3RlZEdhbWVDaGFyYWN0ZXJDb21tYW5kJztcbmltcG9ydCB7IGNoYW5nZVBsYXllckFjdGlvbkNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvQ2hhbmdlUGxheWVyQWN0aW9uQ29tbWFuZCc7XG5pbXBvcnQgeyByZXNvbHZlQXR0YWNrQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9SZXNvbHZlQXR0YWNrQ29tbWFuZCc7XG5pbXBvcnQgeyBtb3ZlQWxvbmdQYXRoQW5kQXR0YWNrQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9Nb3ZlQWxvbmdQYXRoQW5kQXR0YWNrQ29tbWFuZCc7XG5pbXBvcnQgeyBraWxsR2FtZUNoYXJhY3RlckNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvS2lsbEdhbWVDaGFyYWN0ZXJDb21tYW5kJztcbmltcG9ydCB7IGVuZENvbWJhdENvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvRW5kQ29tYmF0Q29tbWFuZCc7XG5cbmV4cG9ydCBjbGFzcyBHYW1lRmFjYWRlIGV4dGVuZHMgRmFjYWRlIHtcbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2Uoa2V5KSB7XG4gICAgICAgIGlmICghRmFjYWRlLmluc3RhbmNlTWFwW2tleV0pIHtcbiAgICAgICAgICAgIEZhY2FkZS5pbnN0YW5jZU1hcFtrZXldID0gbmV3IEdhbWVGYWNhZGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRmFjYWRlLmluc3RhbmNlTWFwW2tleV07XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBLRVkoKSB7IHJldHVybiBcIkNhY29nZW5cIiB9O1xuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiQ2Fjb2dlbkZhY2FkZVwiIH07XG4gICAgc3RhdGljIGdldCBTVEFSVFVQKCkgeyByZXR1cm4gR2FtZUZhY2FkZS5OQU1FICsgXCJTdGFydFVwXCIgfTtcblxuICAgIHN0YXJ0dXAoZ2FtZSkge1xuICAgICAgICB0aGlzLnNlbmROb3RpZmljYXRpb24oR2FtZUZhY2FkZS5TVEFSVFVQLCBnYW1lKTtcbiAgICB9XG5cbiAgICBzZW5kTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3VwZXIuc2VuZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplQ29udHJvbGxlcigpIHtcbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZUNvbnRyb2xsZXIoKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUZhY2FkZS5TVEFSVFVQLCBzdGFydHVwQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkUsIGNoYW5nZVNjZW5lQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5QQVJTRV9HQU1FTUFQLCBwYXJzZUdhbWVNYXBDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLlNUQVJUX0NPTUJBVCwgc3RhcnRDb21iYXRDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLk5FWFRfQ09NQkFUX1RVUk4sIG5leHRDb21iYXRUdXJuQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5ORVhUX0NPTUJBVF9ST1VORCwgbmV4dENvbWJhdFJvdW5kQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5FTkRfQ09NQkFUX1RVUk4sIGVuZENvbWJhdFR1cm5Db21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkVORU1ZX1RVUk4sIGVuZW15VHVybkNvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuU0VMRUNURURfTk9ERSwgc2VsZWN0ZWROb2RlQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5DT01CQVRfTkFWSUdBVEVfVE9fTk9ERSwgY29tYmF0TmF2aWdhdGVUb05vZGVDb21tYW5kKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuU0hPV19XQUxLQUJMRV9BUkVBLCBzaG93V2Fsa2FibGVBcmVhQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5ISURFX1dBTEtBQkxFX0FSRUEsIGhpZGVXYWxrYWJsZUFyZWFDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkFXQUlUX1BMQVlFUl9DT01CQVRfSU5QVVQsIGF3YWl0UGxheWVyQ29tYmF0SW5wdXRDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkZJTklTSEVEX01PVkUsIGVuZE1vdmVtZW50Q29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5TRUxFQ1RfR0FNRV9DSEFSQUNURVIsIHNlbGVjdGVkR2FtZUNoYXJhY3RlckNvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuU0VUX1BMQVlFUl9BQ1RJT04sIGNoYW5nZVBsYXllckFjdGlvbkNvbW1hbmQpO1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5SRVNPTFZFX0FUVEFDSywgcmVzb2x2ZUF0dGFja0NvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuTU9WRV9BTE9OR19QQVRIX0FORF9BVFRBQ0ssIG1vdmVBbG9uZ1BhdGhBbmRBdHRhY2tDb21tYW5kKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuS0lMTF9HQU1FX0NIQVJBQ1RFUiwga2lsbEdhbWVDaGFyYWN0ZXJDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkVORF9DT01CQVQsIGVuZENvbWJhdENvbW1hbmQpO1xuICAgIH1cblxufSIsImV4cG9ydCBjbGFzcyBHYW1lQ29tbWFuZHMge1xuICAgIHN0YXRpYyBnZXQgQ0hBTkdFX1NDRU5FKCkgeyByZXR1cm4gXCJDSEFOR0VfU0NFTkVcIiB9O1xuICAgIHN0YXRpYyBnZXQgQ0hBTkdFX1NDRU5FX0NPTVBMRVRFKCkgeyByZXR1cm4gXCJDSEFOR0VfU0NFTkVfQ09NUExFVEVcIiB9O1xuICAgIHN0YXRpYyBnZXQgQVBQX0lOSVRJQUxJU0VEKCkgeyByZXR1cm4gXCJBUFBfSU5JVElBTElTRURcIiB9O1xuICAgIHN0YXRpYyBnZXQgUEFSU0VfR0FNRU1BUCgpIHsgcmV0dXJuIFwiUEFSU0VfR0FNRU1BUFwiIH07XG4gICAgc3RhdGljIGdldCBNQVBfR1JJRF9DUkVBVEVEKCkgeyByZXR1cm4gXCJNQVBfR1JJRF9DUkVBVEVEXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgTkFWSUdBVEVfVE9fTk9ERSgpIHsgcmV0dXJuIFwiTkFWSUdBVEVfVE9fTk9ERVwiIH07XG4gICAgc3RhdGljIGdldCBDT01CQVRfTkFWSUdBVEVfVE9fTk9ERSgpIHsgcmV0dXJuIFwiQ09NQkFUX05BVklHQVRFX1RPX05PREVcIiB9O1xuICAgIHN0YXRpYyBnZXQgU0VUX0NBTUVSQV9UQVJHRVQoKSB7IHJldHVybiBcIlNFVF9DQU1FUkFfVEFSR0VUXCIgfTtcbiAgICBzdGF0aWMgZ2V0IElOUFVUX0RSQUdfTU9VU0UoKSB7IHJldHVybiBcIklOUFVUX0RSQUdfTU9VU0VcIiB9O1xuXG4gICAgc3RhdGljIGdldCBNT1ZFRF9UT19OT0RFKCkgeyByZXR1cm4gXCJNT1ZFRF9UT19OT0RFXCIgfTtcbiAgICBzdGF0aWMgZ2V0IEZJTklTSEVEX01PVkUoKSB7IHJldHVybiBcIkZJTklTSEVEX01PVkVcIiB9O1xuICAgIHN0YXRpYyBnZXQgU1RBUlRfQ09NQkFUKCkgeyByZXR1cm4gXCJTVEFSVF9DT01CQVRcIiB9O1xuICAgIHN0YXRpYyBnZXQgU0hPV19UT0FTVF9NRVNTQUdFKCkgeyByZXR1cm4gXCJTSE9XX1RPQVNUX01FU1NBR0VcIiB9O1xuXG4gICAgc3RhdGljIGdldCBORVhUX0NPTUJBVF9UVVJOKCkgeyByZXR1cm4gXCJORVhUX0NPTUJBVF9UVVJOXCIgfTtcbiAgICBzdGF0aWMgZ2V0IE5FWFRfQ09NQkFUX1JPVU5EKCkgeyByZXR1cm4gXCJORVhUX0NPTUJBVF9ST1VORFwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IEVORF9DT01CQVQoKSB7IHJldHVybiBcIkVORF9DT01CQVRcIiB9O1xuICAgIHN0YXRpYyBnZXQgRU5EX0NPTUJBVF9UVVJOKCkgeyByZXR1cm4gXCJFTkRfQ09NQkFUX1RVUk5cIiB9O1xuICAgIHN0YXRpYyBnZXQgRU5FTVlfVFVSTigpIHsgcmV0dXJuIFwiRU5FTVlfVFVSTlwiIH07XG4gICAgc3RhdGljIGdldCBTRUxFQ1RFRF9OT0RFKCkgeyByZXR1cm4gXCJTRUxFQ1RFRF9OT0RFXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgTkFWSUdBVEVfQUxPTkdfUEFUSCgpIHsgcmV0dXJuIFwiTkFWSUdBVEVfQUxPTkdfUEFUSFwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IFNIT1dfV0FMS0FCTEVfQVJFQSgpIHsgcmV0dXJuIFwiU0hPV19XQUxLQUJMRV9BUkVBXCIgfTtcbiAgICBzdGF0aWMgZ2V0IEhJREVfV0FMS0FCTEVfQVJFQSgpIHsgcmV0dXJuIFwiSElERV9XQUxLQUJMRV9BUkVBXCIgfTtcblxuXG4gICAgc3RhdGljIGdldCBFTkRfTU9WRU1FTlQoKSB7IHJldHVybiBcIkVORF9NT1ZFTUVOVFwiIH07XG4gICAgc3RhdGljIGdldCBBV0FJVF9QTEFZRVJfQ09NQkFUX0lOUFVUKCkgeyByZXR1cm4gXCJBV0FJVF9QTEFZRVJfQ09NQkFUX0lOUFVUXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFNFVF9DSEFSQUNURVJfVE9fTk9ERSgpIHsgcmV0dXJuIFwiU0VUX0NIQVJBQ1RFUl9UT19OT0RFXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgU0VMRUNUX0dBTUVfQ0hBUkFDVEVSKCkgeyByZXR1cm4gXCJTRUxFQ1RfR0FNRV9DSEFSQUNURVJcIiB9O1xuXG4gICAgc3RhdGljIGdldCBTRVRfUExBWUVSX0FDVElPTigpIHsgcmV0dXJuIFwiU0VUX1BMQVlFUl9BQ1RJT05cIiB9O1xuICAgIHN0YXRpYyBnZXQgRElTUExBWV9QTEFZRVJfQUNUSU9OKCkgeyByZXR1cm4gXCJESVNQTEFZX1BMQVlFUl9BQ1RJT05cIiB9O1xuXG4gICAgc3RhdGljIGdldCBVU0VfUExBWUVSX0FDVElPTigpIHsgcmV0dXJuIFwiVVNFX1BMQVlFUl9BQ1RJT05cIiB9O1xuXG4gICAgc3RhdGljIGdldCBSRVNPTFZFX0FUVEFDSygpIHsgcmV0dXJuIFwiUkVTT0xWRV9BVFRBQ0tcIiB9O1xuICAgIHN0YXRpYyBnZXQgTU9WRV9BTE9OR19QQVRIX0FORF9BVFRBQ0soKSB7IHJldHVybiBcIk1PVkVfQUxPTkdfUEFUSF9BTkRfQVRUQUNLXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgVVBEQVRFX1NUQU1JTkEoKSB7IHJldHVybiBcIlVQREFURV9TVEFNSU5BXCIgfTtcbiAgICBzdGF0aWMgZ2V0IERJU1BMQVlfREVBVEgoKSB7IHJldHVybiBcIkRJU1BMQVlfREVBVEhcIiB9O1xuICAgIHN0YXRpYyBnZXQgRElTUExBWV9BVFRBQ0soKSB7IHJldHVybiBcIkRJU1BMQVlfQVRUQUNLXCIgfTtcbiAgICBzdGF0aWMgZ2V0IERJU1BMQVlfSElUKCkgeyByZXR1cm4gXCJESVNQTEFZX0hJVFwiIH07XG4gICAgc3RhdGljIGdldCBLSUxMX0dBTUVfQ0hBUkFDVEVSKCkgeyByZXR1cm4gXCJLSUxMX0dBTUVfQ0hBUkFDVEVSXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgQ0hBUkFDVEVSX0xPT0tfQVQoKSB7IHJldHVybiBcIkNIQVJBQ1RFUl9MT09LX0FUXCIgfTtcblxuXG5cbn1cbiIsImV4cG9ydCBjbGFzcyBDb21iYXRWTyB7XG4gICAgY29uc3RydWN0b3IocGFydGljaXBhbnRzKSB7XG4gICAgICAgIHRoaXMucGFydGljaXBhbnRzID0gcGFydGljaXBhbnRzO1xuICAgICAgICB0aGlzLnJvdW5kSW5pdGlhdGl2ZSA9IFtdO1xuICAgICAgICB0aGlzLmFjdGl2ZVBhcnRpY2lwYW50ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGdldCBuZXh0VHVybkNoYXJhY3RlcklkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb3VuZEluaXRpYXRpdmVbMF07XG4gICAgfVxufSIsImNvbnN0IHsgUHJveHkgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgR2FtZUNoYXJhY3RlclZPIH0gPSByZXF1aXJlKCcuL0dhbWVDaGFyYWN0ZXJWTycpO1xuXG5cbmV4cG9ydCBjbGFzcyBHYW1lQ2hhcmFjdGVyUHJveHkgZXh0ZW5kcyBQcm94eSB7XG4gICAgZ2V0IHZvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRhKCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiR2FtZUNoYXJhY3RlclByb3h5X1wiIH07XG5cbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgc3VwZXIoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBwYXJhbXMuaWQsIG5ldyBHYW1lQ2hhcmFjdGVyVk8ocGFyYW1zKSk7XG4gICAgfVxuXG4gICAgcmVzZXRDb21iYXRUdXJuU3RhdGUoKSB7XG4gICAgICAgIHRoaXMudm8uYXZhaWxhYmxlTW92ZW1lbnQgPSB0aGlzLnZvLm1heE1vdmVtZW50O1xuICAgICAgICB0aGlzLnZvLmF2YWlsYWJsZUFjdGlvbiA9IHRoaXMudm8ubWF4QWN0aW9uc1BlclR1cm47XG4gICAgfVxuXG4gICAgdXNlTW92ZW1lbnQoY29zdCkge1xuICAgICAgICB0aGlzLnZvLmF2YWlsYWJsZU1vdmVtZW50IC09IGNvc3Q7XG4gICAgfVxuXG4gICAgYXBwbHlEYW1hZ2UoZGFtYW5nZSkge1xuICAgICAgICB0aGlzLnZvLmN1cnJlbnRTdGFtaW5hIC09IGRhbWFuZ2U7XG5cbiAgICAgICAgaWYgKHRoaXMudm8uY3VycmVudFN0YW1pbmEgPiAwKSB7XG4gICAgICAgICAgICAvLyBBbGl2ZVxuICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuVVBEQVRFX1NUQU1JTkEgKyB0aGlzLmlkLFxuICAgICAgICAgICAgICAgIHRoaXMudm8uY3VycmVudFN0YW1pbmEsIHRoaXMudm8ubWF4aW11bVN0YW1pbmEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRGVhZFxuICAgICAgICAgICAgY29uc29sZS5sb2coYCR7dGhpcy5pZH0gZGllZGApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5pZDtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudE5vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmN1cnJlbnROb2RlO1xuICAgIH1cblxuICAgIHNldCBjdXJyZW50Tm9kZSh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy52by5jdXJyZW50Tm9kZSkge1xuICAgICAgICAgICAgdGhpcy52by5jdXJyZW50Tm9kZS5vY2N1cGllZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52by5jdXJyZW50Tm9kZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnZvLmN1cnJlbnROb2RlLm9jY3VwaWVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXQgY29tYmF0R3JvdXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmNvbWJhdEdyb3VwO1xuICAgIH1cblxuICAgIGdldCBpc05QQygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uaXNOUEM7XG4gICAgfVxuXG4gICAgZ2V0IGF2YWlsYWJsZUFjdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmF2YWlsYWJsZUFjdGlvbjtcbiAgICB9XG5cbiAgICBnZXQgc2tpbGwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLnNraWxsO1xuICAgIH1cblxuICAgIGdldCBjdXJyZW50U3RhbWluYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uY3VycmVudFN0YW1pbmE7XG4gICAgfVxuXG4gICAgZ2V0IGN1cnJlbnRMdWNrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5jdXJyZW50U3RhbWluYTtcbiAgICB9XG5cbiAgICBnZXQgaXNEZWFkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5jdXJyZW50U3RhbWluYSA8PSAwO1xuICAgIH1cblxufVxuIiwiZXhwb3J0IGNsYXNzIEdhbWVDaGFyYWN0ZXJWTyB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgICAgIHRoaXMuaWQgPSBwYXJhbXMuaWQ7XG4gICAgICAgIHRoaXMuaXNOUEMgPSBwYXJhbXMuaXNOUEM7XG4gICAgICAgIHRoaXMuY29tYmF0R3JvdXAgPSBwYXJhbXMuY29tYmF0R3JvdXAgfHwgW107XG4gICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYWdyb0FyZWEgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gVHJvaWthIHN0YXRzXG4gICAgICAgIHRoaXMuaW5pdGlhdGl2ZSA9IDI7XG4gICAgICAgIHRoaXMubWF4TW92ZW1lbnQgPSA2O1xuICAgICAgICB0aGlzLm1heEFjdGlvbnNQZXJUdXJuID0gMTtcbiAgICAgICAgdGhpcy5hdmFpbGFibGVBY3Rpb24gPSB0aGlzLm1heEFjdGlvbnNQZXJUdXJuO1xuICAgICAgICB0aGlzLmF2YWlsYWJsZU1vdmVtZW50ID0gdGhpcy5tYXhNb3ZlbWVudDtcblxuICAgICAgICB0aGlzLnNraWxsID0gcGFyYW1zLnNraWxsIHx8IDE7XG5cbiAgICAgICAgdGhpcy5tYXhTdGFtaW5hID0gcGFyYW1zLm1heFN0YW1pbmEgfHwgMTtcbiAgICAgICAgdGhpcy5jdXJyZW50U3RhbWluYSA9IHRoaXMubWF4U3RhbWluYTtcblxuICAgICAgICB0aGlzLm1heEx1Y2sgPSBwYXJhbXMubWF4THVjayB8fCAxO1xuICAgICAgICB0aGlzLmN1cnJlbnRMdWNrID0gdGhpcy5tYXhMdWNrO1xuXG4gICAgICAgIHRoaXMuYWR2YW5jZWRTa2lsbHMgPSBwYXJhbXMuYWR2YW5jZWRTa2lsbHMgfHwge307XG5cblxuXG4gICAgfVxufSIsImNvbnN0IHsgUHJveHkgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi9uYXZpZ2F0aW9uL0FzdGFyJztcbmNvbnN0IHsgR2FtZU1hcFZPIH0gPSByZXF1aXJlKCcuL0dhbWVNYXBWTycpO1xuXG5leHBvcnQgY2xhc3MgR2FtZU1hcFByb3h5IGV4dGVuZHMgUHJveHkge1xuICAgIGdldCB2bygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YSgpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkdhbWVNYXBQcm94eVwiIH07XG5cbiAgICBjb25zdHJ1Y3RvcihtYXBHcmlkKSB7XG4gICAgICAgIHN1cGVyKEdhbWVNYXBQcm94eS5OQU1FKTtcblxuICAgICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICAgICAgbWFwR3JpZDogbWFwR3JpZFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKCkge1xuXG4gICAgfVxuXG4gICAgZmluZE5lYXJlc3ROb2RlKHRhcmdldFBvaW50KSB7XG4gICAgICAgIGNvbnN0IG1hcEdyaWQgPSB0aGlzLnZvLm1hcEdyaWQ7XG5cbiAgICAgICAgbGV0IG5lYXJlc3ROb2RlID0gbWFwR3JpZFswXTtcbiAgICAgICAgbGV0IGRpc3RTcXJ0VG9OZWFyZXN0Tm9kZSA9IEFzdGFyLmdldERpc3RTcXVhcmVkKG5lYXJlc3ROb2RlLCB0YXJnZXRQb2ludCk7XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBtYXBHcmlkKSB7XG4gICAgICAgICAgICBjb25zdCBkaXN0VG9Ob2RlID0gQXN0YXIuZ2V0RGlzdFNxdWFyZWQobm9kZSwgdGFyZ2V0UG9pbnQpO1xuXG4gICAgICAgICAgICBpZiAoZGlzdFRvTm9kZSA8IGRpc3RTcXJ0VG9OZWFyZXN0Tm9kZSkge1xuICAgICAgICAgICAgICAgIGRpc3RTcXJ0VG9OZWFyZXN0Tm9kZSA9IGRpc3RUb05vZGU7XG4gICAgICAgICAgICAgICAgbmVhcmVzdE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5lYXJlc3ROb2RlO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBHYW1lTWFwVk8ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1hcEdyaWQgPSBbXTtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIFByaW9yaXR5UXVldWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB9XG5cbiAgICBwdXNoKHZhbHVlLCBwcmlvcml0eSA9IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIHByaW9yaXR5OiBwcmlvcml0eVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwb3AoKSB7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGxldCBtaW4gPSBJbmZpbml0eTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwcmlvcml0eSA9IHRoaXMuZGF0YVtpXS5wcmlvcml0eTtcbiAgICAgICAgICAgIGlmIChNYXRoLm1pbihtaW4sIHByaW9yaXR5KSA9PT0gcHJpb3JpdHkpIHtcbiAgICAgICAgICAgICAgICBtaW4gPSBwcmlvcml0eTtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5zcGxpY2UoaW5kZXgsIDEpWzBdLnZhbHVlO1xuICAgIH1cblxuICAgIHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXG4gICAgfVxuXG4gICAgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoID09PSAwO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBQcmlvcml0eVF1ZXVlIH0gZnJvbSAnLi9Qcmlvcml0eVF1ZXVlJztcblxuZXhwb3J0IGNsYXNzIEFzdGFyIHtcbiAgICBzdGF0aWMgYnJlYWR0aEZpcnN0U2VhcmNoKHN0YXJ0LCByYW5nZUxpbWl0KSB7XG4gICAgICAgIGxldCBmcm9udGllciA9IFtdO1xuICAgICAgICBjb25zdCBzZWFyY2hlZEFyZWEgPSBbXTtcbiAgICAgICAgZnJvbnRpZXIucHVzaChzdGFydCk7XG5cbiAgICAgICAgY29uc3QgY2FtZUZyb20gPSBuZXcgTWFwKCk7XG4gICAgICAgIGNhbWVGcm9tLnNldChzdGFydCwgc3RhcnQpO1xuXG4gICAgICAgIGxldCByYW5nZSA9IDA7XG5cbiAgICAgICAgd2hpbGUgKGZyb250aWVyLmxlbmd0aCA+IDAgJiYgcmFuZ2UgPCByYW5nZUxpbWl0KSB7XG4gICAgICAgICAgICBjb25zdCBuZXdGcm9udGllciA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjdXJyZW50IG9mIGZyb250aWVyKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50LmNvbm5lY3RlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBjdXJyZW50LmNvbm5lY3RlZE5vZGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBkaXN0VmFsdWUgPSB0aGlzLmdldERpc3RTcXVhcmVkKG5leHQsIGN1cnJlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV4dC5vY2N1cGllZCAmJiAoIWNhbWVGcm9tLmhhcyhuZXh0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Zyb250aWVyLnB1c2gobmV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hlZEFyZWEucHVzaChuZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbWVGcm9tLnNldChuZXh0LCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnJvbnRpZXIgPSBuZXdGcm9udGllcjtcblxuICAgICAgICAgICAgcmFuZ2UrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWFyY2hlZEFyZWE7XG4gICAgfVxuXG5cbiAgICBzdGF0aWMgY2FsY3VsYXRlUGF0aChzdGFydCwgZ29hbCkge1xuICAgICAgICBjb25zdCBmcm9udGllciA9IG5ldyBQcmlvcml0eVF1ZXVlKCk7XG4gICAgICAgIGZyb250aWVyLnB1c2goc3RhcnQsIDApO1xuXG4gICAgICAgIGNvbnN0IGNhbWVGcm9tID0gbmV3IE1hcCgpO1xuICAgICAgICBjb25zdCBjb3N0U29GYXIgPSBuZXcgTWFwKCk7XG5cbiAgICAgICAgY2FtZUZyb20uc2V0KHN0YXJ0LCBzdGFydCk7XG4gICAgICAgIGNvc3RTb0Zhci5zZXQoc3RhcnQsIDApO1xuXG4gICAgICAgIHdoaWxlICghZnJvbnRpZXIuZW1wdHkoKSkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IGZyb250aWVyLnBvcCgpO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudC5lcXVhbHMoZ29hbCkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50LmNvbm5lY3RlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IGN1cnJlbnQuY29ubmVjdGVkTm9kZXNbaV07XG4gICAgICAgICAgICAgICAgLy8gY29uc3QgZGlzdFZhbHVlID0gdGhpcy5nZXREaXN0U3F1YXJlZChuZXh0LCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdDb3N0ID0gY29zdFNvRmFyLmdldChjdXJyZW50KSArIDE7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW5leHQub2NjdXBpZWQgJiYgKCFjb3N0U29GYXIuaGFzKG5leHQpIHx8IG5ld0Nvc3QgPCBjb3N0U29GYXIuZ2V0KG5leHQpKSkge1xuICAgICAgICAgICAgICAgICAgICBjb3N0U29GYXIuc2V0KG5leHQsIG5ld0Nvc3QpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcHJpb3JpdHkgPSBuZXdDb3N0ICsgdGhpcy5oZXVyaXN0aWMobmV4dCwgZ29hbCk7XG4gICAgICAgICAgICAgICAgICAgIGZyb250aWVyLnB1c2gobmV4dCwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgICAgICBjYW1lRnJvbS5zZXQobmV4dCwgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3VycmVudCA9IGdvYWw7XG4gICAgICAgIGxldCBwYXRoSXNCcm9rZW4gPSBmYWxzZTtcbiAgICAgICAgY29uc3QgcGF0aCA9IFtdO1xuICAgICAgICBwYXRoLnB1c2goY3VycmVudCk7XG5cblxuICAgICAgICB3aGlsZSAoIWN1cnJlbnQuZXF1YWxzKHN0YXJ0KSAmJiAhcGF0aElzQnJva2VuKSB7XG4gICAgICAgICAgICBpZiAoY2FtZUZyb20uaGFzKGN1cnJlbnQpIHx8ICFjdXJyZW50LmVxdWFscyhnb2FsKSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjYW1lRnJvbS5nZXQoY3VycmVudCk7XG4gICAgICAgICAgICAgICAgcGF0aC5wdXNoKGN1cnJlbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXRoSXNCcm9rZW4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhdGhJc0Jyb2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vcGF0aC5wdXNoKHN0YXJ0KTtcbiAgICAgICAgICAgIC8vIHBhdGgucmV2ZXJzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0RGlzdFNxdWFyZWQocHQxLCBwdDIpIHtcbiAgICAgICAgcmV0dXJuICgocHQxLnggLSBwdDIueCkgKiAocHQxLnggLSBwdDIueClcbiAgICAgICAgICAgICsgKHB0MS55IC0gcHQyLnkpICogKHB0MS55IC0gcHQyLnkpXG4gICAgICAgICAgICArIChwdDEueiAtIHB0Mi56KSAqIChwdDEueiAtIHB0Mi56KSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGhldXJpc3RpYyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhhLnggLSBiLngpICsgTWF0aC5hYnMoYS55IC0gYi55KSArIE1hdGguYWJzKGEueiAtIGIueik7XG4gICAgfVxufSIsImNvbnN0IHsgUHJveHkgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgR2FtZVN0YXRlVk8gfSA9IHJlcXVpcmUoJy4vR2FtZVN0YXRlVk8nKTtcblxuXG5leHBvcnQgY2xhc3MgR2FtZVN0YXRlUHJveHkgZXh0ZW5kcyBQcm94eSB7XG4gICAgZ2V0IHZvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRhKCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiR2FtZVN0YXRlUHJveHlcIiB9O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKEdhbWVTdGF0ZVByb3h5Lk5BTUUsIG5ldyBHYW1lU3RhdGVWTygpKTtcbiAgICB9XG5cbiAgICB1cGRhdGVHYW1lU3RhdGVUeXBlKG5ld1N0YXRlVHlwZSkge1xuICAgICAgICB0aGlzLnZvLmdhbWVwbGF5TW9kZSA9IG5ld1N0YXRlVHlwZTtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudE1vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmdhbWVwbGF5TW9kZTtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudEFjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uc2VsZWN0ZWRBY3Rpb247XG4gICAgfVxuXG4gICAgc2V0IGN1cnJlbnRBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy52by5zZWxlY3RlZEFjdGlvbiA9IHZhbHVlO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBnYW1lcGxheU1vZGVUeXBlcyA9IHtcbiAgICBFWFBMT1JBVElPTjogJ0VYUExPUkFUSU9OJyxcbiAgICBDT01CQVQ6ICdDT01CQVQnLFxuICAgIERJQUxPR1VFOiAnRElBTE9HVUUnLFxuXG59XG5cbmV4cG9ydCBjbGFzcyBHYW1lU3RhdGVWTyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZ2FtZXBsYXlNb2RlID0gZ2FtZXBsYXlNb2RlVHlwZXMuRVhQTE9SQVRJT047XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRBY3Rpb24gPSBcIm5vbmVcIjtcbiAgICB9XG59IiwiaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuXG5jb25zdCB7IE1lZGlhdG9yIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBjbGFzcyBHYW1lTWVkaWF0b3IgZXh0ZW5kcyBNZWRpYXRvciB7XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJHYW1lTWVkaWF0b3JcIiB9O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiUmVnaXN0ZXIgbWVkaWF0b3IgLSBHYW1lTWVkaWF0b3JcIik7XG4gICAgICAgIGNvbnN0IGFwcCA9IHBjLkFwcGxpY2F0aW9uLmdldEFwcGxpY2F0aW9uKCk7XG4gICAgICAgIHN1cGVyKEdhbWVNZWRpYXRvci5OQU1FLCBhcHApO1xuICAgICAgICB0aGlzLnN1YnNjcmliZU5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQVBQX0lOSVRJQUxJU0VEKTtcbiAgICB9XG5cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuQVBQX0lOSVRJQUxJU0VEOlxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4uLy4uL0dhbWVGYWNhZGUnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSBcIi4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5XCI7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyTWVkaWF0b3IgfSBmcm9tICcuL0dhbWVDaGFyYWN0ZXJNZWRpYXRvcic7XG5cbmV4cG9ydCBjb25zdCBHYW1lQ2hhcmFjdGVyQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdHYW1lQ2hhcmFjdGVyQ29tcG9uZW50Jyk7XG5cbmNvbnN0IHN0YXRzU2NoZW1hID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogJ3NraWxsJyxcbiAgICAgICAgdGl0bGU6ICdTa2lsbCcsXG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICBkZWZhdWx0OiAxXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdtYXhTdGFtaW5hJyxcbiAgICAgICAgdGl0bGU6ICdTdGFtaW5hJyxcbiAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgIGRlZmF1bHQ6IDFcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdtYXhMdWNrJyxcbiAgICAgICAgdGl0bGU6ICdMdWNrJyxcbiAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgIGRlZmF1bHQ6IDFcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdtYXhNb3ZlbWVudCcsXG4gICAgICAgIHRpdGxlOiAnTW92ZW1lbnQnLFxuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgZGVmYXVsdDogNlxuICAgIH1cbl07XG5cbmNvbnN0IGFkdmFuY2VkU2tpbGxzU2NoZW1hID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogJ3NraWxsTmFtZScsXG4gICAgICAgIHRpdGxlOiAnU2tpbGwgTmFtZScsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdza2lsbFZhbHVlJyxcbiAgICAgICAgdGl0bGU6ICdTa2lsbCBWYWx1ZScsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgfVxuXTtcblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImNoYXJhY3RlcklkXCIsIHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIHRpdGxlOiBcIkNoYXJhY3RlciBJZFwiXG59KTtcblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImNoYXJhY3RlclNwZWVkXCIsIHtcbiAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIHRpdGxlOiBcIkNoYXJhY3RlciBTcGVlZFwiLFxuICAgIGRlZmF1bHQ6IDRcbn0pO1xuXG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKFwiaXNOUENcIiwge1xuICAgIHR5cGU6IFwiYm9vbGVhblwiLFxuICAgIHRpdGxlOiBcImlzIE5QQ1wiLFxuICAgIGRlZmF1bHQ6IHRydWVcbn0pO1xuXG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKFwic3RhdHNPdmVycmlkZXNcIiwge1xuICAgIHR5cGU6IFwianNvblwiLFxuICAgIHRpdGxlOiBcIlN0YXRzIE92ZXJyaWRlc1wiLFxuICAgIHNjaGVtYTogc3RhdHNTY2hlbWFcbn0pO1xuXG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKFwiYWR2YW5jZWRTa2lsbHNcIiwge1xuICAgIHR5cGU6IFwianNvblwiLFxuICAgIHRpdGxlOiBcIkFkdmFuY2VkIFNraWxsc1wiLFxuICAgIHNjaGVtYTogYWR2YW5jZWRTa2lsbHNTY2hlbWEsXG4gICAgYXJyYXk6IHRydWVcbn0pO1xuXG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKFwiY29tYmF0R3JvdXBOYW1lXCIsIHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIHRpdGxlOiBcIkNvbWJhdCBHcm91cCBOYW1lXCJcbn0pO1xuXG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLnByZXJlZ2lzdGVyTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xuICAgIGlmICghdGhpcy5wcmVyZWdpc3RlcmVkTm90aWZpY2F0aW9ucykge1xuICAgICAgICB0aGlzLnByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zID0gW107XG4gICAgfVxuXG4gICAgdGhpcy5wcmVyZWdpc3RlcmVkTm90aWZpY2F0aW9ucy5wdXNoKG5vdGlmaWNhdGlvbik7XG59XG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5wb3N0SW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLm1vdmVtZW50UGF0aCA9IFtdO1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoR2FtZUNoYXJhY3Rlck1lZGlhdG9yLk5BTUUgKyB0aGlzLmNoYXJhY3RlcklkKSkge1xuICAgICAgICB0aGlzLmZhY2FkZS5yZW1vdmVNZWRpYXRvcihHYW1lQ2hhcmFjdGVyTWVkaWF0b3IuTkFNRSArIHRoaXMuY2hhcmFjdGVySWQpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5wcmVyZWdpc3RlcmVkTm90aWZpY2F0aW9ucykge1xuICAgICAgICB0aGlzLnByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zID0gW107XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhdHNPdmVycmlkZXMgPSB0aGlzLnN0YXRzT3ZlcnJpZGVzO1xuICAgIGNvbnN0IHByb3h5UGFyYW1zID0ge1xuICAgICAgICBpZDogdGhpcy5jaGFyYWN0ZXJJZCxcbiAgICAgICAgaXNOUEM6IHRoaXMuaXNOUEMsXG4gICAgICAgIGFkdmFuY2VkU2tpbGxzOiB0aGlzLmFkdmFuY2VkU2tpbGxzLFxuICAgICAgICAuLi5zdGF0c092ZXJyaWRlc1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5jb21iYXRHcm91cE5hbWUgJiYgdGhpcy5jb21iYXRHcm91cE5hbWUgIT09IFwiXCIpIHtcbiAgICAgICAgY29uc3QgY29tcmFkZUVudGl0aWVzID0gdGhpcy5hcHAucm9vdC5maW5kQnlUYWcoYGNvbWJhdEdyb3VwOiR7dGhpcy5jb21iYXRHcm91cE5hbWV9YCk7XG5cbiAgICAgICAgY29uc3QgY29tYmF0R3JvdXAgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBjb21yYWRlRW50aXR5IG9mIGNvbXJhZGVFbnRpdGllcykge1xuICAgICAgICAgICAgY29uc3QgY29tcmFkZUlkID0gY29tcmFkZUVudGl0eS5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5jaGFyYWN0ZXJJZDtcbiAgICAgICAgICAgIGNvbWJhdEdyb3VwLnB1c2goY29tcmFkZUlkKTtcblxuICAgICAgICB9XG4gICAgICAgIHByb3h5UGFyYW1zLmNvbWJhdEdyb3VwID0gY29tYmF0R3JvdXA7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJQcm94eShuZXcgR2FtZUNoYXJhY3RlclByb3h5KHByb3h5UGFyYW1zKSk7XG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgR2FtZUNoYXJhY3Rlck1lZGlhdG9yKHRoaXMuY2hhcmFjdGVySWQsIHRoaXMuZW50aXR5LCB0aGlzLnByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zKSk7XG5cbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ucGxheSgnaWRsZS5nbGInLCAwLjEpO1xuXG59O1xuXG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLnNldFBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xuICAgIGlmICh0aGlzLm1vdmVtZW50UGF0aCAmJiB0aGlzLm1vdmVtZW50UGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuZW50aXR5LmZpcmUoJ2NhbmNlbE1vdmUnKTtcbiAgICB9XG4gICAgdGhpcy5tb3ZlbWVudFBhdGggPSBwYXRoO1xuXG4gICAgdGhpcy5lbnRpdHkuYW5pbWF0aW9uLmxvb3AgPSB0cnVlO1xuICAgIHRoaXMuZW50aXR5LmFuaW1hdGlvbi5wbGF5KCd3YWxrLmdsYicsIDAuMSk7XG59O1xuXG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5zdG9wTW92ZW1lbnQgPSBmdW5jdGlvbiAoY3VycmVudE5vZGUpIHtcbiAgICB0aGlzLm1vdmVtZW50UGF0aCA9IFtdO1xuICAgIHRoaXMuZW50aXR5LnNldExvY2FsUG9zaXRpb24oY3VycmVudE5vZGUueCwgY3VycmVudE5vZGUueSwgY3VycmVudE5vZGUueik7XG5cbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ubG9vcCA9IHRydWU7XG4gICAgdGhpcy5lbnRpdHkuYW5pbWF0aW9uLnBsYXkoJ2lkbGUuZ2xiJywgMC4xKTtcbn07XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkdCkge1xuICAgIHRoaXMubW92ZUFsb25nUGF0aChkdCk7XG59XG5cblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5wcm90b3R5cGUubW92ZUFsb25nUGF0aCA9IGZ1bmN0aW9uIChkdCkge1xuXG4gICAgaWYgKHRoaXMubW92ZW1lbnRQYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgbmV4dFBhdGhQb2ludCA9IHRoaXMubW92ZW1lbnRQYXRoW3RoaXMubW92ZW1lbnRQYXRoLmxlbmd0aCAtIDFdO1xuICAgICAgICBjb25zdCBsb2NhbFBvcyA9IHRoaXMuZW50aXR5LmdldExvY2FsUG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgbmV3UG9zaXRpb24gPSBuZXcgcGMuVmVjMygpO1xuICAgICAgICBjb25zdCBzcGVlZCA9IG5ldyBwYy5WZWMzKGR0ICogdGhpcy5jaGFyYWN0ZXJTcGVlZCwgZHQgKiB0aGlzLmNoYXJhY3RlclNwZWVkLCBkdCAqIHRoaXMuY2hhcmFjdGVyU3BlZWQpO1xuICAgICAgICBjb25zdCBub2RlUG9pbnQgPSBuZXcgcGMuVmVjMyhuZXh0UGF0aFBvaW50LngsIG5leHRQYXRoUG9pbnQueSwgbmV4dFBhdGhQb2ludC56KTtcbiAgICAgICAgbmV3UG9zaXRpb24uc3ViMihub2RlUG9pbnQsIGxvY2FsUG9zKTtcbiAgICAgICAgbmV3UG9zaXRpb24ubm9ybWFsaXplKCk7XG4gICAgICAgIG5ld1Bvc2l0aW9uLm11bChzcGVlZCk7XG4gICAgICAgIG5ld1Bvc2l0aW9uLmFkZChsb2NhbFBvcyk7XG5cbiAgICAgICAgdGhpcy5lbnRpdHkuc2V0TG9jYWxQb3NpdGlvbihuZXdQb3NpdGlvbik7XG4gICAgICAgIHRoaXMubG9va0F0UG9pbnQobmV4dFBhdGhQb2ludCk7XG5cbiAgICAgICAgY29uc3QgZGlzdGFuY2VUb05leHRQYXRoID0gbmV3UG9zaXRpb24uZGlzdGFuY2Uobm9kZVBvaW50KTtcbiAgICAgICAgaWYgKGRpc3RhbmNlVG9OZXh0UGF0aCA8IDAuMTUpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnROb2RlID0gdGhpcy5tb3ZlbWVudFBhdGgucG9wKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm1vdmVtZW50UGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVudGl0eS5maXJlKCdmaW5pc2hlZE1vdmUnLCBjdXJyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbnRpdHkuYW5pbWF0aW9uLmxvb3AgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW50aXR5LmFuaW1hdGlvbi5wbGF5KCdpZGxlLmdsYicsIDAuMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVudGl0eS5maXJlKCd1cGRhdGVDdXJyZW50Tm9kZScsIGN1cnJlbnROb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5wcm90b3R5cGUubG9va0F0UG9pbnQgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICBjb25zdCBsb2NhbFBvcyA9IHRoaXMuZW50aXR5LmdldExvY2FsUG9zaXRpb24oKTtcblxuICAgIGNvbnN0IGR4ID0gcG9pbnQueCAtIGxvY2FsUG9zLng7XG4gICAgY29uc3QgZHogPSBwb2ludC56IC0gbG9jYWxQb3MuejtcbiAgICBjb25zdCBhbmdsZVRvRGVzdCA9IE1hdGguYXRhbjIoZHgsIGR6KSAqIDE4MCAvIE1hdGguUEk7XG4gICAgdGhpcy5lbnRpdHkuc2V0RXVsZXJBbmdsZXMoMCwgYW5nbGVUb0Rlc3QsIDApO1xufVxuXG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5hbmltYXRlRGVhdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbnRpdHkuYW5pbWF0aW9uLmxvb3AgPSBmYWxzZTtcbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ucGxheSgnZGllLmdsYicsIDAuMSk7XG59XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLmFuaW1hdGVIaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbnRpdHkuYW5pbWF0aW9uLmxvb3AgPSBmYWxzZTtcbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ucGxheSgnaGl0LmdsYicsIDAuMSk7XG59XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLmFuaW1hdGVBdHRhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbnRpdHkuYW5pbWF0aW9uLmxvb3AgPSBmYWxzZTtcbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ucGxheSgnYXR0YWNrLmdsYicsIDAuMSk7XG59IiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lTWFwUHJveHkgfSBmcm9tICcuLi8uLi9tb2RlbC9nYW1lTWFwL0dhbWVNYXBQcm94eSc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyQ29tcG9uZW50IH0gZnJvbSAnLi9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50JztcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IGdhbWVwbGF5TW9kZVR5cGVzIH0gZnJvbSAnLi4vLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVZPJztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIEdhbWVDaGFyYWN0ZXJNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkdhbWVDaGFyYWN0ZXJNZWRpYXRvcl9cIiB9O1xuXG4gICAgY29uc3RydWN0b3IoaWQsIHZpZXdDb21wb25lbnQsIHByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zKSB7XG4gICAgICAgIHN1cGVyKEdhbWVDaGFyYWN0ZXJNZWRpYXRvci5OQU1FICsgaWQpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG5cbiAgICAgICAgbGV0IG5vdGlmaWNhdGlvbnMgPSBbXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FX0NPTVBMRVRFLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX05PREUgKyB0aGlzLmlkLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLk5BVklHQVRFX0FMT05HX1BBVEggKyB0aGlzLmlkLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLlNFVF9DSEFSQUNURVJfVE9fTk9ERSArIHRoaXMuaWQsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuRElTUExBWV9ERUFUSCArIHRoaXMuaWQsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuRElTUExBWV9BVFRBQ0sgKyB0aGlzLmlkLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkRJU1BMQVlfSElUICsgdGhpcy5pZCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5DSEFSQUNURVJfTE9PS19BVCArIHRoaXMuaWQsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuU1RBUlRfQ09NQkFULFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLk1BUF9HUklEX0NSRUFURURcblxuICAgICAgICBdO1xuXG4gICAgICAgIG5vdGlmaWNhdGlvbnMgPSBub3RpZmljYXRpb25zLmNvbmNhdChwcmVyZWdpc3RlcmVkTm90aWZpY2F0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24obm90aWZpY2F0aW9ucyk7XG5cbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50ID0gdmlld0NvbXBvbmVudDtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCd1cGRhdGVDdXJyZW50Tm9kZScsIHRoaXMudXBkYXRlQ3VycmVudE5vZGUsIHRoaXMpO1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQub24oJ2ZpbmlzaGVkTW92ZScsIHRoaXMuaGFuZGxlRmluaXNoZWRNb2RlLCB0aGlzKTtcbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMudmlld0NvbXBvbmVudCkge1xuICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LmZpcmUobm90aWZpY2F0aW9uTmFtZSwgdGhpcy5pZCwgLi4uYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IHNjcmlwdEtleSBpbiB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0KSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdCwgc2NyaXB0S2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjcmlwdENvbXBvbmVudCA9IHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbc2NyaXB0S2V5XTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NyaXB0Q29tcG9uZW50LmhhbmRsZU5vdGlmaWNhdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuXG4gICAgICAgICAgICAgICAgICAgIHNjcmlwdENvbXBvbmVudC5oYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uTmFtZSwgdGhpcy5pZCwgLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5TVEFSVF9DT01CQVQ6XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVTdGFydENvbWJhdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuTUFQX0dSSURfQ1JFQVRFRDpcbiAgICAgICAgICAgICAgICBjb25zdCBnYW1lTWFwUHJveHkgPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVNYXBQcm94eS5OQU1FKTtcbiAgICAgICAgICAgICAgICBjb25zdCBnYW1lQ2hhcmFjdGVyUHJveHkgPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgdGhpcy5pZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWdhbWVDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBnYW1lQ2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUgPSBnYW1lTWFwUHJveHkuZmluZE5lYXJlc3ROb2RlKHRoaXMudmlld0NvbXBvbmVudC5nZXRMb2NhbFBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX05PREUgKyB0aGlzLmlkOlxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlTmF2aWdhdGVUb05vZGUoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5OQVZJR0FURV9BTE9OR19QQVRIICsgdGhpcy5pZDpcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU5hdmlnYXRlQWxvbmdQYXRoKGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuU0VUX0NIQVJBQ1RFUl9UT19OT0RFICsgdGhpcy5pZDpcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVNldENoYXJhY3RlclRvTm9kZShhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkNIQVJBQ1RFUl9MT09LX0FUICsgdGhpcy5pZDpcbiAgICAgICAgICAgICAgICBjb25zdCBsb29rUG9pbnQgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5sb29rQXRQb2ludChsb29rUG9pbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuRElTUExBWV9ERUFUSCArIHRoaXMuaWQ6XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLmFuaW1hdGVEZWF0aCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuRElTUExBWV9BVFRBQ0sgKyB0aGlzLmlkOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5hbmltYXRlQXR0YWNrKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5ESVNQTEFZX0hJVCArIHRoaXMuaWQ6XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLmFuaW1hdGVIaXQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZU5hdmlnYXRlVG9Ob2RlKHRhcmdldE5vZGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJOQVZJR0FUSU5HIFRPIE5PREVcIik7XG4gICAgICAgIGNvbnN0IGdhbWVNYXBQcm94eSA9IHRoaXMuZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZU1hcFByb3h5Lk5BTUUpO1xuICAgICAgICBjb25zdCBnYW1lQ2hhcmFjdGVyUHJveHkgPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgdGhpcy5pZCk7XG5cbiAgICAgICAgaWYgKCFnYW1lQ2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUpIHtcbiAgICAgICAgICAgIGdhbWVDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IGdhbWVNYXBQcm94eS5maW5kTmVhcmVzdE5vZGUodGhpcy52aWV3Q29tcG9uZW50LmdldExvY2FsUG9zaXRpb24oKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXRoID0gQXN0YXIuY2FsY3VsYXRlUGF0aChnYW1lQ2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUsIHRhcmdldE5vZGUpO1xuICAgICAgICBpZiAocGF0aCAmJiBwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5zZXRQYXRoKHBhdGgpO1xuICAgICAgICAgICAgZ2FtZUNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZU5hdmlnYXRlQWxvbmdQYXRoKHBhdGgpIHtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnNldFBhdGgocGF0aCk7XG4gICAgfVxuXG4gICAgaGFuZGxlTmF2aWdhdGVBbG9uZ1BhdGhXaXRoUHJvbWlzZShwYXRoKSB7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5zZXRQYXRoKHBhdGgpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQub24oJ2ZpbmlzaGVkTW92ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdjYW5jZWxNb3ZlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZUN1cnJlbnROb2RlKG5ld05vZGUpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTU9WRURfVE9fTk9ERSArIHRoaXMuaWQsIG5ld05vZGUpO1xuXG4gICAgfVxuXG4gICAgaGFuZGxlRmluaXNoZWRNb2RlKG5ld05vZGUpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRklOSVNIRURfTU9WRSwgdGhpcy5pZCwgbmV3Tm9kZSk7XG4gICAgfVxuXG4gICAgbG9va0ZvckNoYXJhY3RlcihpZCwgbm9kZSkge1xuICAgICAgICBmb3IgKGNvbnN0IHNlYXJjaE5vZGUgb2YgdGhpcy5zZWFyY2hBcmVhKSB7XG4gICAgICAgICAgICBpZiAoc2VhcmNoTm9kZS5lcXVhbHMobm9kZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10ubG9va0F0UG9pbnQobm9kZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU1RBUlRfQ09NQkFULCB0aGlzLnZpZXdDb21wb25lbnQsIFtpZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlU3RhcnRDb21iYXQoKSB7XG4gICAgICAgIGNvbnN0IGdhbWVDaGFyYWN0ZXJWTyA9IHRoaXMuZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0aGlzLmlkKS52bztcblxuICAgICAgICAvLyB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uc3RvcE1vdmVtZW50KGdhbWVDaGFyYWN0ZXJWTy5jdXJyZW50Tm9kZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlU2V0Q2hhcmFjdGVyVG9Ob2RlKG5vZGUpIHtcbiAgICAgICAgY29uc3QgZ2FtZUNoYXJhY3RlclByb3h5ID0gdGhpcy5mYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHRoaXMuaWQpO1xuICAgICAgICBnYW1lQ2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUgPSBub2RlO1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uc3RvcE1vdmVtZW50KG5vZGUpO1xuICAgIH1cbn1cbiIsIlxuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi8uLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgSW5wdXRMYXllckNvbXBvbmVudCB9IGZyb20gJy4vSW5wdXRMYXllckNvbXBvbmVudCc7XG5jb25zdCB7IE1lZGlhdG9yIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBjbGFzcyBJbnB1dExheWVyTWVkaWF0b3IgZXh0ZW5kcyBNZWRpYXRvciB7XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJJbnB1dExheWVyTWVkaWF0b3JcIiB9O1xuXG4gICAgY29uc3RydWN0b3Iodmlld0NvbXBvbmVudCkge1xuICAgICAgICBzdXBlcihJbnB1dExheWVyTWVkaWF0b3IuTkFNRSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKFtcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkVfQ09NUExFVEVcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vbigncGlja2VyOmdhbWVDaGFyYWN0ZXInLCB0aGlzLmhhbmRsZVBpY2tlckdhbWVDaGFyYWN0ZXIsIHRoaXMpO1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQub24oJ3BpY2tlcjpuYXZpZ2F0aW9uJywgdGhpcy5oYW5kbGVQaWNrZXJOYXZpZ2F0aW9uLCB0aGlzKTtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdzY3JvbGxpbmcnLCB0aGlzLmhhbmRsZVNjcm9sbGluZywgdGhpcyk7XG5cbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkVfQ09NUExFVEU6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVQaWNrZXJHYW1lQ2hhcmFjdGVyKGNoYXJhY3RlckVudGl0eSkge1xuICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TRUxFQ1RfR0FNRV9DSEFSQUNURVIsIGNoYXJhY3RlckVudGl0eSk7XG4gICAgfVxuXG4gICAgaGFuZGxlUGlja2VyTmF2aWdhdGlvbihub2RlKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNFTEVDVEVEX05PREUsIG5vZGUpO1xuICAgIH1cblxuICAgIGhhbmRsZVNjcm9sbGluZyhkaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuSU5QVVRfRFJBR19NT1VTRSwgZGlyZWN0aW9uKTtcblxuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBHYW1lQ2FtZXJhID0gcGMuY3JlYXRlU2NyaXB0KCdHYW1lQ2FtZXJhJyk7XG5pbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tICcuLi8uLi9HYW1lRmFjYWRlJztcbmltcG9ydCB7IEdhbWVDYW1lcmFNZWRpYXRvciB9IGZyb20gJy4vR2FtZUNhbWVyYU1lZGlhdG9yJztcblxuR2FtZUNhbWVyYS5hdHRyaWJ1dGVzLmFkZCgnZGlzdGFuY2UnLCB7IHR5cGU6ICdudW1iZXInLCBkZWZhdWx0OiAxMDAsIHRpdGxlOiAnRGlzdGFuY2UnIH0pO1xuR2FtZUNhbWVyYS5hdHRyaWJ1dGVzLmFkZCgnZHJhZ011bHRpcGxpZXJYJywgeyB0eXBlOiAnbnVtYmVyJywgZGVmYXVsdDogMC41LCB0aXRsZTogJ0RyYWcgTXVsdGlwbGllcicgfSk7XG5HYW1lQ2FtZXJhLmF0dHJpYnV0ZXMuYWRkKCdkcmFnTXVsdGlwbGllclknLCB7IHR5cGU6ICdudW1iZXInLCBkZWZhdWx0OiAwLjUsIHRpdGxlOiAnRHJhZyBNdWx0aXBsaWVyJyB9KTtcblxuR2FtZUNhbWVyYS5hdHRyaWJ1dGVzLmFkZCgndmVydGljYWxTY3JvbGwnLCB7IHR5cGU6ICdib29sZWFuJywgZGVmYXVsdDogZmFsc2UsIHRpdGxlOiAnVmVydGljYWwgU2Nyb2xsJyB9KTtcbkdhbWVDYW1lcmEuYXR0cmlidXRlcy5hZGQoJ21pbkNhbWVyYUhlaWdodCcsIHsgdHlwZTogJ251bWJlcicsIGRlZmF1bHQ6IDUsIHRpdGxlOiAnTWluIENhbWVyYSBIZWlnaHQnIH0pO1xuR2FtZUNhbWVyYS5hdHRyaWJ1dGVzLmFkZCgnbWF4Q2FtZXJhSGVpZ2h0JywgeyB0eXBlOiAnbnVtYmVyJywgZGVmYXVsdDogMTAwLCB0aXRsZTogJ01heCBDYW1lcmEgSGVpZ2h0JyB9KTtcblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcbkdhbWVDYW1lcmEucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIGlmICh0aGlzLmZhY2FkZS5oYXNNZWRpYXRvcihHYW1lQ2FtZXJhTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoR2FtZUNhbWVyYU1lZGlhdG9yLk5BTUUpO1xuICAgIH1cblxuICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyTWVkaWF0b3IobmV3IEdhbWVDYW1lcmFNZWRpYXRvcih0aGlzLmVudGl0eSkpO1xuXG59O1xuXG5HYW1lQ2FtZXJhLnByb3RvdHlwZS5zZXRDYW1lcmFUYXJnZXQgPSBmdW5jdGlvbiAoY2FtZXJhVGFyZ2V0KSB7XG4gICAgdGhpcy5jYW1lcmFUYXJnZXQgPSBjYW1lcmFUYXJnZXQ7XG4gICAgdGhpcy5yb3RhdGlvbiA9IHRoaXMuZW50aXR5LmdldEV1bGVyQW5nbGVzKCkueTtcbiAgICB0aGlzLmNhbWVyYUhlaWdodCA9IHRoaXMuZW50aXR5LmdldExvY2FsUG9zaXRpb24oKS55O1xufVxuXG5HYW1lQ2FtZXJhLnByb3RvdHlwZS5oYW5kbGVEcmFnID0gZnVuY3Rpb24gKGRpcmVjdGlvbikge1xuICAgIHRoaXMucm90YXRpb24gKz0gZGlyZWN0aW9uLnggKiB0aGlzLmRyYWdNdWx0aXBsaWVyWDtcblxuICAgIGlmICh0aGlzLnZlcnRpY2FsU2Nyb2xsKSB7XG4gICAgICAgIGxldCBuZXdDYW1lcmFIZWlnaHQgPSB0aGlzLmNhbWVyYUhlaWdodCAtIChkaXJlY3Rpb24ueSAqIHRoaXMuZHJhZ011bHRpcGxpZXJZKTtcbiAgICAgICAgbmV3Q2FtZXJhSGVpZ2h0ID0gcGMubWF0aC5jbGFtcChuZXdDYW1lcmFIZWlnaHQsIHRoaXMubWluQ2FtZXJhSGVpZ2h0LCB0aGlzLm1heENhbWVyYUhlaWdodCk7XG4gICAgICAgIHRoaXMuY2FtZXJhSGVpZ2h0ID0gbmV3Q2FtZXJhSGVpZ2h0O1xuICAgIH1cbn1cblxuR2FtZUNhbWVyYS5wcm90b3R5cGUuZ2V0VGFyZ2V0Q2FtZXJhUG9zaXRpb24gPSBmdW5jdGlvbiAoZm9jdXNQb2ludCkge1xuICAgIGNvbnN0IGNhbWVyYVBvc2l0aW9uID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpXG5cbiAgICBjb25zdCB0YXJnZXRYID0gTWF0aC5zaW4oKHRoaXMucm90YXRpb24pICogTWF0aC5QSSAvIDE4MCkgKiB0aGlzLmRpc3RhbmNlO1xuICAgIGNvbnN0IHRhcmdldFogPSBNYXRoLmNvcygodGhpcy5yb3RhdGlvbikgKiBNYXRoLlBJIC8gMTgwKSAqIHRoaXMuZGlzdGFuY2U7XG5cbiAgICByZXR1cm4gbmV3IHBjLlZlYzMoZm9jdXNQb2ludC54ICsgdGFyZ2V0WCwgY2FtZXJhUG9zaXRpb24ueSwgZm9jdXNQb2ludC56ICsgdGFyZ2V0Wik7XG59XG5cbi8vIHVwZGF0ZSBjb2RlIGNhbGxlZCBldmVyeSBmcmFtZVxuR2FtZUNhbWVyYS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGR0KSB7XG4gICAgaWYgKHRoaXMuY2FtZXJhVGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IGNhbWVyYVRhcmdldFBvc2l0aW9uID0gdGhpcy5jYW1lcmFUYXJnZXQuZ2V0TG9jYWxQb3NpdGlvbigpO1xuICAgICAgICBjb25zdCB0YXJnZXRQb3NpdGlvbiA9IHRoaXMuZ2V0VGFyZ2V0Q2FtZXJhUG9zaXRpb24oY2FtZXJhVGFyZ2V0UG9zaXRpb24pO1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRQb3MgPSB0aGlzLmVudGl0eS5nZXRMb2NhbFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IHR3ZWVuWCA9ICh0YXJnZXRQb3NpdGlvbi54ICsgY3VycmVudFBvcy54ICogOSkgLyAxMDtcbiAgICAgICAgY29uc3QgdHdlZW5ZID0gKHRoaXMuY2FtZXJhSGVpZ2h0ICsgY3VycmVudFBvcy55ICogOSkgLyAxMDtcbiAgICAgICAgY29uc3QgdHdlZW5aID0gKHRhcmdldFBvc2l0aW9uLnogKyBjdXJyZW50UG9zLnogKiA5KSAvIDEwO1xuXG4gICAgICAgIHRoaXMuZW50aXR5LnNldExvY2FsUG9zaXRpb24odHdlZW5YLCB0d2VlblksIHR3ZWVuWik7XG5cbiAgICAgICAgdGhpcy5lbnRpdHkubG9va0F0KGNhbWVyYVRhcmdldFBvc2l0aW9uKTtcbiAgICB9XG5cbn07XG4iLCJcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVDYW1lcmEgfSBmcm9tICcuL0dhbWVDYW1lcmEnO1xuY29uc3QgeyBNZWRpYXRvciB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuXG5leHBvcnQgY2xhc3MgR2FtZUNhbWVyYU1lZGlhdG9yIGV4dGVuZHMgTWVkaWF0b3Ige1xuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiR2FtZUNhbWVyYU1lZGlhdG9yXCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKHZpZXdDb21wb25lbnQpIHtcbiAgICAgICAgc3VwZXIoR2FtZUNhbWVyYU1lZGlhdG9yLk5BTUUpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZU5vdGlmaWNhdGlvbihbXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FX0NPTVBMRVRFLCBHYW1lQ29tbWFuZHMuSU5QVVRfRFJBR19NT1VTRSwgR2FtZUNvbW1hbmRzLlNFVF9DQU1FUkFfVEFSR0VUXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50O1xuXG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuU0VUX0NBTUVSQV9UQVJHRVQ6XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNhbWVyYSddLnNldENhbWVyYVRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLklOUFVUX0RSQUdfTU9VU0U6XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNhbWVyYSddLmhhbmRsZURyYWcoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4uLy4uL0dhbWVGYWNhZGUnO1xuaW1wb3J0IHsgSW5wdXRMYXllck1lZGlhdG9yIH0gZnJvbSAnLi9JbnB1dExheWVyTWVkaWF0b3InO1xuaW1wb3J0IHsgR2FtZUNhbWVyYU1lZGlhdG9yIH0gZnJvbSAnLi4vZ2FtZUNhbWVyYS9HYW1lQ2FtZXJhTWVkaWF0b3InO1xuXG5leHBvcnQgY29uc3QgSW5wdXRMYXllckNvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnSW5wdXRMYXllckNvbXBvbmVudCcpO1xuXG5JbnB1dExheWVyQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKFwiY2FtZXJhRW50aXR5XCIsIHtcbiAgICB0eXBlOiBcImVudGl0eVwiLFxuICAgIHRpdGxlOiBcIkNhbWVyYSBFbnRpdHlcIlxufSk7XG5cbklucHV0TGF5ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJkcmFnVGltZVwiLCB7XG4gICAgdHlwZTogXCJudW1iZXJcIixcbiAgICB0aXRsZTogXCJEcmFnIFRpbWVcIixcbiAgICBkZWZhdWx0OiAwLjRcbn0pO1xuXG5JbnB1dExheWVyQ29tcG9uZW50LnByb3RvdHlwZS53aW5kb3cgPSB3aW5kb3c7XG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIGlmICh0aGlzLmZhY2FkZS5oYXNNZWRpYXRvcihJbnB1dExheWVyTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoSW5wdXRMYXllck1lZGlhdG9yLk5BTUUpO1xuICAgIH1cblxuICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyTWVkaWF0b3IobmV3IElucHV0TGF5ZXJNZWRpYXRvcih0aGlzLmVudGl0eSkpO1xuICAgIHRoaXMucmF5ID0gbmV3IHBjLlJheSgpO1xuICAgIHRoaXMuaW5wdXRRdWV1ZSA9IFtdO1xuXG4gICAgLy8gRHJhZyBwcm9wZXJ0aWVzXG4gICAgdGhpcy5hcHAubW91c2UuZGlzYWJsZUNvbnRleHRNZW51KCk7XG4gICAgdGhpcy5jbGlja0Rvd25TdGFydCA9IDA7XG4gICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG5cbiAgICB0aGlzLmFwcC5vbigncGlja2VyOnJlc3VsdCcsIHRoaXMuaGFuZGxlUGlja2VyUmVzdWx0LCB0aGlzKTtcblxuICAgIGlmICh0aGlzLmFwcC5tb3VzZSkge1xuICAgICAgICB0aGlzLmFwcC5tb3VzZS5vbihwYy5FVkVOVF9NT1VTRU1PVkUsIHRoaXMub25Nb3VzZU1vdmUsIHRoaXMpO1xuICAgICAgICB0aGlzLmVudGl0eS5lbGVtZW50Lm9uKHBjLkVWRU5UX01PVVNFRE9XTiwgdGhpcy5vbk1vdXNlRG93biwgdGhpcyk7XG4gICAgICAgIHRoaXMuYXBwLm1vdXNlLm9uKHBjLkVWRU5UX01PVVNFVVAsIHRoaXMub25Nb3VzZVVwLCB0aGlzKTtcblxuICAgICAgICB0aGlzLmVudGl0eS5vbmNlKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcHAubW91c2Uub2ZmKHBjLkVWRU5UX01PVVNFTU9WRSwgdGhpcy5vbk1vdXNlTW92ZSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmFwcC5tb3VzZS5vZmYocGMuRVZFTlRfTU9VU0VVUCwgdGhpcy5vbk1vdXNlVXAsIHRoaXMpO1xuXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFwcC50b3VjaCkge1xuICAgICAgICB0aGlzLmFwcC50b3VjaC5vbihwYy5FVkVOVF9UT1VDSE1PVkUsICh0b3VjaEV2dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbk1vdXNlTW92ZSh0b3VjaEV2dC50b3VjaGVzWzBdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lbnRpdHkuZWxlbWVudC5vbihwYy5FVkVOVF9UT1VDSFNUQVJULCAodG91Y2hFdnQpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRvdWNoRXZ0KTtcbiAgICAgICAgICAgIHRoaXMub25Nb3VzZURvd24odG91Y2hFdnQudG91Y2hlc1swXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24ocGMuRVZFTlRfVE9VQ0hFTkQsICh0b3VjaEV2dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbk1vdXNlVXAoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5vblJlc2l6ZSgpO1xuXG4gICAgdGhpcy53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpLCBmYWxzZSk7XG5cbn1cblxuSW5wdXRMYXllckNvbXBvbmVudC5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZ3JhcGhpY3NEZXZpY2UgPSB0aGlzLmFwcC5ncmFwaGljc0RldmljZTtcbiAgICBjb25zb2xlLmxvZyhcInNpemVcIiwgZ3JhcGhpY3NEZXZpY2Uud2lkdGgsIGdyYXBoaWNzRGV2aWNlLmhlaWdodCk7XG5cbiAgICAvLyBGbGlwIGJsZW5kXG4gICAgaWYgKGdyYXBoaWNzRGV2aWNlLndpZHRoIDwgZ3JhcGhpY3NEZXZpY2UuaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuZW50aXR5LmVsZW1lbnQuc2NyZWVuLnNjcmVlbi5zY2FsZUJsZW5kID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVudGl0eS5lbGVtZW50LnNjcmVlbi5zY3JlZW4uc2NhbGVCbGVuZCA9IDA7XG4gICAgfVxufVxuXG5JbnB1dExheWVyQ29tcG9uZW50LnByb3RvdHlwZS5vbk1vdXNlRG93biA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgIHRoaXMuY2xpY2tEb3duU3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMuY2xpY2tTdGFydFBvaW50ID0geyB4OiBldnQueCwgeTogZXZ0LnkgfTtcbn1cblxuXG5JbnB1dExheWVyQ29tcG9uZW50LnByb3RvdHlwZS5vbk1vdXNlTW92ZSA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICBpZiAodGhpcy5pc0RyYWdnaW5nKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IG5ldyBwYy5WZWMyKHRoaXMuY2xpY2tTdGFydFBvaW50LnggLSBldnQueCwgdGhpcy5jbGlja1N0YXJ0UG9pbnQueSAtIGV2dC55KTtcbiAgICAgICAgdGhpcy5lbnRpdHkuZmlyZSgnc2Nyb2xsaW5nJywgZGlyZWN0aW9uKTtcbiAgICAgICAgdGhpcy5jbGlja1N0YXJ0UG9pbnQgPSB7IHg6IGV2dC54LCB5OiBldnQueSB9O1xuICAgIH1cbn1cblxuSW5wdXRMYXllckNvbXBvbmVudC5wcm90b3R5cGUub25Nb3VzZVVwID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuXG4gICAgaWYgKERhdGUubm93KCkgLSB0aGlzLmNsaWNrRG93blN0YXJ0IDwgKHRoaXMuZHJhZ1RpbWUgKiAxMDAwKSkge1xuICAgICAgICBpZiAodGhpcy5jbGlja1N0YXJ0UG9pbnQpIHtcbiAgICAgICAgICAgIC8vIHRoaXMuZW50aXR5LmZpcmUoJ3ZhbGlkQ2xpY2snLCB0aGlzLmNsaWNrU3RhcnRQb2ludCk7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVJheWNhc3RDb2xsaXNpb25zKHRoaXMuY2xpY2tTdGFydFBvaW50LngsIHRoaXMuY2xpY2tTdGFydFBvaW50LnkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5JbnB1dExheWVyQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVSYXljYXN0Q29sbGlzaW9ucyA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgY29uc3QgY2FtZXJhRW50aXR5ID0gdGhpcy5jYW1lcmFFbnRpdHk7XG4gICAgY29uc3QgY2FtZXJhQ29tcG9uZW50ID0gdGhpcy5jYW1lcmFFbnRpdHkuY2FtZXJhO1xuICAgIGNhbWVyYUNvbXBvbmVudC5zY3JlZW5Ub1dvcmxkKHgsIHksIGNhbWVyYUNvbXBvbmVudC5mYXJDbGlwLCB0aGlzLnJheS5kaXJlY3Rpb24pO1xuICAgIHRoaXMucmF5Lm9yaWdpbi5jb3B5KGNhbWVyYUVudGl0eS5nZXRQb3NpdGlvbigpKTtcbiAgICB0aGlzLnJheS5kaXJlY3Rpb24uc3ViKHRoaXMucmF5Lm9yaWdpbikubm9ybWFsaXplKCk7XG5cbiAgICB0aGlzLmFwcC5maXJlKCdwaWNrZXI6cmF5Y2FzdCcsIHRoaXMucmF5LCB7IHgsIHkgfSk7XG59XG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZVBpY2tlclJlc3VsdCA9IGZ1bmN0aW9uIChwaWNrZWRFbnRpdHksIGhpdFBvc2l0aW9uLCBzY3JlZW5Qb3MpIHtcbiAgICB0aGlzLmlucHV0UXVldWUucHVzaCh7XG4gICAgICAgIGVudGl0eTogcGlja2VkRW50aXR5LFxuICAgICAgICBoaXRQb3NpdGlvbjogaGl0UG9zaXRpb24sXG4gICAgICAgIHNjcmVlblBvc2l0aW9uOiBzY3JlZW5Qb3NcbiAgICB9KTtcbn1cblxuSW5wdXRMYXllckNvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGR0KSB7XG4gICAgdGhpcy5wcm9jZXNzSW5wdXRRdWV1ZSgpO1xufVxuXG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLnByb2Nlc3NJbnB1dFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgaWYgKHRoaXMuaW5wdXRRdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBoaWdoZXN0UHJpb3JpdHlQaWNrID0gdGhpcy5pbnB1dFF1ZXVlWzBdO1xuICAgICAgICBsZXQgaGlnaGVzdFByaW9yaXR5ID0gLTE7XG4gICAgICAgIC8vIEZpbmQgaGlnaGVzdCBwcmlvcml0eVxuICAgICAgICBmb3IgKGNvbnN0IHBpY2sgb2YgdGhpcy5pbnB1dFF1ZXVlKSB7XG4gICAgICAgICAgICBjb25zdCBwaWNrUHJpb3JpdHkgPSBnZXRQcmlvcml0eShwaWNrLmVudGl0eSlcbiAgICAgICAgICAgIGlmIChwaWNrUHJpb3JpdHkgPiBoaWdoZXN0UHJpb3JpdHkpIHtcbiAgICAgICAgICAgICAgICBoaWdoZXN0UHJpb3JpdHlQaWNrID0gcGljaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoaWdoZXN0UHJpb3JpdHlQaWNrLmVudGl0eS50YWdzLmhhcygnZ2FtZUNoYXJhY3RlcicpKSB7XG4gICAgICAgICAgICB0aGlzLnBpY2tlZEdhbWVDaGFyYWN0ZXIoaGlnaGVzdFByaW9yaXR5UGljay5lbnRpdHksIGhpZ2hlc3RQcmlvcml0eVBpY2suaGl0UG9zaXRpb24pXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGlnaGVzdFByaW9yaXR5UGljay5lbnRpdHkudGFncy5oYXMoJ25hdmlnYXRpb24nKSkge1xuICAgICAgICAgICAgdGhpcy5waWNrZWROYXZpZ2F0aW9uKGhpZ2hlc3RQcmlvcml0eVBpY2suZW50aXR5LCBoaWdoZXN0UHJpb3JpdHlQaWNrLmhpdFBvc2l0aW9uKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbnB1dFF1ZXVlID0gW107XG4gICAgfVxufVxuXG5JbnB1dExheWVyQ29tcG9uZW50LnByb3RvdHlwZS5waWNrZWRHYW1lQ2hhcmFjdGVyID0gZnVuY3Rpb24gKHBpY2tlZEVudGl0eSwgaGl0UG9zaXRpb24pIHtcbiAgICB0aGlzLmVudGl0eS5maXJlKCdwaWNrZXI6Z2FtZUNoYXJhY3RlcicsIHBpY2tlZEVudGl0eSk7XG59XG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLnBpY2tlZE5hdmlnYXRpb24gPSBmdW5jdGlvbiAocGlja2VkRW50aXR5LCBoaXRQb3NpdGlvbikge1xuICAgIGNvbnN0IG5hdkNvbXAgPSBwaWNrZWRFbnRpdHkuc2NyaXB0WydOYXZpZ2F0aW9uQ29tcG9uZW50J107XG4gICAgY29uc3QgbmVhcmVzdE5vZGUgPSBuYXZDb21wLmdldE5lYXJlc3ROb2RlKGhpdFBvc2l0aW9uKTtcbiAgICB0aGlzLmVudGl0eS5maXJlKCdwaWNrZXI6bmF2aWdhdGlvbicsIG5lYXJlc3ROb2RlKTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJpb3JpdHkoZW50aXR5KSB7XG4gICAgaWYgKGVudGl0eS50YWdzLmhhcygnZ2FtZUNoYXJhY3RlcicpKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgIH1cblxuICAgIGlmIChlbnRpdHkudGFncy5oYXMoJ25hdmlnYXRpb24nKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5jb25zdCB7IEdhbWVGYWNhZGUgfSA9IHJlcXVpcmUoJy4uL0dhbWVGYWNhZGUnKTtcblxuZXhwb3J0IGNvbnN0IENhY29nZW5HYW1lID0gcGMuY3JlYXRlU2NyaXB0KCdDYWNvZ2VuR2FtZScpO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuQ2Fjb2dlbkdhbWUucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkFQUF9JTklUSUFMSVNFRCk7XG4gICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FLCBcIk1hcDFcIik7XG59O1xuXG4vLyB1cGRhdGUgY29kZSBjYWxsZWQgZXZlcnkgZnJhbWVcbkNhY29nZW5HYW1lLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZHQpIHtcblxufTsiLCJpbXBvcnQgeyBOYXZpZ2F0aW9uTm9kZSB9IGZyb20gXCIuLi8uLi9tb2RlbC9nYW1lTWFwL25hdmlnYXRpb24vTmF2aWdhdGlvbk5vZGVcIjtcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcblxuZXhwb3J0IGNvbnN0IE5hdmlnYXRpb25Db21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ05hdmlnYXRpb25Db21wb25lbnQnKTtcblxuTmF2aWdhdGlvbkNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImNvbm5lY3RlZENvbXBvbmVudHNcIiwge1xuICAgIHR5cGU6IFwiZW50aXR5XCIsXG4gICAgYXJyYXk6IHRydWUsXG4gICAgdGl0bGU6IFwiQ29ubmVjdGVkIENvbXBvbmVudHNcIlxufSk7XG5cbk5hdmlnYXRpb25Db21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qgc2NhbGUgPSB0aGlzLmVudGl0eS5nZXRMb2NhbFNjYWxlKCk7XG4gICAgY29uc3QgaGFsZkV4dGVudHMgPSBuZXcgcGMuVmVjMyhzY2FsZS54IC8gMiwgMC4wNSwgc2NhbGUueiAvIDIpO1xuICAgIHRoaXMuYWFiYiA9IG5ldyBwYy5Cb3VuZGluZ0JveCh0aGlzLmVudGl0eS5nZXRQb3NpdGlvbigpLCBoYWxmRXh0ZW50cyk7XG4gICAgdGhpcy5hcHAub24oJ3BpY2tlcjpyYXljYXN0JywgdGhpcy5oYW5kbGVSYXlDYXN0LCB0aGlzKTtcblxuICAgIHRoaXMuZW50aXR5LmZpbmRCeU5hbWUoJ1BsYW5lJykuZW5hYmxlZCA9IGZhbHNlO1xuXG59XG5cbk5hdmlnYXRpb25Db21wb25lbnQucHJvdG90eXBlLmhhbmRsZVJheUNhc3QgPSBmdW5jdGlvbiAocmF5LCBzY3JlZW5Qb3MpIHtcbiAgICBjb25zdCBoaXRQb3NpdGlvbiA9IG5ldyBwYy5WZWMzKCk7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5hYWJiLmludGVyc2VjdHNSYXkocmF5LCBoaXRQb3NpdGlvbik7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgICB0aGlzLmFwcC5maXJlKCdwaWNrZXI6cmVzdWx0JywgdGhpcy5lbnRpdHksIGhpdFBvc2l0aW9uLCBzY3JlZW5Qb3MpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PE5hdmlnYXRpb25Ob2RlPn0gbm9kZUdyaWQgLSBBcnJheSBvZiBub2RlcyByZXByZXNlbnRpbmcgcG9pbnRzIG9uIHRoZSBncmlkLlxuICovXG5OYXZpZ2F0aW9uQ29tcG9uZW50LnByb3RvdHlwZS5zZXRHcmlkID0gZnVuY3Rpb24gKG5vZGVHcmlkKSB7XG4gICAgdGhpcy5ub2RlR3JpZCA9IG5vZGVHcmlkO1xufVxuXG5OYXZpZ2F0aW9uQ29tcG9uZW50LnByb3RvdHlwZS5nZXRHcmlkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVHcmlkO1xufVxuXG5OYXZpZ2F0aW9uQ29tcG9uZW50LnByb3RvdHlwZS5nZXROZWFyZXN0Tm9kZSA9IGZ1bmN0aW9uICh0YXJnZXRQb2ludCkge1xuICAgIGxldCBuZWFyZXN0Tm9kZSA9IHRoaXMubm9kZUdyaWRbMF07XG4gICAgbGV0IGRpc3RTcXJ0VG9OZWFyZXN0Tm9kZSA9IEFzdGFyLmdldERpc3RTcXVhcmVkKG5lYXJlc3ROb2RlLCB0YXJnZXRQb2ludCk7XG4gICAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMubm9kZUdyaWQpIHtcbiAgICAgICAgY29uc3QgZGlzdFRvTm9kZSA9IEFzdGFyLmdldERpc3RTcXVhcmVkKG5vZGUsIHRhcmdldFBvaW50KTtcblxuICAgICAgICBpZiAoZGlzdFRvTm9kZSA8IGRpc3RTcXJ0VG9OZWFyZXN0Tm9kZSkge1xuICAgICAgICAgICAgZGlzdFNxcnRUb05lYXJlc3ROb2RlID0gZGlzdFRvTm9kZTtcbiAgICAgICAgICAgIG5lYXJlc3ROb2RlID0gbm9kZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmVhcmVzdE5vZGU7XG59XG4iLCJleHBvcnQgY29uc3QgQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ0Fncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50Jyk7XG5pbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tICcuLi8uLi8uLi9HYW1lRmFjYWRlJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IEdhbWVNYXBQcm94eSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVNYXAvR2FtZU1hcFByb3h5JztcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcbmltcG9ydCB7IEdhbWVTdGF0ZVByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVByb3h5JztcbmltcG9ydCB7IGdhbWVwbGF5TW9kZVR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVZPJztcblxuQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJzaWdodFJhbmdlXCIsIHtcbiAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIHRpdGxlOiBcIlNpZ2h0IFJhbmdlXCIsXG4gICAgZGVmYXVsdDogNVxufSk7XG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5BZ3JvR2FtZUNoYXJhY3RlckNvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVudGl0eS5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5wcmVyZWdpc3Rlck5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTUFQX0dSSURfQ1JFQVRFRCk7XG4gICAgdGhpcy5lbnRpdHkuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10ucHJlcmVnaXN0ZXJOb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk1PVkVEX1RPX05PREUgKyBcInBsYXllclwiKTtcblxuICAgIHRoaXMuZW50aXR5Lm9uKEdhbWVDb21tYW5kcy5NQVBfR1JJRF9DUkVBVEVELCB0aGlzLmhhbmRsZU1hcEdyaWRDcmVhdGVkLCB0aGlzKTtcbiAgICB0aGlzLmVudGl0eS5vbihHYW1lQ29tbWFuZHMuTU9WRURfVE9fTk9ERSArIFwicGxheWVyXCIsIHRoaXMuaGFuZGxlTW92ZWRUb05vZGUsIHRoaXMpO1xufTtcblxuQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZU1hcEdyaWRDcmVhdGVkID0gZnVuY3Rpb24gKGlkLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBjb25zdCBjaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgaWQpO1xuICAgIGNvbnN0IHZvID0gY2hhcmFjdGVyUHJveHkudm87XG5cbiAgICBpZiAoIXZvLmN1cnJlbnROb2RlKSB7XG4gICAgICAgIGNvbnN0IGdhbWVNYXBQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVNYXBQcm94eS5OQU1FKTtcbiAgICAgICAgY2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUgPSBnYW1lTWFwUHJveHkuZmluZE5lYXJlc3ROb2RlKHRoaXMuZW50aXR5LmdldExvY2FsUG9zaXRpb24oKSk7XG4gICAgICAgIHZvLmFncm9BcmVhID0gQXN0YXIuYnJlYWR0aEZpcnN0U2VhcmNoKHZvLmN1cnJlbnROb2RlLCB0aGlzLnNpZ2h0UmFuZ2UpO1xuXG4gICAgfVxufVxuXG5BZ3JvR2FtZUNoYXJhY3RlckNvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlTW92ZWRUb05vZGUgPSBmdW5jdGlvbiAoaWQsIG5vZGUpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIGNvbnN0IHZvID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBpZCkudm87XG4gICAgY29uc3QgZ2FtZVN0YXRlID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZVN0YXRlUHJveHkuTkFNRSkudm87XG4gICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGlkKTtcblxuICAgIC8vIElnbm9yZSBpZiB0aGUgcGxheWVyIGlzbid0IGV4cGxvcmluZ1xuICAgIGlmIChnYW1lU3RhdGUuZ2FtZXBsYXlNb2RlICE9PSBnYW1lcGxheU1vZGVUeXBlcy5FWFBMT1JBVElPTiB8fCBjaGFyYWN0ZXJQcm94eS5pc0RlYWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgYWdyb05vZGUgb2Ygdm8uYWdyb0FyZWEpIHtcbiAgICAgICAgaWYgKGFncm9Ob2RlLmVxdWFscyhub2RlKSkge1xuICAgICAgICAgICAgdGhpcy5lbnRpdHkuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10ubG9va0F0UG9pbnQobm9kZSk7XG5cbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TRVRfQ0hBUkFDVEVSX1RPX05PREUgKyBcInBsYXllclwiLCBub2RlKTtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TVEFSVF9DT01CQVQsIGlkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIlxuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuY29uc3QgeyBNZWRpYXRvciB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuXG5leHBvcnQgY2xhc3MgVG9hc3RNZXNzYWdlTWVkaWF0b3IgZXh0ZW5kcyBNZWRpYXRvciB7XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJUb2FzdE1lc3NhZ2VNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKFRvYXN0TWVzc2FnZU1lZGlhdG9yLk5BTUUpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZU5vdGlmaWNhdGlvbihbXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFXG4gICAgICAgIF0pO1xuXG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ1RvYXN0TWVzc2FnZUNvbXBvbmVudCddLmFkZE1lc3NhZ2UoYXJnc1swXSk7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gXCJAa29yZWV6L3B1cmUtbXZjXCI7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSBcIi4uLy4uL0dhbWVGYWNhZGVcIjtcbmltcG9ydCB7IFRvYXN0TWVzc2FnZU1lZGlhdG9yIH0gZnJvbSBcIi4vVG9hc3RNZXNzYWdlTWVkaWF0b3JcIjtcblxuZXhwb3J0IGNvbnN0IFRvYXN0TWVzc2FnZUNvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnVG9hc3RNZXNzYWdlQ29tcG9uZW50Jyk7XG5cblRvYXN0TWVzc2FnZUNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnbGFiZWxFbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0xhYmVsIEVudGl0eScgfSk7XG5Ub2FzdE1lc3NhZ2VDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ21lc3NhZ2VUaW1lJywgeyB0eXBlOiAnbnVtYmVyJywgZGVmYXVsdDogNSwgdGl0bGU6ICdNZXNzYWdlIFRpbWUnIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuVG9hc3RNZXNzYWdlQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoVG9hc3RNZXNzYWdlTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoVG9hc3RNZXNzYWdlTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5tZXNzYWdlUXVldWUgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRUaW1lb3V0ID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgVG9hc3RNZXNzYWdlTWVkaWF0b3IodGhpcy5lbnRpdHkpKTtcbn07XG5cblRvYXN0TWVzc2FnZUNvbXBvbmVudC5wcm90b3R5cGUuYWRkTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMubWVzc2FnZVF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLm1lc3NhZ2VRdWV1ZS5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnNob3dOZXh0TWVzc2FnZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubWVzc2FnZVF1ZXVlLnB1c2gobWVzc2FnZSk7XG4gICAgfVxufVxuXG5cblRvYXN0TWVzc2FnZUNvbXBvbmVudC5wcm90b3R5cGUuc2hvd05leHRNZXNzYWdlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLm1lc3NhZ2VRdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG5leHRNZXNzYWdlID0gdGhpcy5tZXNzYWdlUXVldWVbMF07XG5cbiAgICAgICAgdGhpcy5sYWJlbEVudGl0eS5lbGVtZW50LnRleHQgPSBuZXh0TWVzc2FnZTtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZVF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICB0aGlzLnNob3dOZXh0TWVzc2FnZSgpO1xuICAgICAgICB9LCB0aGlzLm1lc3NhZ2VUaW1lICogMTAwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sYWJlbEVudGl0eS5lbGVtZW50LnRleHQgPSBcIlwiO1xuXG4gICAgfVxufSIsImV4cG9ydCBjb25zdCBTZXRDYW1lcmFUYXJnZXRDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ1NldENhbWVyYVRhcmdldENvbXBvbmVudCcpO1xuaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSAnQGtvcmVlei9wdXJlLW12Yyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi4vLi4vLi4vR2FtZUZhY2FkZSc7XG5cbi8vIHBvc3RJbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuU2V0Q2FtZXJhVGFyZ2V0Q29tcG9uZW50LnByb3RvdHlwZS5wb3N0SW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TRVRfQ0FNRVJBX1RBUkdFVCwgdGhpcy5lbnRpdHkpO1xufTtcbiIsIlxuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi8uLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgUGxheWVyQ29tYmF0UGFuZWxDb21wb25lbnQgfSBmcm9tICcuL1BsYXllckNvbWJhdFBhbmVsQ29tcG9uZW50JztcbmltcG9ydCB7IElucHV0TGF5ZXJDb21wb25lbnQgfSBmcm9tICcuLi9pbnB1dExheWVyL0lucHV0TGF5ZXJDb21wb25lbnQnO1xuY29uc3QgeyBNZWRpYXRvciB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuXG5leHBvcnQgY2xhc3MgUGxheWVyQ29tYmF0UGFuZWxNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIlBsYXllckNvbWJhdFBhbmVsTWVkaWF0b3JcIiB9O1xuXG4gICAgY29uc3RydWN0b3Iodmlld0NvbXBvbmVudCkge1xuICAgICAgICBzdXBlcihQbGF5ZXJDb21iYXRQYW5lbE1lZGlhdG9yLk5BTUUpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZU5vdGlmaWNhdGlvbihbXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FX0NPTVBMRVRFLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkFXQUlUX1BMQVlFUl9DT01CQVRfSU5QVVQsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuRU5EX0NPTUJBVF9UVVJOLFxuICAgICAgICBdKTtcblxuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50O1xuXG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vbignY2xpY2s6ZW5kVHVybicsIHRoaXMuaGFuZGxlRW5kVHVybiwgdGhpcyk7XG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FX0NPTVBMRVRFOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5BV0FJVF9QTEFZRVJfQ09NQkFUX0lOUFVUOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkVORF9DT01CQVRfVFVSTjpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlRW5kVHVybihldnQpIHtcbiAgICAgICAgdGhpcy5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5FTkRfQ09NQkFUX1RVUk4pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gXCJAa29yZWV6L3B1cmUtbXZjXCI7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSBcIi4uLy4uL0dhbWVGYWNhZGVcIjtcbmltcG9ydCB7IFBsYXllckNvbWJhdFBhbmVsTWVkaWF0b3IgfSBmcm9tIFwiLi9QbGF5ZXJDb21iYXRQYW5lbE1lZGlhdG9yXCI7XG5cbmV4cG9ydCBjb25zdCBQbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnUGxheWVyQ29tYmF0UGFuZWxDb21wb25lbnQnKTtcblxuUGxheWVyQ29tYmF0UGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2VuZFR1cm5CdXR0b24nLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0VuZCBUdXJuIGJ1dHRvbicgfSk7XG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5QbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuUGxheWVyQ29tYmF0UGFuZWxDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKFBsYXllckNvbWJhdFBhbmVsTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoUGxheWVyQ29tYmF0UGFuZWxNZWRpYXRvci5OQU1FKTtcbiAgICB9XG5cbiAgICB0aGlzLm1lc3NhZ2VRdWV1ZSA9IFtdO1xuICAgIHRoaXMuY3VycmVudFRpbWVvdXQgPSB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLmZhY2FkZS5yZWdpc3Rlck1lZGlhdG9yKG5ldyBQbGF5ZXJDb21iYXRQYW5lbE1lZGlhdG9yKHRoaXMuZW50aXR5KSk7XG5cbiAgICB0aGlzLmVuZFR1cm5CdXR0b24uZWxlbWVudC5vbignY2xpY2snLCB0aGlzLmNsaWNrRW5kVHVybiwgdGhpcyk7XG59O1xuXG5QbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuY2xpY2tFbmRUdXJuID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIHRoaXMuZW50aXR5LmZpcmUoJ2NsaWNrOmVuZFR1cm4nKTtcbn1cbiIsImV4cG9ydCBjb25zdCBIaXRib3hDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ0hpdGJveENvbXBvbmVudCcpO1xuXG5cbkhpdGJveENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBzY2FsZSA9IHRoaXMuZW50aXR5LmdldExvY2FsU2NhbGUoKTtcbiAgICBjb25zdCBoYWxmRXh0ZW50cyA9IG5ldyBwYy5WZWMzKHNjYWxlLnggLyAyLCBzY2FsZS55IC8gMiwgc2NhbGUueiAvIDIpO1xuICAgIHRoaXMuYWFiYiA9IG5ldyBwYy5Cb3VuZGluZ0JveCh0aGlzLmVudGl0eS5nZXRQb3NpdGlvbigpLCBoYWxmRXh0ZW50cyk7XG4gICAgdGhpcy5hcHAub24oJ3BpY2tlcjpyYXljYXN0JywgdGhpcy5oYW5kbGVSYXlDYXN0LCB0aGlzKTtcblxuICAgIHRoaXMuZW50aXR5Lm1vZGVsLmVuYWJsZWQgPSBmYWxzZTtcblxufVxuXG5IaXRib3hDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZVJheUNhc3QgPSBmdW5jdGlvbiAocmF5LCBzY3JlZW5Qb3MpIHtcbiAgICBjb25zdCBoaXRQb3NpdGlvbiA9IG5ldyBwYy5WZWMzKCk7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5hYWJiLmludGVyc2VjdHNSYXkocmF5LCBoaXRQb3NpdGlvbik7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgICB0aGlzLmFwcC5maXJlKCdwaWNrZXI6cmVzdWx0JywgdGhpcy5lbnRpdHkucGFyZW50LCBoaXRQb3NpdGlvbiwgc2NyZWVuUG9zKTtcbiAgICB9XG59XG5cbkhpdGJveENvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGR0KSB7XG4gICAgdGhpcy5hYWJiLmNlbnRlci5jb3B5KHRoaXMuZW50aXR5LmdldFBvc2l0aW9uKCkpO1xufVxuIiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5jb25zdCB7IE1lZGlhdG9yIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBjbGFzcyBBY3Rpb25QYW5lbE1lZGlhdG9yIGV4dGVuZHMgTWVkaWF0b3Ige1xuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiQWN0aW9uUGFuZWxNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKEFjdGlvblBhbmVsTWVkaWF0b3IuTkFNRSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKFtcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5TRVRfUExBWUVSX0FDVElPTiwgR2FtZUNvbW1hbmRzLkRJU1BMQVlfUExBWUVSX0FDVElPTixcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5VU0VfUExBWUVSX0FDVElPTlxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50ID0gdmlld0NvbXBvbmVudDtcblxuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQub24oJ2NsaWNrOmFjdGlvbkJ1dHRvbicsIHRoaXMuaGFuZGxlQ2xpY2tBY3Rpb25CdXR0b24sIHRoaXMpO1xuXG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuRElTUExBWV9QTEFZRVJfQUNUSU9OOlxuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvbk5hbWUgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0FjdGlvblBhbmVsQ29tcG9uZW50J10uc2VsZWN0QWN0aW9uKGFjdGlvbk5hbWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuVVNFX1BMQVlFUl9BQ1RJT046XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgaGFuZGxlQ2xpY2tBY3Rpb25CdXR0b24oYWN0aW9uTmFtZSkge1xuICAgICAgICAvLyB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydBY3Rpb25QYW5lbENvbXBvbmVudCddLnNlbGVjdEFjdGlvbihhY3Rpb25OYW1lKTtcbiAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0VUX1BMQVlFUl9BQ1RJT04sIGFjdGlvbk5hbWUpXG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IEFjdGlvbkJ1dHRvbkNvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnQWN0aW9uQnV0dG9uQ29tcG9uZW50Jyk7XG5pbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcblxuQWN0aW9uQnV0dG9uQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdhY3Rpb24nLCB7IHR5cGU6ICdzdHJpbmcnLCB0aXRsZTogJ0FjdGlvbicgfSk7XG5BY3Rpb25CdXR0b25Db21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2hpZ2hsaWdodEVudGl0eScsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnSGlnaGxpZ2h0IEVudGl0eScgfSk7XG5BY3Rpb25CdXR0b25Db21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2ljb25FbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0ljb24gRW50aXR5JyB9KTtcbkFjdGlvbkJ1dHRvbkNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnaWNvbkFzc2V0JywgeyB0eXBlOiAnYXNzZXQnLCB0aXRsZTogJ0ljb24gQXNzZXQnIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuQWN0aW9uQnV0dG9uQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaGlnaGxpZ2h0RW50aXR5LmVuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmVudGl0eS5vbignc2VsZWN0OmFjdGlvbicsIHRoaXMuaGFuZGxlQ2hhbmdlQWN0aW9uLCB0aGlzKTtcbiAgICB0aGlzLmVudGl0eS5lbGVtZW50Lm9uKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2ssIHRoaXMpO1xufTtcblxuQWN0aW9uQnV0dG9uQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICB0aGlzLmVudGl0eS5wYXJlbnQuZmlyZSgnY2xpY2s6YWN0aW9uQnV0dG9uJywgdGhpcy5hY3Rpb24pO1xufVxuXG5BY3Rpb25CdXR0b25Db21wb25lbnQucHJvdG90eXBlLmhhbmRsZUNoYW5nZUFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICB0aGlzLmhpZ2hsaWdodEVudGl0eS5lbmFibGVkID0gKHRoaXMuYWN0aW9uID09PSBhY3Rpb24pO1xufSIsImV4cG9ydCBjb25zdCBBY3Rpb25QYW5lbENvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnQWN0aW9uUGFuZWxDb21wb25lbnQnKTtcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4uLy4uL0dhbWVGYWNhZGUnO1xuaW1wb3J0IHsgQWN0aW9uUGFuZWxNZWRpYXRvciB9IGZyb20gJy4vQWN0aW9uUGFuZWxNZWRpYXRvcic7XG5pbXBvcnQgeyBBY3Rpb25CdXR0b25Db21wb25lbnQgfSBmcm9tICcuL0FjdGlvbkJ1dHRvbkNvbXBvbmVudCc7XG5cbkFjdGlvblBhbmVsQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdhY3Rpb25CdXR0b25zJywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdBY3Rpb24gQnV0dG9ucycsIGFycmF5OiB0cnVlIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuQWN0aW9uUGFuZWxDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIGlmICh0aGlzLmZhY2FkZS5oYXNNZWRpYXRvcihBY3Rpb25QYW5lbE1lZGlhdG9yLk5BTUUpKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnJlbW92ZU1lZGlhdG9yKEFjdGlvblBhbmVsTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgQWN0aW9uUGFuZWxNZWRpYXRvcih0aGlzLmVudGl0eSkpO1xufVxuXG5BY3Rpb25QYW5lbENvbXBvbmVudC5wcm90b3R5cGUuc2VsZWN0QWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbk5hbWUpIHtcbiAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiB0aGlzLmFjdGlvbkJ1dHRvbnMpIHtcbiAgICAgICAgYnV0dG9uLmZpcmUoJ3NlbGVjdDphY3Rpb24nLCBhY3Rpb25OYW1lKTtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgVUlTdG9wUHJvcGFnYXRpb24gPSBwYy5jcmVhdGVTY3JpcHQoJ1VJU3RvcFByb3BhZ2F0aW9uJyk7XG5cblVJU3RvcFByb3BhZ2F0aW9uLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24ocGMuRVZFTlRfTU9VU0VET1dOLCAoZXZ0KSA9PiB7XG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24ocGMuRVZFTlRfTU9VU0VET1dOLCAoZXZ0KSA9PiB7XG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24ocGMuRVZFTlRfVE9VQ0hTVEFSVCwgKGV2dCkgPT4ge1xuICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmVudGl0eS5lbGVtZW50Lm9uKHBjLkVWRU5UX1RPVUNITU9WRSwgKGV2dCkgPT4ge1xuICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmVudGl0eS5lbGVtZW50Lm9uKHBjLkVWRU5UX1RPVUNIRU5ELCAoZXZ0KSA9PiB7XG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcbn1cblxuIiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmNvbnN0IHsgUHVyZU1WQyB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBDYWNvZ2VuR2FtZSB9IGZyb20gJy4vdmlldy9DYWNvZ2VuR2FtZSc7XG5cbmltcG9ydCB7IE5hdmlnYXRpb25Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uQ29tcG9uZW50JztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50JztcbmltcG9ydCB7IEFncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2dhbWVDaGFyYWN0ZXIvYWdncm8vQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnO1xuaW1wb3J0IHsgVG9hc3RNZXNzYWdlQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L3RvYXN0TWVzc2FnZS9Ub2FzdE1lc3NhZ2VDb21wb25lbnQnO1xuaW1wb3J0IHsgU2V0Q2FtZXJhVGFyZ2V0Q29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2dhbWVDaGFyYWN0ZXIvc2V0Q2FtZXJhVGFyZ2V0L1NldENhbWVyYVRhcmdldENvbXBvbmVudCc7XG5pbXBvcnQgeyBQbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudCB9IGZyb20gJy4vdmlldy9wbGF5ZXJDb21iYXRQYW5lbC9QbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudCc7XG5pbXBvcnQgeyBIaXRib3hDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvY29sbGlzaW9uL0hpdGJveENvbXBvbmVudCc7XG5pbXBvcnQgeyBBY3Rpb25QYW5lbENvbXBvbmVudCB9IGZyb20gJy4vdmlldy9hY3Rpb25QYW5lbC9BY3Rpb25QYW5lbENvbXBvbmVudCc7XG5pbXBvcnQgeyBVSVN0b3BQcm9wYWdhdGlvbiB9IGZyb20gJy4vY29tcG9uZW50cy9VSVN0b3BQcm9wYWdhdGlvbic7XG5cbmNsYXNzIE1haW4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIk1haW4gc3RhcnRcIik7XG4gICAgICAgIFB1cmVNVkMuZGVidWcgPSB0cnVlO1xuICAgICAgICBGYWNhZGUuZ2V0SW5zdGFuY2UgPSBHYW1lRmFjYWRlLmdldEluc3RhbmNlO1xuICAgICAgICBjb25zb2xlLmxvZyhGYWNhZGUpO1xuXG4gICAgICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICAgICAgdGhpcy5mYWNhZGUuc3RhcnR1cCh0aGlzKTtcbiAgICB9XG59XG5cbmNvbnN0IG1haW4gPSBuZXcgTWFpbigpOyJdLCJzb3VyY2VSb290IjoiIn0=