(()=>{"use strict";var t={382:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=o(542),i=o(999),r=function(){function t(e){if(this.commandMap={},t.instanceMap[e])throw new Error("controller key for this Multiton key already constructed");this.multitonKey=e,this.logger=n.PureMVC.debug?n.PureMVC.logCommand:n.PureMVC.logNone,this.initializeController()}return t.removeController=function(t){delete this.instanceMap[t]},t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.prototype.registerCommand=function(t,e){this.commandMap[t]||this.view.registerObserver(t,this.executeCommand,this),this.commandMap[t]=e},t.prototype.hasCommand=function(t){return void 0!==this.commandMap[t]},t.prototype.removeCommand=function(t){this.hasCommand(t)&&(this.view.removeObserver(t,this.executeCommand,this),delete this.commandMap[t])},t.prototype.initializeController=function(){this.view=i.View.getInstance(this.multitonKey)},t.prototype.executeCommand=function(e){for(var o=[],n=1;n<arguments.length;n++)o[n-1]=arguments[n];var i=this.commandMap[e];i&&(this.logger(t._consoleArgs,e,i.name),i.apply(void 0,[this.multitonKey,e].concat(o)))},t._consoleArgs=["","background: #3F234E","background: #6E2994","color: #D4BFE0; background: #8724BD;","background: #6E2994","background: #3F234E"],t.instanceMap={},t}();e.Controller=r},222:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=o(382),i=o(433),r=o(542),s=o(999),a=function(){function t(e){if(t.instanceMap[e])throw new Error("Facade instance for this Multiton key already constructed!");this.logger=r.PureMVC.debug?r.PureMVC.logNotification:r.PureMVC.logNone,this.initializeNotifier(e),this.initializeFacade()}return t.getInstance=function(e){return e?(t.instanceMap[e]||(t.instanceMap[e]=new t(e)),t.instanceMap[e]):null},t.hasCore=function(t){return void 0!==this.instanceMap[t]},t.removeCore=function(t){this.instanceMap[t]&&(i.Model.removeModel(t),s.View.removeView(t),n.Controller.removeController(t),delete this.instanceMap[t])},t.prototype.initializeFacade=function(){this.initializeModel(),this.initializeController(),this.initializeView()},t.prototype.registerCommand=function(t,e){this.controller.registerCommand(t,e)},t.prototype.removeCommand=function(t){this.controller.removeCommand(t)},t.prototype.hasCommand=function(t){return this.controller.hasCommand(t)},t.prototype.registerProxy=function(t){this.model.registerProxy(t)},t.prototype.retrieveProxy=function(t){return this.model.retrieveProxy(t)},t.prototype.removeProxy=function(t){return this.model?this.model.removeProxy(t):null},t.prototype.hasProxy=function(t){return this.model.hasProxy(t)},t.prototype.registerMediator=function(t){this.view.registerMediator(t)},t.prototype.retrieveMediator=function(t){return this.view.retrieveMediator(t)},t.prototype.removeMediator=function(t){return this.view.removeMediator(t)},t.prototype.sleepMediator=function(t){return this.view.sleepMediator(t)},t.prototype.awakeMediator=function(t){return this.view.awakeMediator(t)},t.prototype.hasMediator=function(t){return this.view.hasMediator(t)},t.prototype.sendNotification=function(e){for(var o,n=[],i=1;i<arguments.length;i++)n[i-1]=arguments[i];this.logger.apply(this,[t._consoleArgs,e].concat(n)),(o=this.view).notifyObservers.apply(o,[e].concat(n))},t.prototype.initializeNotifier=function(t){this.multitonKey=t},t.prototype.initializeController=function(){this.controller||(this.controller=n.Controller.getInstance(this.multitonKey))},t.prototype.initializeModel=function(){this.model||(this.model=i.Model.getInstance(this.multitonKey))},t.prototype.initializeView=function(){this.view||(this.view=s.View.getInstance(this.multitonKey))},t._consoleArgs=["","background: #757130","background: #DED434","color: #2F2E15; background: #FFF325;","background: #DED434","background: #757130"],t.instanceMap={},t}();e.Facade=a},651:function(t,e,o){var n,i=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var r=o(117),s=o(542),a=function(t){function e(e,o){var n=t.call(this)||this;return n.logger=s.PureMVC.debug?s.PureMVC.logMediator:s.PureMVC.logNone,n.mediatorName=e||"Mediator",n.viewComponent=o,n.sleeping=!0,n.subscribedNotifications=[],n.notificationSubscriptionChange=null,n}return i(e,t),Object.defineProperty(e.prototype,"notifications",{get:function(){return this.subscribedNotifications},enumerable:!0,configurable:!0}),e.prototype.getMediatorName=function(){return this.mediatorName},e.prototype.setViewComponent=function(t){this.viewComponent=t},e.prototype.getViewComponent=function(){return this.viewComponent},e.prototype.onRegister=function(t){this.notificationSubscriptionChange=t,this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.notificationSubscriptionChange=null,this.logger(e._consoleArgs,this.constructor.name,"remove")},e.prototype.onSleep=function(){this.sleeping=!0,this.logger(e._consoleArgs,this.constructor.name,"sleep")},e.prototype.onAwake=function(){this.sleeping=!1,this.logger(e._consoleArgs,this.constructor.name,"awake")},Object.defineProperty(e.prototype,"isSleeping",{get:function(){return this.sleeping},enumerable:!0,configurable:!0}),e.prototype.subscribeNotification=function(t){this.changeSubscription(t,this.addSubscription)},e.prototype.unsubscribeNotification=function(t){this.changeSubscription(t,this.removeSubscription)},e.prototype.changeSubscription=function(t,e){var o=this,n=this.notifications.slice(),i=!1;t instanceof Array?t.forEach((function(t){i=e.call(o,t)||i})):i=e.call(this,t),i&&this.notificationSubscriptionChange&&this.notificationSubscriptionChange(this,n)},e.prototype.addSubscription=function(t){return-1===this.notifications.indexOf(t)&&(this.notifications.push(t),!0)},e.prototype.removeSubscription=function(t){var e=this.notifications.indexOf(t);return-1!==e&&(this.notifications.splice(e,1),!0)},e._consoleArgs=["","background: #2A3351","background: #364D98","color: #F4F6FE; background: #3656C1;","background: #364D98","background: #2A3351"],e}(r.Notifier);e.Mediator=a},433:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(e){if(this.proxyMap={},t.instanceMap[e])throw new Error("Model instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeModel()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeModel=function(t){delete this.instanceMap[t]},t.prototype.registerProxy=function(t){t.initializeNotifier(this.multitonKey),this.proxyMap[t.getProxyName()]=t,t.onRegister()},t.prototype.retrieveProxy=function(t){return this.proxyMap[t]},t.prototype.hasProxy=function(t){return void 0!==this.proxyMap[t]},t.prototype.removeProxy=function(t){if(this.proxyMap[t]){var e=this.proxyMap[t];return e.onRemove(),delete this.proxyMap[t],e}return null},t.prototype.initializeModel=function(){},t.instanceMap={},t}();e.Model=o},117:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=o(222),i=function(){function t(){}return t.prototype.initializeNotifier=function(t){this.multitonKey=t,this.facade=this.getFacade()},t.prototype.sendNotification=function(t){for(var e,o=[],n=1;n<arguments.length;n++)o[n-1]=arguments[n];this.facade&&(e=this.facade).sendNotification.apply(e,[t].concat(o))},t.prototype.getFacade=function(){if(null===this.multitonKey)throw new Error("multitonKey for this Notifier not yet initialized!");return n.Facade.getInstance(this.multitonKey)},t}();e.Notifier=i},413:function(t,e,o){var n,i=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)},function(t,e){function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)});Object.defineProperty(e,"__esModule",{value:!0});var r=o(117),s=o(542),a=function(t){function e(e,o){var n=t.call(this)||this;return n.proxyName=e||"Proxy",n.logger=s.PureMVC.debug?s.PureMVC.logProxy:s.PureMVC.logNone,o&&n.setData(o),n}return i(e,t),e.prototype.getProxyName=function(){return this.proxyName},e.prototype.setData=function(t){this.data=t},e.prototype.getData=function(){return this.data},e.prototype.onRegister=function(){this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.logger(e._consoleArgs,this.constructor.name,"remove")},e._consoleArgs=["","background: #295A34","background: #2FAA4A","color: #102415; background: #27D04C;","background: #2FAA4A","background: #295A34"],e}(r.Notifier);e.Proxy=a},542:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(){}return t.logCommand=function(t,e,o){t[0]="%c %c %c "+e+" =>  "+o+" %c %c ",console.log.apply(console,t)},t.logNotification=function(t,e){for(var o=[],n=2;n<arguments.length;n++)o[n-2]=arguments[n];t[0]="%c %c %c "+e+": args [ "+o+" ] %c %c ",console.log.apply(console,t)},t.logMediator=function(t,e,o){t[0]="%c %c %c "+e+": "+o+" %c %c ",console.log.apply(console,t)},t.logProxy=function(t,e,o){t[0]="%c %c %c "+e+": "+o+" %c %c ",console.log.apply(console,t)},t.logNone=function(t){for(var e=[],o=1;o<arguments.length;o++)e[o-1]=arguments[o]},t.debug=!0,t}();e.PureMVC=o},999:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=o(729),i=function(){function t(e){if(this.mediatorMap={},this.eventEmitter=new n,t.instanceMap[e])throw new Error("View instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeView()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeView=function(t){delete this.instanceMap[t]},t.prototype.removeObserver=function(t,e,o){this.eventEmitter.removeListener(t,e,o)},t.prototype.registerObserver=function(t,e,o){this.eventEmitter.on(t,e,o)},t.prototype.notifyObservers=function(t){for(var e,o=[],n=1;n<arguments.length;n++)o[n-1]=arguments[n];(e=this.eventEmitter).emit.apply(e,[t,t].concat(o))},t.prototype.registerMediator=function(t){this.mediatorMap[t.getMediatorName()]||(t.initializeNotifier(this.multitonKey),this.mediatorMap[t.getMediatorName()]=t,this.registerObservers(t),t.onRegister(this.onMediatorNotificationSubscriptionChange.bind(this)),t.onAwake())},t.prototype.awakeMediator=function(t){var e=this.mediatorMap[t];if(e){if(!e.isSleeping)return e;this.registerObservers(e),e.onAwake()}return e},t.prototype.retrieveMediator=function(t){return this.mediatorMap[t]},t.prototype.removeMediator=function(t){var e=this.mediatorMap[t];return e&&(this.removeObservers(e),delete this.mediatorMap[t],e.onSleep(),e.onRemove()),e},t.prototype.sleepMediator=function(t){var e=this.mediatorMap[t];if(e){if(e.isSleeping)return e;this.removeObservers(e),e.onSleep()}return e},t.prototype.hasMediator=function(t){return void 0!==this.mediatorMap[t]},t.prototype.initializeView=function(){},t.prototype.removeObservers=function(t,e){var o=e||t.notifications;if(o.length>0)for(var n=0,i=o;n<i.length;n++){var r=i[n];this.removeObserver(r,t.handleNotification,t)}},t.prototype.registerObservers=function(t,e){var o=e||t.notifications;if(o.length>0)for(var n=0,i=o;n<i.length;n++){var r=i[n];this.registerObserver(r,t.handleNotification,t)}},t.prototype.onMediatorNotificationSubscriptionChange=function(t,e){this.removeObservers(t,e),this.registerObservers(t)},t.instanceMap={},t}();e.View=i},710:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=o(382);e.Controller=n.Controller;var i=o(222);e.Facade=i.Facade;var r=o(651);e.Mediator=r.Mediator;var s=o(433);e.Model=s.Model;var a=o(117);e.Notifier=a.Notifier;var c=o(413);e.Proxy=c.Proxy;var p=o(542);e.PureMVC=p.PureMVC;var u=o(999);e.View=u.View},729:t=>{var e=Object.prototype.hasOwnProperty,o="~";function n(){}function i(t,e,o){this.fn=t,this.context=e,this.once=o||!1}function r(t,e,n,r,s){if("function"!=typeof n)throw new TypeError("The listener must be a function");var a=new i(n,r||t,s),c=o?o+e:e;return t._events[c]?t._events[c].fn?t._events[c]=[t._events[c],a]:t._events[c].push(a):(t._events[c]=a,t._eventsCount++),t}function s(t,e){0==--t._eventsCount?t._events=new n:delete t._events[e]}function a(){this._events=new n,this._eventsCount=0}Object.create&&(n.prototype=Object.create(null),(new n).__proto__||(o=!1)),a.prototype.eventNames=function(){var t,n,i=[];if(0===this._eventsCount)return i;for(n in t=this._events)e.call(t,n)&&i.push(o?n.slice(1):n);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(t)):i},a.prototype.listeners=function(t){var e=o?o+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var i=0,r=n.length,s=new Array(r);i<r;i++)s[i]=n[i].fn;return s},a.prototype.listenerCount=function(t){var e=o?o+t:t,n=this._events[e];return n?n.fn?1:n.length:0},a.prototype.emit=function(t,e,n,i,r,s){var a=o?o+t:t;if(!this._events[a])return!1;var c,p,u=this._events[a],l=arguments.length;if(u.fn){switch(u.once&&this.removeListener(t,u.fn,void 0,!0),l){case 1:return u.fn.call(u.context),!0;case 2:return u.fn.call(u.context,e),!0;case 3:return u.fn.call(u.context,e,n),!0;case 4:return u.fn.call(u.context,e,n,i),!0;case 5:return u.fn.call(u.context,e,n,i,r),!0;case 6:return u.fn.call(u.context,e,n,i,r,s),!0}for(p=1,c=new Array(l-1);p<l;p++)c[p-1]=arguments[p];u.fn.apply(u.context,c)}else{var h,d=u.length;for(p=0;p<d;p++)switch(u[p].once&&this.removeListener(t,u[p].fn,void 0,!0),l){case 1:u[p].fn.call(u[p].context);break;case 2:u[p].fn.call(u[p].context,e);break;case 3:u[p].fn.call(u[p].context,e,n);break;case 4:u[p].fn.call(u[p].context,e,n,i);break;default:if(!c)for(h=1,c=new Array(l-1);h<l;h++)c[h-1]=arguments[h];u[p].fn.apply(u[p].context,c)}}return!0},a.prototype.on=function(t,e,o){return r(this,t,e,o,!1)},a.prototype.once=function(t,e,o){return r(this,t,e,o,!0)},a.prototype.removeListener=function(t,e,n,i){var r=o?o+t:t;if(!this._events[r])return this;if(!e)return s(this,r),this;var a=this._events[r];if(a.fn)a.fn!==e||i&&!a.once||n&&a.context!==n||s(this,r);else{for(var c=0,p=[],u=a.length;c<u;c++)(a[c].fn!==e||i&&!a[c].once||n&&a[c].context!==n)&&p.push(a[c]);p.length?this._events[r]=1===p.length?p[0]:p:s(this,r)}return this},a.prototype.removeAllListeners=function(t){var e;return t?(e=o?o+t:t,this._events[e]&&s(this,e)):(this._events=new n,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prefixed=o,a.EventEmitter=a,t.exports=a},95:(t,e,o)=>{o.r(e),o.d(e,{GameFacade:()=>z});var n=o(68);class i{constructor(t,e,o){this.x=t,this.y=e,this.z=o,this.connectedNodes=[]}isConnected(t){return void 0!==this.connectedNodes.find((e=>e.x===t.x&&e.y===t.y&&e.z===t.z))}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}equalsPoint(t,e,o){return this.x===t&&this.y===e&&this.z===o}addConnectedNode(t){this.isConnected(t)||this.connectedNodes.push(t)}disconnectedNode(t){const e=this.connectedNodes.findIndex((e=>e.equals(t)));this.connectedNodes.splice(e,1)}}var r=o(434);const{Proxy:s}=o(710),{GameStateVO:a}=o(448);class c extends s{get vo(){return this.getData()}static get NAME(){return"GameStateProxy"}constructor(){super(c.NAME,new a)}}pc.createScript("GameMapComponent").prototype.initialize=function(){};const{Proxy:p}=o(710),{GameMapVO:u}=o(438);class l extends p{get vo(){return this.getData()}static get NAME(){return"GameMapProxy"}constructor(t){super(l.NAME),this.setData({mapGrid:t})}onRegister(){}findNearestNode(t){const e=this.vo.mapGrid;let o=e[0],n=r.q.getDistSquared(o,t);for(const i of e){const e=r.q.getDistSquared(i,t);e<n&&(n=e,o=i)}return o}}const h=pc.createScript("PlayerCharacterComponent");h.prototype.initialize=function(){},h.prototype.moveAlongPath=function(t){const e=t=>{t.length>0&&setTimeout((()=>{const o=t.pop();this.entity.setLocalPosition(o.x,o.y,o.z),e(t)}),300)};e(t)};const{Mediator:d}=o(710);class f extends d{static get NAME(){return"PlayerCharacterMediator"}constructor(){super(f.NAME),this.subscribeNotification([n.i.CHANGE_SCENE_COMPLETE,n.i.NAVIGATE_TO_NODE])}onRegister(t){super.onRegister(t);const e=this.facade.retrieveProxy(c.NAME).vo,o=pc.Application.getApplication();if(o){const t=o.root.findByName("WorldObjects"),n=o.assets.get(40188403).resource.instantiate(),i=e.playerCharacter.position;n.setLocalPosition(i.x,i.y,i.z),t.addChild(n),this.viewComponent=n}}handleNotification(t,...e){switch(t){case n.i.NAVIGATE_TO_NODE:const t=e[0];this.handleNavigateToNode(t)}}handleNavigateToNode(t){const e=this.facade.retrieveProxy(l.NAME);this.currentNode||(this.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition()));const o=r.q.calculatePath(this.currentNode,t);console.log("Get path"),console.log(o),o.length>0&&(this.currentNode=t,this.viewComponent.script.PlayerCharacterComponent.moveAlongPath(o))}}var y=o(710);const{Mediator:g}=o(710);class v extends g{static get NAME(){return"InputLayerMediator"}constructor(t){super(v.NAME),this.subscribeNotification([n.i.CHANGE_SCENE_COMPLETE]),this.viewComponent=t,this.viewComponent.on("validClick",this.handleClick,this),this.viewComponent.on("picker:navigation",this.handlePickerNavigation,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case n.i.CHANGE_SCENE_COMPLETE:}}handleClickRaycast(t){console.log("Handle valid click"),console.log(t)}handlePickerNavigation(t){this.facade.sendNotification(n.i.NAVIGATE_TO_NODE,t)}}const m=pc.createScript("InputLayerComponent");m.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),m.prototype.initialize=function(){this.facade=y.Facade.getInstance(z.KEY),this.facade.hasMediator(v.NAME)&&this.facade.removeMediator(v.NAME),this.facade.registerMediator(new v(this.entity)),this.ray=new pc.Ray,this.entity.element.on("click",(t=>{this.handleRaycastCollisions(t.x,t.y)})),this.app.on("picker:result",this.handlePickerResult,this)},m.prototype.handleRaycastCollisions=function(t,e){const o=this.cameraEntity,n=this.cameraEntity.camera;n.screenToWorld(t,e,n.farClip,this.ray.direction),this.ray.origin.copy(o.getPosition()),this.ray.direction.sub(this.ray.origin).normalize(),this.app.fire("picker:raycast",this.ray,{x:t,y:e})},m.prototype.handlePickerResult=function(t,e,o){if(t.tags.has("navigation")){const o=t.script.NavigationComponent.getNearestNode(e);this.entity.fire("picker:navigation",o)}};const{Mediator:M}=o(710);class N extends M{static get NAME(){return"GameMapMediator"}constructor(t){super(N.NAME),this.subscribeNotification([n.i.CHANGE_SCENE_COMPLETE])}onRegister(t){super.onRegister(t),this.facade.registerMediator(new f)}handleNotification(t,...e){switch(t){case n.i.CHANGE_SCENE_COMPLETE:const t=this.facade.retrieveProxy(c.NAME).vo,e=pc.Application.getApplication();e&&e.assets.get(40188403).resource.instantiate().setLocalPosition(t.playerCharacter.position)}}}const{GameMediator:C}=o(23),{Facade:b}=o(710);function E(t,e){console.log("Parse map");const o=pc.Application.getApplication().root.findByTag("navigation_floor");let n=[];const i=[];for(const t of o){const e=t.script.NavigationComponent;i.push(e);const o=P(t);e.setGrid(o)}for(const t of i)for(const e of t.connectedComponents){const o=e.script.NavigationComponent;_(t.getGrid(),o.getGrid()),n=n.concat(t.getGrid())}b.getInstance(t).registerProxy(new l(n)),b.getInstance(t).registerMediator(new N)}function P(t){const e=[],o=t.getLocalPosition(),n=t.getLocalScale(),r=Math.round(n.x),s=Math.round(n.z),a=Math.round(o.x-r/2),c=o.y,p=Math.round(o.z-s/2);for(let t=p;t<p+s;t++)for(let o=a;o<a+r;o++){const n=new i(o,c,t);e.push(n)}for(const t of e)for(const o of e)(o.equalsPoint(t.x-1,t.y,t.z)||o.equalsPoint(t.x+1,t.y,t.z)||o.equalsPoint(t.x,t.y,t.z-1)||o.equalsPoint(t.x,t.y,t.z+1))&&t.addConnectedNode(o);return e}function _(t,e){for(const o of t)for(const t of e)(t.equalsPoint(o.x-1,o.y,o.z)||t.equalsPoint(o.x+1,o.y,o.z)||t.equalsPoint(o.x,o.y,o.z-1)||t.equalsPoint(o.x,o.y,o.z+1))&&o.addConnectedNode(t)}const{Facade:A}=o(710);function x(t,e){A.getInstance(t).registerProxy(new c)}const{Facade:w}=o(710);function O(t,e,...o){const i=pc.Application.getApplication(),r=o[0];console.log("Changing scene "+r);const s=i.root.findByName("Root"),a=i.scenes.find(r);i.scenes.loadSceneHierarchy(a.url,(function(e,o){e?console.error(e):s&&s.destroy(),w.getInstance(t).sendNotification(n.i.CHANGE_SCENE_COMPLETE,r),w.getInstance(t).sendNotification(n.i.PARSE_GAMEMAP,r)}))}const{Facade:S}=o(710);class z extends S{static getInstance(t){return S.instanceMap[t]||(S.instanceMap[t]=new z(t)),S.instanceMap[t]}static get KEY(){return"Cacogen"}static get NAME(){return"CacogenFacade"}static get STARTUP(){return z.NAME+"StartUp"}startup(t){this.sendNotification(z.STARTUP,t)}sendNotification(t,...e){super.sendNotification(t,...e)}initializeController(){super.initializeController(),this.registerCommand(z.STARTUP,x),this.registerCommand(n.i.CHANGE_SCENE,O),this.registerCommand(n.i.PARSE_GAMEMAP,E)}}},68:(t,e,o)=>{o.d(e,{i:()=>n});class n{static get CHANGE_SCENE(){return"CHANGE_SCENE"}static get CHANGE_SCENE_COMPLETE(){return"CHANGE_SCENE_COMPLETE"}static get APP_INITIALISED(){return"APP_INITIALISED"}static get PARSE_GAMEMAP(){return"PARSE_GAMEMAP"}static get NAVIGATE_TO_NODE(){return"NAVIGATE_TO_NODE"}}},438:(t,e,o)=>{o.r(e),o.d(e,{GameMapVO:()=>n});class n{constructor(){this.mapGrid=[]}}},434:(t,e,o)=>{o.d(e,{q:()=>i});class n{constructor(){this.data=[]}push(t,e=0){return this.data.push({value:t,priority:e})}pop(){let t=0,e=1/0;for(let o=0;o<this.data.length;o++){let n=this.data[o].priority;Math.min(e,n)===n&&(e=n,t=o)}return this.data.splice(t,1)[0].value}size(){return this.data.length}empty(){return 0===this.data.length}}class i{static calculatePath(t,e){const o=new n;o.push(t,0);const i=new Map,r=new Map;for(i.set(t,t),r.set(t,0);!o.empty();){const t=o.pop();if(t.equals(e))break;for(let n=0;n<t.connectedNodes.length;n++){const s=t.connectedNodes[n],a=(this.getDistSquared(s,t),r.get(t)+1);if(!r.has(s)||a<r.get(s)){r.set(s,a);let n=a+this.heuristic(s,e);o.push(s,n),i.set(s,t)}}}let s=e;const a=!1,c=[];for(c.push(s);!s.equals(t)&&!a;)i.has(s)||!s.equals(e)?(s=i.get(s),c.push(s)):a=!0;return a?null:c}static getDistSquared(t,e){return(t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y)+(t.z-e.z)*(t.z-e.z)}static heuristic(t,e){return Math.abs(t.x-e.x)+Math.abs(t.y-e.y)+Math.abs(t.z-e.z)}}},448:(t,e,o)=>{o.r(e),o.d(e,{GameStateVO:()=>n});class n{constructor(){this.playerCharacter={position:{x:0,y:0,z:0}}}}},23:(t,e,o)=>{o.r(e),o.d(e,{GameMediator:()=>r});var n=o(68);const{Mediator:i}=o(710);class r extends i{static get NAME(){return"GameMediator"}constructor(){console.log("Register mediator - GameMediator");const t=pc.Application.getApplication();super(r.NAME,t),this.subscribeNotification(n.i.APP_INITIALISED)}handleNotification(t,...e){switch(t){case n.i.APP_INITIALISED:}}}}},e={};function o(n){if(e[n])return e[n].exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,o),i.exports}o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t=o(95),e=o(68);const{Facade:n}=o(710),{GameFacade:i}=o(95),r=pc.createScript("CacogenGame");r.prototype.initialize=function(){this.facade=n.getInstance(i.KEY),this.facade.sendNotification(e.i.APP_INITIALISED),this.facade.sendNotification(e.i.CHANGE_SCENE,"Map1")},r.prototype.update=function(t){};var s=o(434);const a=pc.createScript("NavigationComponent");a.attributes.add("connectedComponents",{type:"entity",array:!0,title:"Connected Components"}),a.prototype.initialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,.05,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this)},a.prototype.handleRayCast=function(t,e){const o=new pc.Vec3;this.aabb.intersectsRay(t,o)&&this.app.fire("picker:result",this.entity,o,e)},a.prototype.setGrid=function(t){this.nodeGrid=t},a.prototype.getGrid=function(){return this.nodeGrid},a.prototype.getNearestNode=function(t){let e=this.nodeGrid[0],o=s.q.getDistSquared(e,t);for(const n of this.nodeGrid){const i=s.q.getDistSquared(n,t);i<o&&(o=i,e=n)}return e};const{Facade:c}=o(710),{PureMVC:p}=o(710);new class{constructor(){console.log("Main start"),p.debug=!0,c.getInstance=t.GameFacade.getInstance,console.log(c),this.facade=c.getInstance(t.GameFacade.KEY),this.facade.startup(this)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,