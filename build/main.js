(()=>{"use strict";var t={382:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(542),o=i(999),r=function(){function t(e){if(this.commandMap={},t.instanceMap[e])throw new Error("controller key for this Multiton key already constructed");this.multitonKey=e,this.logger=n.PureMVC.debug?n.PureMVC.logCommand:n.PureMVC.logNone,this.initializeController()}return t.removeController=function(t){delete this.instanceMap[t]},t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.prototype.registerCommand=function(t,e){this.commandMap[t]||this.view.registerObserver(t,this.executeCommand,this),this.commandMap[t]=e},t.prototype.hasCommand=function(t){return void 0!==this.commandMap[t]},t.prototype.removeCommand=function(t){this.hasCommand(t)&&(this.view.removeObserver(t,this.executeCommand,this),delete this.commandMap[t])},t.prototype.initializeController=function(){this.view=o.View.getInstance(this.multitonKey)},t.prototype.executeCommand=function(e){for(var i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];var o=this.commandMap[e];o&&(this.logger(t._consoleArgs,e,o.name),o.apply(void 0,[this.multitonKey,e].concat(i)))},t._consoleArgs=["","background: #3F234E","background: #6E2994","color: #D4BFE0; background: #8724BD;","background: #6E2994","background: #3F234E"],t.instanceMap={},t}();e.Controller=r},222:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(382),o=i(433),r=i(542),s=i(999),a=function(){function t(e){if(t.instanceMap[e])throw new Error("Facade instance for this Multiton key already constructed!");this.logger=r.PureMVC.debug?r.PureMVC.logNotification:r.PureMVC.logNone,this.initializeNotifier(e),this.initializeFacade()}return t.getInstance=function(e){return e?(t.instanceMap[e]||(t.instanceMap[e]=new t(e)),t.instanceMap[e]):null},t.hasCore=function(t){return void 0!==this.instanceMap[t]},t.removeCore=function(t){this.instanceMap[t]&&(o.Model.removeModel(t),s.View.removeView(t),n.Controller.removeController(t),delete this.instanceMap[t])},t.prototype.initializeFacade=function(){this.initializeModel(),this.initializeController(),this.initializeView()},t.prototype.registerCommand=function(t,e){this.controller.registerCommand(t,e)},t.prototype.removeCommand=function(t){this.controller.removeCommand(t)},t.prototype.hasCommand=function(t){return this.controller.hasCommand(t)},t.prototype.registerProxy=function(t){this.model.registerProxy(t)},t.prototype.retrieveProxy=function(t){return this.model.retrieveProxy(t)},t.prototype.removeProxy=function(t){return this.model?this.model.removeProxy(t):null},t.prototype.hasProxy=function(t){return this.model.hasProxy(t)},t.prototype.registerMediator=function(t){this.view.registerMediator(t)},t.prototype.retrieveMediator=function(t){return this.view.retrieveMediator(t)},t.prototype.removeMediator=function(t){return this.view.removeMediator(t)},t.prototype.sleepMediator=function(t){return this.view.sleepMediator(t)},t.prototype.awakeMediator=function(t){return this.view.awakeMediator(t)},t.prototype.hasMediator=function(t){return this.view.hasMediator(t)},t.prototype.sendNotification=function(e){for(var i,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];this.logger.apply(this,[t._consoleArgs,e].concat(n)),(i=this.view).notifyObservers.apply(i,[e].concat(n))},t.prototype.initializeNotifier=function(t){this.multitonKey=t},t.prototype.initializeController=function(){this.controller||(this.controller=n.Controller.getInstance(this.multitonKey))},t.prototype.initializeModel=function(){this.model||(this.model=o.Model.getInstance(this.multitonKey))},t.prototype.initializeView=function(){this.view||(this.view=s.View.getInstance(this.multitonKey))},t._consoleArgs=["","background: #757130","background: #DED434","color: #2F2E15; background: #FFF325;","background: #DED434","background: #757130"],t.instanceMap={},t}();e.Facade=a},651:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),s=i(542),a=function(t){function e(e,i){var n=t.call(this)||this;return n.logger=s.PureMVC.debug?s.PureMVC.logMediator:s.PureMVC.logNone,n.mediatorName=e||"Mediator",n.viewComponent=i,n.sleeping=!0,n.subscribedNotifications=[],n.notificationSubscriptionChange=null,n}return o(e,t),Object.defineProperty(e.prototype,"notifications",{get:function(){return this.subscribedNotifications},enumerable:!0,configurable:!0}),e.prototype.getMediatorName=function(){return this.mediatorName},e.prototype.setViewComponent=function(t){this.viewComponent=t},e.prototype.getViewComponent=function(){return this.viewComponent},e.prototype.onRegister=function(t){this.notificationSubscriptionChange=t,this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.notificationSubscriptionChange=null,this.logger(e._consoleArgs,this.constructor.name,"remove")},e.prototype.onSleep=function(){this.sleeping=!0,this.logger(e._consoleArgs,this.constructor.name,"sleep")},e.prototype.onAwake=function(){this.sleeping=!1,this.logger(e._consoleArgs,this.constructor.name,"awake")},Object.defineProperty(e.prototype,"isSleeping",{get:function(){return this.sleeping},enumerable:!0,configurable:!0}),e.prototype.subscribeNotification=function(t){this.changeSubscription(t,this.addSubscription)},e.prototype.unsubscribeNotification=function(t){this.changeSubscription(t,this.removeSubscription)},e.prototype.changeSubscription=function(t,e){var i=this,n=this.notifications.slice(),o=!1;t instanceof Array?t.forEach((function(t){o=e.call(i,t)||o})):o=e.call(this,t),o&&this.notificationSubscriptionChange&&this.notificationSubscriptionChange(this,n)},e.prototype.addSubscription=function(t){return-1===this.notifications.indexOf(t)&&(this.notifications.push(t),!0)},e.prototype.removeSubscription=function(t){var e=this.notifications.indexOf(t);return-1!==e&&(this.notifications.splice(e,1),!0)},e._consoleArgs=["","background: #2A3351","background: #364D98","color: #F4F6FE; background: #3656C1;","background: #364D98","background: #2A3351"],e}(r.Notifier);e.Mediator=a},433:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(e){if(this.proxyMap={},t.instanceMap[e])throw new Error("Model instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeModel()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeModel=function(t){delete this.instanceMap[t]},t.prototype.registerProxy=function(t){t.initializeNotifier(this.multitonKey),this.proxyMap[t.getProxyName()]=t,t.onRegister()},t.prototype.retrieveProxy=function(t){return this.proxyMap[t]},t.prototype.hasProxy=function(t){return void 0!==this.proxyMap[t]},t.prototype.removeProxy=function(t){if(this.proxyMap[t]){var e=this.proxyMap[t];return e.onRemove(),delete this.proxyMap[t],e}return null},t.prototype.initializeModel=function(){},t.instanceMap={},t}();e.Model=i},117:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(222),o=function(){function t(){}return t.prototype.initializeNotifier=function(t){this.multitonKey=t,this.facade=this.getFacade()},t.prototype.sendNotification=function(t){for(var e,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];this.facade&&(e=this.facade).sendNotification.apply(e,[t].concat(i))},t.prototype.getFacade=function(){if(null===this.multitonKey)throw new Error("multitonKey for this Notifier not yet initialized!");return n.Facade.getInstance(this.multitonKey)},t}();e.Notifier=o},413:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),s=i(542),a=function(t){function e(e,i){var n=t.call(this)||this;return n.proxyName=e||"Proxy",n.logger=s.PureMVC.debug?s.PureMVC.logProxy:s.PureMVC.logNone,i&&n.setData(i),n}return o(e,t),e.prototype.getProxyName=function(){return this.proxyName},e.prototype.setData=function(t){this.data=t},e.prototype.getData=function(){return this.data},e.prototype.onRegister=function(){this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.logger(e._consoleArgs,this.constructor.name,"remove")},e._consoleArgs=["","background: #295A34","background: #2FAA4A","color: #102415; background: #27D04C;","background: #2FAA4A","background: #295A34"],e}(r.Notifier);e.Proxy=a},542:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.logCommand=function(t,e,i){t[0]="%c %c %c "+e+" =>  "+i+" %c %c ",console.log.apply(console,t)},t.logNotification=function(t,e){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];t[0]="%c %c %c "+e+": args [ "+i+" ] %c %c ",console.log.apply(console,t)},t.logMediator=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logProxy=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logNone=function(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i]},t.debug=!0,t}();e.PureMVC=i},999:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(729),o=function(){function t(e){if(this.mediatorMap={},this.eventEmitter=new n,t.instanceMap[e])throw new Error("View instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeView()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeView=function(t){delete this.instanceMap[t]},t.prototype.removeObserver=function(t,e,i){this.eventEmitter.removeListener(t,e,i)},t.prototype.registerObserver=function(t,e,i){this.eventEmitter.on(t,e,i)},t.prototype.notifyObservers=function(t){for(var e,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];(e=this.eventEmitter).emit.apply(e,[t,t].concat(i))},t.prototype.registerMediator=function(t){this.mediatorMap[t.getMediatorName()]||(t.initializeNotifier(this.multitonKey),this.mediatorMap[t.getMediatorName()]=t,this.registerObservers(t),t.onRegister(this.onMediatorNotificationSubscriptionChange.bind(this)),t.onAwake())},t.prototype.awakeMediator=function(t){var e=this.mediatorMap[t];if(e){if(!e.isSleeping)return e;this.registerObservers(e),e.onAwake()}return e},t.prototype.retrieveMediator=function(t){return this.mediatorMap[t]},t.prototype.removeMediator=function(t){var e=this.mediatorMap[t];return e&&(this.removeObservers(e),delete this.mediatorMap[t],e.onSleep(),e.onRemove()),e},t.prototype.sleepMediator=function(t){var e=this.mediatorMap[t];if(e){if(e.isSleeping)return e;this.removeObservers(e),e.onSleep()}return e},t.prototype.hasMediator=function(t){return void 0!==this.mediatorMap[t]},t.prototype.initializeView=function(){},t.prototype.removeObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var n=0,o=i;n<o.length;n++){var r=o[n];this.removeObserver(r,t.handleNotification,t)}},t.prototype.registerObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var n=0,o=i;n<o.length;n++){var r=o[n];this.registerObserver(r,t.handleNotification,t)}},t.prototype.onMediatorNotificationSubscriptionChange=function(t,e){this.removeObservers(t,e),this.registerObservers(t)},t.instanceMap={},t}();e.View=o},710:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(382);e.Controller=n.Controller;var o=i(222);e.Facade=o.Facade;var r=i(651);e.Mediator=r.Mediator;var s=i(433);e.Model=s.Model;var a=i(117);e.Notifier=a.Notifier;var c=i(413);e.Proxy=c.Proxy;var h=i(542);e.PureMVC=h.PureMVC;var d=i(999);e.View=d.View},729:t=>{var e=Object.prototype.hasOwnProperty,i="~";function n(){}function o(t,e,i){this.fn=t,this.context=e,this.once=i||!1}function r(t,e,n,r,s){if("function"!=typeof n)throw new TypeError("The listener must be a function");var a=new o(n,r||t,s),c=i?i+e:e;return t._events[c]?t._events[c].fn?t._events[c]=[t._events[c],a]:t._events[c].push(a):(t._events[c]=a,t._eventsCount++),t}function s(t,e){0==--t._eventsCount?t._events=new n:delete t._events[e]}function a(){this._events=new n,this._eventsCount=0}Object.create&&(n.prototype=Object.create(null),(new n).__proto__||(i=!1)),a.prototype.eventNames=function(){var t,n,o=[];if(0===this._eventsCount)return o;for(n in t=this._events)e.call(t,n)&&o.push(i?n.slice(1):n);return Object.getOwnPropertySymbols?o.concat(Object.getOwnPropertySymbols(t)):o},a.prototype.listeners=function(t){var e=i?i+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var o=0,r=n.length,s=new Array(r);o<r;o++)s[o]=n[o].fn;return s},a.prototype.listenerCount=function(t){var e=i?i+t:t,n=this._events[e];return n?n.fn?1:n.length:0},a.prototype.emit=function(t,e,n,o,r,s){var a=i?i+t:t;if(!this._events[a])return!1;var c,h,d=this._events[a],l=arguments.length;if(d.fn){switch(d.once&&this.removeListener(t,d.fn,void 0,!0),l){case 1:return d.fn.call(d.context),!0;case 2:return d.fn.call(d.context,e),!0;case 3:return d.fn.call(d.context,e,n),!0;case 4:return d.fn.call(d.context,e,n,o),!0;case 5:return d.fn.call(d.context,e,n,o,r),!0;case 6:return d.fn.call(d.context,e,n,o,r,s),!0}for(h=1,c=new Array(l-1);h<l;h++)c[h-1]=arguments[h];d.fn.apply(d.context,c)}else{var p,u=d.length;for(h=0;h<u;h++)switch(d[h].once&&this.removeListener(t,d[h].fn,void 0,!0),l){case 1:d[h].fn.call(d[h].context);break;case 2:d[h].fn.call(d[h].context,e);break;case 3:d[h].fn.call(d[h].context,e,n);break;case 4:d[h].fn.call(d[h].context,e,n,o);break;default:if(!c)for(p=1,c=new Array(l-1);p<l;p++)c[p-1]=arguments[p];d[h].fn.apply(d[h].context,c)}}return!0},a.prototype.on=function(t,e,i){return r(this,t,e,i,!1)},a.prototype.once=function(t,e,i){return r(this,t,e,i,!0)},a.prototype.removeListener=function(t,e,n,o){var r=i?i+t:t;if(!this._events[r])return this;if(!e)return s(this,r),this;var a=this._events[r];if(a.fn)a.fn!==e||o&&!a.once||n&&a.context!==n||s(this,r);else{for(var c=0,h=[],d=a.length;c<d;c++)(a[c].fn!==e||o&&!a[c].once||n&&a[c].context!==n)&&h.push(a[c]);h.length?this._events[r]=1===h.length?h[0]:h:s(this,r)}return this},a.prototype.removeAllListeners=function(t){var e;return t?(e=i?i+t:t,this._events[e]&&s(this,e)):(this._events=new n,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prefixed=i,a.EventEmitter=a,t.exports=a},828:(t,e,i)=>{i.r(e),i.d(e,{GameFacade:()=>ee});var n=i(68);class o{constructor(t,e,i){this.x=t,this.y=e,this.z=i,this.connectedNodes=[],this.occupied=!1}isConnected(t){return this.connectedNodes.some((e=>e.x===t.x&&e.y===t.y&&e.z===t.z))}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}equalsPoint(t,e,i){return this.x===t&&this.y===e&&this.z===i}addConnectedNode(t){this.isConnected(t)||this.connectedNodes.push(t)}disconnectedNode(t){const e=this.connectedNodes.findIndex((e=>e.equals(t)));this.connectedNodes.splice(e,1)}}var r=i(969),s=i(434);const{Facade:a}=i(710);function c(t,e,...i){const c=a.getInstance(t),y=pc.Application.getApplication(),g=function(t){const e=t.root.findByTag("navigation_floor");let i=[];const n=[];for(const t of e){const e=t.script.NavigationComponent;n.push(e);const i=l(t);e.setGrid(i)}for(const t of n)for(const e of t.connectedComponents){const n=e.script.NavigationComponent;p(t.getGrid(),n.getGrid()),i=i.concat(t.getGrid())}return i}(y),m=function(t,e){const i=[],n=t.root.findByTag("wall");for(const t of n){const n=h(t);i.push(n),d(t,e),t.destroy()}return i}(y,g),f=function(t,e){let i=[];const n=t.root.findByTag("cover");for(const t of n)i=i.concat(u(t,e)),t.destroy();return i}(y,g),A=function(t){const e=new Map,i=t.root.findByTag("portal");for(const t of i){const i=t.script.PortalComponent,n=i.portalId,o={portalId:n,destinationScene:i.destinationScene,destinationPortal:i.destinationPortal,standingPoint:i.standingPoint.getPosition(),hitboxPoint:i.hitbox.getPosition()};e.set(n,o)}return e}(y),N=function(t){const e=[];for(const i of t)E(i,t)&&e.push(new o(i.x,i.y,i.z));for(const i of e)for(const n of e)if(!i.equals(n)||!n.isConnected(i)){const e=s.q.calculateBresenhamLine(i.x,i.z,n.x,n.z);s.q.checkValidLine(e,t)&&(i.addConnectedNode(n),n.addConnectedNode(i))}return e}(g);c.hasProxy(r.h.NAME)&&c.removeProxy(r.h.NAME),c.registerProxy(new r.h(g,m,f,A,N)),c.sendNotification(n.i.MAP_GRID_CREATED)}function h(t){const e=t.getLocalScale(),i=new pc.Vec3(e.x/2,e.y/2,e.z/2);return new pc.BoundingBox(t.getPosition(),i)}function d(t,e){const i=t.getPosition(),n=t.getLocalScale(),o=Math.round(i.y-.5*n.y),r=Math.round(i.x-.5*n.x),s=Math.round(i.z-.5*n.z);for(let t=r;t<r+n.x;t++)for(let i=s;i<s+n.z;i++){const n=e.findIndex((e=>e.equalsPoint(t,o,i)));if(n>-1){const t=e.splice(n,1);for(const e of t)for(const t of e.connectedNodes)t.disconnectedNode(e)}}}function l(t){const e=[],i=t.getLocalPosition(),n=t.getLocalScale(),r=Math.round(n.x),s=Math.round(n.z),a=Math.round(i.x-r/2),c=i.y,h=Math.round(i.z-s/2);for(let t=h;t<h+s;t++)for(let i=a;i<a+r;i++){const n=new o(i,c,t);e.push(n)}for(const t of e)for(const i of e)(i.equalsPoint(t.x-1,t.y,t.z)||i.equalsPoint(t.x+1,t.y,t.z)||i.equalsPoint(t.x,t.y,t.z-1)||i.equalsPoint(t.x,t.y,t.z+1))&&t.addConnectedNode(i);return e}function p(t,e){for(const i of t)for(const t of e)(t.equalsPoint(i.x-1,i.y,i.z)||t.equalsPoint(i.x+1,i.y,i.z)||t.equalsPoint(i.x,i.y,i.z-1)||t.equalsPoint(i.x,i.y,i.z+1))&&i.addConnectedNode(t)}function u(t,e){const i=[],n=t.getPosition(),o=t.getLocalScale(),r=Math.round(n.y-.5*o.y),s=Math.round(n.x-.5*o.x),a=Math.round(n.z-.5*o.z);for(let t=s;t<s+o.x;t++)for(let n=a;n<a+o.z;n++){const o=new pc.Vec3(t,r,n);i.push(o);const s=e.findIndex((e=>e.equalsPoint(t,r,n)));if(s>-1){const t=e.splice(s,1);for(const e of t)for(const t of e.connectedNodes)t.disconnectedNode(e)}}return i}function E(t,e){const i=new pc.Vec3(t.x-1,t.y,t.z-1),n=new pc.Vec3(t.x,t.y,t.z-1),o=new pc.Vec3(t.x+1,t.y,t.z-1),r=new pc.Vec3(t.x+1,t.y,t.z),s=new pc.Vec3(t.x+1,t.y,t.z+1),a=new pc.Vec3(t.x,t.y,t.z+1),c=new pc.Vec3(t.x-1,t.y,t.z+1),h=new pc.Vec3(t.x-1,t.y,t.z);return!((e.some((t=>t.equals(i)))||!t.connectedNodes.some((t=>t.equals(n)))||!t.connectedNodes.some((t=>t.equals(h))))&&(e.some((t=>t.equals(o)))||!t.connectedNodes.some((t=>t.equals(n)))||!t.connectedNodes.some((t=>t.equals(r))))&&(e.some((t=>t.equals(s)))||!t.connectedNodes.some((t=>t.equals(a)))||!t.connectedNodes.some((t=>t.equals(r))))&&(e.some((t=>t.equals(c)))||!t.connectedNodes.some((t=>t.equals(a)))||!t.connectedNodes.some((t=>t.equals(h)))))}var y=i(917);const{Proxy:g}=i(710);class m extends g{get vo(){return this.getData()}static get NAME(){return"WeaponsProxy"}constructor(t){super(m.NAME,t)}getDamage(t,e){for(const i in this.vo)if(Object.hasOwnProperty.call(this.vo,i)){const n=this.vo[i];if(Object.hasOwnProperty.call(n,t))return n[t].damage[Math.min(e-1,6)]}throw new Error("Cannot find weapon:: "+t)}getWeaponCategory(t){for(const e in this.vo)if(Object.hasOwnProperty.call(this.vo,e)){const i=this.vo[e];if(Object.hasOwnProperty.call(i,t))return e}throw new Error("Cannot category for weapon:: "+t)}}const{Proxy:f}=i(710),{StoryVO:A}=i(553);class N extends f{get vo(){return this.getData()}static get NAME(){return"StoryProxy"}constructor(){const t=pc.Application.getApplication(),e=t.assets.get(40529920).resource.trees,i=new Map;for(const n in e)if(Object.hasOwnProperty.call(e,n)){const o=e[n],r=t.assets.get(o).resource;i.set(n,r)}super(N.NAME,i),this.currentTree=void 0,this.currentNode=void 0,this.currentStepIndex=0,this.currentConditions=[]}getTree(t){return this.vo.has(t)?this.vo.get(t):void 0}getNode(t,e){const i=t.nodes;return Object.hasOwnProperty.call(i,e)?i[e]:void 0}getStep(t,e){const i=t.steps;return e<i.length?i[e]:void 0}goToNode(t){this.currentNode=t,this.currentStepIndex=0}startDialogueTree(t){this.currentTree=t,this.currentNode="entry",this.currentStepIndex=0;const e=this.getTree(this.currentTree);if(!e)throw Error(`Cannot start dialogue: Tree ${this.currentTree} not found`);if(!this.getNode(e,this.currentNode))throw Error('Cannot start dialogue: no "entry" node defined on '+t);return e}getCurrentNodeStep(){const t=this.getTree(this.currentTree),e=this.getNode(t,this.currentNode),i=this.getValidStep(e,this.currentStepIndex);if(i&&i.once){const t=this.getConditionStringForStep(this.currentTree,this.currentNode,this.currentStepIndex);this.addCondition(t)}return i}continueCurrentNodeStep(){const t=this.getTree(this.currentTree),e=this.getNode(t,this.currentNode);this.currentStepIndex++;const i=this.getValidStep(e,this.currentStepIndex);if(i&&i.once){const t=this.getConditionStringForStep(this.currentTree,this.currentNode,this.currentStepIndex);this.addCondition(t)}return i}getValidStep(t,e){let i=this.getStep(t,e);if(i){let n=[];if(i.conditions&&(n=n.concat(i.conditions)),i.once){const t=this.getInvertedConditionStringForStep(this.currentTree,this.currentNode,e);n=n.concat(t),console.log("Test valid step"),console.log(n)}return this.testConditions(n)?i:(this.currentStepIndex=e+1,this.getValidStep(t,this.currentStepIndex))}return i}getConditionStringForStep(t,e,i){return`${t}${e}${i}`}getInvertedConditionStringForStep(t,e,i){return`!${t}${e}${i}`}selectChoice(t){return this.getCurrentNodeStep().choices[t]}addCondition(t){-1===this.currentConditions.indexOf(t)&&this.currentConditions.push(t)}removeCondition(t){const e=this.currentConditions.indexOf(t);e>-1&&this.currentConditions.splice(e,1)}testConditions(t){let e=!0;for(const i of t){const t="||",n=i.split(t);if(n.length>1){let t=!1;for(const e of n)this.checkCondition(e)&&(t=!0);e&&(e=t)}else e&&(e=this.checkCondition(i))}return e}checkCondition(t){let e=!0;if(t.startsWith("!")){const i=t.slice(1,t.length);this.currentConditions.indexOf(i)>-1&&(e=!1)}else if(t.startsWith("+")){const i=t.slice(1,t.length);this.addCondition(i),e=!0}else if(t.startsWith("-")){const i=t.slice(1,t.length);this.removeCondition(i),e=!0}else-1===this.currentConditions.indexOf(t)&&(e=!1);return e}}const{Proxy:T}=i(710),{InventoryVO:_}=i(713);class C extends T{get vo(){return this.getData()}static get NAME(){return"InventoryProxy"}constructor(){super(C.NAME,new _)}get inventoryItems(){return this.vo.inventoryItems}set inventoryItems(t){this.vo.inventoryItems=t}get equipmentSlots(){return this.vo.equipmentSlots}reorderInventoryItem(t,e){const i=this.inventoryItems.findIndex((e=>e.uuid===t)),n=this.inventoryItems.splice(i,1);let o=0,r=0;for(let t=0;t<this.inventoryItems.length;t++){const i=this.inventoryItems[t];e>=o&&e<o+i.size&&(r=t),o+=i.size}if(e>=o&&(r=this.inventoryItems.length),"[object Array]"!==Object.prototype.toString.call(this.inventoryItems))throw new Error("Please provide a valid array");if(!n.length)throw new Error("There is no item in the array at index "+i);this.inventoryItems.splice(r,0,n[0])}attemptToEquipItemToSlot(t,e){if(("1hand"===t||"2hand"===t)&&"weapon"===e.type){const i=this.equipmentSlots.get(t);if(i&&"2hand"===i.equipSlot&&(this.equipmentSlots.delete("1hand"),this.equipmentSlots.delete("2hand")),"1hand"===e.equipSlot){if(this.equipmentSlots.set(t,e),"1hand"===t){const t=this.equipmentSlots.get("2hand");t&&t.uuid===e.uuid&&this.equipmentSlots.delete("2hand")}else if("2hand"===t){const t=this.equipmentSlots.get("1hand");t&&t.uuid===e.uuid&&this.equipmentSlots.delete("1hand")}}else this.equipmentSlots.set("1hand",e),this.equipmentSlots.set("2hand",e);return!0}return!1}addInventoryItem(t){this.inventoryItems.push(t)}getEquippedItem(t){return this.equipmentSlots.get(t)}}const{Proxy:M}=i(710);class v extends M{get vo(){return this.getData()}static get NAME(){return"ItemsProxy"}constructor(t){super(v.NAME,t)}getItemData(t){for(const e in this.vo)if(Object.hasOwnProperty.call(this.vo,e)){const i=this.vo[e];if(console.log(i),Object.hasOwnProperty.call(i,t))return{id:t,type:e,...this.vo[e][t]}}throw new Error("Cannot find data for item:: "+t)}}const{Proxy:I}=i(710),{BotBehavioursVO:S}=i(812);class P extends I{get vo(){return this.getData()}static get NAME(){return"BotBehaviourProxy"}constructor(){super(P.NAME,new S)}getTree(t){return this.vo.getTree(t)}}const{Facade:O}=i(710);function b(t,e){O.getInstance(t).registerProxy(new y.u);const i=pc.Application.getApplication();if(i){const e=i.assets.get(40415631).resource;O.getInstance(t).registerProxy(new m(e));const o=i.assets.get(40814027).resource;O.getInstance(t).registerProxy(new v(o)),O.getInstance(t).registerProxy(new N),O.getInstance(t).registerProxy(new C),O.getInstance(t).registerProxy(new P),O.getInstance(t).sendNotification(n.i.ADD_ITEM_TO_INVENTORY,"sword"),O.getInstance(t).sendNotification(n.i.ADD_ITEM_TO_INVENTORY,"pistolet"),O.getInstance(t).sendNotification(n.i.ADD_ITEM_TO_INVENTORY,"fusil"),O.getInstance(t).sendNotification(n.i.ADD_ITEM_TO_INVENTORY,"chainmail"),O.getInstance(t).sendNotification(n.i.EQUIP_ITEM_TO_SLOT,"unarmed","1hand"),O.getInstance(t).sendNotification(n.i.EQUIP_ITEM_TO_SLOT,"unarmed","2hand")}}const{Facade:x}=i(710);function L(t,e,...i){const o=pc.Application.getApplication(),r=i[0],s=i[1];console.log("Changing scene "+r);const a=o.root.findByName("Root"),c=o.scenes.find(r);o.scenes.loadSceneHierarchy(c.url,(function(e,i){e?console.error(e):a&&a.destroy(),x.getInstance(t).sendNotification(n.i.CHANGE_SCENE_COMPLETE,r),x.getInstance(t).sendNotification(n.i.PARSE_GAMEMAP,r),x.getInstance(t).sendNotification(n.i.ADD_PLAYER_CHARACTER_TO_MAP,s)}))}function D(t){let e=t.length,i=void 0,n=-1;for(;0!==e;)n=Math.floor(Math.random()*e),e-=1,i=t[e],t[e]=t[n],t[n]=i;return t}var w=i(958);const{Proxy:R}=i(710),{CombatVO:G}=i(201);class k extends R{get vo(){return this.getData()}static get NAME(){return"CombatProxy"}constructor(t,e){super(k.NAME,new G(t,e))}onRegister(){const t=this.vo.participants;this.participantProxies=new Map;for(const e of t){const t=this.facade.retrieveProxy(w.b.NAME+e);this.participantProxies.set(e,t)}}nextTurn(){const t=this.vo.roundInitiative;if(t&&t.length>0){const e=t.shift();if(this.vo.activeParticipant=e,"end_round"!==e){this.facade.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Turn "+e);const t=this.participantProxies.get(e);t.resetCombatTurnState(),t.isNPC?this.facade.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,e):this.facade.sendNotification(n.i.AWAIT_PLAYER_COMBAT_INPUT,e)}else this.facade.sendNotification(n.i.SHOW_TOAST_MESSAGE,"End round"),setTimeout((()=>{this.facade.sendNotification(n.i.NEXT_COMBAT_ROUND)}),3e3)}}nextRound(){console.log("/////////////////"),console.log("//  New round  //"),console.log("/////////////////");const t=[];for(const[e,i]of this.participantProxies.entries()){const n=i.vo;for(let i=0;i<n.initiative;i++)t.push(e)}if(0===t.length)return void this.facade.sendNotification(n.i.END_COMBAT);t.push("end_round");let e=D(t);for(;"end_round"===e[0];)e=D(e);this.vo.roundInitiative=e}get nextTurnCharacterId(){return this.vo.nextTurnCharacterId}get activeParticipant(){return this.vo.activeParticipant}set activeParticipant(t){this.vo.activeParticipant=t}get participants(){return this.vo.participants}get teams(){return this.vo.teams}removeCharacterFromCombat(t){this.participantProxies.delete(t),this.vo.roundInitiative=this.vo.roundInitiative.filter((e=>e!==t));for(const[e,i]of this.teams.entries()){const o=i.indexOf(t);o>-1&&i.splice(o,1),0===i.length&&this.facade.sendNotification(n.i.END_COMBAT,e)}}}var U=i(448);const{Facade:H}=i(710);function V(t,e,...i){const o=i[0],r=H.getInstance(t);r.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Start Combat"),r.retrieveProxy(y.u.NAME).updateGameStateType(U.gameplayModeTypes.COMBAT);const s=r.retrieveProxy(w.b.NAME+o);r.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"spotted",s);const a=new Map,c=["player"];a.set("player_team",c);const h=[o].concat(s.combatGroup).filter((function(t,e,i){return i.indexOf(t)==e}));a.set("opposing_team",h);const d=c.concat(h),l=r.retrieveProxy(w.b.NAME+"player");for(const t of d)r.sendNotification(n.i.END_MOVEMENT+t),"player"!==t?r.sendNotification(n.i.CHARACTER_LOOK_AT+t,l.currentNode):r.sendNotification(n.i.CHARACTER_LOOK_AT+t,s.currentNode);const p=new k(d,a);r.registerProxy(p),setTimeout((()=>{r.sendNotification(n.i.NEXT_COMBAT_ROUND)}),2e3)}const{Facade:B}=i(710);function F(t,e,...i){const n=B.getInstance(t),o=n.retrieveProxy(y.u.NAME),r=n.retrieveProxy(k.NAME);o.vo.gameplayMode===U.gameplayModeTypes.COMBAT&&r.nextTurn()}const{Facade:z}=i(710);function q(t,e,...i){const o=z.getInstance(t),r=o.retrieveProxy(y.u.NAME),s=o.retrieveProxy(k.NAME);r.vo.gameplayMode===U.gameplayModeTypes.COMBAT&&(s.nextRound(),o.sendNotification(n.i.NEXT_COMBAT_TURN,s.vo.nextTurnCharacterId))}const{Facade:Y}=i(710);function W(t,e,...i){setTimeout((()=>{const e=Y.getInstance(t),i=e.retrieveProxy(k.NAME);e.sendNotification(n.i.HIDE_WALKABLE_AREA),e.sendNotification(n.i.NEXT_COMBAT_TURN,i.nextTurnCharacterId)}),500)}var K=i(226);const{Facade:j}=i(710);function Q(t,e,...i){const n=i[0],o=j.getInstance(t),s=(o.retrieveProxy(r.h.NAME),o.retrieveProxy(w.b.NAME+n).currentNode);o.retrieveProxy(w.b.NAME+"player").currentNode.connectedNodes.some((t=>t.equals(s))),(new K.o).runCommands(o,n)}var $=i(710);function X(t,e,...i){const o=$.Facade.getInstance(t),s=o.retrieveProxy(y.u.NAME),a=o.retrieveProxy(r.h.NAME),c=i[0];a.hasValidNode(c)&&(s.currentMode===U.gameplayModeTypes.EXPLORATION?o.sendNotification(n.i.NAVIGATE_TO_WAYPOINT+"player",c):s.currentMode===U.gameplayModeTypes.COMBAT&&"player"===o.retrieveProxy(k.NAME).activeParticipant&&o.sendNotification(n.i.COMBAT_NAVIGATE_TO_NODE,"player",c))}const{Facade:J}=i(710);function Z(t,e,...i){const n=J.getInstance(t),o=i[0],r=i[1],a=n.retrieveProxy(w.b.NAME+o),c=a.vo,h=s.q.breadthFirstSearch(c.currentNode,c.availableMovement);for(const t of h)t.equals(r)&&tt(n,a,r)}function tt(t,e,i){const o=e.vo,r=s.q.calculatePath(o.currentNode,i);r&&r.length>0&&(o.availableMovement-=r.length-1,e.currentNode=i,t.sendNotification(n.i.HIDE_WALKABLE_AREA),t.sendNotification(n.i.NAVIGATE_ALONG_PATH+o.id,r))}function et(t,e,...i){const n=i[0],o=pc.Application.getApplication(),r=o.assets.get(40235966),s=o.root.findByName("WorldObjects");for(const t of n){const e=r.resource.instantiate();e.setLocalPosition(t.x,t.y,t.z),s.addChild(e)}}function it(t,e,...i){const n=pc.Application.getApplication().root.findByTag("walkable_tile");for(const t of n)t.destroy()}function nt(t,e,...i){const o=i[0],r=$.Facade.getInstance(t),a=r.retrieveProxy(w.b.NAME+o).vo,c=s.q.breadthFirstSearch(a.currentNode,a.availableMovement);r.sendNotification(n.i.SHOW_WALKABLE_AREA,c)}function ot(t,e,...i){const o=$.Facade.getInstance(t),r=i[0],s=i[1];if(o.retrieveProxy(w.b.NAME+r).currentNode=s,o.retrieveProxy(y.u.NAME).currentMode===U.gameplayModeTypes.COMBAT){const t=o.retrieveProxy(k.NAME);t&&("player"===t.activeParticipant?o.sendNotification(n.i.AWAIT_PLAYER_COMBAT_INPUT,r):setTimeout((()=>{o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,r)}),500))}}var rt=i(467);function st(t,e,...i){const o=$.Facade.getInstance(t),a=i[0].script.GameCharacterComponent.characterId,c=o.retrieveProxy(y.u.NAME),h=o.retrieveProxy(r.h.NAME),d=o.retrieveProxy(w.b.NAME+a),l=o.retrieveProxy(w.b.NAME+"player"),p=o.retrieveProxy(m.NAME).getWeaponCategory(l.equippedWeapon);if(c.currentMode===U.gameplayModeTypes.EXPLORATION)"attack"===c.currentAction&&"ranged"===p?at(h,l,d)?(o.sendNotification(n.i.RESOLVE_RANGED_ATTACK,"player",a),o.sendNotification(n.i.START_COMBAT,a)):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"No line of sight"):"attack"===c.currentAction?o.sendNotification(n.i.NAVIGATE_TO_CHARACTER_AND_ATTACK,a):o.sendNotification(n.i.NAVIGATE_TO_CHARACTER_AND_TALK,a);else if(c.currentMode===U.gameplayModeTypes.COMBAT){const t=o.retrieveProxy(k.NAME);if(!t||"player"!==t.activeParticipant)return;if(l.availableActions<=0)return void o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Out of actions");if("ranged"===p)at(h,l,d)?o.sendNotification(n.i.RESOLVE_RANGED_ATTACK,"player",a):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"No line of sight");else if(function(t,e){const i=e.currentNode;return t.currentNode.connectedNodes.some((t=>t.equals(i)))}(l,d))"attack"===c.currentAction&&"attack"===c.currentAction&&o.sendNotification(n.i.RESOLVE_ATTACK,l.id,d.id);else{const t=function(t,e){const i=e.currentNode.connectedNodes.filter((t=>!t.occupied));if(i.length>0){const e=t.currentNode;let n=s.q.calculatePath(e,i[0]);for(let t=1;t<i.length;t++){const o=s.q.calculatePath(e,i[t]);o.length<n.length&&(n=o)}return n}}(l,d);t&&t.length-1<=l.vo.availableMovement?"attack"===c.currentAction?o.sendNotification(n.i.MOVE_ALONG_PATH_AND_ATTACK,"player",d.id,t):o.sendNotification(n.i.COMBAT_NAVIGATE_TO_NODE,"player",t.shift()):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Cannot reach target")}}}function at(t,e,i){const n=(0,rt.z)(e),o=(0,rt.z)(i);return!t.rayIntersectsWall(n,o)}var ct=i(829);function ht(t,e,...i){const o=$.Facade.getInstance(t),r=i[0],s=o.retrieveProxy(w.b.NAME+r),a=i[1],c=o.retrieveProxy(w.b.NAME+a);o.sendNotification(n.i.CHARACTER_LOOK_AT+r,c.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+a,s.currentNode);const h=o.retrieveProxy(m.NAME),d=s.equippedWeapon+"Fighting",l=c.equippedWeapon+"Fighting",p=s.getSkillTotal(d),u=s.getSkillTotal(l),E=lt(p),y=lt(u);if(s.availableActions-=1,E===y)o.sendNotification(n.i.DISPLAY_ATTACK+r),o.sendNotification(n.i.DISPLAY_ATTACK+a),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`Attack tied(${E}/${y})`);else if(E>y){const t=dt(E,y),e=h.getDamage(s.equippedWeapon,t);c.applyDamage(e),o.sendNotification(n.i.DISPLAY_ATTACK+r),c.isDead?o.sendNotification(n.i.KILL_GAME_CHARACTER,a):(o.sendNotification(n.i.DISPLAY_HIT+a),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${r} damages ${a} for ${e}`))}else{const t="melee"===h.getWeaponCategory(c.equippedWeapon),e=dt(y,E),i=t?c.equippedWeapon:ct.j.UNARMED,d=h.getDamage(i,e);s.applyDamage(d),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${a} damages ${r} for ${d}`),o.sendNotification(n.i.DISPLAY_ATTACK+a),s.isDead?o.sendNotification(n.i.KILL_GAME_CHARACTER,r):o.sendNotification(n.i.DISPLAY_HIT+r)}const g=o.retrieveProxy(k.NAME);g&&"player"!==g.activeParticipant&&setTimeout((()=>{o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,r)}),1500)}function dt(t,e){return t-e}function lt(t){return t+pt()+pt()}function pt(){return Math.round(6*Math.random())}var ut=i(321);const{Facade:Et}=i(710);function yt(t,e,...i){const o=Et.getInstance(t),r=i[0],s=i[1],a=i[2];o.retrieveProxy(w.b.NAME+r).useMovement(a.length-1);const c=o.retrieveMediator(ut.y.NAME+r);o.sendNotification(n.i.HIDE_WALKABLE_AREA),c.handleNavigateAlongPathWithPromise(a).then((()=>{o.sendNotification(n.i.RESOLVE_ATTACK,r,s)}))}function gt(t,e,...i){const o=$.Facade.getInstance(t),r=i[0];console.log("Kill character:: "+r);const s=o.retrieveProxy(w.b.NAME+r);o.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"death",s),o.sendNotification(n.i.DISPLAY_DEATH+r),s&&(s.currentNode.occupied=!1);const a=o.retrieveProxy(k.NAME);a&&a.removeCharacterFromCombat(r)}const{Facade:mt}=i(710);function ft(t,e,...i){const o=i[0],r=mt.getInstance(t);r.hasMediator(k.NAME)&&r.removeMediator(k.NAME),r.sendNotification(n.i.HIDE_WALKABLE_AREA);const s=r.retrieveProxy(y.u.NAME);"player_team"===o?(s.updateGameStateType(U.gameplayModeTypes.GAME_OVER),r.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Game Over")):(s.updateGameStateType(U.gameplayModeTypes.EXPLORATION),r.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Victory"))}function At(t,e,...i){const n=$.Facade.getInstance(t),o=i[0],r=n.retrieveProxy(w.b.NAME+o),s=n.retrieveProxy(P.NAME).getTree(r.botBehaviour);s&&s.runCommands(n,o)}i(316),i(744);var Nt=i(852);function Tt(t,e,...i){const o=$.Facade.getInstance(t);let s=0,a=0;const c=i[0],h=o.retrieveProxy(w.b.NAME+c),d=h.currentNode;let l=i[1],p=o.retrieveProxy(w.b.NAME+l);const u=p.currentNode;o.sendNotification(n.i.CHARACTER_LOOK_AT+c,p.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+l,h.currentNode);const E=h.equippedWeapon+"Fighting",y=h.getSkillTotal(E);s+=_t(y),a+=_t(p.skill);const g=o.retrieveProxy(m.NAME);o.retrieveProxy(r.h.NAME).isInCover(new pc.Vec3(u.x,u.y,u.z),new pc.Vec3(d.x,d.y,d.z))&&(a+=2);const f=o.retrieveMediator(Nt.N.NAME),A=new pc.Vec3(h.currentNode.x,h.currentNode.y+1,h.currentNode.z),N=new pc.Vec3(p.currentNode.x,p.currentNode.y+1,p.currentNode.z);h.availableActions-=1,o.sendNotification(n.i.DISPLAY_ATTACK+c),f.createProjectile("crossbow_bolt",A,N).then((()=>{if(s>a){const t=o.retrieveProxy(k.NAME);if(t){const e=p.currentNode.connectedNodes,i=[l];for(const n of t.participants){const t=o.retrieveProxy(w.b.NAME+n);!t.isDead&&e.some((e=>e.equals(t.currentNode)))&&i.push(n)}l=i[Math.floor(Math.random()*i.length)],p=o.retrieveProxy(w.b.NAME+l)}const e=s-a,i=g.getDamage(h.equippedWeapon,e);p.applyDamage(i),p.isDead?o.sendNotification(n.i.KILL_GAME_CHARACTER,l):(o.sendNotification(n.i.DISPLAY_HIT+l),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${c} damages ${l} for ${i}`))}else o.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"dodge",p);const t=o.retrieveProxy(k.NAME);t&&"player"!==t.activeParticipant&&setTimeout((()=>{o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,c)}),500)}))}function _t(t){return t+Ct()+Ct()}function Ct(){return Math.round(6*Math.random())}const{Facade:Mt}=i(710);function vt(t,e,...i){const o=Mt.getInstance(t);if(o.retrieveProxy(y.u.NAME).currentMode===U.gameplayModeTypes.COMBAT&&"player"!==o.retrieveProxy(k.NAME).activeParticipant)return void o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Must change weapon on your turn");const r=i[0],s=i[1],a=o.retrieveProxy(w.b.NAME+r);a&&(a.equippedWeapon=s,o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${r} equips ${s}`))}function It(t,e,...i){const o=$.Facade.getInstance(t),s=i[0],a=i[1],c=i[2],h=o.retrieveProxy(r.h.NAME).findNearestNode(s);o.retrieveMediator(ut.y.NAME+"player").moveToNodeWithPromise(h).then((()=>{o.sendNotification(n.i.CHANGE_SCENE,a,c)}))}const{Facade:St}=i(710);function Pt(t,e,...i){const n=St.getInstance(t),o=i[0],s=pc.Application.getApplication(),a=s.assets.get(40523336),c=s.root.findByName("WorldObjects"),h=a.resource.instantiate();c.addChild(h);const d=n.retrieveProxy(r.h.NAME).retrievePortal(o);h.setLocalPosition(d.standingPoint)}const{Facade:Ot}=i(710);function bt(t,e,...i){const o=Ot.getInstance(t),r=i[0],a=o.retrieveProxy(w.b.NAME+"player"),c=o.retrieveProxy(w.b.NAME+r),h=o.retrieveMediator(ut.y.NAME+"player"),d=function(t,e){const i=e.currentNode.connectedNodes,n=t.currentNode;if(i.some((t=>t.equals(n))))return[n];{const t=i.filter((t=>!t.occupied));if(t.length>0){let e=s.q.calculatePath(n,t[0]);for(let i=1;i<t.length;i++){const o=s.q.calculatePath(n,t[i]);(!e||o&&o.length<e.length)&&(e=o)}return e}return}}(a,c);d&&h.handleNavigateAlongPathWithPromise(d).then((()=>{o.sendNotification(n.i.START_DIALOGUE,r)}))}const{Facade:xt}=i(710);function Lt(t,e,...i){const o=xt.getInstance(t),r=o.retrieveProxy(y.u.NAME),s=i[0],a=o.retrieveProxy(N.NAME),c=o.retrieveProxy(w.b.NAME+"player"),h=o.retrieveProxy(w.b.NAME+s),d=h.dialogueTree;a.startDialogueTree(d),r.updateGameStateType(U.gameplayModeTypes.DIALOGUE),o.sendNotification(n.i.CHARACTER_LOOK_AT+"player",h.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+s,c.currentNode),o.sendNotification(n.i.SHOW_DIALOGUE_PANEL);const l=a.getCurrentNodeStep();o.sendNotification(n.i.DISPLAY_DIALOGUE_STEP,{treeId:d,step:l})}function Dt(t,e,...i){const o=$.Facade.getInstance(t),r=o.retrieveProxy(N.NAME),s=r.continueCurrentNodeStep();if(s){if(s.choices?o.sendNotification(n.i.HIDE_DIALOGUE_CONTINUE_BUTTON):o.sendNotification(n.i.SHOW_DIALOGUE_CONTINUE_BUTTON),s.notifications)for(const t of s.notifications)o.sendNotification(t.name,...t.args);o.sendNotification(n.i.DISPLAY_DIALOGUE_STEP,{treeId:r.currentTree,step:s})}else o.sendNotification(n.i.END_DIALOGUE)}function wt(t,e,...i){const o=$.Facade.getInstance(t),r=i[0],s=o.retrieveProxy(N.NAME),a=s.selectChoice(r);o.sendNotification(n.i.CLEAR_DIALOGUE_CHOICES);const c={title:"YOU",text:a.text,titleColour:"#DB831C"};o.sendNotification(n.i.DISPLAY_DIALOGUE_STEP,{treeId:s.currentTree,step:c}),a.test?o.sendNotification(n.i.RESOLVE_DIALOGUE_SKILL_TEST,a.test):a.goto&&o.sendNotification(n.i.GO_TO_DIALOGUE_NODE,a.goto)}function Rt(t,e,...i){const o=$.Facade.getInstance(t),r=o.retrieveProxy(N.NAME),s=i[0];r.goToNode(s);const a=r.getCurrentNodeStep();if(a){if(o.sendNotification(n.i.SHOW_DIALOGUE_CONTINUE_BUTTON),o.sendNotification(n.i.DISPLAY_DIALOGUE_STEP,{treeId:r.currentTree,step:a}),console.log("*****"),console.log(a),a.notifications)for(const t of a.notifications)console.log("SHOOT COMMAND: "+t.name),o.sendNotification(t.name,...t.args)}else o.sendNotification(n.i.END_DIALOGUE)}const{Facade:Gt}=i(710);function kt(t,e,...i){const o=Gt.getInstance(t);o.retrieveProxy(y.u.NAME).updateGameStateType(U.gameplayModeTypes.EXPLORATION),o.sendNotification(n.i.HIDE_DIALOGUE_PANEL)}const{Facade:Ut}=i(710);function Ht(t,e,...i){const o=Ut.getInstance(t),r=i[0],a=o.retrieveProxy(w.b.NAME+"player"),c=o.retrieveProxy(w.b.NAME+r),h=o.retrieveMediator(ut.y.NAME+"player"),d=function(t,e){const i=e.currentNode.connectedNodes,n=t.currentNode;if(i.some((t=>t.equals(n))))return[n];{const t=i.filter((t=>!t.occupied));if(t.length>0){let e=s.q.calculatePath(n,t[0]);for(let i=1;i<t.length;i++){const o=s.q.calculatePath(n,t[i]);o.length<e.length&&(e=o)}return e}return}}(a,c);d&&h.handleNavigateAlongPathWithPromise(d).then((()=>{o.sendNotification(n.i.START_COMBAT,r),o.sendNotification(n.i.RESOLVE_ATTACK,"player",r)}))}const{Facade:Vt}=i(710);function Bt(t,e,...i){const n=Vt.getInstance(t),o=i[0];n.retrieveProxy(y.u.NAME).currentAction=o}function Ft(t,e,...i){const o=$.Facade.getInstance(t),r=i[0],s=o.retrieveProxy(w.b.NAME+"player").getSkillTotal(r.skill),a=zt(),c=zt(),h=s>=a+c;o.sendNotification(n.i.DISPLAY_DIALOGUE_SKILL_TEST,r.skill,s,a,c,h),h?(console.log(`Succeeded ${r.skill} with a ${s} vs ${a}+${c}`),o.sendNotification(n.i.GO_TO_DIALOGUE_NODE,r.success.goto)):(console.log(`Failed ${r.skill} with a ${s} vs ${a}+${c}`),o.sendNotification(n.i.GO_TO_DIALOGUE_NODE,r.failure.goto))}function zt(){return Math.round(6*Math.random())}const{Facade:qt}=i(710);function Yt(t,e,...i){const o=qt.getInstance(t),r=o.retrieveProxy(C.NAME);o.sendNotification(n.i.DISPLAY_INVENTORY_PANEL,r.inventoryItems,r.equipmentSlots)}const{Facade:Wt}=i(710);function Kt(t,e,...i){const o=Wt.getInstance(t),r=o.retrieveProxy(C.NAME),s=i[0],a=i[1];r.reorderInventoryItem(s,a),o.sendNotification(n.i.DISPLAY_INVENTORY_PANEL,r.inventoryItems,r.equipmentSlots)}var jt=i(340);function Qt(t,e,...i){const o=$.Facade.getInstance(t),r=o.retrieveProxy(C.NAME),s=i[0],a=i[1],c=r.inventoryItems.find((t=>t.id===s));if(c)r.attemptToEquipItemToSlot(a,c)&&"weapon"===c.type&&o.sendNotification(n.i.EQUIP_WEAPON,"player",c.id);else{const t=o.retrieveProxy(v.NAME),e=o.retrieveProxy(C.NAME),i=new jt.R(t.getItemData(s));e.attemptToEquipItemToSlot(a,i)&&"weapon"===i.type&&o.sendNotification(n.i.EQUIP_WEAPON,"player",i.id)}o.sendNotification(n.i.DISPLAY_EQUIPPED_SLOT,r.equipmentSlots),o.sendNotification(n.i.DISPLAY_INVENTORY_PANEL,r.inventoryItems,r.equipmentSlots)}const{Facade:$t}=i(710);function Xt(t,e,...i){const n=i[0],o=$t.getInstance(t),r=o.retrieveProxy(v.NAME),s=o.retrieveProxy(C.NAME),a=new jt.R(r.getItemData(n));s.addInventoryItem(a)}const{Facade:Jt}=i(710);function Zt(t,e,...i){const o=Jt.getInstance(t),r=o.retrieveProxy(C.NAME),s=o.retrieveProxy(y.u.NAME),a=i[0],c=r.getEquippedItem(a);c&&"weapon"===c.type&&("attack"!==s.currentAction?(o.sendNotification(n.i.EQUIP_WEAPON,"player",c.id),s.currentAction="attack",o.sendNotification(n.i.SET_USE_ITEM_BUTTON_HIGHLIGHT,a,!0)):(s.currentAction="interact",o.sendNotification(n.i.SET_USE_ITEM_BUTTON_HIGHLIGHT,a,!1)))}const{Facade:te}=i(710);class ee extends te{static getInstance(t){return te.instanceMap[t]||(te.instanceMap[t]=new ee(t)),te.instanceMap[t]}static get KEY(){return"Cacogen"}static get NAME(){return"CacogenFacade"}static get STARTUP(){return ee.NAME+"StartUp"}startup(t){this.sendNotification(ee.STARTUP,t)}sendNotification(t,...e){super.sendNotification(t,...e)}initializeController(){super.initializeController(),this.registerCommand(ee.STARTUP,b),this.registerCommand(n.i.CHANGE_SCENE,L),this.registerCommand(n.i.PARSE_GAMEMAP,c),this.registerCommand(n.i.START_COMBAT,V),this.registerCommand(n.i.NEXT_COMBAT_TURN,F),this.registerCommand(n.i.NEXT_COMBAT_ROUND,q),this.registerCommand(n.i.END_COMBAT_TURN,W),this.registerCommand(n.i.ENEMY_TURN,Q),this.registerCommand(n.i.SELECTED_NODE,X),this.registerCommand(n.i.COMBAT_NAVIGATE_TO_NODE,Z),this.registerCommand(n.i.DETERMINE_NEXT_ENEMY_ACTION,At),this.registerCommand(n.i.SHOW_WALKABLE_AREA,et),this.registerCommand(n.i.HIDE_WALKABLE_AREA,it),this.registerCommand(n.i.AWAIT_PLAYER_COMBAT_INPUT,nt),this.registerCommand(n.i.FINISHED_MOVE,ot),this.registerCommand(n.i.SELECT_GAME_CHARACTER,st),this.registerCommand(n.i.RESOLVE_ATTACK,ht),this.registerCommand(n.i.RESOLVE_RANGED_ATTACK,Tt),this.registerCommand(n.i.MOVE_ALONG_PATH_AND_ATTACK,yt),this.registerCommand(n.i.NAVIGATE_TO_CHARACTER_AND_ATTACK,Ht),this.registerCommand(n.i.KILL_GAME_CHARACTER,gt),this.registerCommand(n.i.END_COMBAT,ft),this.registerCommand(n.i.EQUIP_WEAPON,vt),this.registerCommand(n.i.NAVIGATE_THROUGH_PORTAL,It),this.registerCommand(n.i.ADD_PLAYER_CHARACTER_TO_MAP,Pt),this.registerCommand(n.i.NAVIGATE_TO_CHARACTER_AND_TALK,bt),this.registerCommand(n.i.START_DIALOGUE,Lt),this.registerCommand(n.i.CONTINUE_DIALOGUE_NODE,Dt),this.registerCommand(n.i.SELECT_DIALOGUE_CHOICE,wt),this.registerCommand(n.i.GO_TO_DIALOGUE_NODE,Rt),this.registerCommand(n.i.END_DIALOGUE,kt),this.registerCommand(n.i.GAMEPLAY_ACTION_CHANGED,Bt),this.registerCommand(n.i.RESOLVE_DIALOGUE_SKILL_TEST,Ft),this.registerCommand(n.i.CLICK_INVENTORY_BUTTON,Yt),this.registerCommand(n.i.REORDER_INVETORY_ITEM,Kt),this.registerCommand(n.i.EQUIP_ITEM_TO_SLOT,Qt),this.registerCommand(n.i.ADD_ITEM_TO_INVENTORY,Xt),this.registerCommand(n.i.USE_EQUIPPED_ITEM,Zt)}}},316:(t,e,i)=>{i.d(e,{r:()=>n,_:()=>o});class n{static get NONE(){return 0}static get BASIC_MELEE(){return 1}static get BASIC_RANGED(){return 2}}const o=[{NONE:n.NONE},{BASIC_MELEE:n.BASIC_MELEE},{BASIC_RANGED:n.BASIC_RANGED}]},623:(t,e,i)=>{i.d(e,{P:()=>s});var n=i(379),o=i(935),r=i(68);class s extends n.H{tick(t){return t.blackboard.get("facade",!1,!1).sendNotification(r.i.END_COMBAT_TURN),o.d.SUCCESS}}},488:(t,e,i)=>{i.d(e,{o:()=>r});var n=i(379),o=i(935);class r extends n.H{tick(t){return t.blackboard.set("target","player",t.tree.id,!1),o.d.SUCCESS}}},650:(t,e,i)=>{i.d(e,{s:()=>s});var n=i(379),o=i(935),r=i(958);class s extends n.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(r.b.NAME+i).availableActions>0?o.d.SUCCESS:o.d.FAILURE}}},658:(t,e,i)=>{i.d(e,{$:()=>s});var n=i(379),o=i(935),r=i(958);class s extends n.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(r.b.NAME+i).availableMovement>0?o.d.SUCCESS:o.d.FAILURE}}},94:(t,e,i)=>{i.d(e,{r:()=>s});var n=i(379),o=i(935),r=i(958);class s extends n.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(r.b.NAME+i).isDead?o.d.SUCCESS:o.d.FAILURE}}},30:(t,e,i)=>{i.d(e,{N:()=>s});var n=i(379),o=i(935),r=i(958);class s extends n.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("target",t.tree.id,!1);return e.retrieveProxy(r.b.NAME+i).isDead?o.d.SUCCESS:o.d.FAILURE}}},379:(t,e,i)=>{i.d(e,{H:()=>r});var n=i(935),o=i(217);class r{constructor(t){this.initialize(t)}initialize(t){this.id=(0,o.L)(),this.children=t||[]}execute(t){this._enter(t),t.blackboard.get("isOpen",t.tree.id,this.id)||this._open(t);const e=this._tick(t);return e!==n.d.RUNNING&&this._close(t),this._exit(t),e}_enter(t){t.enterNode(this),this.enter(t)}_open(t){t.openNode(this),t.blackboard.set("isOpen",!0,t.tree.id,this.id),this.open(t)}_tick(t){return t.tickNode(this),this.tick(t)}_close(t){t.closeNode(this),t.blackboard.set("isOpen",!1,t.tree.id,this.id),this.close(t)}_exit(t){t.exitNode(this),this.exit(t)}enter(t){}open(t){}tick(t){return n.d.ERROR}close(t){}exit(t){}}},935:(t,e,i)=>{i.d(e,{d:()=>n});class n{static get SUCCESS(){return 0}static get FAILURE(){return 1}static get RUNNING(){return 2}static get ERROR(){return 3}}},996:(t,e,i)=>{i.d(e,{q:()=>r});var n=i(379),o=i(935);class r extends n.H{tick(t){for(const e of this.children)e.execute(t);return o.d.SUCCESS}}},96:(t,e,i)=>{i.d(e,{_:()=>r});var n=i(379),o=i(935);class r extends n.H{open(t){t.blackboard.set("runningChild",0,t.tree.id,this.id)}tick(t){for(let e=t.blackboard.get("runningChild",t.tree.id,this.id);e<this.children.length;e++){let i=this.children[e].execute(t);if(i!==o.d.SUCCESS)return i===o.d.RUNNING&&t.blackboard.set("runningChild",e,t.tree.id,this.id),i}return o.d.SUCCESS}}},890:(t,e,i)=>{i.d(e,{U:()=>r});var n=i(379),o=i(935);class r extends n.H{tick(t){for(const e of this.children){const i=e.execute(t);if(i!==o.d.FAILURE)return i}return o.d.FAILURE}}},966:(t,e,i)=>{i.d(e,{M:()=>r});var n=i(379),o=i(935);class r extends n.H{tick(t){const e=this.children[0];if(!e)return o.d.ERROR;let i=e.execute(t);return i==o.d.SUCCESS?i=o.d.FAILURE:i==o.d.FAILURE&&(i=o.d.SUCCESS),i}}},226:(t,e,i)=>{i.d(e,{o:()=>M});var n=i(996),o=i(541),r=i(890),s=i(488),a=i(379),c=i(935),h=i(68);class d extends a.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1);return e.sendNotification(h.i.RESOLVE_ATTACK,i,n),c.d.SUCCESS}}var l=i(623),p=i(658),u=i(958);class E extends a.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=e.retrieveProxy(u.b.NAME+i).currentNode;return e.retrieveProxy(u.b.NAME+"player").currentNode.connectedNodes.some((t=>t.equals(n)))?c.d.SUCCESS:c.d.FAILURE}}var y=i(96),g=i(966),m=i(30),f=i(434);class A extends a.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1),o=e.retrieveProxy(u.b.NAME+i),r=o.currentNode,s=e.retrieveProxy(u.b.NAME+n).currentNode.connectedNodes.filter((t=>!t.occupied));if(s.length>0){let t=s.reduce(((t,e)=>N(r,t)<N(r,e)?t:e));const n=f.q.calculatePath(r,t);if(n&&n.length>0){const r=o.vo;for(;n.length>r.availableMovement;)n.shift();e.sendNotification(h.i.NAVIGATE_ALONG_PATH+i,n),o.currentNode=t}}return o.availableMovement=0,c.d.SUCCESS}}function N(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)}var T=i(94),_=i(650);class C extends a.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(u.b.NAME+i).availableMovement=0,c.d.SUCCESS}}class M extends o.p{constructor(){super("basicMeleeTree")}initialise(){this.tree.root=new n.q([new r.U([new y._([new s.o,new g.M([new T.r]),new g.M([new m.N]),new r.U([new y._([new E,new _.s,new s.o,new d,new C]),new y._([new p.$,new s.o,new A])])]),new l.P])])}}},744:(t,e,i)=>{i.d(e,{b:()=>P});var n=i(996),o=i(541),r=i(890),s=i(488),a=i(623),c=i(96),h=i(966),d=i(30),l=i(94),p=i(658),u=i(650),E=i(379),y=i(935),g=i(68);class m extends E.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1);return e.sendNotification(g.i.RESOLVE_RANGED_ATTACK,i,n),y.d.SUCCESS}}var f=i(958),A=i(434);class N extends E.H{constructor(t,e){super([]),this.minDistance=t,this.maxDistance=e}tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1),o=e.retrieveProxy(f.b.NAME+i),r=o.currentNode,s=e.retrieveProxy(f.b.NAME+n).currentNode,a=Math.pow(this.minDistance,2),c=Math.pow(this.maxDistance,2),h=o.availableMovement;o.availableMovement=0;const d=T(s,r);if(d>=a&&d<=c)return y.d.FAILURE;{const t=A.q.breadthFirstSearch(r,h);if(t.length>0){if(d<a){let n=t.reduce(((t,e)=>T(s,t)>T(s,e)?t:e));const a=A.q.calculatePath(r,n);a&&a.length>0&&(e.sendNotification(g.i.NAVIGATE_ALONG_PATH+i,a),o.currentNode=n)}else{let n=t.reduce(((t,e)=>T(s,t)<T(s,e)?t:e));const a=A.q.calculatePath(r,n);a&&a.length>0&&(e.sendNotification(g.i.NAVIGATE_ALONG_PATH+i,a),o.currentNode=n)}return y.d.SUCCESS}return y.d.FAILURE}}}function T(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)+Math.pow(e.z-t.z,2)}class _ extends E.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);setTimeout((()=>{e.sendNotification(g.i.DETERMINE_NEXT_ENEMY_ACTION,i)}),500)}}var C=i(969),M=i(467);class v extends E.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1),o=e.retrieveProxy(f.b.NAME+i),r=(o.currentNode,e.retrieveProxy(f.b.NAME+n)),s=(r.currentNode,e.retrieveProxy(C.h.NAME)),a=(0,M.z)(o),c=(0,M.z)(r);return s.rayIntersectsWall(a,c)?y.d.FAILURE:y.d.SUCCESS}}class I extends E.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1),o=e.retrieveProxy(f.b.NAME+i),r=o.currentNode,s=e.retrieveProxy(f.b.NAME+n),a=s.currentNode.connectedNodes,c=e.retrieveProxy(C.h.NAME),h=a.filter((t=>!t.occupied));if(h.length>0){let t=h.reduce(((t,e)=>S(r,t)<S(r,e)?t:e));const n=A.q.calculatePath(r,t);if(n&&n.length>0){const r=o.vo;for(;n.length>r.availableMovement;)n.shift();const a=(0,M.z)(s);let h=0;for(let t=n.length-1;t>=0;t--){const e=n[t],i=new pc.Vec3(e.x,e.y+.5*o.height,e.z);if(!c.rayIntersectsWall(i,a)){h=t;break}}n.splice(0,h),e.sendNotification(g.i.NAVIGATE_ALONG_PATH+i,n),o.currentNode=t}}return o.availableMovement=0,y.d.SUCCESS}}function S(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)}class P extends o.p{constructor(){super("basicRangedTree")}initialise(){this.tree.root=new n.q([new r.U([new c._([new s.o,new h.M([new l.r]),new h.M([new d.N]),new r.U([new c._([new p.$,new h.M([new v]),new I]),new c._([new p.$,new r.U([new N(9,12),new _])]),new c._([new u.s,new v,new m])])]),new a.P])])}}},541:(t,e,i)=>{i.d(e,{p:()=>s});class n{constructor(){this.initialise()}initialise(){this.baseMemory={},this.treeMemory={}}getTreeMemory(t){return this.treeMemory[t]||(this.treeMemory[t]={nodeMemory:{},openNodes:[]}),this.treeMemory[t]}getNodeMemory(t,e){const i=t.nodeMemory;return i.hasOwnProperty(e)||(i[e]={}),i[e]}getMemory(t,e){var i=this.baseMemory;return t&&(i=this.getTreeMemory(t),e&&(i=this.getNodeMemory(i,e))),i}set(t,e,i,n){this.getMemory(i,n)[t]=e}get(t,e,i){return this.getMemory(e,i)[t]}}class o{constructor(){this.initialise()}initialise(){this.tree=void 0,this.openNodes=[],this.nodeCount=0,this.debug=void 0,this.target=void 0,this.blackboard=void 0}enterNode(t){this.nodeCount++,this.openNodes.push(t)}openNode(t){}tickNode(t){}closeNode(t){this.openNodes.pop()}exitNode(t){}}class r{constructor(t){this.initialise(t)}initialise(t){this.id=t,this.root=void 0}tick(t,e){const i=new o;i.target=t,i.blackboard=e,i.tree=this,this.root.execute(i);const n=e.get("openNodes",this.id)||[],r=i.openNodes.slice(0);let s=0;for(let t=0;t<Math.min(n.length,r.length)&&(s=t+1,n[t]===r[t]);t++);for(let t=n.length-1;t>=s;t--)n[t].close(i);e.set("openNodes",r,this.id),e.set("nodeCount",i.nodeCount,this.id)}}class s{constructor(t){this.id="basicMeleeTree",this.blackboard=new n,this.tree=new r(t),this.initialise()}initialise(){}runCommands(t,e){this.blackboard.set("facade",t,!1,!1),this.blackboard.set("characterId",e,this.tree.id,!1),this.tree.tick(this,this.blackboard)}}},68:(t,e,i)=>{i.d(e,{i:()=>n});class n{static get CHANGE_SCENE(){return"CHANGE_SCENE"}static get CHANGE_SCENE_COMPLETE(){return"CHANGE_SCENE_COMPLETE"}static get APP_INITIALISED(){return"APP_INITIALISED"}static get PARSE_GAMEMAP(){return"PARSE_GAMEMAP"}static get MAP_GRID_CREATED(){return"MAP_GRID_CREATED"}static get NAVIGATE_TO_NODE(){return"NAVIGATE_TO_NODE"}static get NAVIGATE_TO_WAYPOINT(){return"NAVIGATE_TO_WAYPOINT"}static get NAVIGATE_THROUGH_PORTAL(){return"NAVIGATE_THROUGH_PORTAL"}static get COMBAT_NAVIGATE_TO_NODE(){return"COMBAT_NAVIGATE_TO_NODE"}static get SET_CAMERA_TARGET(){return"SET_CAMERA_TARGET"}static get INPUT_DRAG_MOUSE(){return"INPUT_DRAG_MOUSE"}static get MOVED_TO_NODE(){return"MOVED_TO_NODE"}static get FINISHED_MOVE(){return"FINISHED_MOVE"}static get START_COMBAT(){return"START_COMBAT"}static get SHOW_TOAST_MESSAGE(){return"SHOW_TOAST_MESSAGE"}static get NEXT_COMBAT_TURN(){return"NEXT_COMBAT_TURN"}static get NEXT_COMBAT_ROUND(){return"NEXT_COMBAT_ROUND"}static get END_COMBAT(){return"END_COMBAT"}static get END_COMBAT_TURN(){return"END_COMBAT_TURN"}static get ENEMY_TURN(){return"ENEMY_TURN"}static get SELECTED_NODE(){return"SELECTED_NODE"}static get DETERMINE_NEXT_ENEMY_ACTION(){return"DETERMINE_NEXT_ENEMY_ACTION"}static get NAVIGATE_ALONG_PATH(){return"NAVIGATE_ALONG_PATH"}static get SHOW_WALKABLE_AREA(){return"SHOW_WALKABLE_AREA"}static get HIDE_WALKABLE_AREA(){return"HIDE_WALKABLE_AREA"}static get END_MOVEMENT(){return"END_MOVEMENT"}static get AWAIT_PLAYER_COMBAT_INPUT(){return"AWAIT_PLAYER_COMBAT_INPUT"}static get SET_CHARACTER_TO_NODE(){return"SET_CHARACTER_TO_NODE"}static get SELECT_GAME_CHARACTER(){return"SELECT_GAME_CHARACTER"}static get TOGGLE_BUTTON(){return"TOGGLE_BUTTON"}static get USE_PLAYER_ACTION(){return"USE_PLAYER_ACTION"}static get RESOLVE_ATTACK(){return"RESOLVE_ATTACK"}static get RESOLVE_RANGED_ATTACK(){return"RESOLVE_RANGED_ATTACK"}static get MOVE_ALONG_PATH_AND_ATTACK(){return"MOVE_ALONG_PATH_AND_ATTACK"}static get UPDATE_STAMINA(){return"UPDATE_STAMINA"}static get DISPLAY_DEATH(){return"DISPLAY_DEATH"}static get DISPLAY_ATTACK(){return"DISPLAY_ATTACK"}static get DISPLAY_HIT(){return"DISPLAY_HIT"}static get KILL_GAME_CHARACTER(){return"KILL_GAME_CHARACTER"}static get CHARACTER_LOOK_AT(){return"CHARACTER_LOOK_AT"}static get CHANGE_STAMINA(){return"CHANGE_STAMINA"}static get EQUIP_WEAPON(){return"EQUIP_WEAPON"}static get USE_ACTION(){return"USE_ACTION"}static get DISPLAY_FLOATING_STATUS(){return"DISPLAY_FLOATING_STATUS"}static get ADD_PLAYER_CHARACTER_TO_MAP(){return"ADD_PLAYER_CHARACTER_TO_MAP"}static get NAVIGATE_TO_CHARACTER_AND_TALK(){return"NAVIGATE_TO_CHARACTER_AND_TALK"}static get NAVIGATE_TO_CHARACTER_AND_ATTACK(){return"NAVIGATE_TO_CHARACTER_AND_ATTACK"}static get SHOW_DIALOGUE_PANEL(){return"SHOW_DIALOGUE_PANEL"}static get HIDE_DIALOGUE_PANEL(){return"HIDE_DIALOGUE_PANEL"}static get SHOW_DIALOGUE_CONTINUE_BUTTON(){return"SHOW_DIALOGUE_CONTINUE_BUTTON"}static get HIDE_DIALOGUE_CONTINUE_BUTTON(){return"HIDE_DIALOGUE_CONTINUE_BUTTON"}static get DISPLAY_DIALOGUE_STEP(){return"DISPLAY_DIALOGUE_STEP"}static get DISPLAY_DIALOGUE_SKILL_TEST(){return"DISPLAY_DIALOGUE_SKILL_TEST"}static get CONTINUE_DIALOGUE_NODE(){return"CONTINUE_DIALOGUE_NODE"}static get SELECT_DIALOGUE_CHOICE(){return"SELECT_DIALOGUE_CHOICE"}static get RESOLVE_DIALOGUE_SKILL_TEST(){return"RESOLVE_DIALOGUE_SKILL_TEST"}static get CLEAR_DIALOGUE_CHOICES(){return"CLEAR_DIALOGUE_CHOICES"}static get GO_TO_DIALOGUE_NODE(){return"GO_TO_DIALOGUE_NODE"}static get START_DIALOGUE(){return"START_DIALOGUE"}static get END_DIALOGUE(){return"END_DIALOGUE"}static get GAMEPLAY_ACTION_CHANGED(){return"GAMEPLAY_ACTION_CHANGED"}static get CLICK_INVENTORY_BUTTON(){return"CLICK_INVENTORY_BUTTON"}static get DISPLAY_INVENTORY_PANEL(){return"DISPLAY_INVENTORY_PANEL"}static get REORDER_INVETORY_ITEM(){return"REORDER_INVETORY_ITEM"}static get EQUIP_ITEM_TO_SLOT(){return"EQUIP_ITEM_TO_SLOT"}static get ADD_ITEM_TO_INVENTORY(){return"ADD_ITEM_TO_INVENTORY"}static get DISPLAY_EQUIPPED_SLOT(){return"DISPLAY_EQUIPPED_SLOT"}static get USE_EQUIPPED_ITEM(){return"USE_EQUIPPED_ITEM"}static get SET_USE_ITEM_BUTTON_HIGHLIGHT(){return"SET_USE_ITEM_BUTTON_HIGHLIGHT"}}},829:(t,e,i)=>{i.d(e,{j:()=>n,E:()=>o});class n{static get SWORD(){return"sword"}static get AXE(){return"axe"}static get KNIFE(){return"knife"}static get STAFF(){return"staff"}static get HAMMER(){return"hammer"}static get SPEAR(){return"spear"}static get MACE(){return"mace"}static get POLEARM(){return"polearm"}static get MAUL(){return"maul"}static get GREATSWORD(){return"greatsword"}static get CLUB(){return"club"}static get UNARMED(){return"unarmed"}static get SHIELD(){return"shield"}static get FUSIL(){return"fusil"}static get BOW(){return"bow"}static get CROSSBOW(){return"crossbow"}static get PISTOLET(){return"pistolet"}}const o=Object.entries(Object.getOwnPropertyDescriptors(n)).filter((([t,e])=>"function"==typeof e.get)).map((([t])=>({[t]:n[t]})))},812:(t,e,i)=>{i.r(e),i.d(e,{BotBehavioursVO:()=>s});var n=i(316),o=i(226),r=i(744);class s{constructor(t,e){this.behaviourTrees=new Map,this.behaviourTrees.set(n.r.BASIC_MELEE,new o.o),this.behaviourTrees.set(n.r.BASIC_RANGED,new r.b)}getTree(t){return this.behaviourTrees.get(t)}}},201:(t,e,i)=>{i.r(e),i.d(e,{CombatVO:()=>n});class n{constructor(t,e){this.participants=t,this.roundInitiative=[],this.activeParticipant=void 0,this.teams=e}get nextTurnCharacterId(){return this.roundInitiative[0]}}},958:(t,e,i)=>{i.d(e,{b:()=>s});var n=i(68);const{Proxy:o}=i(710),{GameCharacterVO:r}=i(940);class s extends o{get vo(){return this.getData()}static get NAME(){return"GameCharacterProxy_"}constructor(t){super(s.NAME+t.id,new r(t))}resetCombatTurnState(){this.vo.availableMovement=this.vo.maxMovement,this.vo.availableActions=this.vo.maxActionsPerTurn}useMovement(t){this.vo.availableMovement-=t}applyDamage(t){this.vo.currentStamina-=t,this.vo.currentStamina=Math.max(0,this.vo.currentStamina),this.vo.currentStamina>0?this.facade.sendNotification(n.i.UPDATE_STAMINA+this.id,this.vo.currentStamina,this.vo.maximumStamina):console.log(this.id+" died"),this.facade.sendNotification(n.i.CHANGE_STAMINA+this.id,this.vo.currentStamina,this.vo.maxStamina)}getSkillTotal(t){return this.vo.advancedSkills.has(t)?this.skill+this.vo.advancedSkills.get(t):this.skill}get id(){return this.vo.id}get dialogueTree(){return this.vo.dialogueTree}get currentNode(){return this.vo.currentNode}set currentNode(t){this.vo.currentNode&&(this.vo.currentNode.occupied=!1),this.vo.currentNode=t,this.vo.currentNode.occupied=!0}get combatGroup(){return this.vo.combatGroup}get isNPC(){return this.vo.isNPC}get availableMovement(){return this.vo.availableMovement}set availableMovement(t){this.vo.availableMovement=t}get availableActions(){return this.vo.availableActions}set availableActions(t){this.vo.availableActions=t,this.facade.sendNotification(n.i.USE_ACTION+this.id,this.availableActions,this.maxActionsPerTurn)}get maxActionsPerTurn(){return this.vo.maxActionsPerTurn}get skill(){return this.vo.skill}get currentStamina(){return this.vo.currentStamina}get currentLuck(){return this.vo.currentStamina}get isDead(){return this.vo.currentStamina<=0}get botBehaviour(){return this.vo.botBehaviour}get equippedWeapon(){return this.vo.equippedWeapon}set equippedWeapon(t){this.vo.equippedWeapon=t}get height(){return this.vo.height}}},940:(t,e,i)=>{i.r(e),i.d(e,{GameCharacterVO:()=>n});class n{constructor(t){this.id=t.id,this.isNPC=t.isNPC,this.combatGroup=t.combatGroup||[],this.dialogueTree=t.dialogueTree||this.id,this.currentNode=void 0,this.initiative=t.initiative||2,this.maxMovement=t.maxMovement||6,this.height=t.height||1.8,this.maxActionsPerTurn=1,this.availableActions=this.maxActionsPerTurn,this.availableMovement=this.maxMovement,this.skill=t.skill||1,this.maxStamina=t.maxStamina||1,this.currentStamina=this.maxStamina,this.maxLuck=t.maxLuck||1,this.currentLuck=this.maxLuck,this.advancedSkills=t.advancedSkills||new Map,this.botBehaviour=t.botBehaviour||0,this.equippedWeapon=t.equippedWeapon||"unarmed"}}},969:(t,e,i)=>{i.d(e,{h:()=>s});var n=i(434);const{Proxy:o}=i(710),{GameMapVO:r}=i(438);class s extends o{get vo(){return this.getData()}static get NAME(){return"GameMapProxy"}constructor(t,e,i,n,o){super(s.NAME),this.setData({mapGrid:t,wallBoundingBoxes:e,cover:i,portals:n,navigationGrid:o})}onRegister(){}findNearestNode(t){const e=this.vo.mapGrid;let i=e[0],o=n.q.getDistSquared(i,t);for(const r of e){const e=n.q.getDistSquared(r,t);e<o&&(o=e,i=r)}return i}findNearestWaypoint(t){const e=this.vo.navigationGrid;let i=e[0],o=n.q.getDistSquared(i,t);for(const r of e){const e=n.q.getDistSquared(r,t);e<o&&(o=e,i=r)}return i}rayIntersectsWall(t,e){const i=t.distance(e),n=e.clone().sub(t.clone()).normalize(),o=new pc.Ray(t,n),r=this.vo.wallBoundingBoxes;for(const e of r){const n=new pc.Vec3;if(e.intersectsRay(o,n)&&n.distance(t)<i)return!0}return!1}get cover(){return this.vo.cover}isInCover(t,e){const i=[],n=function(t){const e=[];return e.push(new pc.Vec3(t.x,t.y,t.z-1)),e.push(new pc.Vec3(t.x+1,t.y,t.z)),e.push(new pc.Vec3(t.x-1,t.y,t.z)),e.push(new pc.Vec3(t.x,t.y,t.z+1)),e}(t);for(const t of n)this.cover.find((e=>t.equals(e)))&&i.push(t);if(i.length>0){const n=t.distance(e);for(const t of i)if(t.distance(e)<n)return!0;return!1}return!1}retrievePortal(t){return this.vo.portals.get(t)}hasValidLine(t,e){const i=n.q.calculateBresenhamLine(t.x,t.z,e.x,e.z);return n.q.checkValidLine(i,this.vo.mapGrid)}hasValidNode(t){return this.vo.mapGrid.some((e=>e.equals(t)))}}},438:(t,e,i)=>{i.r(e),i.d(e,{GameMapVO:()=>n});class n{constructor(){this.mapGrid=[]}}},434:(t,e,i)=>{i.d(e,{q:()=>o});class n{constructor(){this.data=[]}push(t,e=0){return this.data.push({value:t,priority:e})}pop(){let t=0,e=1/0;for(let i=0;i<this.data.length;i++){let n=this.data[i].priority;Math.min(e,n)===n&&(e=n,t=i)}return this.data.splice(t,1)[0].value}size(){return this.data.length}empty(){return 0===this.data.length}}class o{static breadthFirstSearch(t,e){let i=[];const n=[];i.push(t);const o=new Map;o.set(t,t);let r=0;for(;i.length>0&&r<e;){const t=[];for(const e of i)for(let i=0;i<e.connectedNodes.length;i++){const r=e.connectedNodes[i];r.occupied||o.has(r)||(t.push(r),n.push(r),o.set(r,e))}i=t,r++}return n}static calculatePath(t,e){const i=new n;i.push(t,0);const o=new Map,r=new Map;for(o.set(t,t),r.set(t,0);!i.empty();){const t=i.pop();if(t.equals(e))break;for(let n=0;n<t.connectedNodes.length;n++){const s=t.connectedNodes[n],a=r.get(t)+1;if(!s.occupied&&(!r.has(s)||a<r.get(s))){r.set(s,a);let n=a+this.heuristic(s,e);i.push(s,n),o.set(s,t)}}}let s=e,a=!1;const c=[];for(c.push(s);!s.equals(t)&&!a;)o.has(s)||!s.equals(e)?(s=o.get(s),c.push(s)):a=!0;return a?void 0:c}static calculateWaypointsPath(t,e){const i=new n;i.push(t,0);const o=new Map,r=new Map;for(o.set(t,t),r.set(t,0);!i.empty();){const t=i.pop();if(t.equals(e))break;for(let n=0;n<t.connectedNodes.length;n++){const s=t.connectedNodes[n],a=this.getDistSquared(s,t),c=r.get(t)+a;if(!s.occupied&&(!r.has(s)||c<r.get(s))){r.set(s,c);let n=c+this.heuristic(s,e);i.push(s,n),o.set(s,t)}}}let s=e,a=!1;const c=[];for(c.push(s);!s.equals(t)&&!a;)o.has(s)||!s.equals(e)?(s=o.get(s),c.push(s)):a=!0;return a?void 0:c}static getDistSquared(t,e){return(t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y)+(t.z-e.z)*(t.z-e.z)}static heuristic(t,e){return Math.abs(t.x-e.x)+Math.abs(t.y-e.y)+Math.abs(t.z-e.z)}static calculateBresenhamLine(t,e,i,n){let o=i-t,r=n-e,s=Math.abs(o),a=Math.abs(r);const c=o>0?1:-1,h=r>0?1:-1,d={x:t,y:0,z:e},l=[];for(let t=0,e=0;t<s||e<a;)(.5+t)/s<(.5+e)/a?(d.x+=c,t++):(d.z+=h,e++),l.push({x:d.x,y:0,z:d.z});return l}static checkValidLine(t,e){let i=!0;for(const n of t)e.some((t=>t.equals(n)))||(i=!1);return i}}},917:(t,e,i)=>{i.d(e,{u:()=>r});const{Proxy:n}=i(710),{GameStateVO:o}=i(448);class r extends n{get vo(){return this.getData()}static get NAME(){return"GameStateProxy"}constructor(){super(r.NAME,new o)}updateGameStateType(t){this.vo.gameplayMode=t}get currentMode(){return this.vo.gameplayMode}get currentAction(){return this.vo.selectedAction}set currentAction(t){this.vo.selectedAction=t}}},448:(t,e,i)=>{i.r(e),i.d(e,{gameplayModeTypes:()=>n,GameStateVO:()=>o});const n={EXPLORATION:"EXPLORATION",COMBAT:"COMBAT",DIALOGUE:"DIALOGUE",GAME_OVER:"GAME_OVER"};class o{constructor(){this.gameplayMode=n.EXPLORATION,this.selectedAction="none"}}},713:(t,e,i)=>{i.r(e),i.d(e,{InventoryVO:()=>o});var n=i(340);class o{constructor(){this.inventoryItems=[],this.equipmentSlots=new Map}addItem(t){this.inventoryItems.push(new n.R(t))}}},340:(t,e,i)=>{i.d(e,{R:()=>o});var n=i(217);class o{constructor(t){this.uuid=(0,n.L)(),this.id=t.id,this.icon=t.icon,this.name=t.name,this.description=t.description,this.type=t.type,this.size=t.size??1,this.equipSlot=t.equipSlot??"none"}}},553:(t,e,i)=>{i.r(e),i.d(e,{StoryVO:()=>n});class n{constructor(){}}},467:(t,e,i)=>{function n(t){const e=t.currentNode;return new pc.Vec3(e.x,e.y+.5*t.height,e.z)}i.d(e,{z:()=>n})},217:(t,e,i)=>{function n(){for(var t=[],e="0123456789abcdef",i=0;i<36;i++)t[i]=e.substr(Math.floor(16*Math.random()),1);return t[14]="4",t[19]=e.substr(3&t[19]|8,1),t[8]=t[13]=t[18]=t[23]="-",t.join("")}i.d(e,{L:()=>n})},321:(t,e,i)=>{i.d(e,{y:()=>c});var n=i(68),o=i(969),r=i(434),s=i(958);const{Mediator:a}=i(710);class c extends a{static get NAME(){return"GameCharacterMediator_"}constructor(t,e,i){super(c.NAME+t),this.id=t;let o=[n.i.CHANGE_SCENE_COMPLETE,n.i.NAVIGATE_TO_NODE+this.id,n.i.NAVIGATE_TO_WAYPOINT+this.id,n.i.NAVIGATE_ALONG_PATH+this.id,n.i.SET_CHARACTER_TO_NODE+this.id,n.i.DISPLAY_DEATH+this.id,n.i.DISPLAY_ATTACK+this.id,n.i.DISPLAY_HIT+this.id,n.i.CHARACTER_LOOK_AT+this.id,n.i.START_COMBAT,n.i.MAP_GRID_CREATED];o=o.concat(i),this.subscribeNotification(o),this.viewComponent=e,this.viewComponent.on("updateCurrentNode",this.updateCurrentNode,this),this.viewComponent.on("finishedMove",this.handleFinishedMode,this),this.viewComponent.on("destroy",(()=>{this.viewComponent.off("updateCurrentNode",this.updateCurrentNode,this),this.viewComponent.off("finishedMove",this.handleFinishedMode,this)}))}onRegister(t){super.onRegister(t)}handleNotification(t,...e){this.viewComponent&&this.viewComponent.fire(t,this.id,...e);for(const i in this.viewComponent.script)if(Object.hasOwnProperty.call(this.viewComponent.script,i)){const n=this.viewComponent.script[i];"function"==typeof n.handleNotification&&n.handleNotification(t,this.id,...e)}switch(t){case n.i.START_COMBAT:this.handleStartCombat();break;case n.i.MAP_GRID_CREATED:const t=this.facade.retrieveProxy(o.h.NAME);this.facade.retrieveProxy(s.b.NAME+this.id).currentNode=t.findNearestNode(this.viewComponent.getLocalPosition());break;case n.i.NAVIGATE_TO_NODE+this.id:this.handleNavigateToNode(e[0]);break;case n.i.NAVIGATE_TO_WAYPOINT+this.id:this.handleNavigateToWaypoint(e[0]);break;case n.i.NAVIGATE_ALONG_PATH+this.id:this.handleNavigateAlongPath(e[0]);break;case n.i.SET_CHARACTER_TO_NODE+this.id:this.handleSetCharacterToNode(e[0]);break;case n.i.CHARACTER_LOOK_AT+this.id:const i=e[0];this.viewComponent.script.GameCharacterComponent.lookAtPoint(i);break;case n.i.DISPLAY_DEATH+this.id:const r=this.viewComponent.findByName("Hitbox");r&&r.fire("stopListening"),this.viewComponent.script.GameCharacterComponent.animateDeath();break;case n.i.DISPLAY_ATTACK+this.id:this.viewComponent.script.GameCharacterComponent.animateAttack();break;case n.i.DISPLAY_HIT+this.id:this.viewComponent.script.GameCharacterComponent.animateHit()}}handleNavigateToNode(t){const e=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(s.b.NAME+this.id);i.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition());const n=r.q.calculatePath(i.currentNode,t);n&&n.length>0&&(this.viewComponent.script.GameCharacterComponent.setPath(n),i.currentNode=t)}handleNavigateToWaypoint(t){const e=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(s.b.NAME+this.id);i.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition());const n=i.currentNode,a=e.findNearestWaypoint(this.viewComponent.getLocalPosition()),c=e.findNearestWaypoint(t);if(e.hasValidLine(n,t)){const e=[t,n];this.viewComponent.script.GameCharacterComponent.setPath(e),i.currentNode=t}else{const o=r.q.calculateWaypointsPath(a,c);if(o&&o.length>0){o.length>1&&e.hasValidLine(o[1],t)&&o.shift();let r=!0;for(;o.length>1&&r;)e.hasValidLine(o[o.length-2],n)?o.pop():r=!1;o.unshift(t),this.viewComponent.script.GameCharacterComponent.setPath(o),i.currentNode=t}}}handleNavigateAlongPath(t){this.viewComponent.script.GameCharacterComponent.setPath(t)}moveToNodeWithPromise(t){const e=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(s.b.NAME+this.id);i.currentNode,i.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition());const n=r.q.calculatePath(i.currentNode,t);return n&&n.length>0&&(this.viewComponent.script.GameCharacterComponent.setPath(n),i.currentNode=t),new Promise(((t,e)=>{this.viewComponent.on("finishedMove",(()=>{t()})),this.viewComponent.on("cancelMove",(()=>{e()}))}))}handleNavigateAlongPathWithPromise(t){return this.viewComponent.script.GameCharacterComponent.setPath(t),new Promise(((t,e)=>{this.viewComponent.on("finishedMove",(()=>{t()})),this.viewComponent.on("cancelMove",(()=>{e()}))}))}updateCurrentNode(t){this.facade.sendNotification(n.i.MOVED_TO_NODE+this.id,t)}handleFinishedMode(t){this.facade.sendNotification(n.i.FINISHED_MOVE,this.id,t)}lookForCharacter(t,e){for(const i of this.searchArea)i.equals(e)&&(this.viewComponent.script.GameCharacterComponent.lookAtPoint(e),this.facade.sendNotification(n.i.START_COMBAT,this.viewComponent,[t]))}handleStartCombat(){this.facade.retrieveProxy(s.b.NAME+this.id).vo}handleSetCharacterToNode(t){this.facade.retrieveProxy(s.b.NAME+this.id).currentNode=t,this.viewComponent.script.GameCharacterComponent.stopMovement(t)}}},852:(t,e,i)=>{i.d(e,{N:()=>o});const{Mediator:n}=i(710);class o extends n{static get NAME(){return"ProjectileCreatorMediator"}constructor(t){super(o.NAME),this.subscribeNotification([]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...e){}createProjectile(t,e,i){return this.viewComponent.script.ProjectileCreatorComponent.createProjectile(t,e,i)}}}},e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t=i(828),e=i(68);const{Facade:n}=i(710),{GameFacade:o}=i(828),r=pc.createScript("CacogenGame");r.prototype.initialize=function(){this.facade=n.getInstance(o.KEY),this.facade.sendNotification(e.i.APP_INITIALISED),this.facade.sendNotification(e.i.CHANGE_SCENE,"Port Taringo","entrance")},r.prototype.update=function(t){};var s=i(434);const a=pc.createScript("NavigationComponent");a.attributes.add("connectedComponents",{type:"entity",array:!0,title:"Connected Components"}),a.prototype.initialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,.05,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.findByName("Plane").enabled=!1,this.entity.once("destroy",(()=>{this.app.off("picker:raycast",this.handleRayCast,this)}))},a.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity,i,e)},a.prototype.setGrid=function(t){this.nodeGrid=t},a.prototype.getGrid=function(){return this.nodeGrid},a.prototype.getNearestNode=function(t){let e=this.nodeGrid[0],i=s.q.getDistSquared(e,t);for(const n of this.nodeGrid){const o=s.q.getDistSquared(n,t);o<i&&(i=o,e=n)}return e};var c=i(710),h=i(958),d=i(321),l=i(316),p=i(829),u=i(969);const E=pc.createScript("GameCharacterComponent");function y(t){const e=new Map;for(const i of t)e.set(i.skillName,i.skillValue);return e}E.attributes.add("characterId",{type:"string",title:"Character Id"}),E.attributes.add("characterSpeed",{type:"number",title:"Character Speed",default:4}),E.attributes.add("characterHeight",{type:"number",title:"Character Height",default:1.8}),E.attributes.add("isNPC",{type:"boolean",title:"is NPC",default:!0}),E.attributes.add("statsOverrides",{type:"json",title:"Stats Overrides",schema:[{name:"skill",title:"Skill",type:"number",default:1},{name:"maxStamina",title:"Stamina",type:"number",default:1},{name:"maxLuck",title:"Luck",type:"number",default:1},{name:"initiative",title:"Initiative",type:"number",default:2},{name:"maxMovement",title:"Movement",type:"number",default:6}]}),E.attributes.add("advancedSkills",{type:"json",title:"Advanced Skills",schema:[{name:"skillName",title:"Skill Name",type:"string"},{name:"skillValue",title:"Skill Value",type:"number"}],array:!0}),E.attributes.add("combatGroupName",{type:"string",title:"Combat Group Name"}),E.attributes.add("dialogueTreeName",{type:"string",title:"Dialogue Tree Name"}),E.attributes.add("botBehaviour",{type:"number",title:"Bot Behaviour",enum:l._,default:0}),E.attributes.add("equippedWeapon",{type:"string",title:"Equipped Weapon",enum:p.E,default:"unarmed"}),E.prototype.preregisterNotification=function(t){this.preregisteredNotifications||(this.preregisteredNotifications=[]),this.preregisteredNotifications.push(t)},E.prototype.postInitialize=function(){this.movementPath=[],this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.preregisteredNotifications||(this.preregisteredNotifications=[]);const e=this.statsOverrides,i={id:this.characterId,isNPC:this.isNPC,height:this.characterHeight,advancedSkills:y(this.advancedSkills),equippedWeapon:this.equippedWeapon,...e,botBehaviour:this.botBehaviour,dialogueTree:this.dialogueTreeName};if(this.combatGroupName&&""!==this.combatGroupName){const t=this.app.root.findByTag("combatGroup:"+this.combatGroupName),e=[];for(const i of t)if(i.enabled){const t=i.script.GameCharacterComponent.characterId;e.push(t)}i.combatGroup=e}if(this.facade.hasMediator(d.y.NAME+this.characterId)&&this.facade.removeMediator(d.y.NAME+this.characterId),this.facade.hasProxy(h.b.NAME+this.characterId));else{const t=new h.b(i),e=this.facade.retrieveProxy(u.h.NAME);if(e){const i=e.findNearestNode(this.entity.getPosition());t.currentNode=i}this.facade.registerProxy(t)}this.facade.registerMediator(new d.y(this.characterId,this.entity,this.preregisteredNotifications)),this.vehicle=this.entity.script.VehicleComponent,this.entity.animation.play("idle.glb",.1)},E.prototype.setPath=function(t){this.movementPath&&this.movementPath.length>0&&this.entity.fire("cancelMove"),this.movementPath=t,this.entity.animation.loop=!0,this.entity.animation.play("walk.glb",.1)},E.prototype.stopMovement=function(t){this.movementPath=[],this.entity.setLocalPosition(t.x,t.y,t.z),this.entity.animation.loop=!0,this.entity.animation.play("idle.glb",.1)},E.prototype.update=function(t){this.moveAlongPath(t)},E.prototype.moveAlongPath=function(t){if(this.movementPath.length>0){const e=this.movementPath[this.movementPath.length-1],i=this.entity.getLocalPosition(),n=new pc.Vec3(e.x,e.y,e.z);if(i.distance(n)<=t*this.characterSpeed){const t=this.movementPath.pop();0===this.movementPath.length&&(this.entity.fire("finishedMove",t),this.entity.animation.loop=!0,this.entity.animation.play("idle.glb",.1)),this.entity.fire("updateCurrentNode",t)}else this.movementPath.length>1?this.vehicle.seek(n,t):this.vehicle.arrive(n,t),this.vehicle.processVelocity(t)}},E.prototype.lookAtPoint=function(t){const e=this.entity.getLocalPosition(),i=t.x-e.x,n=t.z-e.z,o=180*Math.atan2(i,n)/Math.PI;this.entity.setEulerAngles(0,o,0)},E.prototype.animateDeath=function(){this.entity.animation.loop=!1,this.entity.animation.play("die.glb",.1)},E.prototype.animateHit=function(){this.entity.animation.loop=!1,this.entity.animation.play("hit.glb",.1)},E.prototype.animateAttack=function(){this.entity.animation.loop=!1,this.entity.animation.play("attack.glb",.1)};var g=i(917),m=i(448);const f=pc.createScript("AgroGameCharacterComponent");f.attributes.add("sightRange",{type:"number",title:"Sight Range",default:5}),f.prototype.initialize=function(){this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MAP_GRID_CREATED),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MOVED_TO_NODE+"player"),this.entity.on(e.i.MAP_GRID_CREATED,this.handleMapGridCreated,this),this.entity.on(e.i.MOVED_TO_NODE+"player",this.handleMovedToNode,this),console.log("Wait for initial")},f.prototype.handleMapGridCreated=function(e,...i){const n=c.Facade.getInstance(t.GameFacade.KEY);this.characterProxy=n.retrieveProxy(h.b.NAME+e)},f.prototype.handleMovedToNode=function(i,n){const o=c.Facade.getInstance(t.GameFacade.KEY);if(o.retrieveProxy(g.u.NAME).vo.gameplayMode!==m.gameplayModeTypes.EXPLORATION||this.characterProxy.isDead)return;const r=this.characterProxy.currentNode,s=new pc.Vec3(r.x,r.y,r.z),a=new pc.Vec3(n.x,n.y,n.z);if(s.distance(a)<=this.sightRange){const t=o.retrieveProxy(u.h.NAME);s.y+=this.characterProxy.height,t.rayIntersectsWall(s,a)||(o.sendNotification(e.i.SET_CHARACTER_TO_NODE+"player",n),o.sendNotification(e.i.START_COMBAT,i))}};const{Mediator:A}=i(710);class N extends A{static get NAME(){return"ToastMessageMediator"}constructor(t){super(N.NAME),this.subscribeNotification([e.i.SHOW_TOAST_MESSAGE]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SHOW_TOAST_MESSAGE:this.viewComponent.script.ToastMessageComponent.addMessage(i[0])}}}const T=pc.createScript("ToastMessageComponent");T.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),T.attributes.add("messageTime",{type:"number",default:5,title:"Message Time"}),T.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(N.NAME)&&this.facade.removeMediator(N.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new N(this.entity))},T.prototype.addMessage=function(t){0===this.messageQueue.length?(this.messageQueue.push(t),this.showNextMessage()):this.messageQueue.push(t)},T.prototype.showNextMessage=function(){if(this.messageQueue.length>0){const t=this.messageQueue[0];this.labelEntity.element.text=t,setTimeout((()=>{this.messageQueue.shift(),this.showNextMessage()}),1e3*this.messageTime)}else this.labelEntity.element.text=""},pc.createScript("SetCameraTargetComponent").prototype.postInitialize=function(){c.Facade.getInstance(t.GameFacade.KEY).sendNotification(e.i.SET_CAMERA_TARGET,this.entity)};const{Mediator:_}=i(710);class C extends _{static get NAME(){return"InputLayerMediator"}constructor(t){super(C.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE]),this.viewComponent=t,this.viewComponent.on("picker:gameCharacter",this.handlePickerGameCharacter,this),this.viewComponent.on("picker:navigation",this.handlePickerNavigation,this),this.viewComponent.on("scrolling",this.handleScrolling,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:}}handlePickerGameCharacter(t){this.facade.sendNotification(e.i.SELECT_GAME_CHARACTER,t)}handlePickerNavigation(t){this.facade.sendNotification(e.i.SELECTED_NODE,t)}handleScrolling(t){this.facade.sendNotification(e.i.INPUT_DRAG_MOUSE,t)}}const M=pc.createScript("GameCamera");M.attributes.add("distance",{type:"number",default:100,title:"Distance"}),M.attributes.add("dragMultiplierX",{type:"number",default:.5,title:"Drag Multiplier"}),M.attributes.add("dragMultiplierY",{type:"number",default:.5,title:"Drag Multiplier"}),M.attributes.add("verticalScroll",{type:"boolean",default:!1,title:"Vertical Scroll"}),M.attributes.add("minCameraHeight",{type:"number",default:5,title:"Min Camera Height"}),M.attributes.add("maxCameraHeight",{type:"number",default:100,title:"Max Camera Height"}),M.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(I.NAME)&&this.facade.removeMediator(I.NAME),this.facade.registerMediator(new I(this.entity))},M.prototype.setCameraTarget=function(t){this.cameraTarget=t,this.rotation=this.entity.getEulerAngles().y,this.cameraHeight=this.entity.getLocalPosition().y},M.prototype.handleDrag=function(t){if(this.rotation+=t.x*this.dragMultiplierX,this.verticalScroll){let e=this.cameraHeight-t.y*this.dragMultiplierY;e=pc.math.clamp(e,this.minCameraHeight,this.maxCameraHeight),this.cameraHeight=e}},M.prototype.getTargetCameraPosition=function(t){const e=this.entity.getLocalPosition(),i=Math.sin(this.rotation*Math.PI/180)*this.distance,n=Math.cos(this.rotation*Math.PI/180)*this.distance;return new pc.Vec3(t.x+i,e.y,t.z+n)},M.prototype.update=function(t){if(this.cameraTarget){const t=this.cameraTarget.getLocalPosition(),e=this.getTargetCameraPosition(t),i=this.entity.getLocalPosition(),n=(e.x+9*i.x)/10,o=(this.cameraHeight+9*i.y)/10,r=(e.z+9*i.z)/10;this.entity.setLocalPosition(n,o,r),this.entity.lookAt(t)}};const{Mediator:v}=i(710);class I extends v{static get NAME(){return"GameCameraMediator"}constructor(t){super(I.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.INPUT_DRAG_MOUSE,e.i.SET_CAMERA_TARGET]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SET_CAMERA_TARGET:this.viewComponent.script.GameCamera.setCameraTarget(i[0]);break;case e.i.INPUT_DRAG_MOUSE:this.viewComponent.script.GameCamera.handleDrag(i[0])}}}const S=pc.createScript("InputLayerComponent");S.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),S.attributes.add("dragTime",{type:"number",title:"Drag Time",default:.4}),S.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(C.NAME)&&this.facade.removeMediator(C.NAME),this.facade.registerMediator(new C(this.entity)),this.ray=new pc.Ray,this.inputQueue=[],this.app.mouse.disableContextMenu(),this.clickDownStart=0,this.isDragging=!1,this.app.on("picker:result",this.handlePickerResult,this),this.app.mouse&&(this.app.mouse.on(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.entity.element.on(pc.EVENT_MOUSEDOWN,this.onMouseDown,this),this.app.mouse.on(pc.EVENT_MOUSEUP,this.onMouseUp,this),this.entity.once("destroy",(()=>{this.app.mouse.off(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.app.mouse.off(pc.EVENT_MOUSEUP,this.onMouseUp,this)}))),this.app.touch&&(this.app.touch.on(pc.EVENT_TOUCHMOVE,(t=>{this.onMouseMove(t.touches[0])})),this.entity.element.on(pc.EVENT_TOUCHSTART,(t=>{this.onMouseDown(t.touches[0])})),this.entity.element.on(pc.EVENT_TOUCHEND,(t=>{this.onMouseUp()})))},S.prototype.onMouseDown=function(t){this.isDragging=!0,this.clickDownStart=Date.now(),this.clickStartPoint={x:t.x,y:t.y}},S.prototype.onMouseMove=function(t){if(this.isDragging){const e=new pc.Vec2(this.clickStartPoint.x-t.x,this.clickStartPoint.y-t.y);this.entity.fire("scrolling",e),this.clickStartPoint={x:t.x,y:t.y}}},S.prototype.onMouseUp=function(){this.isDragging=!1,Date.now()-this.clickDownStart<1e3*this.dragTime&&this.clickStartPoint&&this.handleRaycastCollisions(this.clickStartPoint.x,this.clickStartPoint.y)},S.prototype.handleRaycastCollisions=function(t,e){const i=this.cameraEntity,n=this.cameraEntity.camera;n.screenToWorld(t,e,n.farClip,this.ray.direction),this.ray.origin.copy(i.getPosition()),this.ray.direction.sub(this.ray.origin).normalize(),this.app.fire("picker:raycast",this.ray,{x:t,y:e})},S.prototype.handlePickerResult=function(t,e,i){this.inputQueue.push({entity:t,hitPosition:e,screenPosition:i})},S.prototype.update=function(t){this.processInputQueue()},S.prototype.processInputQueue=function(){if(this.inputQueue.length>0){let e=this.inputQueue[0],i=-1;for(const n of this.inputQueue){const o=(t=n.entity).tags.has("gameCharacter")?3:t.tags.has("portal")?2:t.tags.has("navigation")?1:-1;o>i&&(e=n,i=o)}this.inputQueue=[],e.entity.tags.has("gameCharacter")&&this.pickedGameCharacter(e.entity,e.hitPosition),e.entity.tags.has("navigation")&&this.pickedNavigation(e.entity,e.hitPosition),e.entity.tags.has("portal")&&this.pickedPortal(e.entity,e.hitPosition)}var t},S.prototype.pickedGameCharacter=function(t,e){this.entity.fire("picker:gameCharacter",t)},S.prototype.pickedNavigation=function(t,e){const i=t.script.NavigationComponent.getNearestNode(e);this.entity.fire("picker:navigation",i)},S.prototype.pickedPortal=function(t,e){t.fire("picker:portal")};const{Mediator:P}=i(710);class O extends P{static get NAME(){return"PlayerCombatPanelMediator"}constructor(t){super(O.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.AWAIT_PLAYER_COMBAT_INPUT,e.i.END_COMBAT_TURN]),this.viewComponent=t,this.viewComponent.on("click:endTurn",this.handleEndTurn,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:this.viewComponent.enabled=!1;break;case e.i.AWAIT_PLAYER_COMBAT_INPUT:this.viewComponent.enabled=!0;break;case e.i.END_COMBAT_TURN:this.viewComponent.enabled=!1}}handleEndTurn(t){this.sendNotification(e.i.END_COMBAT_TURN)}}const b=pc.createScript("PlayerCombatPanelComponent");b.attributes.add("endTurnButton",{type:"entity",title:"End Turn button"}),b.prototype.initialize=function(){},b.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(O.NAME)&&this.facade.removeMediator(O.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new O(this.entity)),this.endTurnButton.element.on("click",this.clickEndTurn,this)},b.prototype.clickEndTurn=function(t){this.entity.fire("click:endTurn")};const x=pc.createScript("HitboxComponent");x.prototype.postInitialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,t.y/2,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.on("stopListening",(()=>{this.app.off("picker:raycast",this.handleRayCast,this)})),this.entity.on("destroy",(()=>{this.app.off("picker:raycast",this.handleRayCast,this)})),this.entity.model.enabled=!1},x.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity.parent,i,e)},x.prototype.update=function(t){this.aabb.center.copy(this.entity.getPosition())};const{Mediator:L}=i(710);class D extends L{static get NAME(){return"ActionPanelMediator"}constructor(t){super(D.NAME),this.subscribeNotification([e.i.SET_PLAYER_ACTION,e.i.TOGGLE_BUTTON,e.i.USE_PLAYER_ACTION]),this.viewComponent=t,this.viewComponent.on("click:fireCommand",this.handleFireCommand,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.TOGGLE_BUTTON:const t=i[0];this.viewComponent.script.ActionPanelComponent.selectAction(t);break;case e.i.USE_PLAYER_ACTION:}}handleFireCommand(t,...e){this.facade.sendNotification(t,...e)}}const w=pc.createScript("ActionButtonComponent");w.attributes.add("highlightEntity",{type:"entity",title:"Highlight Entity"}),w.attributes.add("iconEntity",{type:"entity",title:"Icon Entity"}),w.attributes.add("commands",{type:"json",schema:[{name:"commandName",title:"Command name",type:"string"},{name:"commandArgs",title:"Command arguments",type:"string",array:!0}],title:"Command name",array:!0}),w.prototype.initialize=function(){this.highlightEntity.enabled=!1,this.entity.on("select:action",this.handleChangeAction,this),this.entity.element.on("click",this.handleClick,this)},w.prototype.handleClick=function(t){for(const t of this.commands){const e=t.commandName,i=t.commandArgs;this.entity.parent.fire("click:fireCommand",e,...i)}},w.prototype.handleChangeAction=function(t){this.entity.name===t?this.highlightEntity.enabled=!this.highlightEntity.enabled:this.highlightEntity.enabled=!1};const R=pc.createScript("ActionPanelComponent");R.attributes.add("actionButtons",{type:"entity",title:"Action Buttons",array:!0}),R.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(D.NAME)&&this.facade.removeMediator(D.NAME),this.facade.registerMediator(new D(this.entity))},R.prototype.selectAction=function(t){for(const e of this.actionButtons)e.fire("select:action",t)},pc.createScript("UIStopPropagation").prototype.initialize=function(){this.entity.element.on(pc.EVENT_MOUSEDOWN,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_MOUSEDOWN,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHSTART,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHMOVE,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHEND,(t=>{t.stopPropagation()}))};var G=i(852);const k=pc.createScript("ProjectileCreatorComponent");k.attributes.add("projectileTypes",{type:"json",title:"Projectile Types",schema:[{name:"projectileName",title:"Projectile Name",type:"string"},{name:"projectileTemplate",title:"Projectile Template",type:"asset"}],array:!0}),k.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(G.N.NAME)&&this.facade.removeMediator(G.N.NAME),this.facade.registerMediator(new G.N(this.entity))},k.prototype.createProjectile=function(t,e,i){return new Promise(((n,o)=>{const r=this.projectileTypes.find((e=>e.projectileName===t));if(!r)throw o(),new Error(`Unable to create projectile "${t}"`);{const t=r.projectileTemplate.resource.instantiate();this.entity.addChild(t),t.once("projectileArrived",(()=>{n()})),t.script.ProjectileComponent.setTarget(e,i)}}))};const U=pc.createScript("ProjectileComponent");U.attributes.add("projectileSpeed",{type:"number",title:"Projectile Speed",default:8}),U.prototype.initialize=function(){},U.prototype.setTarget=function(t,e){this.entity.setLocalPosition(t.x,t.y,t.z),this.targetPoint=e,this.lookAtPoint(this.targetPoint)},U.prototype.update=function(t){if(this.targetPoint){const e=this.entity.getLocalPosition(),i=new pc.Vec3,n=new pc.Vec3(t*this.projectileSpeed,t*this.projectileSpeed,t*this.projectileSpeed);i.sub2(this.targetPoint.clone(),e),i.normalize(),i.mul(n),i.add(e),this.entity.setLocalPosition(i),i.distance(this.targetPoint)<=t*this.projectileSpeed&&(this.entity.fire("projectileArrived"),this.entity.destroy())}},U.prototype.lookAtPoint=function(t){const e=this.entity.getLocalPosition(),i=t.x-e.x,n=t.z-e.z,o=180*Math.atan2(i,n)/Math.PI;this.entity.setEulerAngles(0,o,0)};const{Mediator:H}=i(710);class V extends H{static get NAME(){return"StaminaBarMediator"}constructor(t){super(V.NAME),this.subscribeNotification([e.i.CHANGE_STAMINA+"player"]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_STAMINA+"player":const t=i[0],n=i[1];this.viewComponent.script.StaminaBarComponent.updateStamina(t,n)}}}const B=pc.createScript("StaminaBarComponent");B.attributes.add("barEntity",{type:"entity",title:"Bar Entity"}),B.attributes.add("staminaLabel",{type:"entity",title:"Stamina Label"}),B.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(V.NAME)&&this.facade.removeMediator(V.NAME),this.facade.registerMediator(new V(this.entity)),this.barEntityMaxWidth=this.barEntity.element.width},B.prototype.updateStamina=function(t,e){const i=pc.math.clamp(t/e,0,1),n=pc.math.lerp(0,this.barEntityMaxWidth,i);this.barEntity.element.width=n,this.barEntity.element.rect.z=i,this.barEntity.element.rect=this.barEntity.element.rect,this.staminaLabel.element.text=`${t}/${e}`};const{Mediator:F}=i(710);class z extends F{static get NAME(){return"ActionsRemainingPanelMediator"}constructor(t){super(z.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.AWAIT_PLAYER_COMBAT_INPUT,e.i.END_COMBAT_TURN,e.i.USE_ACTION+"player"]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:this.viewComponent.enabled=!1;break;case e.i.AWAIT_PLAYER_COMBAT_INPUT:const t=this.facade.retrieveProxy(h.b.NAME+"player"),n=t.availableActions,o=t.maxActionsPerTurn;this.viewComponent.script.ActionsRemainingPanelComponent.showAvailableAction(n,o),this.viewComponent.enabled=!0;break;case e.i.USE_ACTION+"player":this.viewComponent.script.ActionsRemainingPanelComponent.showAvailableAction(i[0],i[1]);break;case e.i.END_COMBAT_TURN:this.viewComponent.enabled=!1}}}const q=pc.createScript("ActionsRemainingPanelComponent");q.attributes.add("pipTemplate",{type:"asset",title:"Pip Template"}),q.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(z.NAME)&&this.facade.removeMediator(z.NAME),this.facade.registerMediator(new z(this.entity)),this.pips=[]},q.prototype.showAvailableAction=function(t,e){for(;this.pips.length<e;)this.createPip();for(let e=0;e<this.pips.length;e++)e<t?this.pips[e].fire("togglePip",!0):this.pips[e].fire("togglePip",!1)},q.prototype.createPip=function(){const t=this.pipTemplate.resource.instantiate();this.entity.addChild(t),this.pips.push(t)};const Y=pc.createScript("ActionsRemainingPipComponent");Y.attributes.add("pipFront",{type:"entity",title:"Pip front"}),Y.prototype.initialize=function(){this.entity.on("togglePip",(t=>{this.pipFront.enabled=t}))};const{Mediator:W}=i(710);class K extends W{static get NAME(){return"FloatingStatusCreatorMediator"}constructor(t){super(K.NAME),this.subscribeNotification([e.i.DISPLAY_FLOATING_STATUS]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.DISPLAY_FLOATING_STATUS:const t=this.viewComponent.script.FloatingStatusCreatorComponent,n=i[0],o=i[1];t.displayStatus(n,o)}}}const j=pc.createScript("TemporaryFloatingStatusComponent");j.prototype.initialize=function(){},j.prototype.setWorldPosition=function(t,e,i){this.entity.enabled=!0,this.worldPosition=t,this.device=this.app.graphicsDevice,this.cameraEntity=e,this.screenEntity=i,setTimeout((()=>{this.entity.destroy()}),1e3)},j.prototype.postUpdate=function(t){const e=this.worldSpaceToScreenSpace(this.worldPosition.clone());e&&this.entity.setLocalPosition(e)},j.prototype.worldSpaceToScreenSpace=function(t){if(this.device&&this.cameraEntity&&this.screenEntity){const e=t.clone(),i=new pc.Vec3;this.cameraEntity.camera.worldToScreen(e,i);const n=this.app.graphicsDevice.maxPixelRatio;i.x*=n,i.y*=n;const o=this.screenEntity.screen.scale,r=i.x/o,s=(this.device.height-i.y)/o;return new pc.Vec3(r,s,0)}};const Q=pc.createScript("FloatingStatusCreatorComponent");Q.attributes.add("screenEntity",{type:"entity",title:"Screen Entity"}),Q.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),Q.attributes.add("floatingStatuses",{type:"json",schema:[{name:"name",title:"Name",type:"string"},{name:"template",title:"Template",type:"asset"}],title:"Floating Statuses",array:!0}),Q.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(K.NAME)&&this.facade.removeMediator(K.NAME),this.facade.registerMediator(new K(this.entity))},Q.prototype.displayStatus=function(t,e,...i){const n=this.floatingStatuses.find((e=>e.name===t));if(!n)throw new Error("Cannot create floating status: "+t);{const t=e.currentNode,i=new pc.Vec3(t.x,t.y+e.height,t.z),o=n.template.resource.instantiate();o.script.TemporaryFloatingStatusComponent.setWorldPosition(i,this.cameraEntity,this.screenEntity),this.entity.parent.addChild(o)}};const{Mediator:$}=i(710);class X extends ${static get NAME(){return"PortalMediator"}constructor(t){super(X.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE]),this.viewComponent=t,this.viewComponent.on("picker:portal",this.selectedPortal,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SET_CAMERA_TARGET:}}selectedPortal(){const t=this.facade.retrieveProxy(g.u.NAME),i=this.viewComponent.script.PortalComponent,n=i.destinationScene,o=i.destinationPortal,r=i.standingPoint.getPosition();t.currentMode===m.gameplayModeTypes.EXPLORATION&&this.facade.sendNotification(e.i.NAVIGATE_THROUGH_PORTAL,r,n,o)}}const J=pc.createScript("PortalComponent");J.attributes.add("portalId",{type:"string",title:"Portal Id"}),J.attributes.add("destinationScene",{type:"string",title:"Destination Scene"}),J.attributes.add("destinationPortal",{type:"string",title:"Destination Portal"}),J.attributes.add("hitbox",{type:"entity",title:"Hitbox"}),J.attributes.add("standingPoint",{type:"entity",title:"Standing Point"}),J.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(X.NAME)&&this.facade.removeMediator(X.NAME),this.facade.registerMediator(new X(this.entity)),this.standingPoint.model.enabled=!1};const{Mediator:Z}=i(710);class tt extends Z{static get NAME(){return"DialoguePanelMediator"}constructor(t){super(tt.NAME),this.subscribeNotification([e.i.SHOW_DIALOGUE_PANEL,e.i.HIDE_DIALOGUE_PANEL,e.i.DISPLAY_DIALOGUE_STEP,e.i.DISPLAY_DIALOGUE_SKILL_TEST,e.i.CLEAR_DIALOGUE_CHOICES,e.i.SHOW_DIALOGUE_CONTINUE_BUTTON,e.i.HIDE_DIALOGUE_CONTINUE_BUTTON]),this.viewComponent=t,this.viewComponent.on("clicked:continue",this.handleClickContinue,this),this.viewComponent.on("clicked:choice",this.handleClickChoice,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SHOW_DIALOGUE_PANEL:this.viewComponent.enabled=!0;break;case e.i.HIDE_DIALOGUE_PANEL:this.viewComponent.script.DialoguePanelComponent.clearPanel(),this.viewComponent.enabled=!1;break;case e.i.DISPLAY_DIALOGUE_STEP:this.viewComponent.script.DialoguePanelComponent.createStep(i[0]);break;case e.i.DISPLAY_DIALOGUE_SKILL_TEST:this.viewComponent.script.DialoguePanelComponent.createSkillTest(...i);break;case e.i.CLEAR_DIALOGUE_CHOICES:this.viewComponent.script.DialoguePanelComponent.clearDialogueChoices();break;case e.i.SHOW_DIALOGUE_CONTINUE_BUTTON:this.viewComponent.script.DialoguePanelComponent.setContinueButton(!0);break;case e.i.HIDE_DIALOGUE_CONTINUE_BUTTON:this.viewComponent.script.DialoguePanelComponent.setContinueButton(!1)}}handleClickContinue(){this.facade.sendNotification(e.i.CONTINUE_DIALOGUE_NODE)}handleClickChoice(t){this.facade.sendNotification(e.i.SELECT_DIALOGUE_CHOICE,t)}}const et=pc.createScript("DialoguePanelComponent");et.attributes.add("scrollbarViewEntity",{type:"entity",title:"Scrollbar View"}),et.attributes.add("contentEntity",{type:"entity",title:"Content Entity"}),et.attributes.add("feedEntity",{type:"entity",title:"Feed Entity"}),et.attributes.add("contentHeight",{type:"number",title:"Content Height",default:520}),et.attributes.add("textEntryTemplate",{type:"asset",title:"Text Entry Asset"}),et.attributes.add("choiceEntryTemplate",{type:"asset",title:"Choice Entry Asset"}),et.attributes.add("skillTestEntryTemplate",{type:"asset",title:"Skill Test Entry Asset"}),et.attributes.add("continueButtonEntity",{type:"entity",title:"Continue Button"}),et.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(tt.NAME)&&this.facade.removeMediator(tt.NAME),this.facade.registerMediator(new tt(this.entity)),this.entity.enabled=!1,this.choices=[],this.continueButtonEntity.element.on("click",(()=>{this.entity.fire("clicked:continue")}),this)},et.prototype.createStep=function(t){if(this.createText(t.step),t.step.choices)for(let e=0;e<t.step.choices.length;e++){const i=t.step.choices[e];this.createChoice(e,i.text)}},et.prototype.createText=function(t){const e=this.textEntryTemplate.resource.instantiate();e.script.DialogueTextComponent.setup(t),this.feedEntity.addChild(e),this.resizeToContents(),setTimeout((()=>{this.scrollbarViewEntity.scrollbar.value=1}),50)},et.prototype.createChoice=function(t,e){const i=this.choiceEntryTemplate.resource.instantiate();i.script.DialogueChoiceComponent.setup(t,e),i.element.text=e,this.feedEntity.addChild(i),this.choices.push(i),i.on("click",this.handleSelectChoice,this),this.resizeToContents(),setTimeout((()=>{this.scrollbarViewEntity.scrollbar.value=1}),50)},et.prototype.createSkillTest=function(t,e,i,n,o){const r=this.skillTestEntryTemplate.resource.instantiate();r.script.DialogueSkillTestComponent.setup(t,e,i,n,o),this.feedEntity.addChild(r),this.resizeToContents(),setTimeout((()=>{this.scrollbarViewEntity.scrollbar.value=1}),50)},et.prototype.clearDialogueChoices=function(){for(const t of this.choices)t.off("click",this.handleSelectChoice,this),t.destroy();this.choices=[]},et.prototype.clearPanel=function(){for(;this.feedEntity.children.length>0;)this.feedEntity.children[0].destroy()},et.prototype.handleSelectChoice=function(t){this.entity.fire("clicked:choice",t)},et.prototype.resizeToContents=function(){let t=this.feedEntity.layoutgroup.spacing.y,e=0;for(const i of this.feedEntity.children)e+=i.element.height,e+=t;this.contentEntity.element.height=Math.max(this.contentHeight,e)},et.prototype.setContinueButton=function(t){this.continueButtonEntity.enabled=t};const it=pc.createScript("DialogueChoiceComponent");it.attributes.add("indexEntity",{type:"entity",title:"Index Entity"}),it.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),it.prototype.initialize=function(){},it.prototype.setup=function(t,e){this.indexEntity.element.text=t+1+".",this.labelEntity.element.text=e,this.entity.element.height=this.labelEntity.element.height,this.entity.element.on("click",(()=>{this.entity.fire("click",t)}))},it.prototype.update=function(t){this.entity.element.height=this.labelEntity.element.height};const nt=pc.createScript("DefaultAnimationComponent");nt.attributes.add("animationName",{type:"string",title:"Animation Name"}),nt.prototype.postInitialize=function(){this.entity.animation.loop=!0,this.entity.animation.play(this.animationName,.1)};const ot=pc.createScript("DialogueTextComponent");ot.attributes.add("withImageWidth",{type:"number",title:"With Image Width",default:340}),ot.attributes.add("withoutImageWidth",{type:"number",title:"With Image Width",default:360}),ot.attributes.add("textContainer",{type:"entity",title:"Text Container"}),ot.attributes.add("titleEntity",{type:"entity",title:"Title Entity"}),ot.attributes.add("bodyEntity",{type:"entity",title:"Body Entity"}),ot.attributes.add("thumbnailContainer",{type:"entity",title:"Thumbnail Container"}),ot.attributes.add("thumbnailImage",{type:"entity",title:"Thumbnail Image"}),ot.prototype.initialize=function(){},ot.prototype.setup=function(t){t.title?(this.titleEntity.element.text=t.title,t.titleColour&&this.titleEntity.element.color.fromString(t.titleColour)):this.titleEntity.enabled=!1,t.thumbnail?this.textContainer.element.width=this.withImageWidth:(this.textContainer.element.width=this.withoutImageWidth,this.thumbnailContainer.enable=!1),this.bodyEntity.element.text=t.text},ot.prototype.setHeight=function(){const t=this.thumbnailContainer.enable?this.thumbnailContainer.element.height:0;let e=0,i=this.textContainer.layoutgroup.spacing.y;for(const t of this.textContainer.children)e+=t.element.height+i;this.titleEntity.enabled||(this.bodyEntity.element.width=this.withImageWidth),this.entity.element.height=Math.max(t,e)},ot.prototype.postInitialize=function(){this.setHeight()},ot.prototype.update=function(t){};const{Mediator:rt}=i(710);class st extends rt{static get NAME(){return"AttackButtonMediator"}constructor(t){super(st.NAME),this.subscribeNotification([e.i.GAMEPLAY_ACTION_CHANGED]),this.viewComponent=t,this.viewComponent.on("click:toggleAttack",this.handleToggleAttack,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.GAMEPLAY_ACTION_CHANGED:"attack"===i[0]?this.viewComponent.script.AttackButtonComponent.toggleHighlight(!0):this.viewComponent.script.AttackButtonComponent.toggleHighlight(!1)}}handleToggleAttack(t){t?this.facade.sendNotification(e.i.GAMEPLAY_ACTION_CHANGED,"attack"):this.facade.sendNotification(e.i.GAMEPLAY_ACTION_CHANGED,"interact")}}const at=pc.createScript("AttackButtonComponent");at.attributes.add("highlightEntity",{type:"entity",title:"Highlight Entity"}),at.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(st.NAME)&&this.facade.removeMediator(st.NAME),this.facade.registerMediator(new st(this.entity)),this.entity.element.on("click",this.handleClick,this)},at.prototype.handleClick=function(t){this.entity.fire("click:toggleAttack",!this.highlightEntity.enabled)},at.prototype.toggleHighlight=function(t){this.highlightEntity.enabled=t};const{Mediator:ct}=i(710);class ht extends ct{static get NAME(){return"UseItemButtonMediator"}constructor(t,i){super(ht.NAME+i),this.equipmentSlotKey=i,this.subscribeNotification([e.i.GAMEPLAY_ACTION_CHANGED,e.i.DISPLAY_EQUIPPED_SLOT,e.i.SET_USE_ITEM_BUTTON_HIGHLIGHT]),this.viewComponent=t,this.viewComponent.on("click:useItem",this.handleUseItem,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.GAMEPLAY_ACTION_CHANGED:"attack"===i[0]?this.viewComponent.script.UseItemButtonComponent.toggleHighlight(!0):this.viewComponent.script.UseItemButtonComponent.toggleHighlight(!1);break;case e.i.DISPLAY_EQUIPPED_SLOT:const t=i[0].get(this.equipmentSlotKey);t&&t.icon?this.viewComponent.script.UseItemButtonComponent.setIcon(t.icon):this.viewComponent.script.UseItemButtonComponent.setDefaultIcon();break;case e.i.SET_USE_ITEM_BUTTON_HIGHLIGHT:const n=i[0];if(console.log(`Highlight: ${n} vs ${this.equipmentSlotKey}`),n===this.equipmentSlotKey){const t=i[1];this.viewComponent.script.UseItemButtonComponent.toggleHighlight(t)}}}handleUseItem(){this.facade.sendNotification(e.i.USE_EQUIPPED_ITEM,this.equipmentSlotKey)}}const dt=pc.createScript("UseItemButtonComponent");dt.attributes.add("equipmentSlotKey",{type:"string",title:"Equipment Slot Key"}),dt.attributes.add("iconEntity",{type:"entity",title:"Icon Entity"}),dt.attributes.add("highlightEntity",{type:"entity",title:"Highlight Entity"}),dt.attributes.add("defaultIcon",{type:"asset",title:"Default Icon"}),dt.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(ht.NAME+this.equipmentSlotKey)&&this.facade.removeMediator(ht.NAME+this.equipmentSlotKey),this.facade.registerMediator(new ht(this.entity,this.equipmentSlotKey)),this.entity.element.on("click",this.handleClick,this)},dt.prototype.setIcon=function(t){const e=this.app.assets.get(t);this.iconEntity.element.spriteAsset=e},dt.prototype.setDefaultIcon=function(){this.iconEntity.element.spriteAsset=this.defaultIcon},dt.prototype.handleClick=function(t){this.entity.fire("click:useItem")},dt.prototype.toggleHighlight=function(t){this.highlightEntity.enabled=t};const lt=pc.createScript("VehicleComponent");function pt(t,e){return t.length()<e?t:t.normalize().scale(e)}lt.attributes.add("mass",{type:"number",title:"Mass",default:3}),lt.attributes.add("maxSpeed",{type:"number",title:"Max Speed",default:5}),lt.attributes.add("maxForce",{type:"number",title:"Max Force",default:.5}),lt.attributes.add("arriveThreshold",{type:"number",title:"Arrival Threshold",default:1}),lt.prototype.initialize=function(){this.velocity=new pc.Vec3,this.steeringForce=new pc.Vec3},lt.prototype.processVelocity=function(t){const e=this.entity.getPosition();this.steeringForce=pt(this.steeringForce,this.maxForce),this.steeringForce=this.steeringForce.scale(1/this.mass),this.velocity=this.velocity.add(this.steeringForce),this.velocity=pt(this.velocity,this.maxSpeed*t),this.steeringForce=new pc.Vec3,this.entity.setLocalPosition(e.add(this.velocity));const i=180*(n=this.velocity,Math.atan2(n.x,n.z))/Math.PI;var n;this.entity.setEulerAngles(0,i,0)},lt.prototype.seek=function(t,e){const i=this.entity.getLocalPosition();let n=t.clone().sub(i);n=n.normalize(),n.scale(this.maxSpeed*e);const o=n.sub(this.velocity);this.steeringForce=this.steeringForce.add(o)},lt.prototype.arrive=function(t){const e=this.entity.getPosition();let i=t.clone().sub(e).normalize().scale(this.maxSpeed);const n=e.distance(t);i=n>this.arrivalThreshold?i.scale(this.maxSpeed):i.scale(this.maxSpeed*n/this.arriveThreshold);const o=i.sub(this.velocity);this.steeringForce=this.steeringForce.add(o)};const ut=pc.createScript("ScreenResizeComponent");ut.prototype.window=window,ut.prototype.postInitialize=function(){this.onResize(),this.window.addEventListener("resize",this.onResize.bind(this),!1)},ut.prototype.onResize=function(){const t=this.app.graphicsDevice;t.width<t.height?this.entity.screen.scaleBlend=1:this.entity.screen.scaleBlend=0,this.entity.screen.referenceResolution=new pc.Vec2(t.width,t.height)};const Et=pc.createScript("DialogueSkillTestComponent");Et.attributes.add("skillNameLabel",{type:"entity",title:"Skill Name Label"}),Et.attributes.add("skillValueLabel",{type:"entity",title:"Skill Value Label"}),Et.attributes.add("die1Label",{type:"entity",title:"Die 1 Label"}),Et.attributes.add("die2Label",{type:"entity",title:"Die 2 Label"}),Et.attributes.add("successLabel",{type:"entity",title:"Success Label"}),Et.attributes.add("failureLabel",{type:"entity",title:"Failure Label"}),Et.prototype.initialize=function(){},Et.prototype.setup=function(t,e,i,n,o){this.skillNameLabel.element.text=t,this.skillValueLabel.element.text=e,this.die1Label.element.text=i,this.die2Label.element.text=n,this.successLabel.enabled=o,this.failureLabel.enabled=!o};const yt=pc.createScript("InventoryItemComponent");yt.attributes.add("iconEntity",{type:"entity",title:"Icon Entity"}),yt.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),yt.attributes.add("slotHeight",{type:"number",title:"Slot Height",default:44}),yt.attributes.add("expandedEntity",{type:"entity",title:"Expanded Entity"}),yt.prototype.setup=function(t){this.icon=t.icon;const e=this.app.assets.get(this.icon);this.iconEntity.element.spriteAsset=e,this.size=t.size,this.labelEntity.element.text=t.name,this.entity.element.height=this.slotHeight*this.size,this.expandedEntity.element.height=this.slotHeight*this.size,this.itemData=t},yt.prototype.collapse=function(){this.expandedEntity.enabled=!1},yt.prototype.expand=function(){this.expandedEntity.enabled=!0},yt.prototype.postInitialize=function(){new pc.ElementDragHelper(this.entity.element,null).on("drag:start",this.onDragStart,this)},yt.prototype.onDragStart=function(){this.entity.parent.fire("drag:start",this.entity,this.size)};const{Mediator:gt}=i(710);class mt extends gt{static get NAME(){return"InventoryPanelMediator"}constructor(t){super(mt.NAME),this.subscribeNotification([e.i.DISPLAY_INVENTORY_PANEL]),this.viewComponent=t,this.viewComponent.on("reorderItem",this.handeReorderItem,this),this.viewComponent.on("equipItem",this.handleEquipItem,this),this.viewComponent.enabled=!1}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.DISPLAY_INVENTORY_PANEL:const t=i[0],n=i[1];this.viewComponent.script.InventoryPanelComponent.displayItems(t,n),this.viewComponent.enabled=!0}}handeReorderItem(t,i){this.facade.sendNotification(e.i.REORDER_INVETORY_ITEM,t,i)}handleEquipItem(t,i){this.facade.sendNotification(e.i.EQUIP_ITEM_TO_SLOT,t,i)}}const ft=pc.createScript("InventoryPanelComponent");function At(t,e){return t.x>e.x1&&t.x<e.x2&&t.y>e.y1&&t.y<e.y2}ft.attributes.add("slotContainer",{type:"entity",title:"Slot Container"}),ft.attributes.add("topSlotPosition",{type:"entity",title:"Top Slot Position"}),ft.attributes.add("closeButton",{type:"entity",title:"Close Button"}),ft.attributes.add("itemAsset",{type:"asset",title:"Item Asset"}),ft.attributes.add("dragIcon",{type:"entity",title:"Drag Icon"}),ft.attributes.add("slotWidth",{type:"number",title:"Slot Width",default:320}),ft.attributes.add("slotHeight",{type:"number",title:"Slot Height",default:44}),ft.attributes.add("maxSlots",{type:"number",title:"Max Slots",default:12}),ft.attributes.add("equipmentSlots",{type:"json",schema:[{name:"key",title:"Equipment Slot Key",type:"string"},{name:"entity",title:"Equipment Slot Entity",type:"entity"}],array:!0,title:"Equipment Slots"}),ft.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(mt.NAME)&&this.facade.removeMediator(mt.NAME),this.facade.registerMediator(new mt(this.entity)),this.entity.on("drag:start",this.handleDragStart,this),this.closeButton.element.on("click",this.handleClose,this),this.inventoryItemEntities=[]},ft.prototype.handleDragStart=function(t,e){t.reparent(this.entity),this.dragIcon.reparent(this.entity),this.app.touch?(this.app.touch.on(pc.EVENT_TOUCHMOVE,(i=>{i.touches.length>0&&this.handleMouseMove(t,e,i.touches[0])}),this),this.app.touch.on(pc.EVENT_TOUCHEND,(i=>{i.changedTouches.length>0&&this.handleMouseUp(t,e,i.changedTouches[0])}),this)):(this.entity.element.on(pc.EVENT_MOUSEMOVE,(i=>{this.handleMouseMove(t,e,i)}),this),this.entity.element.on(pc.EVENT_MOUSEUP,(i=>{this.handleMouseUp(t,e,i)}),this))},ft.prototype.localPositionFromMouseEvent=function(t){const e=new pc.Vec3(t.x,t.y,0),i=this.app.graphicsDevice.maxPixelRatio;e.x*=i,e.y*=i;const n=this.entity.element.screen.screen,o=this.app.graphicsDevice,r=n.scale,s=e.x/r,a=(o.height-e.y)/r;return new pc.Vec3(s,a,0)},ft.prototype.handleMouseMove=function(t,e,i){const n=this.localPositionFromMouseEvent(i);this.dragIcon.setLocalPosition(n),this.displayPotentialList(t,e,n)},ft.prototype.handleMouseUp=function(t,e,i){const n=this.localPositionFromMouseEvent(i);this.dragIcon.enabled=!1,t.script.InventoryItemComponent.expand(),this.entity.element.off(pc.EVENT_MOUSEMOVE),this.entity.element.off(pc.EVENT_MOUSEUP),this.app.touch&&(this.app.touch.off(pc.EVENT_TOUCHMOVE),this.app.touch.off(pc.EVENT_TOUCHEND));const o=this.topSlotPosition.getLocalPosition();if(At(n,{x1:o.x,y1:o.y-this.maxSlots*this.slotHeight,x2:o.x+this.slotWidth,y2:o.y})){const e=this.app.graphicsDevice.height,i={x:t.element.screenCorners[2].x,y:e-t.element.screenCorners[2].y},n=this.localPositionFromMouseEvent(i),r=Math.max(0,Math.floor((o.y-n.y)/this.slotHeight)),s=t.script.InventoryItemComponent.itemData;this.entity.fire("reorderItem",s.uuid,r)}else this.checkDropOnEquipmentSlot(t,i)},ft.prototype.checkDropOnEquipmentSlot=function(t,e){for(const i of this.equipmentSlots){const n=i.key,o=i.entity.element.screenCorners,r=this.app.graphicsDevice.height;if(At({x:e.x,y:r-e.y},{x1:o[0].x,y1:o[0].y,x2:o[2].x,y2:o[2].y})){const e=t.script.InventoryItemComponent.itemData;this.entity.fire("equipItem",e.id,n)}}},ft.prototype.handleItemMove=function(t,e){this.isInBounds(e)?t.script.InventoryItemComponent.expand():t.script.InventoryItemComponent.collapse(),this.setHighlightPosition(e)},ft.prototype.handleClose=function(t){return t.event.stopImmediatePropagation(),this.entity.enabled=!1},ft.prototype.displayItems=function(t,e){console.log(t),console.log(e),this.clearPanel();const i=this.topSlotPosition.getLocalPosition();let n=0;for(let e=0;e<t.length;e++){const o=t[e];n+=o.size;const r=this.itemAsset.resource.instantiate();r.script.InventoryItemComponent.setup(o),r.setLocalPosition(i.x,i.y-n*this.slotHeight,0),this.inventoryItemEntities.push(r),this.entity.addChild(r)}for(const t of this.equipmentSlots){const i=t.key,n=t.entity;if(e.has(i)){const t=e.get(i);n.script.InventoryEquippedSlotComponent.setup(t.icon)}else n.script.InventoryEquippedSlotComponent.clear()}},ft.prototype.displayPotentialList=function(t,e,i){const n=this.topSlotPosition.getLocalPosition();if(At(i,{x1:n.x,y1:n.y-this.maxSlots*this.slotHeight,x2:n.x+this.slotWidth,y2:n.y})){t.script.InventoryItemComponent.expand(),this.dragIcon.enabled=!1;const e=this.app.graphicsDevice.height,i={x:t.element.screenCorners[2].x,y:e-t.element.screenCorners[2].y},o=this.localPositionFromMouseEvent(i),r=Math.max(0,Math.floor((n.y-o.y)/this.slotHeight));this.reorderListWithGap(t,t.script.InventoryItemComponent.size,r)}else t.script.InventoryItemComponent.collapse(),this.dragIcon.enabled=!0},ft.prototype.reorderListWithGap=function(t,e,i){const n=this.topSlotPosition.getLocalPosition();let o=0;for(let r=0;r<this.inventoryItemEntities.length;r++){const s=this.inventoryItemEntities[r];t!==s&&(i>=o&&i<o+s.script.InventoryItemComponent.size&&(o+=e),o+=s.script.InventoryItemComponent.size,s.setLocalPosition(n.x,n.y-o*this.slotHeight,0))}},ft.prototype.clearPanel=function(){for(;this.inventoryItemEntities.length>0;)this.inventoryItemEntities.pop().destroy()};const Nt=pc.createScript("InventoryDragIconComponent");Nt.prototype.initialize=function(){},Nt.prototype.setup=function(t,e){};const Tt=pc.createScript("InventoryEquippedSlotComponent");Tt.attributes.add("defaultAsset",{type:"asset",title:"Default Asset"}),Tt.attributes.add("iconEntity",{type:"entity",title:"Icon Entity"}),Tt.prototype.initialize=function(){},Tt.prototype.setup=function(t){const e=this.app.assets.get(t);this.iconEntity.element.spriteAsset=e},Tt.prototype.clear=function(){this.iconEntity.element.spriteAsset=this.defaultAsset};const{Facade:_t}=i(710),{PureMVC:Ct}=i(710);new class{constructor(){Ct.debug=!0,_t.getInstance=t.GameFacade.getInstance,console.log(_t),this.facade=_t.getInstance(t.GameFacade.KEY),this.facade.startup(this)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvRmFjYWRlLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vbm9kZV9tb2R1bGVzL0Brb3JlZXovcHVyZS1tdmMvbGliL2NvbS9rb3JlZXovcHVyZW12Yy9NZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvTW9kZWwuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9ub2RlX21vZHVsZXMvQGtvcmVlei9wdXJlLW12Yy9saWIvY29tL2tvcmVlei9wdXJlbXZjL05vdGlmaWVyLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vbm9kZV9tb2R1bGVzL0Brb3JlZXovcHVyZS1tdmMvbGliL2NvbS9rb3JlZXovcHVyZW12Yy9Qcm94eS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvUHVyZU1WQy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvVmlldy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uTm9kZS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1BhcnNlR2FtZU1hcENvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvd2VhcG9ucy9XZWFwb25zUHJveHkuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvc3RvcnlQcm94eS9TdG9yeVByb3h5LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2ludmVudG9yeS9JbnZlbnRvcnlQcm94eS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9pdGVtcy9JdGVtc1Byb3h5LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2JvdEJlaGF2aW91ci9Cb3RCZWhhdmlvdXJQcm94eS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1N0YXJ0dXBDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvQ2hhbmdlU2NlbmVDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3V0aWxzL1NodWZmbGVBcnJheS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHkuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9TdGFydENvbWJhdENvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9OZXh0Q29tYmF0VHVybkNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9OZXh0Q29tYmF0Um91bmRDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvRW5kQ29tYmF0VHVybkNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9FbmVteVR1cm5Db21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvU2VsZWN0ZWROb2RlQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0NvbWJhdE5hdmlnYXRlVG9Ob2RlQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1Nob3dXYWxrYWJsZUFyZWFDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvSGlkZVdhbGthYmxlQXJlYUNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9Bd2FpdFBsYXllckNvbWJhdElucHV0Q29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0VuZE1vdmVtZW50Q29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1NlbGVjdGVkR2FtZUNoYXJhY3RlckNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9SZXNvbHZlQXR0YWNrQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL01vdmVBbG9uZ1BhdGhBbmRBdHRhY2tDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvS2lsbEdhbWVDaGFyYWN0ZXJDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvRW5kQ29tYmF0Q29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0RldGVybWluZUVuZW15QWN0aW9uQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1Jlc29sdmVSYW5nZWRBdHRhY2tDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvRXF1aXBXZWFwb25Db21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvTmF2aWdhdGVUaHJvdWdoUG9ydGFsQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0FkZFBsYXllckNoYXJhY3RlclRvTWFwQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL05hdmlnYXRlVG9DaGFyYWN0ZXJBbmRUYWxrLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvU3RhcnREaWFsb2d1ZUNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9Db250aW51ZURpYWxvZ3VlVGV4dENvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9TZWxlY3REaWFsb2d1ZUNob2ljZUNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9Hb1RvRGlhbG9ndWVOb2RlQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0VuZERpYWxvZ3VlQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL05hdmlnYXRlVG9DaGFyYWN0ZXJBbmRBdHRhY2tDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvQ2hhbmdlR2FtZXBsYXlBY3Rpb25Db21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvUmVzb2x2ZURpYWxvZ3VlU2tpbGxUZXN0Q29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0NsaWNrSW52ZW50b3J5QnV0dG9uQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1Jlb3JkZXJJbnZlbnRvcnlJdGVtQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0VxdWlwSXRlbVRvU2xvdENvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9BZGRJdGVtdG9JbnZlbnRvcnlDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvVXNlRXF1aXBwZWRJdGVtQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9HYW1lRmFjYWRlLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2JlaGF2aW91clRyZWUvQm90QmVoYXZpb3VyVHlwZXMuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS9iZWhhdmlvdXJzL2FjdGlvbnMvRW5kQ29tYmF0VHVybi5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvYWN0aW9ucy9TZXRQbGF5ZXJBc1RhcmdldC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvY29uZGl0aW9ucy9IYXNBY3Rpb25zUmVtYWluaW5nLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2JlaGF2aW91clRyZWUvYmVoYXZpb3Vycy9jb25kaXRpb25zL0hhc01vdmVtZW50UmVtYWluaW5nLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2JlaGF2aW91clRyZWUvYmVoYXZpb3Vycy9jb25kaXRpb25zL0lzRGVhZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvY29uZGl0aW9ucy9Jc1RhcmdldERlYWQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS9jb3JlL0Jhc2VOb2RlLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2JlaGF2aW91clRyZWUvY29yZS9CZWhhdmlvdXJTdGF0dXMuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS9jb3JlL01hc3Rlck5vZGUuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS9jb3JlL01lbVNlcXVlbmNlLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2JlaGF2aW91clRyZWUvY29yZS9Qcmlvcml0eS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2NvcmUvZGVjb3JhdG9ycy9JbnZlcnRlci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvYWN0aW9ucy9NZWxlZUF0dGFja1RhcmdldC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvY29uZGl0aW9ucy9Jc05leHRUb1BsYXllci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvYWN0aW9ucy9Nb3ZlVG93YXJkc1RhcmdldC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvYWN0aW9ucy9SZWxpbnF1aXNoTW92ZW1lbnRQb2ludHMuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS90cmVlcy9CYXNpY01lbGVlVHJlZS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvYWN0aW9ucy9SYW5nZUF0dGFja1RhcmdldC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvYWN0aW9ucy9NYWludGFpbkRpc3RhbmNlRnJvbVRhcmdldC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvYWN0aW9ucy9QaWNrTmV4dEFjdGlvbi5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvY29uZGl0aW9ucy9DYW5TZWVUYXJnZXQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS9iZWhhdmlvdXJzL2FjdGlvbnMvTW92ZVRvd2FyZHNUYXJnZXRVbnRpbFZpc2libGUuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS90cmVlcy9CYXNpY1JhbmdlZFRyZWUuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS9jb3JlL0JsYWNrYm9hcmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS9jb3JlL1RpY2suanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS9jb3JlL0JlaGF2aW91clRyZWUuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS90cmVlcy9DaGFyYWN0ZXJDb21tYW5kVHJlZS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0dhbWVDb21tYW5kcy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9kYXRhL1dlYXBvblR5cGVzLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2JvdEJlaGF2aW91ci9Cb3RCZWhhdmlvdXJzVk8uanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvY29tYmF0L0NvbWJhdFZPLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclZPLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVNYXAvR2FtZU1hcFByb3h5LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3V0aWxzL0FkamFjZW50UG9pbnRzLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVNYXAvR2FtZU1hcFZPLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Qcmlvcml0eVF1ZXVlLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHkuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVZPLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2ludmVudG9yeS9JbnZlbnRvcnlWTy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9pbnZlbnRvcnkvaXRlbXMvSW52ZW50b3J5SXRlbS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9zdG9yeVByb3h5L1N0b3J5Vk8uanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdXRpbHMvQ2hhcmFjdGVyQ2VudGVyUG9pbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdXRpbHMvR1VJRC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3Rlck1lZGlhdG9yLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvcHJvamVjdGlsZXMvUHJvamVjdGlsZUNyZWF0b3JNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvQ2Fjb2dlbkdhbWUuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29tcG9uZW50cy9uYXZpZ2F0aW9uL05hdmlnYXRpb25Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9nYW1lQ2hhcmFjdGVyL2FnZ3JvL0Fncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvdG9hc3RNZXNzYWdlL1RvYXN0TWVzc2FnZU1lZGlhdG9yLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvdG9hc3RNZXNzYWdlL1RvYXN0TWVzc2FnZUNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2dhbWVDaGFyYWN0ZXIvc2V0Q2FtZXJhVGFyZ2V0L1NldENhbWVyYVRhcmdldENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2lucHV0TGF5ZXIvSW5wdXRMYXllck1lZGlhdG9yLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvZ2FtZUNhbWVyYS9HYW1lQ2FtZXJhLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvZ2FtZUNhbWVyYS9HYW1lQ2FtZXJhTWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9pbnB1dExheWVyL0lucHV0TGF5ZXJDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9wbGF5ZXJDb21iYXRQYW5lbC9QbGF5ZXJDb21iYXRQYW5lbE1lZGlhdG9yLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvcGxheWVyQ29tYmF0UGFuZWwvUGxheWVyQ29tYmF0UGFuZWxDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29tcG9uZW50cy9jb2xsaXNpb24vSGl0Ym94Q29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvYWN0aW9uUGFuZWwvQWN0aW9uUGFuZWxNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2FjdGlvblBhbmVsL0FjdGlvbkJ1dHRvbkNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2FjdGlvblBhbmVsL0FjdGlvblBhbmVsQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbXBvbmVudHMvVUlTdG9wUHJvcGFnYXRpb24uanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9wcm9qZWN0aWxlcy9Qcm9qZWN0aWxlQ3JlYXRvckNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L3Byb2plY3RpbGVzL1Byb2plY3RpbGVDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9zdGFtaW5hQmFyL1N0YW1pbmFCYXJNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L3N0YW1pbmFCYXIvU3RhbWluYUJhckNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2FjdGlvbnNSZW1haW5pbmdQYW5lbC9BY3Rpb25zUmVtYWluaW5nUGFuZWxNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2FjdGlvbnNSZW1haW5pbmdQYW5lbC9BY3Rpb25zUmVtYWluaW5nUGFuZWxDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9hY3Rpb25zUmVtYWluaW5nUGFuZWwvQWN0aW9uc1JlbWFpbmluZ1BpcENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2Zsb2F0aW5nU3RhdHVzL0Zsb2F0aW5nU3RhdHVzQ3JlYXRvck1lZGlhdG9yLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvZmxvYXRpbmdTdGF0dXMvY29tcG9uZW50cy9UZW1wb3JhcnlGbG9hdGluZ1N0YXR1c0NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2Zsb2F0aW5nU3RhdHVzL0Zsb2F0aW5nU3RhdHVzQ3JlYXRvckNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L3BvcnRhbC9Qb3J0YWxNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L3BvcnRhbC9Qb3J0YWxDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9kaWFsb2d1ZVBhbmVsL0RpYWxvZ3VlUGFuZWxNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2RpYWxvZ3VlUGFuZWwvRGlhbG9ndWVQYW5lbENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2RpYWxvZ3VlUGFuZWwvRGlhbG9ndWVDaG9pY2VDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9nYW1lQ2hhcmFjdGVyL2RlZmF1bHRBbmltL0RlZmF1bHRBbmltYXRpb25Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9kaWFsb2d1ZVBhbmVsL0RpYWxvZ3VlVGV4dENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2FjdGlvblBhbmVsL2F0dGFja0J1dHRvbi9BdHRhY2tCdXR0b25NZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2FjdGlvblBhbmVsL2F0dGFja0J1dHRvbi9BdHRhY2tCdXR0b25Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9hY3Rpb25QYW5lbC91c2VJdGVtQnV0dG9uL1VzZUl0ZW1CdXR0b25NZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2FjdGlvblBhbmVsL3VzZUl0ZW1CdXR0b24vVXNlSXRlbUJ1dHRvbkNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb21wb25lbnRzL3ZlaGljbGUvVmVoaWNsZUNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb21wb25lbnRzL3NjcmVlblJlc2l6ZS9TY3JlZW5SZXNpemVDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9kaWFsb2d1ZVBhbmVsL0RpYWxvZ3VlU2tpbGxUZXN0Q29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvaW52ZW50b3J5UGFuZWwvSW52ZW50b3J5SXRlbUNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2ludmVudG9yeVBhbmVsL0ludmVudG9yeVBhbmVsTWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9pbnZlbnRvcnlQYW5lbC9JbnZlbnRvcnlQYW5lbENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2ludmVudG9yeVBhbmVsL0ludmVudG9yeURyYWdJY29uQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvaW52ZW50b3J5UGFuZWwvSW52ZW50b3J5RXF1aXBwZWRTbG90Q29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUHVyZU1WQ18xIiwiVmlld18xIiwiQ29udHJvbGxlciIsImtleSIsInRoaXMiLCJjb21tYW5kTWFwIiwiaW5zdGFuY2VNYXAiLCJFcnJvciIsIm11bHRpdG9uS2V5IiwibG9nZ2VyIiwiUHVyZU1WQyIsImRlYnVnIiwibG9nQ29tbWFuZCIsImxvZ05vbmUiLCJpbml0aWFsaXplQ29udHJvbGxlciIsInJlbW92ZUNvbnRyb2xsZXIiLCJnZXRJbnN0YW5jZSIsInByb3RvdHlwZSIsInJlZ2lzdGVyQ29tbWFuZCIsIm5vdGlmaWNhdGlvbk5hbWUiLCJjb21tYW5kQ2xhc3NSZWYiLCJ2aWV3IiwicmVnaXN0ZXJPYnNlcnZlciIsImV4ZWN1dGVDb21tYW5kIiwiaGFzQ29tbWFuZCIsInVuZGVmaW5lZCIsInJlbW92ZUNvbW1hbmQiLCJyZW1vdmVPYnNlcnZlciIsIlZpZXciLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJjb21tYW5kIiwiX2NvbnNvbGVBcmdzIiwibmFtZSIsImFwcGx5IiwiY29uY2F0IiwiQ29udHJvbGxlcl8xIiwiTW9kZWxfMSIsIkZhY2FkZSIsImxvZ05vdGlmaWNhdGlvbiIsImluaXRpYWxpemVOb3RpZmllciIsImluaXRpYWxpemVGYWNhZGUiLCJoYXNDb3JlIiwicmVtb3ZlQ29yZSIsIk1vZGVsIiwicmVtb3ZlTW9kZWwiLCJyZW1vdmVWaWV3IiwiaW5pdGlhbGl6ZU1vZGVsIiwiaW5pdGlhbGl6ZVZpZXciLCJjb250cm9sbGVyIiwicmVnaXN0ZXJQcm94eSIsInByb3h5IiwibW9kZWwiLCJyZXRyaWV2ZVByb3h5IiwicHJveHlOYW1lIiwicmVtb3ZlUHJveHkiLCJoYXNQcm94eSIsInJlZ2lzdGVyTWVkaWF0b3IiLCJtZWRpYXRvciIsInJldHJpZXZlTWVkaWF0b3IiLCJtZWRpYXRvck5hbWUiLCJyZW1vdmVNZWRpYXRvciIsInNsZWVwTWVkaWF0b3IiLCJhd2FrZU1lZGlhdG9yIiwiaGFzTWVkaWF0b3IiLCJzZW5kTm90aWZpY2F0aW9uIiwiX2EiLCJub3RpZnlPYnNlcnZlcnMiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwiZCIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsImhhc093blByb3BlcnR5IiwiX18iLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsIk5vdGlmaWVyXzEiLCJNZWRpYXRvciIsIl9zdXBlciIsInZpZXdDb21wb25lbnQiLCJfdGhpcyIsImNhbGwiLCJsb2dNZWRpYXRvciIsInNsZWVwaW5nIiwic3Vic2NyaWJlZE5vdGlmaWNhdGlvbnMiLCJub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UiLCJnZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiZ2V0TWVkaWF0b3JOYW1lIiwic2V0Vmlld0NvbXBvbmVudCIsImdldFZpZXdDb21wb25lbnQiLCJvblJlZ2lzdGVyIiwib25SZW1vdmUiLCJvblNsZWVwIiwib25Bd2FrZSIsInN1YnNjcmliZU5vdGlmaWNhdGlvbiIsImNoYW5nZVN1YnNjcmlwdGlvbiIsImFkZFN1YnNjcmlwdGlvbiIsInVuc3Vic2NyaWJlTm90aWZpY2F0aW9uIiwicmVtb3ZlU3Vic2NyaXB0aW9uIiwiYWN0aW9uIiwib2xkTm90aWZpY2F0aW9ucyIsIm5vdGlmaWNhdGlvbnMiLCJzbGljZSIsImNoYW5nZWQiLCJmb3JFYWNoIiwibm90aWZpY2F0aW9uIiwiaW5kZXhPZiIsInB1c2giLCJpbmRleCIsInNwbGljZSIsIk5vdGlmaWVyIiwicHJveHlNYXAiLCJnZXRQcm94eU5hbWUiLCJGYWNhZGVfMSIsImZhY2FkZSIsImdldEZhY2FkZSIsIlByb3h5IiwiZGF0YSIsImxvZ1Byb3h5Iiwic2V0RGF0YSIsImdldERhdGEiLCJjb25zb2xlQXJncyIsImNvbW1hbmROYW1lIiwiY29uc29sZSIsImxvZyIsIkV2ZW50RW1pdHRlciIsIm1lZGlhdG9yTWFwIiwiZXZlbnRFbWl0dGVyIiwib2JzZXJ2ZXJNZXRob2QiLCJjb250ZXh0IiwicmVtb3ZlTGlzdGVuZXIiLCJvbiIsImVtaXQiLCJyZWdpc3Rlck9ic2VydmVycyIsIm9uTWVkaWF0b3JOb3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UiLCJiaW5kIiwiaXNTbGVlcGluZyIsInJlbW92ZU9ic2VydmVycyIsImludGVyZXN0cyIsIm5vdGlmaWNhdGlvbkludGVyZXN0cyIsIm5vdGlmaWNhdGlvbkludGVyZXN0c18xIiwiaW50ZXJlc3QiLCJoYW5kbGVOb3RpZmljYXRpb24iLCJub3RpZmljYXRpb25JbnRlcmVzdHNfMiIsIk1lZGlhdG9yXzEiLCJQcm94eV8xIiwiaGFzIiwicHJlZml4IiwiRXZlbnRzIiwiRUUiLCJmbiIsIm9uY2UiLCJhZGRMaXN0ZW5lciIsImVtaXR0ZXIiLCJldmVudCIsIlR5cGVFcnJvciIsImxpc3RlbmVyIiwiZXZ0IiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsImNsZWFyRXZlbnQiLCJldmVudE5hbWVzIiwiZXZlbnRzIiwibmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJsaXN0ZW5lcnMiLCJoYW5kbGVycyIsImkiLCJsIiwiZWUiLCJsaXN0ZW5lckNvdW50IiwiYTEiLCJhMiIsImEzIiwiYTQiLCJhNSIsImxlbiIsImoiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJvZmYiLCJwcmVmaXhlZCIsIm1vZHVsZSIsIk5hdmlnYXRpb25Ob2RlIiwieCIsInkiLCJ6IiwiY29ubmVjdGVkTm9kZXMiLCJvY2N1cGllZCIsIm90aGVyTm9kZSIsInNvbWUiLCJub2RlIiwiaXNDb25uZWN0ZWQiLCJjb25uZWN0ZWROb2RlSW5kZXgiLCJmaW5kSW5kZXgiLCJlcXVhbHMiLCJwYXJzZUdhbWVNYXBDb21tYW5kIiwiYXBwIiwicGMiLCJBcHBsaWNhdGlvbiIsImdldEFwcGxpY2F0aW9uIiwiZmxvb3JHcmlkIiwibmF2aWdhdGlvbkZsb29ycyIsInJvb3QiLCJmaW5kQnlUYWciLCJjb21wbGV0ZWRHcmlkIiwibmF2aWdhdGlvbkNvbXBvbmVudHMiLCJmbG9vckVudGl0eSIsIm5hdkNvbXAiLCJzY3JpcHQiLCJjcmVhdGVQYXJ0aWFsR3JpZEZyb21GbG9vciIsInNldEdyaWQiLCJuYXZpZ2F0aW9uQ29tcCIsImNvbm5lY3RlZENvbXBFbnRpdHkiLCJjb25uZWN0ZWRDb21wb25lbnRzIiwiY29ubmVjdGVkTmF2Q29tcCIsImpvaW5Ub0FkamFjZW50R3JpZCIsImdldEdyaWQiLCJjcmVhdGVNYXBGbG9vciIsIndhbGxzIiwid2FsbHNCb3VuZGluZ0JveGVzIiwibWFwV2FsbEVudGl0aWVzIiwibWFwV2FsbEVudGl0eSIsImFhYmIiLCJjcmVhdGVCb3VuZGluZ0JveEZyb21FbnRpdHkiLCJjcmVhdGVGbG9vclVuZGVyV2FsbHMiLCJkZXN0cm95IiwiY3JlYXRlTWFwV2FsbHMiLCJjb3ZlciIsImNvdmVyUG9pbnRzIiwiY292ZXJFbnRpdGllcyIsImNvdmVyRW50aXR5IiwiY3JlYXRlQ292ZXJQb2ludEZyb21Cb3giLCJjcmVhdGVNYXBDb3ZlciIsInBvcnRhbHMiLCJNYXAiLCJwb3J0YWxFbnRpdGllcyIsInBvcnRhbEVudGl0eSIsInBvcnRhbENvbXBvbmVudCIsInBvcnRhbElkIiwicG9ydGFsIiwiZGVzdGluYXRpb25TY2VuZSIsImRlc3RpbmF0aW9uUG9ydGFsIiwic3RhbmRpbmdQb2ludCIsImdldFBvc2l0aW9uIiwiaGl0Ym94UG9pbnQiLCJoaXRib3giLCJzZXQiLCJjcmVhdGVQb3J0YWxzIiwid2F5cG9pbnRzTWFwIiwid2F5cG9pbnRzIiwiZmxvb3JOb2RlIiwiaXNXYXlwb2ludCIsIndheXBvaW50Iiwib3RoZXJXYXlwb2ludCIsImxpbmUiLCJBc3RhciIsImFkZENvbm5lY3RlZE5vZGUiLCJjcmVhdGVXYXlwb2ludHNNYXAiLCJHYW1lTWFwUHJveHkiLCJHYW1lQ29tbWFuZHMiLCJib3hFbnRpdHkiLCJzY2FsZSIsImdldExvY2FsU2NhbGUiLCJoYWxmRXh0ZW50cyIsIlZlYzMiLCJCb3VuZGluZ0JveCIsIndhbGwiLCJ3YWxsUG9zIiwid2FsbFNjYWxlIiwiTWF0aCIsInJvdW5kIiwiY29ybmVyWCIsImNvcm5lcloiLCJtYXRjaGluZ05vZGVJbmRleCIsImVxdWFsc1BvaW50IiwiZGVsZXRlZE5vZGVzIiwiZGVsZXRlZE5vZGUiLCJkaXNjb25uZWN0ZWROb2RlIiwiZ3JpZCIsImZsb29yUG9zaXRpb24iLCJnZXRMb2NhbFBvc2l0aW9uIiwiZmxvb3JTaXplIiwic25hcHBlZFdpZHRoIiwic25hcHBlZEJyZWFkdGgiLCJzbmFwcGVkWCIsInNuYXBwZWRZIiwic25hcHBlZFoiLCJncmlkVG9Kb2luIiwiYm94IiwiYm94UG9zIiwiYm94U2NhbGUiLCJjb3ZlclBvaW50IiwiZmxvb3JNYXAiLCJub3J0aHdlc3QiLCJub3J0aCIsIm5vcnRoZWFzdCIsImVhc3QiLCJzb3V0aGVhc3QiLCJzb3V0aCIsInNvdXRod2VzdCIsIndlc3QiLCJuIiwiV2VhcG9uc1Byb3h5Iiwic3VwZXIiLCJOQU1FIiwid2VhcG9uTmFtZSIsImRhbWFnZVRpZXIiLCJjYXRlZ29yeUtleSIsInZvIiwiY2F0ZWdvcnkiLCJkYW1hZ2UiLCJtaW4iLCJTdG9yeVZPIiwiU3RvcnlQcm94eSIsInN0b3J5VHJlZXMiLCJhc3NldHMiLCJyZXNvdXJjZSIsInRyZWVzIiwic3RvcnlUcmVlTWFwIiwidHJlZUtleSIsInN0b3J5VHJlZUFzc2V0SWQiLCJzdG9yeVRyZWUiLCJjdXJyZW50VHJlZSIsImN1cnJlbnROb2RlIiwiY3VycmVudFN0ZXBJbmRleCIsImN1cnJlbnRDb25kaXRpb25zIiwidHJlZUlkIiwidHJlZSIsIm5vZGVJZCIsIm5vZGVzIiwic3RlcEluZGV4Iiwic3RlcHMiLCJnZXRUcmVlIiwiZ2V0Tm9kZSIsInZhbGlkU3RlcCIsImdldFZhbGlkU3RlcCIsIm9uY2VDb25kaXRpb24iLCJnZXRDb25kaXRpb25TdHJpbmdGb3JTdGVwIiwiYWRkQ29uZGl0aW9uIiwibmV4dFZhbGlkU3RlcCIsImdldFN0ZXAiLCJ0ZXN0Q29uZGl0aW9ucyIsImNvbmRpdGlvbnMiLCJnZXRJbnZlcnRlZENvbmRpdGlvblN0cmluZ0ZvclN0ZXAiLCJjaG9pY2VJbmRleCIsImdldEN1cnJlbnROb2RlU3RlcCIsImNob2ljZXMiLCJjb25kaXRpb24iLCJzdWNjZXNzIiwib3JEZWxpbWl0ZXJlZCIsIm9yQ29uZGl0aW9ucyIsInNwbGl0Iiwib3JTdWNjZXNzIiwib3B0aW9uYWxDb25kaXRpb24iLCJjaGVja0NvbmRpdGlvbiIsInN0YXJ0c1dpdGgiLCJzdHJpcHBlZFN0cmluZyIsInJlbW92ZUNvbmRpdGlvbiIsIkludmVudG9yeVZPIiwiSW52ZW50b3J5UHJveHkiLCJpbnZlbnRvcnlJdGVtcyIsImVxdWlwbWVudFNsb3RzIiwiaXRlbVVVSUQiLCJzbG90SW5kZXgiLCJvcmlnaW5hbEluZGV4IiwiaXRlbSIsInV1aWQiLCJvcmlnaW5hbEl0ZW0iLCJydW5uaW5nSW5kZXhUb3RhbCIsIm5ld0luZGV4Iiwic2l6ZSIsInRvU3RyaW5nIiwic2xvdEtleSIsIml0ZW1EYXRhIiwidHlwZSIsImV4aXN0aW5nSXRlbSIsImVxdWlwU2xvdCIsImRlbGV0ZSIsIm90aGVyU2xvdCIsImludmVudG9yeUl0ZW1EYXRhIiwiSXRlbXNQcm94eSIsIml0ZW1JZCIsImlkIiwiQm90QmVoYXZpb3Vyc1ZPIiwiQm90QmVoYXZpb3VyUHJveHkiLCJzdGFydHVwQ29tbWFuZCIsIkdhbWVTdGF0ZVByb3h5Iiwid2VhcG9uc0RhdGEiLCJpdGVtc0RhdGEiLCJjaGFuZ2VTY2VuZUNvbW1hbmQiLCJzY2VuZU5hbWUiLCJvbGRIaWVyYXJjaHkiLCJmaW5kQnlOYW1lIiwic2NlbmUiLCJzY2VuZXMiLCJmaW5kIiwibG9hZFNjZW5lSGllcmFyY2h5IiwidXJsIiwiZXJyIiwicGFyZW50IiwiZXJyb3IiLCJzaHVmZmxlQXJyYXkiLCJhcnJheSIsImN1cnJlbnRJbmRleCIsInRlbXBvcmFyeVZhbHVlIiwicmFuZG9tSW5kZXgiLCJmbG9vciIsInJhbmRvbSIsIkNvbWJhdFZPIiwiQ29tYmF0UHJveHkiLCJwYXJ0aWNpcGFudHMiLCJ0ZWFtcyIsInBhcnRpY2lwYW50UHJveGllcyIsInBhcnRpY2lwYW50IiwicGFydGljaXBhbnRQcm94eSIsIkdhbWVDaGFyYWN0ZXJQcm94eSIsInJvdW5kSW5pdGlhdGl2ZSIsIm5leHRUdXJuSWQiLCJzaGlmdCIsImFjdGl2ZVBhcnRpY2lwYW50IiwicmVzZXRDb21iYXRUdXJuU3RhdGUiLCJpc05QQyIsInNldFRpbWVvdXQiLCJpbml0aWF0aXZlcyIsImNoYXJhY3RlcklkIiwiZW50cmllcyIsImluaXRpYXRpdmUiLCJzaHVmZmxlZEluaXRpYXRpdmUiLCJuZXh0VHVybkNoYXJhY3RlcklkIiwiZmlsdGVyIiwiZSIsInRlYW0iLCJjaGFyYWN0ZXJJbmRleCIsInN0YXJ0Q29tYmF0Q29tbWFuZCIsImluc3RpZ2F0aW5nQ2hhcmFjdGVySWQiLCJ1cGRhdGVHYW1lU3RhdGVUeXBlIiwiZ2FtZXBsYXlNb2RlVHlwZXMiLCJpbnN0aWdhdGluZ0NoYXJhY3RlclByb3h5IiwicGxheWVyVGVhbSIsIm9wcG9zaW5nVGVhbSIsImNvbWJhdEdyb3VwIiwicG9zIiwic2VsZiIsInBsYXllclByb3h5IiwiY29tYmF0UHJveHkiLCJuZXh0Q29tYmF0VHVybkNvbW1hbmQiLCJnYW1lU3RhdGUiLCJnYW1lcGxheU1vZGUiLCJuZXh0VHVybiIsIm5leHRDb21iYXRSb3VuZENvbW1hbmQiLCJuZXh0Um91bmQiLCJlbmRDb21iYXRUdXJuQ29tbWFuZCIsImVuZW15VHVybkNvbW1hbmQiLCJlbmVteUlkIiwiZW5lbXlDdXJyZW50Tm9kZSIsIkJhc2ljTWVsZWVUcmVlIiwicnVuQ29tbWFuZHMiLCJzZWxlY3RlZE5vZGVDb21tYW5kIiwiZ2FtZVN0YXRlUHJveHkiLCJnYW1lTWFwUHJveHkiLCJoYXNWYWxpZE5vZGUiLCJjdXJyZW50TW9kZSIsImNvbWJhdE5hdmlnYXRlVG9Ob2RlQ29tbWFuZCIsInRhcmdldE5vZGUiLCJnYW1lQ2hhcmFjdGVyUHJveHkiLCJtb3ZlYWJsZU5vZGVzIiwiYXZhaWxhYmxlTW92ZW1lbnQiLCJoYW5kbGVWYWxpZE1vdmUiLCJjaGFyYWN0ZXJQcm94eSIsInBhdGgiLCJzaG93V2Fsa2FibGVBcmVhQ29tbWFuZCIsIndhbGthYmxlTm9kZXMiLCJ3YWxrYWJsZVRpbGVBc3NldCIsImNvbnRhaW5lciIsInRpbGUiLCJpbnN0YW50aWF0ZSIsInNldExvY2FsUG9zaXRpb24iLCJhZGRDaGlsZCIsImhpZGVXYWxrYWJsZUFyZWFDb21tYW5kIiwid2Fsa2FibGVUaWxlRW50aXRpZXMiLCJ3YWxrYWJsZVRpbGVFbnRpdHkiLCJhd2FpdFBsYXllckNvbWJhdElucHV0Q29tbWFuZCIsImVuZE1vdmVtZW50Q29tbWFuZCIsImVuZE5vZGUiLCJzZWxlY3RlZEdhbWVDaGFyYWN0ZXJDb21tYW5kIiwidGFyZ2V0Q2hhcmFjdGVyUHJveHkiLCJwbGF5ZXJDaGFyYWN0ZXJQcm94eSIsIndlYXBvbkNhdGVnb3J5IiwiZ2V0V2VhcG9uQ2F0ZWdvcnkiLCJlcXVpcHBlZFdlYXBvbiIsImN1cnJlbnRBY3Rpb24iLCJjYW5TZWVUYXJnZXQiLCJhdmFpbGFibGVBY3Rpb25zIiwidGFyZ2V0Q3VycnJlbnROb2RlIiwiaXNUYXJnZXRBZGphY2VudCIsInBhdGhUb1RhcmdldCIsInVub2NjdXBpZWROb2RlcyIsInBsYXllck5vZGUiLCJzaG9ydGVzdFBhdGgiLCJvdGhlclBhdGgiLCJuYXZpZ2F0ZVRvQ2hhcmFjdGVyIiwicGxheWVyUG9pbnQiLCJ0YXJnZXRQb2ludCIsInJheUludGVyc2VjdHNXYWxsIiwicmVzb2x2ZUF0dGFja0NvbW1hbmQiLCJhdHRhY2tlcklkIiwiYXR0YWNrZXJQcm94eSIsImRlZmVuZGVySWQiLCJkZWZlbmRlclByb3h5Iiwid2VhcG9uc1Byb3h5IiwiYXR0YWNrZXJXZWFwb25Ta2lsbCIsImRlZmVuZGVyV2VhcG9uU2tpbGwiLCJhdHRhY2tlclNraWxsVG90YWwiLCJnZXRTa2lsbFRvdGFsIiwiZGVmZW5kZXJTa2lsbFRvdGFsIiwiYXR0YWNrZXJSb2xsIiwicm9sbEF0dGFja1NraWxsIiwiZGVmZW5kZXJSb2xsIiwiZGV0ZXJtaW5lRGFtYWdlVGllciIsImdldERhbWFnZSIsImFwcGx5RGFtYWdlIiwiaXNEZWFkIiwiaGFzTWVsZWVXZWFwb24iLCJ3ZWFwb24iLCJXZWFwb25UeXBlcyIsImhpZ2hEYW1hZ2UiLCJsb3dEYW1hZ2UiLCJza2lsbCIsInJvbGxEaWNlIiwibW92ZUFsb25nUGF0aEFuZEF0dGFja0NvbW1hbmQiLCJ0YXJnZXRJZCIsInVzZU1vdmVtZW50IiwiY2hhcmFjdGVyTWVkaWF0b3IiLCJHYW1lQ2hhcmFjdGVyTWVkaWF0b3IiLCJoYW5kbGVOYXZpZ2F0ZUFsb25nUGF0aFdpdGhQcm9taXNlIiwidGhlbiIsImtpbGxHYW1lQ2hhcmFjdGVyQ29tbWFuZCIsInJlbW92ZUNoYXJhY3RlckZyb21Db21iYXQiLCJlbmRDb21iYXRDb21tYW5kIiwibG9zaW5nVGVhbSIsImRldGVybWluZUVuZW15QWN0aW9uQ29tbWFuZCIsImVuZW15UHJveHkiLCJib3RCZWhhdmlvdXIiLCJyZXNvbHZlUmFuZ2VkQXR0YWNrQ29tbWFuZCIsImF0dGFja2VyU2NvcmUiLCJkZWZlbmRlclNjb3JlIiwiYXR0YWNrZXJOb2RlIiwiZGVmZW5kZXJOb2RlIiwiaXNJbkNvdmVyIiwicHJvamVjdGlsZUNyZWF0b3JNZWRpYXRvciIsIlByb2plY3RpbGVDcmVhdG9yTWVkaWF0b3IiLCJwcm9qZWN0aWxlT3JpZ2luIiwicHJvamVjdGlsZVRhcmdldCIsImNyZWF0ZVByb2plY3RpbGUiLCJuZWlnaGJvdXJpbmdOb2RlcyIsInBvc3NpYmxlVGFyZ2V0cyIsImVxdWlwV2VhcG9uQ29tbWFuZCIsIm5hdmlnYXRlVGhyb3VnaFBvcnRhbENvbW1hbmQiLCJzdGFuZGluZ1Bvc2l0aW9uIiwic3RhbmRpbmdOb2RlIiwiZmluZE5lYXJlc3ROb2RlIiwibW92ZVRvTm9kZVdpdGhQcm9taXNlIiwiYWRkUGxheWVyQ2hhcmFjdGVyVG9NYXBDb21tYW5kIiwicGxheWVyQ2hhcmFjdGVyQXNzZXQiLCJwbGF5ZXJFbnRpdHkiLCJyZXRyaWV2ZVBvcnRhbCIsIm5hdmlnYXRlVG9DaGFyYWN0ZXJBbmRUYWxrQ29tbWFuZCIsInRhcmdldENoYXJhY3RlcklkIiwicGxheWVyQ2hhcmFjdGVyTWVkaWF0b3IiLCJzdGFydERpYWxvZ3VlQ29tbWFuZCIsImdhbWVzdGF0ZVByb3h5Iiwic3RvcnlQcm94eSIsImRpYWxvZ3VlVHJlZSIsInN0YXJ0RGlhbG9ndWVUcmVlIiwib3BlbmluZ1N0ZXAiLCJzdGVwIiwiY29udGludWVEaWFsb2d1ZVRleHRDb21tYW5kIiwibmV4dFN0ZXAiLCJjb250aW51ZUN1cnJlbnROb2RlU3RlcCIsInNlbGVjdERpYWxvZ3VlQ2hvaWNlQ29tbWFuZCIsInNlbGVjdGVkQ2hvaWNlIiwic2VsZWN0Q2hvaWNlIiwicmVzcG9uc2UiLCJ0aXRsZSIsInRleHQiLCJ0aXRsZUNvbG91ciIsInRlc3QiLCJnb3RvIiwiZ29Ub0RpYWxvZ3VlTm9kZUNvbW1hbmQiLCJuZXdOb2RlIiwiZ29Ub05vZGUiLCJjdXJyZW50U3RlcCIsImVuZERpYWxvZ3VlQ29tbWFuZCIsIm5hdmlnYXRlVG9DaGFyYWN0ZXJBbmRBdHRhY2tDb21tYW5kIiwiY2hhbmdlR2FtZXBsYXlBY3Rpb25Db21tYW5kIiwibmV3QWN0aW9uIiwicmVzb2x2ZURpYWxvZ3VlU2tpbGxUZXN0Q29tbWFuZCIsInBsYXllclNraWxsIiwiZGllMSIsImRpZTIiLCJmYWlsdXJlIiwiY2xpY2tJbnZlbnRvcnlCdXR0b25Db21tYW5kIiwiaW52ZW50b3J5UHJveHkiLCJyZW9yZGVySW52ZW50b3J5SXRlbUNvbW1hbmQiLCJyZW9yZGVySW52ZW50b3J5SXRlbSIsImVxdWlwSXRlbVRvU2xvdENvbW1hbmQiLCJlcXVpcG1lbnRLZXkiLCJpdGVtSW5JbnZlbnRvcnkiLCJhdHRlbXB0VG9FcXVpcEl0ZW1Ub1Nsb3QiLCJpdGVtc1Byb3h5IiwiaW52ZW50b3J5SXRlbSIsIkludmVudG9yeUl0ZW0iLCJnZXRJdGVtRGF0YSIsImFkZEl0ZW1Ub0ludmVudG9yeUNvbW1hbmQiLCJhZGRJbnZlbnRvcnlJdGVtIiwidXNlRXF1aXBwZWRJdGVtQ29tbWFuZCIsImVxdWlwbWVudFNsb3RLZXkiLCJlcXVpcHBlZEl0ZW0iLCJnZXRFcXVpcHBlZEl0ZW0iLCJHYW1lRmFjYWRlIiwiZ2FtZSIsIlNUQVJUVVAiLCJCb3RCZWhhdmlvdXJUeXBlcyIsImJvdEJlaGF2aW91ckVudW1zIiwiTk9ORSIsIkJBU0lDX01FTEVFIiwiQkFTSUNfUkFOR0VEIiwiRW5kQ29tYmF0VHVybiIsInRpY2siLCJibGFja2JvYXJkIiwiU2V0UGxheWVyQXNUYXJnZXQiLCJIYXNBY3Rpb25zUmVtYWluaW5nIiwiSGFzTW92ZW1lbnRSZW1haW5pbmciLCJJc0RlYWQiLCJJc1RhcmdldERlYWQiLCJCYXNlTm9kZSIsImNoaWxkcmVuIiwiaW5pdGlhbGl6ZSIsIl9lbnRlciIsIl9vcGVuIiwic3RhdHVzIiwiX3RpY2siLCJfY2xvc2UiLCJfZXhpdCIsImVudGVyTm9kZSIsImVudGVyIiwib3Blbk5vZGUiLCJvcGVuIiwidGlja05vZGUiLCJjbG9zZU5vZGUiLCJjbG9zZSIsImV4aXROb2RlIiwiZXhpdCIsIkJlaGF2aW91clN0YXR1cyIsIk1hc3Rlck5vZGUiLCJjaGlsZE5vZGUiLCJleGVjdXRlIiwiTWVtU2VxdWVuY2UiLCJQcmlvcml0eSIsImNoaWxkIiwiSW52ZXJ0ZXIiLCJNZWxlZUF0dGFja1RhcmdldCIsIklzTmV4dFRvUGxheWVyIiwiY2hhcmFjdGVyQ3VycmVudE5vZGUiLCJNb3ZlVG93YXJkc1RhcmdldCIsInJlc3VsdCIsInJlZHVjZSIsImEiLCJkaXN0YW5jZVNxcnQiLCJwMSIsInAyIiwicG93IiwiUmVsaW5xdWlzaE1vdmVtZW50UG9pbnRzIiwiQ2hhcmFjdGVyQ29tbWFuZFRyZWUiLCJSYW5nZUF0dGFja1RhcmdldCIsIk1haW50YWluRGlzdGFuY2VGcm9tVGFyZ2V0IiwibWluRGlzdGFuY2UiLCJtYXhEaXN0YW5jZSIsInRhcmdldEN1cnJlbnROb2RlIiwibWluRGlzdGFuY2VTcXJ0IiwibWF4RGlzdGFuY2VTcXJ0IiwibW92ZVBvaW50c0F2YWlsYWJsZSIsImRpc3RhbmNlVG9UYXJnZXQiLCJQaWNrTmV4dEFjdGlvbiIsIkNhblNlZVRhcmdldCIsInRhcmdldFByb3h5IiwiZnJvbVBvcyIsInRvUG9zIiwiTW92ZVRvd2FyZHNUYXJnZXRVbnRpbFZpc2libGUiLCJkZWxldGVDb3VudCIsInBhdGhOb2RlIiwiaGVpZ2h0IiwiQmFzaWNSYW5nZWRUcmVlIiwiQmxhY2tib2FyZCIsImluaXRpYWxpc2UiLCJiYXNlTWVtb3J5IiwidHJlZU1lbW9yeSIsInRyZWVTY29wZSIsIm5vZGVNZW1vcnkiLCJvcGVuTm9kZXMiLCJub2RlU2NvcGUiLCJtZW1vcnkiLCJnZXRUcmVlTWVtb3J5IiwiZ2V0Tm9kZU1lbW9yeSIsImdldE1lbW9yeSIsIlRpY2siLCJub2RlQ291bnQiLCJ0YXJnZXQiLCJwb3AiLCJCZWhhdmlvdXJUcmVlIiwibGFzdE9wZW5Ob2RlcyIsImN1cnJPcGVuTm9kZXMiLCJzdGFydCIsIndlYXBvbkVudW1zIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlc2NyaXB0b3IiLCJtYXAiLCJiZWhhdmlvdXJUcmVlcyIsIkdhbWVDaGFyYWN0ZXJWTyIsInBhcmFtcyIsIm1heE1vdmVtZW50IiwibWF4QWN0aW9uc1BlclR1cm4iLCJjb3N0IiwiZGFtYW5nZSIsImN1cnJlbnRTdGFtaW5hIiwibWF4IiwibWF4aW11bVN0YW1pbmEiLCJtYXhTdGFtaW5hIiwic2tpbGxLZXkiLCJhZHZhbmNlZFNraWxscyIsIm1heEx1Y2siLCJjdXJyZW50THVjayIsIkdhbWVNYXBWTyIsIm1hcEdyaWQiLCJ3YWxsQm91bmRpbmdCb3hlcyIsIm5hdkdyaWQiLCJuYXZpZ2F0aW9uR3JpZCIsIm5lYXJlc3ROb2RlIiwiZGlzdFNxcnRUb05lYXJlc3ROb2RlIiwiZGlzdFRvTm9kZSIsImZyb20iLCJ0byIsImRpc3RhbmNlIiwiZGlyZWN0aW9uIiwiY2xvbmUiLCJzdWIiLCJub3JtYWxpemUiLCJyYXkiLCJSYXkiLCJtYXBXYWxscyIsImhpdFBvc2l0aW9uIiwiaW50ZXJzZWN0c1JheSIsImF0dGFja2luZ0Zyb20iLCJhZGphY2VudENvdmVyUG9pbnRzIiwiYWRqYWNlbnRQb2ludHMiLCJwb2ludCIsInBvaW50cyIsImdldEFkamFjZW50UG9pbnRzIiwiYWRqYWNlbnRQb2ludCIsImFkamFjZW50Q292ZXJQb2ludCIsIm5vZGVBIiwibm9kZUIiLCJQcmlvcml0eVF1ZXVlIiwicHJpb3JpdHkiLCJJbmZpbml0eSIsInJhbmdlTGltaXQiLCJmcm9udGllciIsInNlYXJjaGVkQXJlYSIsImNhbWVGcm9tIiwicmFuZ2UiLCJuZXdGcm9udGllciIsImN1cnJlbnQiLCJuZXh0IiwiZ29hbCIsImNvc3RTb0ZhciIsImVtcHR5IiwibmV3Q29zdCIsImhldXJpc3RpYyIsInBhdGhJc0Jyb2tlbiIsImRpc3RWYWx1ZSIsImdldERpc3RTcXVhcmVkIiwicHQxIiwicHQyIiwiYWJzIiwieDAiLCJ6MCIsIngxIiwiejEiLCJkeCIsImR5IiwibngiLCJueSIsInNpZ25feCIsInNpZ25feSIsIml4IiwiaXkiLCJpc1ZhbGlkTGluZSIsIkdhbWVTdGF0ZVZPIiwibmV3U3RhdGVUeXBlIiwic2VsZWN0ZWRBY3Rpb24iLCJFWFBMT1JBVElPTiIsIkNPTUJBVCIsIkRJQUxPR1VFIiwiR0FNRV9PVkVSIiwiaWNvbiIsImRlc2NyaXB0aW9uIiwiY2VudGVyUG9pbnRDaGFyYWN0ZXJQcm94eSIsImNyZWF0ZVVVSUQiLCJzIiwiaGV4RGlnaXRzIiwic3Vic3RyIiwiam9pbiIsInByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zIiwidXBkYXRlQ3VycmVudE5vZGUiLCJoYW5kbGVGaW5pc2hlZE1vZGUiLCJmaXJlIiwic2NyaXB0S2V5Iiwic2NyaXB0Q29tcG9uZW50IiwiaGFuZGxlU3RhcnRDb21iYXQiLCJoYW5kbGVOYXZpZ2F0ZVRvTm9kZSIsImhhbmRsZU5hdmlnYXRlVG9XYXlwb2ludCIsImhhbmRsZU5hdmlnYXRlQWxvbmdQYXRoIiwiaGFuZGxlU2V0Q2hhcmFjdGVyVG9Ob2RlIiwibG9va1BvaW50IiwibG9va0F0UG9pbnQiLCJhbmltYXRlRGVhdGgiLCJhbmltYXRlQXR0YWNrIiwiYW5pbWF0ZUhpdCIsInNldFBhdGgiLCJuZWFyZXN0V2F5cG9pbnQiLCJmaW5kTmVhcmVzdFdheXBvaW50IiwibmVhcmVzdFRhcmdldFdheXBvaW50IiwiaGFzVmFsaWRMaW5lIiwiaGFzTGluZVRvUG9pbnQiLCJ1bnNoaWZ0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzZWFyY2hOb2RlIiwic2VhcmNoQXJlYSIsInN0b3BNb3ZlbWVudCIsIm9yaWdpblBvaW50IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJvIiwib2JqIiwicHJvcCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIkNhY29nZW5HYW1lIiwiY3JlYXRlU2NyaXB0IiwiS0VZIiwidXBkYXRlIiwiZHQiLCJOYXZpZ2F0aW9uQ29tcG9uZW50IiwiYXR0cmlidXRlcyIsImFkZCIsImVudGl0eSIsImhhbmRsZVJheUNhc3QiLCJlbmFibGVkIiwic2NyZWVuUG9zIiwibm9kZUdyaWQiLCJnZXROZWFyZXN0Tm9kZSIsIkdhbWVDaGFyYWN0ZXJDb21wb25lbnQiLCJhZHZhbmNlZFNraWxsc1NjaGVtYVRvTWFwIiwiYWR2YW5jZWRTa2lsbHNTY2hlbWEiLCJza2lsbE9iamVjdCIsInNraWxsTmFtZSIsInNraWxsVmFsdWUiLCJkZWZhdWx0Iiwic2NoZW1hIiwiZW51bSIsInByZXJlZ2lzdGVyTm90aWZpY2F0aW9uIiwicG9zdEluaXRpYWxpemUiLCJtb3ZlbWVudFBhdGgiLCJzdGF0c092ZXJyaWRlcyIsInByb3h5UGFyYW1zIiwiY2hhcmFjdGVySGVpZ2h0IiwiZGlhbG9ndWVUcmVlTmFtZSIsImNvbWJhdEdyb3VwTmFtZSIsImNvbXJhZGVFbnRpdGllcyIsImNvbXJhZGVFbnRpdHkiLCJjb21yYWRlSWQiLCJ2ZWhpY2xlIiwiYW5pbWF0aW9uIiwicGxheSIsImxvb3AiLCJtb3ZlQWxvbmdQYXRoIiwibmV4dFBhdGhQb2ludCIsImxvY2FsUG9zIiwibm9kZVBvaW50IiwiY2hhcmFjdGVyU3BlZWQiLCJzZWVrIiwiYXJyaXZlIiwicHJvY2Vzc1ZlbG9jaXR5IiwiZHoiLCJhbmdsZVRvRGVzdCIsImF0YW4yIiwiUEkiLCJzZXRFdWxlckFuZ2xlcyIsIkFncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50IiwiaGFuZGxlTWFwR3JpZENyZWF0ZWQiLCJoYW5kbGVNb3ZlZFRvTm9kZSIsImNoYXJhY3RlclBvaW50Iiwic2lnaHRSYW5nZSIsIlRvYXN0TWVzc2FnZU1lZGlhdG9yIiwiYWRkTWVzc2FnZSIsIlRvYXN0TWVzc2FnZUNvbXBvbmVudCIsIm1lc3NhZ2VRdWV1ZSIsImN1cnJlbnRUaW1lb3V0IiwibWVzc2FnZSIsInNob3dOZXh0TWVzc2FnZSIsIm5leHRNZXNzYWdlIiwibGFiZWxFbnRpdHkiLCJlbGVtZW50IiwibWVzc2FnZVRpbWUiLCJJbnB1dExheWVyTWVkaWF0b3IiLCJoYW5kbGVQaWNrZXJHYW1lQ2hhcmFjdGVyIiwiaGFuZGxlUGlja2VyTmF2aWdhdGlvbiIsImhhbmRsZVNjcm9sbGluZyIsImNoYXJhY3RlckVudGl0eSIsIkdhbWVDYW1lcmEiLCJHYW1lQ2FtZXJhTWVkaWF0b3IiLCJzZXRDYW1lcmFUYXJnZXQiLCJjYW1lcmFUYXJnZXQiLCJyb3RhdGlvbiIsImdldEV1bGVyQW5nbGVzIiwiY2FtZXJhSGVpZ2h0IiwiaGFuZGxlRHJhZyIsImRyYWdNdWx0aXBsaWVyWCIsInZlcnRpY2FsU2Nyb2xsIiwibmV3Q2FtZXJhSGVpZ2h0IiwiZHJhZ011bHRpcGxpZXJZIiwibWF0aCIsImNsYW1wIiwibWluQ2FtZXJhSGVpZ2h0IiwibWF4Q2FtZXJhSGVpZ2h0IiwiZ2V0VGFyZ2V0Q2FtZXJhUG9zaXRpb24iLCJmb2N1c1BvaW50IiwiY2FtZXJhUG9zaXRpb24iLCJ0YXJnZXRYIiwic2luIiwidGFyZ2V0WiIsImNvcyIsImNhbWVyYVRhcmdldFBvc2l0aW9uIiwidGFyZ2V0UG9zaXRpb24iLCJjdXJyZW50UG9zIiwidHdlZW5YIiwidHdlZW5ZIiwidHdlZW5aIiwibG9va0F0IiwiSW5wdXRMYXllckNvbXBvbmVudCIsImlucHV0UXVldWUiLCJtb3VzZSIsImRpc2FibGVDb250ZXh0TWVudSIsImNsaWNrRG93blN0YXJ0IiwiaXNEcmFnZ2luZyIsImhhbmRsZVBpY2tlclJlc3VsdCIsIkVWRU5UX01PVVNFTU9WRSIsIm9uTW91c2VNb3ZlIiwiRVZFTlRfTU9VU0VET1dOIiwib25Nb3VzZURvd24iLCJFVkVOVF9NT1VTRVVQIiwib25Nb3VzZVVwIiwidG91Y2giLCJFVkVOVF9UT1VDSE1PVkUiLCJ0b3VjaEV2dCIsInRvdWNoZXMiLCJFVkVOVF9UT1VDSFNUQVJUIiwiRVZFTlRfVE9VQ0hFTkQiLCJEYXRlIiwibm93IiwiY2xpY2tTdGFydFBvaW50IiwiVmVjMiIsImRyYWdUaW1lIiwiaGFuZGxlUmF5Y2FzdENvbGxpc2lvbnMiLCJjYW1lcmFFbnRpdHkiLCJjYW1lcmFDb21wb25lbnQiLCJjYW1lcmEiLCJzY3JlZW5Ub1dvcmxkIiwiZmFyQ2xpcCIsIm9yaWdpbiIsImNvcHkiLCJwaWNrZWRFbnRpdHkiLCJzY3JlZW5Qb3NpdGlvbiIsInByb2Nlc3NJbnB1dFF1ZXVlIiwiaGlnaGVzdFByaW9yaXR5UGljayIsImhpZ2hlc3RQcmlvcml0eSIsInBpY2siLCJwaWNrUHJpb3JpdHkiLCJ0YWdzIiwicGlja2VkR2FtZUNoYXJhY3RlciIsInBpY2tlZE5hdmlnYXRpb24iLCJwaWNrZWRQb3J0YWwiLCJQbGF5ZXJDb21iYXRQYW5lbE1lZGlhdG9yIiwiaGFuZGxlRW5kVHVybiIsIlBsYXllckNvbWJhdFBhbmVsQ29tcG9uZW50IiwiZW5kVHVybkJ1dHRvbiIsImNsaWNrRW5kVHVybiIsIkhpdGJveENvbXBvbmVudCIsImNlbnRlciIsIkFjdGlvblBhbmVsTWVkaWF0b3IiLCJoYW5kbGVGaXJlQ29tbWFuZCIsImFjdGlvbk5hbWUiLCJzZWxlY3RBY3Rpb24iLCJBY3Rpb25CdXR0b25Db21wb25lbnQiLCJoaWdobGlnaHRFbnRpdHkiLCJoYW5kbGVDaGFuZ2VBY3Rpb24iLCJoYW5kbGVDbGljayIsImNvbW1hbmRzIiwiY29tbWFuZEFyZ3MiLCJBY3Rpb25QYW5lbENvbXBvbmVudCIsImJ1dHRvbiIsImFjdGlvbkJ1dHRvbnMiLCJzdG9wUHJvcGFnYXRpb24iLCJQcm9qZWN0aWxlQ3JlYXRvckNvbXBvbmVudCIsInByb2plY3RpbGVOYW1lIiwicHJvamVjdGlsZVNjaGVtZSIsInByb2plY3RpbGVUeXBlcyIsInNjaGVtZSIsIm5ld1Byb2plY3RpbGUiLCJwcm9qZWN0aWxlVGVtcGxhdGUiLCJzZXRUYXJnZXQiLCJQcm9qZWN0aWxlQ29tcG9uZW50IiwibmV3UG9zaXRpb24iLCJzcGVlZCIsInByb2plY3RpbGVTcGVlZCIsInN1YjIiLCJtdWwiLCJTdGFtaW5hQmFyTWVkaWF0b3IiLCJuZXdTdGFtaW5hIiwidXBkYXRlU3RhbWluYSIsIlN0YW1pbmFCYXJDb21wb25lbnQiLCJiYXJFbnRpdHlNYXhXaWR0aCIsImJhckVudGl0eSIsIndpZHRoIiwibGVycCIsInJlY3QiLCJzdGFtaW5hTGFiZWwiLCJBY3Rpb25zUmVtYWluaW5nUGFuZWxNZWRpYXRvciIsIm1heEFjdGlvbnMiLCJzaG93QXZhaWxhYmxlQWN0aW9uIiwiQWN0aW9uc1JlbWFpbmluZ1BhbmVsQ29tcG9uZW50IiwicGlwcyIsImNyZWF0ZVBpcCIsIm5ld1BpcCIsInBpcFRlbXBsYXRlIiwiQWN0aW9uc1JlbWFpbmluZ1BpcENvbXBvbmVudCIsInNob3ciLCJwaXBGcm9udCIsIkZsb2F0aW5nU3RhdHVzQ3JlYXRvck1lZGlhdG9yIiwic2NyaXB0Q29tcCIsImZsb2F0ZXJOYW1lIiwiZGlzcGxheVN0YXR1cyIsIlRlbXBvcmFyeUZsb2F0aW5nU3RhdHVzQ29tcG9uZW50Iiwic2V0V29ybGRQb3NpdGlvbiIsIndvcmxkUG9zaXRpb24iLCJzY3JlZW4iLCJkZXZpY2UiLCJncmFwaGljc0RldmljZSIsInNjcmVlbkVudGl0eSIsInBvc3RVcGRhdGUiLCJwb3NpdGlvbiIsIndvcmxkU3BhY2VUb1NjcmVlblNwYWNlIiwid29ybGRQb3MiLCJ3b3JsZFRvU2NyZWVuIiwicGl4ZWxSYXRpbyIsIm1heFBpeGVsUmF0aW8iLCJyYXRpb1NjYWxlIiwiRmxvYXRpbmdTdGF0dXNDcmVhdG9yQ29tcG9uZW50IiwiZmxvYXRpbmdTdGF0dXNlcyIsIm90aGVyU2NoZW1lIiwidGFyZ2V0UG9zIiwibmV3U3RhdHVzIiwidGVtcGxhdGUiLCJQb3J0YWxNZWRpYXRvciIsInNlbGVjdGVkUG9ydGFsIiwiUG9ydGFsQ29tcG9uZW50IiwiRGlhbG9ndWVQYW5lbE1lZGlhdG9yIiwiaGFuZGxlQ2xpY2tDb250aW51ZSIsImhhbmRsZUNsaWNrQ2hvaWNlIiwiY2xlYXJQYW5lbCIsImNyZWF0ZVN0ZXAiLCJjcmVhdGVTa2lsbFRlc3QiLCJjbGVhckRpYWxvZ3VlQ2hvaWNlcyIsInNldENvbnRpbnVlQnV0dG9uIiwiRGlhbG9ndWVQYW5lbENvbXBvbmVudCIsImNvbnRpbnVlQnV0dG9uRW50aXR5Iiwic3RlcERhdGEiLCJjcmVhdGVUZXh0IiwiY2hvaWNlIiwiY3JlYXRlQ2hvaWNlIiwibmV3VGV4dCIsInRleHRFbnRyeVRlbXBsYXRlIiwic2V0dXAiLCJmZWVkRW50aXR5IiwicmVzaXplVG9Db250ZW50cyIsInNjcm9sbGJhclZpZXdFbnRpdHkiLCJzY3JvbGxiYXIiLCJuZXdDaG9pY2UiLCJjaG9pY2VFbnRyeVRlbXBsYXRlIiwiaGFuZGxlU2VsZWN0Q2hvaWNlIiwid2FzU3VjY2VzcyIsIm5ld1NraWxsVGVzdCIsInNraWxsVGVzdEVudHJ5VGVtcGxhdGUiLCJzcGFjaW5nVmVydGljYWwiLCJsYXlvdXRncm91cCIsInNwYWNpbmciLCJmZWVkQ2hpbGQiLCJjb250ZW50RW50aXR5IiwiY29udGVudEhlaWdodCIsIkRpYWxvZ3VlQ2hvaWNlQ29tcG9uZW50IiwibGFiZWwiLCJpbmRleEVudGl0eSIsIkRlZmF1bHRBbmltYXRpb25Db21wb25lbnQiLCJhbmltYXRpb25OYW1lIiwiRGlhbG9ndWVUZXh0Q29tcG9uZW50IiwidGl0bGVFbnRpdHkiLCJjb2xvciIsImZyb21TdHJpbmciLCJ0aHVtYm5haWwiLCJ0ZXh0Q29udGFpbmVyIiwid2l0aEltYWdlV2lkdGgiLCJ3aXRob3V0SW1hZ2VXaWR0aCIsInRodW1ibmFpbENvbnRhaW5lciIsImVuYWJsZSIsImJvZHlFbnRpdHkiLCJzZXRIZWlnaHQiLCJtaW5IZWlnaHQiLCJ0ZXh0Q2hpbGQiLCJBdHRhY2tCdXR0b25NZWRpYXRvciIsImhhbmRsZVRvZ2dsZUF0dGFjayIsInRvZ2dsZUhpZ2hsaWdodCIsImF0dGFja0VuYWJsZWQiLCJBdHRhY2tCdXR0b25Db21wb25lbnQiLCJpc0VuYWJsZWQiLCJVc2VJdGVtQnV0dG9uTWVkaWF0b3IiLCJoYW5kbGVVc2VJdGVtIiwiZXF1aXBwZWREYXRhIiwic2V0SWNvbiIsInNldERlZmF1bHRJY29uIiwidGFyZ2V0U2xvdCIsImlzSGlnaGxpZ2h0ZWQiLCJVc2VJdGVtQnV0dG9uQ29tcG9uZW50IiwiYXNzZXRJZCIsImljb25Bc3NldCIsImljb25FbnRpdHkiLCJzcHJpdGVBc3NldCIsImRlZmF1bHRJY29uIiwiVmVoaWNsZUNvbXBvbmVudCIsImNsYW1wVmVjMyIsInZlYzMiLCJtYXhWYWx1ZSIsInZlbG9jaXR5Iiwic3RlZXJpbmdGb3JjZSIsIm1heFNwZWVkIiwieVJvdGF0aW9uIiwiZGVzaXJlZFZlbG9jaXR5IiwiZm9yY2UiLCJhcnJpdmFsVGhyZXNob2xkIiwiYXJyaXZlVGhyZXNob2xkIiwiU2NyZWVuUmVzaXplQ29tcG9uZW50Iiwid2luZG93Iiwib25SZXNpemUiLCJhZGRFdmVudExpc3RlbmVyIiwic2NhbGVCbGVuZCIsInJlZmVyZW5jZVJlc29sdXRpb24iLCJEaWFsb2d1ZVNraWxsVGVzdENvbXBvbmVudCIsInNraWxsTmFtZUxhYmVsIiwic2tpbGxWYWx1ZUxhYmVsIiwiZGllMUxhYmVsIiwiZGllMkxhYmVsIiwic3VjY2Vzc0xhYmVsIiwiZmFpbHVyZUxhYmVsIiwiSW52ZW50b3J5SXRlbUNvbXBvbmVudCIsInNsb3RIZWlnaHQiLCJleHBhbmRlZEVudGl0eSIsImNvbGxhcHNlIiwiZXhwYW5kIiwiRWxlbWVudERyYWdIZWxwZXIiLCJvbkRyYWdTdGFydCIsIkludmVudG9yeVBhbmVsTWVkaWF0b3IiLCJoYW5kZVJlb3JkZXJJdGVtIiwiaGFuZGxlRXF1aXBJdGVtIiwiaXRlbXMiLCJlcXVpcHBlZE1hcCIsImRpc3BsYXlJdGVtcyIsIkludmVudG9yeVBhbmVsQ29tcG9uZW50IiwiaXNJbkJvdW5kcyIsImJvdW5kcyIsIngyIiwieTEiLCJ5MiIsImhhbmRsZURyYWdTdGFydCIsImNsb3NlQnV0dG9uIiwiaGFuZGxlQ2xvc2UiLCJpbnZlbnRvcnlJdGVtRW50aXRpZXMiLCJkcmFnRW50aXR5IiwicmVwYXJlbnQiLCJkcmFnSWNvbiIsImhhbmRsZU1vdXNlTW92ZSIsImNoYW5nZWRUb3VjaGVzIiwiaGFuZGxlTW91c2VVcCIsImxvY2FsUG9zaXRpb25Gcm9tTW91c2VFdmVudCIsInNjcmVlbkNvbXAiLCJkaXNwbGF5UG90ZW50aWFsTGlzdCIsImRyYWdQb3MiLCJ0b3BTbG90UG9zaXRpb24iLCJtYXhTbG90cyIsInNsb3RXaWR0aCIsInNjcmVlbkhlaWdodCIsImNvcm5lclNjcmVlblBvcyIsInNjcmVlbkNvcm5lcnMiLCJjb3JuZXJQb3MiLCJjaGVja0Ryb3BPbkVxdWlwbWVudFNsb3QiLCJkcmFnZ2luZ0VudGl0eSIsIm1vdXNlRXZlbnQiLCJlcXVpcFNsb3RLZXkiLCJjb3JuZXJzIiwiaGFuZGxlSXRlbU1vdmUiLCJzZXRIaWdobGlnaHRQb3NpdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInJ1bm5pbmdJbmRleCIsIm5ld0l0ZW1Db21wb25lbnQiLCJpdGVtQXNzZXQiLCJlcXVpcFNsb3RFbnRpdHkiLCJjbGVhciIsInJlb3JkZXJMaXN0V2l0aEdhcCIsImdhcEluZGV4IiwiaW52ZW50b3J5SXRlbUVudGl0eSIsIkludmVudG9yeURyYWdJY29uQ29tcG9uZW50IiwiSW52ZW50b3J5RXF1aXBwZWRTbG90Q29tcG9uZW50IiwiaWNvbkFzc2V0SWQiLCJhc3NldCIsImRlZmF1bHRBc3NldCIsInN0YXJ0dXAiXSwibWFwcGluZ3MiOiJ3Q0FDQUEsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdEQsSUFBSUMsRUFBWSxFQUFRLEtBQ3BCQyxFQUFTLEVBQVEsS0FFakJDLEVBQTRCLFdBQzVCLFNBQVNBLEVBQVdDLEdBRWhCLEdBREFDLEtBQUtDLFdBQWEsR0FDZEgsRUFBV0ksWUFBWUgsR0FDdkIsTUFBTSxJQUFJSSxNQUxILDREQU9YSCxLQUFLSSxZQUFjTCxFQUNuQkMsS0FBS0ssT0FBU1QsRUFBVVUsUUFBUUMsTUFBUVgsRUFBVVUsUUFBUUUsV0FBYVosRUFBVVUsUUFBUUcsUUFDekZULEtBQUtVLHVCQXFEVCxPQW5EQVosRUFBV2EsaUJBQW1CLFNBQVVaLFVBQzdCQyxLQUFLRSxZQUFZSCxJQUU1QkQsRUFBV2MsWUFBYyxTQUFVYixHQUMvQixPQUFLQSxHQUdBQyxLQUFLRSxZQUFZSCxLQUNsQkMsS0FBS0UsWUFBWUgsR0FBTyxJQUFJRCxFQUFXQyxJQUVwQ0MsS0FBS0UsWUFBWUgsSUFMYixNQU9mRCxFQUFXZSxVQUFVQyxnQkFBa0IsU0FBVUMsRUFBa0JDLEdBQzFEaEIsS0FBS0MsV0FBV2MsSUFDakJmLEtBQUtpQixLQUFLQyxpQkFBaUJILEVBQWtCZixLQUFLbUIsZUFBZ0JuQixNQUV0RUEsS0FBS0MsV0FBV2MsR0FBb0JDLEdBRXhDbEIsRUFBV2UsVUFBVU8sV0FBYSxTQUFVTCxHQUN4QyxZQUE2Q00sSUFBdENyQixLQUFLQyxXQUFXYyxJQUUzQmpCLEVBQVdlLFVBQVVTLGNBQWdCLFNBQVVQLEdBQ3ZDZixLQUFLb0IsV0FBV0wsS0FDaEJmLEtBQUtpQixLQUFLTSxlQUFlUixFQUFrQmYsS0FBS21CLGVBQWdCbkIsYUFDekRBLEtBQUtDLFdBQVdjLEtBRy9CakIsRUFBV2UsVUFBVUgscUJBQXVCLFdBQ3hDVixLQUFLaUIsS0FBT3BCLEVBQU8yQixLQUFLWixZQUFZWixLQUFLSSxjQUU3Q04sRUFBV2UsVUFBVU0sZUFBaUIsU0FBVUosR0FFNUMsSUFEQSxJQUFJVSxFQUFPLEdBQ0ZDLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENELEVBQUtDLEVBQUssR0FBS0MsVUFBVUQsR0FFN0IsSUFBSUcsRUFBVTdCLEtBQUtDLFdBQVdjLEdBQ3pCYyxJQUdMN0IsS0FBS0ssT0FBT1AsRUFBV2dDLGFBQWNmLEVBQWtCYyxFQUFRRSxNQUMvREYsRUFBUUcsV0FBTSxFQUFRLENBQUNoQyxLQUFLSSxZQUFhVyxHQUFrQmtCLE9BQU9SLE1BRXRFM0IsRUFBV2dDLGFBQWUsQ0FDdEIsR0FDQSxzQkFDQSxzQkFDQSx1Q0FDQSxzQkFDQSx1QkFFSmhDLEVBQVdJLFlBQWMsR0FDbEJKLEVBN0RvQixHQStEL0JKLEVBQVFJLFdBQWFBLEcsY0NoRXJCTixPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0RCxJQUFJdUMsRUFBZSxFQUFRLEtBQ3ZCQyxFQUFVLEVBQVEsS0FDbEJ2QyxFQUFZLEVBQVEsS0FDcEJDLEVBQVMsRUFBUSxLQUVqQnVDLEVBQXdCLFdBQ3hCLFNBQVNBLEVBQU9yQyxHQUNaLEdBQUlxQyxFQUFPbEMsWUFBWUgsR0FDbkIsTUFBTSxJQUFJSSxNQUpILDhEQU1YSCxLQUFLSyxPQUFTVCxFQUFVVSxRQUFRQyxNQUFRWCxFQUFVVSxRQUFRK0IsZ0JBQWtCekMsRUFBVVUsUUFBUUcsUUFDOUZULEtBQUtzQyxtQkFBbUJ2QyxHQUN4QkMsS0FBS3VDLG1CQTZHVCxPQTNHQUgsRUFBT3hCLFlBQWMsU0FBVWIsR0FDM0IsT0FBS0EsR0FHQXFDLEVBQU9sQyxZQUFZSCxLQUNwQnFDLEVBQU9sQyxZQUFZSCxHQUFPLElBQUlxQyxFQUFPckMsSUFFbENxQyxFQUFPbEMsWUFBWUgsSUFMZixNQU9mcUMsRUFBT0ksUUFBVSxTQUFVekMsR0FDdkIsWUFBaUNzQixJQUExQnJCLEtBQUtFLFlBQVlILElBRTVCcUMsRUFBT0ssV0FBYSxTQUFVMUMsR0FDckJDLEtBQUtFLFlBQVlILEtBR3RCb0MsRUFBUU8sTUFBTUMsWUFBWTVDLEdBQzFCRixFQUFPMkIsS0FBS29CLFdBQVc3QyxHQUN2Qm1DLEVBQWFwQyxXQUFXYSxpQkFBaUJaLFVBQ2xDQyxLQUFLRSxZQUFZSCxLQUU1QnFDLEVBQU92QixVQUFVMEIsaUJBQW1CLFdBQ2hDdkMsS0FBSzZDLGtCQUNMN0MsS0FBS1UsdUJBQ0xWLEtBQUs4QyxrQkFFVFYsRUFBT3ZCLFVBQVVDLGdCQUFrQixTQUFVQyxFQUFrQkMsR0FDM0RoQixLQUFLK0MsV0FBV2pDLGdCQUFnQkMsRUFBa0JDLElBRXREb0IsRUFBT3ZCLFVBQVVTLGNBQWdCLFNBQVVQLEdBQ3ZDZixLQUFLK0MsV0FBV3pCLGNBQWNQLElBRWxDcUIsRUFBT3ZCLFVBQVVPLFdBQWEsU0FBVUwsR0FDcEMsT0FBT2YsS0FBSytDLFdBQVczQixXQUFXTCxJQUV0Q3FCLEVBQU92QixVQUFVbUMsY0FBZ0IsU0FBVUMsR0FDdkNqRCxLQUFLa0QsTUFBTUYsY0FBY0MsSUFFN0JiLEVBQU92QixVQUFVc0MsY0FBZ0IsU0FBVUMsR0FDdkMsT0FBT3BELEtBQUtrRCxNQUFNQyxjQUFjQyxJQUVwQ2hCLEVBQU92QixVQUFVd0MsWUFBYyxTQUFVRCxHQUNyQyxPQUFJcEQsS0FBS2tELE1BQ0VsRCxLQUFLa0QsTUFBTUcsWUFBWUQsR0FFM0IsTUFFWGhCLEVBQU92QixVQUFVeUMsU0FBVyxTQUFVRixHQUNsQyxPQUFPcEQsS0FBS2tELE1BQU1JLFNBQVNGLElBRS9CaEIsRUFBT3ZCLFVBQVUwQyxpQkFBbUIsU0FBVUMsR0FDMUN4RCxLQUFLaUIsS0FBS3NDLGlCQUFpQkMsSUFFL0JwQixFQUFPdkIsVUFBVTRDLGlCQUFtQixTQUFVQyxHQUMxQyxPQUFPMUQsS0FBS2lCLEtBQUt3QyxpQkFBaUJDLElBRXRDdEIsRUFBT3ZCLFVBQVU4QyxlQUFpQixTQUFVRCxHQUN4QyxPQUFPMUQsS0FBS2lCLEtBQUswQyxlQUFlRCxJQUVwQ3RCLEVBQU92QixVQUFVK0MsY0FBZ0IsU0FBVUYsR0FDdkMsT0FBTzFELEtBQUtpQixLQUFLMkMsY0FBY0YsSUFFbkN0QixFQUFPdkIsVUFBVWdELGNBQWdCLFNBQVVILEdBQ3ZDLE9BQU8xRCxLQUFLaUIsS0FBSzRDLGNBQWNILElBRW5DdEIsRUFBT3ZCLFVBQVVpRCxZQUFjLFNBQVVKLEdBQ3JDLE9BQU8xRCxLQUFLaUIsS0FBSzZDLFlBQVlKLElBRWpDdEIsRUFBT3ZCLFVBQVVrRCxpQkFBbUIsU0FBVWhELEdBRTFDLElBREEsSUFJSWlELEVBSkF2QyxFQUFPLEdBQ0ZDLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENELEVBQUtDLEVBQUssR0FBS0MsVUFBVUQsR0FHN0IxQixLQUFLSyxPQUFPMkIsTUFBTWhDLEtBQU0sQ0FBQ29DLEVBQU9OLGFBQWNmLEdBQWtCa0IsT0FBT1IsS0FDdEV1QyxFQUFLaEUsS0FBS2lCLE1BQU1nRCxnQkFBZ0JqQyxNQUFNZ0MsRUFBSSxDQUFDakQsR0FBa0JrQixPQUFPUixLQUV6RVcsRUFBT3ZCLFVBQVV5QixtQkFBcUIsU0FBVXZDLEdBQzVDQyxLQUFLSSxZQUFjTCxHQUV2QnFDLEVBQU92QixVQUFVSCxxQkFBdUIsV0FDaENWLEtBQUsrQyxhQUdUL0MsS0FBSytDLFdBQWFiLEVBQWFwQyxXQUFXYyxZQUFZWixLQUFLSSxlQUUvRGdDLEVBQU92QixVQUFVZ0MsZ0JBQWtCLFdBQzNCN0MsS0FBS2tELFFBR1RsRCxLQUFLa0QsTUFBUWYsRUFBUU8sTUFBTTlCLFlBQVlaLEtBQUtJLGVBRWhEZ0MsRUFBT3ZCLFVBQVVpQyxlQUFpQixXQUMxQjlDLEtBQUtpQixPQUdUakIsS0FBS2lCLEtBQU9wQixFQUFPMkIsS0FBS1osWUFBWVosS0FBS0ksZUFFN0NnQyxFQUFPTixhQUFlLENBQ2xCLEdBQ0Esc0JBQ0Esc0JBQ0EsdUNBQ0Esc0JBQ0EsdUJBRUpNLEVBQU9sQyxZQUFjLEdBQ2RrQyxFQXBIZ0IsR0FzSDNCMUMsRUFBUTBDLE9BQVNBLEcsb0JDL0hqQixJQUNROEIsRUFESkMsRUFBYW5FLE1BQVFBLEtBQUttRSxZQUN0QkQsRUFBZ0IsU0FBVUUsRUFBR0MsR0FJN0IsT0FIQUgsRUFBZ0IxRSxPQUFPOEUsZ0JBQ2xCLENBQUVDLFVBQVcsY0FBZ0JDLE9BQVMsU0FBVUosRUFBR0MsR0FBS0QsRUFBRUcsVUFBWUYsSUFDdkUsU0FBVUQsRUFBR0MsR0FBSyxJQUFLLElBQUlJLEtBQUtKLEVBQU9BLEVBQUVLLGVBQWVELEtBQUlMLEVBQUVLLEdBQUtKLEVBQUVJLE1BQ3BETCxFQUFHQyxJQUVyQixTQUFVRCxFQUFHQyxHQUVoQixTQUFTTSxJQUFPM0UsS0FBSzRFLFlBQWNSLEVBRG5DRixFQUFjRSxFQUFHQyxHQUVqQkQsRUFBRXZELFVBQWtCLE9BQU53RCxFQUFhN0UsT0FBT3FGLE9BQU9SLElBQU1NLEVBQUc5RCxVQUFZd0QsRUFBRXhELFVBQVcsSUFBSThELEtBR3ZGbkYsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdEQsSUFBSW1GLEVBQWEsRUFBUSxLQUNyQmxGLEVBQVksRUFBUSxLQUVwQm1GLEVBQTBCLFNBQVVDLEdBRXBDLFNBQVNELEVBQVNyQixFQUFjdUIsR0FDNUIsSUFBSUMsRUFBUUYsRUFBT0csS0FBS25GLE9BQVNBLEtBT2pDLE9BTkFrRixFQUFNN0UsT0FBU1QsRUFBVVUsUUFBUUMsTUFBUVgsRUFBVVUsUUFBUThFLFlBQWN4RixFQUFVVSxRQUFRRyxRQUMzRnlFLEVBQU14QixhQUFlQSxHQU5sQixXQU9Id0IsRUFBTUQsY0FBZ0JBLEVBQ3RCQyxFQUFNRyxVQUFXLEVBQ2pCSCxFQUFNSSx3QkFBMEIsR0FDaENKLEVBQU1LLCtCQUFpQyxLQUNoQ0wsRUFzRlgsT0EvRkFmLEVBQVVZLEVBQVVDLEdBV3BCeEYsT0FBT0MsZUFBZXNGLEVBQVNsRSxVQUFXLGdCQUFpQixDQUN2RDJFLElBQUssV0FDRCxPQUFPeEYsS0FBS3NGLHlCQUVoQkcsWUFBWSxFQUNaQyxjQUFjLElBRWxCWCxFQUFTbEUsVUFBVThFLGdCQUFrQixXQUNqQyxPQUFPM0YsS0FBSzBELGNBRWhCcUIsRUFBU2xFLFVBQVUrRSxpQkFBbUIsU0FBVVgsR0FDNUNqRixLQUFLaUYsY0FBZ0JBLEdBRXpCRixFQUFTbEUsVUFBVWdGLGlCQUFtQixXQUNsQyxPQUFPN0YsS0FBS2lGLGVBRWhCRixFQUFTbEUsVUFBVWlGLFdBQWEsU0FBVVAsR0FDdEN2RixLQUFLdUYsK0JBQWlDQSxFQUN0Q3ZGLEtBQUtLLE9BQU8wRSxFQUFTakQsYUFBYzlCLEtBQUs0RSxZQUFZN0MsS0FBTSxhQUU5RGdELEVBQVNsRSxVQUFVa0YsU0FBVyxXQUMxQi9GLEtBQUt1RiwrQkFBaUMsS0FDdEN2RixLQUFLSyxPQUFPMEUsRUFBU2pELGFBQWM5QixLQUFLNEUsWUFBWTdDLEtBQU0sV0FFOURnRCxFQUFTbEUsVUFBVW1GLFFBQVUsV0FDekJoRyxLQUFLcUYsVUFBVyxFQUNoQnJGLEtBQUtLLE9BQU8wRSxFQUFTakQsYUFBYzlCLEtBQUs0RSxZQUFZN0MsS0FBTSxVQUU5RGdELEVBQVNsRSxVQUFVb0YsUUFBVSxXQUN6QmpHLEtBQUtxRixVQUFXLEVBQ2hCckYsS0FBS0ssT0FBTzBFLEVBQVNqRCxhQUFjOUIsS0FBSzRFLFlBQVk3QyxLQUFNLFVBRTlEdkMsT0FBT0MsZUFBZXNGLEVBQVNsRSxVQUFXLGFBQWMsQ0FDcEQyRSxJQUFLLFdBQ0QsT0FBT3hGLEtBQUtxRixVQUVoQkksWUFBWSxFQUNaQyxjQUFjLElBRWxCWCxFQUFTbEUsVUFBVXFGLHNCQUF3QixTQUFVbkYsR0FDakRmLEtBQUttRyxtQkFBbUJwRixFQUFrQmYsS0FBS29HLGtCQUVuRHJCLEVBQVNsRSxVQUFVd0Ysd0JBQTBCLFNBQVV0RixHQUNuRGYsS0FBS21HLG1CQUFtQnBGLEVBQWtCZixLQUFLc0cscUJBRW5EdkIsRUFBU2xFLFVBQVVzRixtQkFBcUIsU0FBVXBGLEVBQWtCd0YsR0FDaEUsSUFBSXJCLEVBQVFsRixLQUNSd0csRUFBbUJ4RyxLQUFLeUcsY0FBY0MsUUFDdENDLEdBQVUsRUFDVjVGLGFBQTRCeUQsTUFDNUJ6RCxFQUFpQjZGLFNBQVEsU0FBVUMsR0FDL0JGLEVBQVVKLEVBQU9wQixLQUFLRCxFQUFPMkIsSUFBaUJGLEtBSWxEQSxFQUFVSixFQUFPcEIsS0FBS25GLEtBQU1lLEdBRTVCNEYsR0FBVzNHLEtBQUt1RixnQ0FDaEJ2RixLQUFLdUYsK0JBQStCdkYsS0FBTXdHLElBR2xEekIsRUFBU2xFLFVBQVV1RixnQkFBa0IsU0FBVVMsR0FDM0MsT0FBa0QsSUFBOUM3RyxLQUFLeUcsY0FBY0ssUUFBUUQsS0FDM0I3RyxLQUFLeUcsY0FBY00sS0FBS0YsSUFDakIsSUFJZjlCLEVBQVNsRSxVQUFVeUYsbUJBQXFCLFNBQVVPLEdBQzlDLElBQUlHLEVBQVFoSCxLQUFLeUcsY0FBY0ssUUFBUUQsR0FDdkMsT0FBZSxJQUFYRyxJQUNBaEgsS0FBS3lHLGNBQWNRLE9BQU9ELEVBQU8sSUFDMUIsSUFJZmpDLEVBQVNqRCxhQUFlLENBQ3BCLEdBQ0Esc0JBQ0Esc0JBQ0EsdUNBQ0Esc0JBQ0EsdUJBRUdpRCxFQWhHa0IsQ0FpRzNCRCxFQUFXb0MsVUFDYnhILEVBQVFxRixTQUFXQSxHLFlDbkhuQnZGLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RELElBQ0krQyxFQUF1QixXQUN2QixTQUFTQSxFQUFNM0MsR0FFWCxHQURBQyxLQUFLbUgsU0FBVyxHQUNaekUsRUFBTXhDLFlBQVlILEdBQ2xCLE1BQU0sSUFBSUksTUFMSCw2REFPWEgsS0FBS0ksWUFBY0wsRUFDbkJDLEtBQUs2QyxrQkFvQ1QsT0FsQ0FILEVBQU05QixZQUFjLFNBQVViLEdBQzFCLE9BQUtBLEdBR0FDLEtBQUtFLFlBQVlILEtBQ2xCQyxLQUFLRSxZQUFZSCxHQUFPLElBQUkyQyxFQUFNM0MsSUFFL0JDLEtBQUtFLFlBQVlILElBTGIsTUFPZjJDLEVBQU1DLFlBQWMsU0FBVTVDLFVBQ25CQyxLQUFLRSxZQUFZSCxJQUU1QjJDLEVBQU03QixVQUFVbUMsY0FBZ0IsU0FBVUMsR0FDdENBLEVBQU1YLG1CQUFtQnRDLEtBQUtJLGFBQzlCSixLQUFLbUgsU0FBU2xFLEVBQU1tRSxnQkFBa0JuRSxFQUN0Q0EsRUFBTTZDLGNBRVZwRCxFQUFNN0IsVUFBVXNDLGNBQWdCLFNBQVVDLEdBQ3RDLE9BQU9wRCxLQUFLbUgsU0FBUy9ELElBRXpCVixFQUFNN0IsVUFBVXlDLFNBQVcsU0FBVUYsR0FDakMsWUFBb0MvQixJQUE3QnJCLEtBQUttSCxTQUFTL0QsSUFFekJWLEVBQU03QixVQUFVd0MsWUFBYyxTQUFVRCxHQUNwQyxHQUFJcEQsS0FBS21ILFNBQVMvRCxHQUFZLENBQzFCLElBQUlILEVBQVFqRCxLQUFLbUgsU0FBUy9ELEdBRzFCLE9BRkFILEVBQU04QyxrQkFDQy9GLEtBQUttSCxTQUFTL0QsR0FDZEgsRUFFWCxPQUFPLE1BRVhQLEVBQU03QixVQUFVZ0MsZ0JBQWtCLGFBQ2xDSCxFQUFNeEMsWUFBYyxHQUNid0MsRUEzQ2UsR0E2QzFCaEQsRUFBUWdELE1BQVFBLEcsY0MvQ2hCbEQsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFJdEQsSUFBSTBILEVBQVcsRUFBUSxLQUVuQkgsRUFBMEIsV0FDMUIsU0FBU0EsS0FzQlQsT0FwQkFBLEVBQVNyRyxVQUFVeUIsbUJBQXFCLFNBQVV2QyxHQUM5Q0MsS0FBS0ksWUFBY0wsRUFDbkJDLEtBQUtzSCxPQUFTdEgsS0FBS3VILGFBRXZCTCxFQUFTckcsVUFBVWtELGlCQUFtQixTQUFVaEQsR0FFNUMsSUFEQSxJQUlJaUQsRUFKQXZDLEVBQU8sR0FDRkMsRUFBSyxFQUFHQSxFQUFLQyxVQUFVQyxPQUFRRixJQUNwQ0QsRUFBS0MsRUFBSyxHQUFLQyxVQUFVRCxHQUd6QjFCLEtBQUtzSCxTQUNKdEQsRUFBS2hFLEtBQUtzSCxRQUFRdkQsaUJBQWlCL0IsTUFBTWdDLEVBQUksQ0FBQ2pELEdBQWtCa0IsT0FBT1IsS0FHaEZ5RixFQUFTckcsVUFBVTBHLFVBQVksV0FDM0IsR0FBeUIsT0FBckJ2SCxLQUFLSSxZQUNMLE1BQU0sSUFBSUQsTUFwQkgsc0RBc0JYLE9BQU9rSCxFQUFTakYsT0FBT3hCLFlBQVlaLEtBQUtJLGNBRXJDOEcsRUF2QmtCLEdBeUI3QnhILEVBQVF3SCxTQUFXQSxHLG9CQy9CbkIsSUFDUWhELEVBREpDLEVBQWFuRSxNQUFRQSxLQUFLbUUsWUFDdEJELEVBQWdCLFNBQVVFLEVBQUdDLEdBSTdCLE9BSEFILEVBQWdCMUUsT0FBTzhFLGdCQUNsQixDQUFFQyxVQUFXLGNBQWdCQyxPQUFTLFNBQVVKLEVBQUdDLEdBQUtELEVBQUVHLFVBQVlGLElBQ3ZFLFNBQVVELEVBQUdDLEdBQUssSUFBSyxJQUFJSSxLQUFLSixFQUFPQSxFQUFFSyxlQUFlRCxLQUFJTCxFQUFFSyxHQUFLSixFQUFFSSxNQUNwREwsRUFBR0MsSUFFckIsU0FBVUQsRUFBR0MsR0FFaEIsU0FBU00sSUFBTzNFLEtBQUs0RSxZQUFjUixFQURuQ0YsRUFBY0UsRUFBR0MsR0FFakJELEVBQUV2RCxVQUFrQixPQUFOd0QsRUFBYTdFLE9BQU9xRixPQUFPUixJQUFNTSxFQUFHOUQsVUFBWXdELEVBQUV4RCxVQUFXLElBQUk4RCxLQUd2Rm5GLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBSXRELElBQUltRixFQUFhLEVBQVEsS0FDckJsRixFQUFZLEVBQVEsS0FFcEI0SCxFQUF1QixTQUFVeEMsR0FFakMsU0FBU3dDLEVBQU1wRSxFQUFXcUUsR0FDdEIsSUFBSXZDLEVBQVFGLEVBQU9HLEtBQUtuRixPQUFTQSxLQU1qQyxPQUxBa0YsRUFBTTlCLFVBQVlBLEdBTGYsUUFNSDhCLEVBQU03RSxPQUFTVCxFQUFVVSxRQUFRQyxNQUFRWCxFQUFVVSxRQUFRb0gsU0FBVzlILEVBQVVVLFFBQVFHLFFBQ3BGZ0gsR0FDQXZDLEVBQU15QyxRQUFRRixHQUVYdkMsRUF5QlgsT0FqQ0FmLEVBQVVxRCxFQUFPeEMsR0FVakJ3QyxFQUFNM0csVUFBVXVHLGFBQWUsV0FDM0IsT0FBT3BILEtBQUtvRCxXQUVoQm9FLEVBQU0zRyxVQUFVOEcsUUFBVSxTQUFVRixHQUNoQ3pILEtBQUt5SCxLQUFPQSxHQUVoQkQsRUFBTTNHLFVBQVUrRyxRQUFVLFdBQ3RCLE9BQU81SCxLQUFLeUgsTUFFaEJELEVBQU0zRyxVQUFVaUYsV0FBYSxXQUN6QjlGLEtBQUtLLE9BQU9tSCxFQUFNMUYsYUFBYzlCLEtBQUs0RSxZQUFZN0MsS0FBTSxhQUUzRHlGLEVBQU0zRyxVQUFVa0YsU0FBVyxXQUN2Qi9GLEtBQUtLLE9BQU9tSCxFQUFNMUYsYUFBYzlCLEtBQUs0RSxZQUFZN0MsS0FBTSxXQUUzRHlGLEVBQU0xRixhQUFlLENBQ2pCLEdBQ0Esc0JBQ0Esc0JBQ0EsdUNBQ0Esc0JBQ0EsdUJBRUcwRixFQWxDZSxDQW1DeEIxQyxFQUFXb0MsVUFDYnhILEVBQVE4SCxNQUFRQSxHLFlDeERoQmhJLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RELElBQUlXLEVBQXlCLFdBQ3pCLFNBQVNBLEtBNkJULE9BM0JBQSxFQUFRRSxXQUFhLFNBQVVxSCxFQUFhOUcsRUFBa0IrRyxHQUMxREQsRUFBWSxHQUFLLFlBQWM5RyxFQUFtQixRQUFVK0csRUFBYyxVQUMxRUMsUUFBUUMsSUFBSWhHLE1BQU0rRixRQUFTRixJQUUvQnZILEVBQVErQixnQkFBa0IsU0FBVXdGLEVBQWE5RyxHQUU3QyxJQURBLElBQUlVLEVBQU8sR0FDRkMsRUFBSyxFQUFHQSxFQUFLQyxVQUFVQyxPQUFRRixJQUNwQ0QsRUFBS0MsRUFBSyxHQUFLQyxVQUFVRCxHQUU3Qm1HLEVBQVksR0FBSyxZQUFjOUcsRUFBbUIsWUFBY1UsRUFBTyxZQUN2RXNHLFFBQVFDLElBQUloRyxNQUFNK0YsUUFBU0YsSUFFL0J2SCxFQUFROEUsWUFBYyxTQUFVeUMsRUFBYTlGLEVBQU13RSxHQUMvQ3NCLEVBQVksR0FBSyxZQUFjOUYsRUFBTyxLQUFPd0UsRUFBUyxVQUN0RHdCLFFBQVFDLElBQUloRyxNQUFNK0YsUUFBU0YsSUFFL0J2SCxFQUFRb0gsU0FBVyxTQUFVRyxFQUFhOUYsRUFBTXdFLEdBQzVDc0IsRUFBWSxHQUFLLFlBQWM5RixFQUFPLEtBQU93RSxFQUFTLFVBQ3REd0IsUUFBUUMsSUFBSWhHLE1BQU0rRixRQUFTRixJQUUvQnZILEVBQVFHLFFBQVUsU0FBVW9ILEdBRXhCLElBREEsSUFBSXBHLEVBQU8sR0FDRkMsRUFBSyxFQUFHQSxFQUFLQyxVQUFVQyxPQUFRRixJQUNwQ0QsRUFBS0MsRUFBSyxHQUFLQyxVQUFVRCxJQUdqQ3BCLEVBQVFDLE9BQVEsRUFDVEQsRUE5QmlCLEdBZ0M1QlosRUFBUVksUUFBVUEsRyxjQ2pDbEJkLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLElBQ3RELElBQUlzSSxFQUFlLEVBQVEsS0FFdkJ6RyxFQUFzQixXQUN0QixTQUFTQSxFQUFLekIsR0FHVixHQUZBQyxLQUFLa0ksWUFBYyxHQUNuQmxJLEtBQUttSSxhQUFlLElBQUlGLEVBQ3BCekcsRUFBS3RCLFlBQVlILEdBQ2pCLE1BQU0sSUFBSUksTUFOSCw0REFRWEgsS0FBS0ksWUFBY0wsRUFDbkJDLEtBQUs4QyxpQkE2R1QsT0EzR0F0QixFQUFLWixZQUFjLFNBQVViLEdBQ3pCLE9BQUtBLEdBR0FDLEtBQUtFLFlBQVlILEtBQ2xCQyxLQUFLRSxZQUFZSCxHQUFPLElBQUl5QixFQUFLekIsSUFFOUJDLEtBQUtFLFlBQVlILElBTGIsTUFPZnlCLEVBQUtvQixXQUFhLFNBQVU3QyxVQUNqQkMsS0FBS0UsWUFBWUgsSUFFNUJ5QixFQUFLWCxVQUFVVSxlQUFpQixTQUFVUixFQUFrQnFILEVBQWdCQyxHQUN4RXJJLEtBQUttSSxhQUFhRyxlQUFldkgsRUFBa0JxSCxFQUFnQkMsSUFFdkU3RyxFQUFLWCxVQUFVSyxpQkFBbUIsU0FBVUgsRUFBa0JxSCxFQUFnQkMsR0FDMUVySSxLQUFLbUksYUFBYUksR0FBR3hILEVBQWtCcUgsRUFBZ0JDLElBRTNEN0csRUFBS1gsVUFBVW9ELGdCQUFrQixTQUFVbEQsR0FFdkMsSUFEQSxJQUlJaUQsRUFKQXZDLEVBQU8sR0FDRkMsRUFBSyxFQUFHQSxFQUFLQyxVQUFVQyxPQUFRRixJQUNwQ0QsRUFBS0MsRUFBSyxHQUFLQyxVQUFVRCxJQUc1QnNDLEVBQUtoRSxLQUFLbUksY0FBY0ssS0FBS3hHLE1BQU1nQyxFQUFJLENBQUNqRCxFQUFrQkEsR0FBa0JrQixPQUFPUixLQUV4RkQsRUFBS1gsVUFBVTBDLGlCQUFtQixTQUFVQyxHQUNwQ3hELEtBQUtrSSxZQUFZMUUsRUFBU21DLHFCQUc5Qm5DLEVBQVNsQixtQkFBbUJ0QyxLQUFLSSxhQUVqQ0osS0FBS2tJLFlBQVkxRSxFQUFTbUMsbUJBQXFCbkMsRUFDL0N4RCxLQUFLeUksa0JBQWtCakYsR0FDdkJBLEVBQVNzQyxXQUFXOUYsS0FBSzBJLHlDQUF5Q0MsS0FBSzNJLE9BQ3ZFd0QsRUFBU3lDLFlBRWJ6RSxFQUFLWCxVQUFVZ0QsY0FBZ0IsU0FBVUgsR0FDckMsSUFBSUYsRUFBV3hELEtBQUtrSSxZQUFZeEUsR0FDaEMsR0FBSUYsRUFBVSxDQUNWLElBQUtBLEVBQVNvRixXQUNWLE9BQU9wRixFQUVYeEQsS0FBS3lJLGtCQUFrQmpGLEdBRXZCQSxFQUFTeUMsVUFFYixPQUFPekMsR0FFWGhDLEVBQUtYLFVBQVU0QyxpQkFBbUIsU0FBVUMsR0FDeEMsT0FBTzFELEtBQUtrSSxZQUFZeEUsSUFFNUJsQyxFQUFLWCxVQUFVOEMsZUFBaUIsU0FBVUQsR0FDdEMsSUFBSUYsRUFBV3hELEtBQUtrSSxZQUFZeEUsR0FTaEMsT0FSSUYsSUFDQXhELEtBQUs2SSxnQkFBZ0JyRixVQUVkeEQsS0FBS2tJLFlBQVl4RSxHQUN4QkYsRUFBU3dDLFVBRVR4QyxFQUFTdUMsWUFFTnZDLEdBRVhoQyxFQUFLWCxVQUFVK0MsY0FBZ0IsU0FBVUYsR0FDckMsSUFBSUYsRUFBV3hELEtBQUtrSSxZQUFZeEUsR0FDaEMsR0FBSUYsRUFBVSxDQUNWLEdBQUlBLEVBQVNvRixXQUNULE9BQU9wRixFQUVYeEQsS0FBSzZJLGdCQUFnQnJGLEdBRXJCQSxFQUFTd0MsVUFFYixPQUFPeEMsR0FFWGhDLEVBQUtYLFVBQVVpRCxZQUFjLFNBQVVKLEdBQ25DLFlBQTBDckMsSUFBbkNyQixLQUFLa0ksWUFBWXhFLElBRTVCbEMsRUFBS1gsVUFBVWlDLGVBQWlCLGFBQ2hDdEIsRUFBS1gsVUFBVWdJLGdCQUFrQixTQUFVckYsRUFBVXNGLEdBRWpELElBQUlDLEVBQXdCRCxHQUFhdEYsRUFBU2lELGNBQ2xELEdBQUlzQyxFQUFzQm5ILE9BQVMsRUFDL0IsSUFBSyxJQUFJRixFQUFLLEVBQUdzSCxFQUEwQkQsRUFBdUJySCxFQUFLc0gsRUFBd0JwSCxPQUFRRixJQUFNLENBQ3pHLElBQUl1SCxFQUFXRCxFQUF3QnRILEdBRXZDMUIsS0FBS3VCLGVBQWUwSCxFQUFVekYsRUFBUzBGLG1CQUFvQjFGLEtBSXZFaEMsRUFBS1gsVUFBVTRILGtCQUFvQixTQUFVakYsRUFBVXNGLEdBRW5ELElBQUlDLEVBQXdCRCxHQUFhdEYsRUFBU2lELGNBRWxELEdBQUlzQyxFQUFzQm5ILE9BQVMsRUFDL0IsSUFBSyxJQUFJRixFQUFLLEVBQUd5SCxFQUEwQkosRUFBdUJySCxFQUFLeUgsRUFBd0J2SCxPQUFRRixJQUFNLENBQ3pHLElBQUl1SCxFQUFXRSxFQUF3QnpILEdBQ3ZDMUIsS0FBS2tCLGlCQUFpQitILEVBQVV6RixFQUFTMEYsbUJBQW9CMUYsS0FJekVoQyxFQUFLWCxVQUFVNkgseUNBQTJDLFNBQVVsRixFQUFVZ0QsR0FDMUV4RyxLQUFLNkksZ0JBQWdCckYsRUFBVWdELEdBQy9CeEcsS0FBS3lJLGtCQUFrQmpGLElBRTNCaEMsRUFBS3RCLFlBQWMsR0FDWnNCLEVBckhjLEdBdUh6QjlCLEVBQVE4QixLQUFPQSxHLGNDMUhmaEMsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdEQsSUFBSXVDLEVBQWUsRUFBUSxLQUMzQnhDLEVBQVFJLFdBQWFvQyxFQUFhcEMsV0FDbEMsSUFBSXVILEVBQVcsRUFBUSxLQUN2QjNILEVBQVEwQyxPQUFTaUYsRUFBU2pGLE9BQzFCLElBQUlnSCxFQUFhLEVBQVEsS0FDekIxSixFQUFRcUYsU0FBV3FFLEVBQVdyRSxTQUM5QixJQUFJNUMsRUFBVSxFQUFRLEtBQ3RCekMsRUFBUWdELE1BQVFQLEVBQVFPLE1BQ3hCLElBQUlvQyxFQUFhLEVBQVEsS0FDekJwRixFQUFRd0gsU0FBV3BDLEVBQVdvQyxTQUM5QixJQUFJbUMsRUFBVSxFQUFRLEtBQ3RCM0osRUFBUThILE1BQVE2QixFQUFRN0IsTUFDeEIsSUFBSTVILEVBQVksRUFBUSxLQUN4QkYsRUFBUVksUUFBVVYsRUFBVVUsUUFDNUIsSUFBSVQsRUFBUyxFQUFRLEtBQ3JCSCxFQUFROEIsS0FBTzNCLEVBQU8yQixNLFFDZnRCLElBQUk4SCxFQUFNOUosT0FBT3FCLFVBQVU2RCxlQUN2QjZFLEVBQVMsSUFTYixTQUFTQyxLQTRCVCxTQUFTQyxFQUFHQyxFQUFJckIsRUFBU3NCLEdBQ3ZCM0osS0FBSzBKLEdBQUtBLEVBQ1YxSixLQUFLcUksUUFBVUEsRUFDZnJJLEtBQUsySixLQUFPQSxJQUFRLEVBY3RCLFNBQVNDLEVBQVlDLEVBQVNDLEVBQU9KLEVBQUlyQixFQUFTc0IsR0FDaEQsR0FBa0IsbUJBQVBELEVBQ1QsTUFBTSxJQUFJSyxVQUFVLG1DQUd0QixJQUFJQyxFQUFXLElBQUlQLEVBQUdDLEVBQUlyQixHQUFXd0IsRUFBU0YsR0FDMUNNLEVBQU1WLEVBQVNBLEVBQVNPLEVBQVFBLEVBTXBDLE9BSktELEVBQVFLLFFBQVFELEdBQ1hKLEVBQVFLLFFBQVFELEdBQUtQLEdBQzFCRyxFQUFRSyxRQUFRRCxHQUFPLENBQUNKLEVBQVFLLFFBQVFELEdBQU1ELEdBRGhCSCxFQUFRSyxRQUFRRCxHQUFLbEQsS0FBS2lELElBRGxDSCxFQUFRSyxRQUFRRCxHQUFPRCxFQUFVSCxFQUFRTSxnQkFJN0ROLEVBVVQsU0FBU08sRUFBV1AsRUFBU0ksR0FDSSxLQUF6QkosRUFBUU0sYUFBb0JOLEVBQVFLLFFBQVUsSUFBSVYsU0FDNUNLLEVBQVFLLFFBQVFELEdBVTlCLFNBQVNoQyxJQUNQakksS0FBS2tLLFFBQVUsSUFBSVYsRUFDbkJ4SixLQUFLbUssYUFBZSxFQXhFbEIzSyxPQUFPcUYsU0FDVDJFLEVBQU8zSSxVQUFZckIsT0FBT3FGLE9BQU8sT0FNNUIsSUFBSTJFLEdBQVNqRixZQUFXZ0YsR0FBUyxJQTJFeEN0QixFQUFhcEgsVUFBVXdKLFdBQWEsV0FDbEMsSUFDSUMsRUFDQXZJLEVBRkF3SSxFQUFRLEdBSVosR0FBMEIsSUFBdEJ2SyxLQUFLbUssYUFBb0IsT0FBT0ksRUFFcEMsSUFBS3hJLEtBQVN1SSxFQUFTdEssS0FBS2tLLFFBQ3RCWixFQUFJbkUsS0FBS21GLEVBQVF2SSxJQUFPd0ksRUFBTXhELEtBQUt3QyxFQUFTeEgsRUFBSzJFLE1BQU0sR0FBSzNFLEdBR2xFLE9BQUl2QyxPQUFPZ0wsc0JBQ0ZELEVBQU10SSxPQUFPekMsT0FBT2dMLHNCQUFzQkYsSUFHNUNDLEdBVVR0QyxFQUFhcEgsVUFBVTRKLFVBQVksU0FBbUJYLEdBQ3BELElBQUlHLEVBQU1WLEVBQVNBLEVBQVNPLEVBQVFBLEVBQ2hDWSxFQUFXMUssS0FBS2tLLFFBQVFELEdBRTVCLElBQUtTLEVBQVUsTUFBTyxHQUN0QixHQUFJQSxFQUFTaEIsR0FBSSxNQUFPLENBQUNnQixFQUFTaEIsSUFFbEMsSUFBSyxJQUFJaUIsRUFBSSxFQUFHQyxFQUFJRixFQUFTOUksT0FBUWlKLEVBQUssSUFBSXJHLE1BQU1vRyxHQUFJRCxFQUFJQyxFQUFHRCxJQUM3REUsRUFBR0YsR0FBS0QsRUFBU0MsR0FBR2pCLEdBR3RCLE9BQU9tQixHQVVUNUMsRUFBYXBILFVBQVVpSyxjQUFnQixTQUF1QmhCLEdBQzVELElBQUlHLEVBQU1WLEVBQVNBLEVBQVNPLEVBQVFBLEVBQ2hDVyxFQUFZekssS0FBS2tLLFFBQVFELEdBRTdCLE9BQUtRLEVBQ0RBLEVBQVVmLEdBQVcsRUFDbEJlLEVBQVU3SSxPQUZNLEdBWXpCcUcsRUFBYXBILFVBQVUySCxLQUFPLFNBQWNzQixFQUFPaUIsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSUMsR0FDakUsSUFBSWxCLEVBQU1WLEVBQVNBLEVBQVNPLEVBQVFBLEVBRXBDLElBQUs5SixLQUFLa0ssUUFBUUQsR0FBTSxPQUFPLEVBRS9CLElBRUl4SSxFQUNBa0osRUFIQUYsRUFBWXpLLEtBQUtrSyxRQUFRRCxHQUN6Qm1CLEVBQU16SixVQUFVQyxPQUlwQixHQUFJNkksRUFBVWYsR0FBSSxDQUdoQixPQUZJZSxFQUFVZCxNQUFNM0osS0FBS3NJLGVBQWV3QixFQUFPVyxFQUFVZixRQUFJckksR0FBVyxHQUVoRStKLEdBQ04sS0FBSyxFQUFHLE9BQU9YLEVBQVVmLEdBQUd2RSxLQUFLc0YsRUFBVXBDLFVBQVUsRUFDckQsS0FBSyxFQUFHLE9BQU9vQyxFQUFVZixHQUFHdkUsS0FBS3NGLEVBQVVwQyxRQUFTMEMsSUFBSyxFQUN6RCxLQUFLLEVBQUcsT0FBT04sRUFBVWYsR0FBR3ZFLEtBQUtzRixFQUFVcEMsUUFBUzBDLEVBQUlDLElBQUssRUFDN0QsS0FBSyxFQUFHLE9BQU9QLEVBQVVmLEdBQUd2RSxLQUFLc0YsRUFBVXBDLFFBQVMwQyxFQUFJQyxFQUFJQyxJQUFLLEVBQ2pFLEtBQUssRUFBRyxPQUFPUixFQUFVZixHQUFHdkUsS0FBS3NGLEVBQVVwQyxRQUFTMEMsRUFBSUMsRUFBSUMsRUFBSUMsSUFBSyxFQUNyRSxLQUFLLEVBQUcsT0FBT1QsRUFBVWYsR0FBR3ZFLEtBQUtzRixFQUFVcEMsUUFBUzBDLEVBQUlDLEVBQUlDLEVBQUlDLEVBQUlDLElBQUssRUFHM0UsSUFBS1IsRUFBSSxFQUFHbEosRUFBTyxJQUFJK0MsTUFBTTRHLEVBQUssR0FBSVQsRUFBSVMsRUFBS1QsSUFDN0NsSixFQUFLa0osRUFBSSxHQUFLaEosVUFBVWdKLEdBRzFCRixFQUFVZixHQUFHMUgsTUFBTXlJLEVBQVVwQyxRQUFTNUcsT0FDakMsQ0FDTCxJQUNJNEosRUFEQXpKLEVBQVM2SSxFQUFVN0ksT0FHdkIsSUFBSytJLEVBQUksRUFBR0EsRUFBSS9JLEVBQVErSSxJQUd0QixPQUZJRixFQUFVRSxHQUFHaEIsTUFBTTNKLEtBQUtzSSxlQUFld0IsRUFBT1csRUFBVUUsR0FBR2pCLFFBQUlySSxHQUFXLEdBRXRFK0osR0FDTixLQUFLLEVBQUdYLEVBQVVFLEdBQUdqQixHQUFHdkUsS0FBS3NGLEVBQVVFLEdBQUd0QyxTQUFVLE1BQ3BELEtBQUssRUFBR29DLEVBQVVFLEdBQUdqQixHQUFHdkUsS0FBS3NGLEVBQVVFLEdBQUd0QyxRQUFTMEMsR0FBSyxNQUN4RCxLQUFLLEVBQUdOLEVBQVVFLEdBQUdqQixHQUFHdkUsS0FBS3NGLEVBQVVFLEdBQUd0QyxRQUFTMEMsRUFBSUMsR0FBSyxNQUM1RCxLQUFLLEVBQUdQLEVBQVVFLEdBQUdqQixHQUFHdkUsS0FBS3NGLEVBQVVFLEdBQUd0QyxRQUFTMEMsRUFBSUMsRUFBSUMsR0FBSyxNQUNoRSxRQUNFLElBQUt4SixFQUFNLElBQUs0SixFQUFJLEVBQUc1SixFQUFPLElBQUkrQyxNQUFNNEcsRUFBSyxHQUFJQyxFQUFJRCxFQUFLQyxJQUN4RDVKLEVBQUs0SixFQUFJLEdBQUsxSixVQUFVMEosR0FHMUJaLEVBQVVFLEdBQUdqQixHQUFHMUgsTUFBTXlJLEVBQVVFLEdBQUd0QyxRQUFTNUcsSUFLcEQsT0FBTyxHQVlUd0csRUFBYXBILFVBQVUwSCxHQUFLLFNBQVl1QixFQUFPSixFQUFJckIsR0FDakQsT0FBT3VCLEVBQVk1SixLQUFNOEosRUFBT0osRUFBSXJCLEdBQVMsSUFZL0NKLEVBQWFwSCxVQUFVOEksS0FBTyxTQUFjRyxFQUFPSixFQUFJckIsR0FDckQsT0FBT3VCLEVBQVk1SixLQUFNOEosRUFBT0osRUFBSXJCLEdBQVMsSUFhL0NKLEVBQWFwSCxVQUFVeUgsZUFBaUIsU0FBd0J3QixFQUFPSixFQUFJckIsRUFBU3NCLEdBQ2xGLElBQUlNLEVBQU1WLEVBQVNBLEVBQVNPLEVBQVFBLEVBRXBDLElBQUs5SixLQUFLa0ssUUFBUUQsR0FBTSxPQUFPakssS0FDL0IsSUFBSzBKLEVBRUgsT0FEQVUsRUFBV3BLLEtBQU1pSyxHQUNWakssS0FHVCxJQUFJeUssRUFBWXpLLEtBQUtrSyxRQUFRRCxHQUU3QixHQUFJUSxFQUFVZixHQUVWZSxFQUFVZixLQUFPQSxHQUNmQyxJQUFRYyxFQUFVZCxNQUNsQnRCLEdBQVdvQyxFQUFVcEMsVUFBWUEsR0FFbkMrQixFQUFXcEssS0FBTWlLLE9BRWQsQ0FDTCxJQUFLLElBQUlVLEVBQUksRUFBR0wsRUFBUyxHQUFJMUksRUFBUzZJLEVBQVU3SSxPQUFRK0ksRUFBSS9JLEVBQVErSSxLQUVoRUYsRUFBVUUsR0FBR2pCLEtBQU9BLEdBQ25CQyxJQUFTYyxFQUFVRSxHQUFHaEIsTUFDdEJ0QixHQUFXb0MsRUFBVUUsR0FBR3RDLFVBQVlBLElBRXJDaUMsRUFBT3ZELEtBQUswRCxFQUFVRSxJQU90QkwsRUFBTzFJLE9BQVE1QixLQUFLa0ssUUFBUUQsR0FBeUIsSUFBbEJLLEVBQU8xSSxPQUFlMEksRUFBTyxHQUFLQSxFQUNwRUYsRUFBV3BLLEtBQU1pSyxHQUd4QixPQUFPakssTUFVVGlJLEVBQWFwSCxVQUFVeUssbUJBQXFCLFNBQTRCeEIsR0FDdEUsSUFBSUcsRUFVSixPQVJJSCxHQUNGRyxFQUFNVixFQUFTQSxFQUFTTyxFQUFRQSxFQUM1QjlKLEtBQUtrSyxRQUFRRCxJQUFNRyxFQUFXcEssS0FBTWlLLEtBRXhDakssS0FBS2tLLFFBQVUsSUFBSVYsRUFDbkJ4SixLQUFLbUssYUFBZSxHQUdmbkssTUFNVGlJLEVBQWFwSCxVQUFVMEssSUFBTXRELEVBQWFwSCxVQUFVeUgsZUFDcERMLEVBQWFwSCxVQUFVK0ksWUFBYzNCLEVBQWFwSCxVQUFVMEgsR0FLNUROLEVBQWF1RCxTQUFXakMsRUFLeEJ0QixFQUFhQSxhQUFlQSxFQU0xQndELEVBQU8vTCxRQUFVdUksRyw0REM5VVosTUFBTXlELEVBQ1QsWUFBWUMsRUFBR0MsRUFBR0MsR0FDZDdMLEtBQUsyTCxFQUFJQSxFQUNUM0wsS0FBSzRMLEVBQUlBLEVBQ1Q1TCxLQUFLNkwsRUFBSUEsRUFDVDdMLEtBQUs4TCxlQUFpQixHQUN0QjlMLEtBQUsrTCxVQUFXLEVBR3BCLFlBQVlDLEdBQ1IsT0FBT2hNLEtBQUs4TCxlQUFlRyxNQUFLQyxHQUFRQSxFQUFLUCxJQUFNSyxFQUFVTCxHQUN0RE8sRUFBS04sSUFBTUksRUFBVUosR0FBS00sRUFBS0wsSUFBTUcsRUFBVUgsSUFHMUQsT0FBT0csR0FDSCxPQUFPaE0sS0FBSzJMLElBQU1LLEVBQVVMLEdBQUszTCxLQUFLNEwsSUFBTUksRUFBVUosR0FBSzVMLEtBQUs2TCxJQUFNRyxFQUFVSCxFQUdwRixZQUFZRixFQUFHQyxFQUFHQyxHQUNkLE9BQU83TCxLQUFLMkwsSUFBTUEsR0FBSzNMLEtBQUs0TCxJQUFNQSxHQUFLNUwsS0FBSzZMLElBQU1BLEVBR3RELGlCQUFpQkcsR0FDUmhNLEtBQUttTSxZQUFZSCxJQUNsQmhNLEtBQUs4TCxlQUFlL0UsS0FBS2lGLEdBSWpDLGlCQUFpQkEsR0FDYixNQUFNSSxFQUFxQnBNLEtBQUs4TCxlQUFlTyxXQUFVSCxHQUFRQSxFQUFLSSxPQUFPTixLQUM3RWhNLEtBQUs4TCxlQUFlN0UsT0FBT21GLEVBQW9CLEksc0JDMUJ2RCxNQUFNLE9BQUVoSyxHQUFXLEVBQVEsS0FFcEIsU0FBU21LLEVBQW9Cbk0sRUFBYVcsS0FBcUJVLEdBQ2xFLE1BQU02RixFQUFTbEYsRUFBT3hCLFlBQVlSLEdBRzVCb00sRUFBTUMsR0FBR0MsWUFBWUMsaUJBQ3JCQyxFQW1CVixTQUF3QkosR0FDcEIsTUFBTUssRUFBbUJMLEVBQUlNLEtBQUtDLFVBQVUsb0JBRTVDLElBQUlDLEVBQWdCLEdBRXBCLE1BQU1DLEVBQXVCLEdBRzdCLElBQUssTUFBTUMsS0FBZUwsRUFBa0IsQ0FDeEMsTUFBTU0sRUFBVUQsRUFBWUUsT0FBNEIsb0JBQ3hESCxFQUFxQmxHLEtBQUtvRyxHQUUxQixNQUFNUCxFQUFZUyxFQUEyQkgsR0FDN0NDLEVBQVFHLFFBQVFWLEdBS3BCLElBQUssTUFBTVcsS0FBa0JOLEVBQ3pCLElBQUssTUFBTU8sS0FBdUJELEVBQWVFLG9CQUFxQixDQUNsRSxNQUFNQyxFQUFtQkYsRUFBb0JKLE9BQTRCLG9CQUV6RU8sRUFBbUJKLEVBQWVLLFVBQVdGLEVBQWlCRSxXQUM5RFosRUFBZ0JBLEVBQWMvSyxPQUFPc0wsRUFBZUssV0FJNUQsT0FBT1osRUE5Q1dhLENBQWVyQixHQUMzQnNCLEVBZ0RWLFNBQXdCdEIsRUFBS0ksR0FDekIsTUFBTW1CLEVBQXFCLEdBQ3JCQyxFQUFrQnhCLEVBQUlNLEtBQUtDLFVBQVUsUUFDM0MsSUFBSyxNQUFNa0IsS0FBaUJELEVBQWlCLENBQ3pDLE1BQU1FLEVBQU9DLEVBQTRCRixHQUN6Q0YsRUFBbUJoSCxLQUFLbUgsR0FDeEJFLEVBQXNCSCxFQUFlckIsR0FDckNxQixFQUFjSSxVQUdsQixPQUFPTixFQTFET08sQ0FBZTlCLEVBQUtJLEdBQzVCMkIsRUE4SVYsU0FBd0IvQixFQUFLSSxHQUN6QixJQUFJNEIsRUFBYyxHQUNsQixNQUFNQyxFQUFnQmpDLEVBQUlNLEtBQUtDLFVBQVUsU0FDekMsSUFBSyxNQUFNMkIsS0FBZUQsRUFDdEJELEVBQWNBLEVBQVl2TSxPQUFPME0sRUFBd0JELEVBQWE5QixJQUN0RThCLEVBQVlMLFVBR2hCLE9BQU9HLEVBdEpPSSxDQUFlcEMsRUFBS0ksR0FDNUJpQyxFQXlMVixTQUF1QnJDLEdBQ25CLE1BQU1xQyxFQUFVLElBQUlDLElBQ2RDLEVBQWlCdkMsRUFBSU0sS0FBS0MsVUFBVSxVQUMxQyxJQUFLLE1BQU1pQyxLQUFnQkQsRUFBZ0IsQ0FDdkMsTUFBTUUsRUFBa0JELEVBQWE1QixPQUF3QixnQkFDdkQ4QixFQUFXRCxFQUFnQkMsU0FNM0JDLEVBQVMsQ0FDWEQsU0FBVUEsRUFDVkUsaUJBUHFCSCxFQUFnQkcsaUJBUXJDQyxrQkFQc0JKLEVBQWdCSSxrQkFRdENDLGNBUGtCTCxFQUFnQkssY0FBY0MsY0FRaERDLFlBUGdCUCxFQUFnQlEsT0FBT0YsZUFVM0NWLEVBQVFhLElBQUlSLEVBQVVDLEdBRzFCLE9BQU9OLEVBL01TYyxDQUFjbkQsR0FHeEJvRCxFQWdOVixTQUE0QmhELEdBQ3hCLE1BQU1pRCxFQUFZLEdBQ2xCLElBQUssTUFBTUMsS0FBYWxELEVBR2hCbUQsRUFBV0QsRUFBV2xELElBQ3RCaUQsRUFBVTlJLEtBQUssSUFBSTJFLEVBQWVvRSxFQUFVbkUsRUFBR21FLEVBQVVsRSxFQUFHa0UsRUFBVWpFLElBSTlFLElBQUssTUFBTW1FLEtBQVlILEVBQ25CLElBQUssTUFBTUksS0FBaUJKLEVBQ3hCLElBQUtHLEVBQVMxRCxPQUFPMkQsS0FBbUJBLEVBQWM5RCxZQUFZNkQsR0FBVyxDQUN6RSxNQUFNRSxFQUFPQyxFQUFBLHlCQUE2QkgsRUFBU3JFLEVBQUdxRSxFQUFTbkUsRUFBR29FLEVBQWN0RSxFQUFHc0UsRUFBY3BFLEdBQzdGc0UsRUFBQSxpQkFBcUJELEVBQU10RCxLQUMzQm9ELEVBQVNJLGlCQUFpQkgsR0FDMUJBLEVBQWNHLGlCQUFpQkosSUFNL0MsT0FBT0gsRUF0T2NRLENBQW1CekQsR0FJcEN0RixFQUFPaEUsU0FBU2dOLEVBQUEsU0FFaEJoSixFQUFPakUsWUFBWWlOLEVBQUEsUUFHdkJoSixFQUFPdEUsY0FBYyxJQUFJc04sRUFBQSxFQUFhMUQsRUFBV2tCLEVBQU9TLEVBQU9NLEVBQVNlLElBQ3hFdEksRUFBT3ZELGlCQUFpQndNLEVBQUEsb0JBK0M1QixTQUFTcEMsRUFBNEJxQyxHQUNqQyxNQUFNQyxFQUFRRCxFQUFVRSxnQkFDbEJDLEVBQWMsSUFBSWxFLEdBQUdtRSxLQUFLSCxFQUFNOUUsRUFBSSxFQUFHOEUsRUFBTTdFLEVBQUksRUFBRzZFLEVBQU01RSxFQUFJLEdBRXBFLE9BRGEsSUFBSVksR0FBR29FLFlBQVlMLEVBQVVqQixjQUFlb0IsR0FJN0QsU0FBU3ZDLEVBQXNCMEMsRUFBTWxFLEdBQ2pDLE1BQU1tRSxFQUFVRCxFQUFLdkIsY0FDZnlCLEVBQVlGLEVBQUtKLGdCQUNqQjlFLEVBQUlxRixLQUFLQyxNQUFNSCxFQUFRbkYsRUFBbUIsR0FBZG9GLEVBQVVwRixHQUV0Q3VGLEVBQVVGLEtBQUtDLE1BQU1ILEVBQVFwRixFQUFtQixHQUFkcUYsRUFBVXJGLEdBQzVDeUYsRUFBVUgsS0FBS0MsTUFBTUgsRUFBUWxGLEVBQW1CLEdBQWRtRixFQUFVbkYsR0FFbEQsSUFBSyxJQUFJRixFQUFJd0YsRUFBU3hGLEVBQUl3RixFQUFVSCxFQUFVckYsRUFBR0EsSUFDN0MsSUFBSyxJQUFJRSxFQUFJdUYsRUFBU3ZGLEVBQUl1RixFQUFVSixFQUFVbkYsRUFBR0EsSUFBSyxDQUNsRCxNQUFNd0YsRUFBb0J6RSxFQUFVUCxXQUFXSCxHQUFTQSxFQUFLb0YsWUFBWTNGLEVBQUdDLEVBQUdDLEtBQy9FLEdBQUl3RixHQUFxQixFQUFHLENBQ3hCLE1BQU1FLEVBQWUzRSxFQUFVM0YsT0FBT29LLEVBQW1CLEdBRXpELElBQUssTUFBTUcsS0FBZUQsRUFDdEIsSUFBSyxNQUFNckYsS0FBUXNGLEVBQVkxRixlQUMzQkksRUFBS3VGLGlCQUFpQkQsS0FROUMsU0FBU25FLEVBQTJCSCxHQUVoQyxNQUFNd0UsRUFBTyxHQUVQQyxFQUFnQnpFLEVBQVkwRSxtQkFDNUJDLEVBQVkzRSxFQUFZd0QsZ0JBRXhCb0IsRUFBZWIsS0FBS0MsTUFBTVcsRUFBVWxHLEdBQ3BDb0csRUFBaUJkLEtBQUtDLE1BQU1XLEVBQVVoRyxHQUV0Q21HLEVBQVdmLEtBQUtDLE1BQU1TLEVBQWNoRyxFQUFLbUcsRUFBZSxHQUN4REcsRUFBV04sRUFBYy9GLEVBQ3pCc0csRUFBV2pCLEtBQUtDLE1BQU1TLEVBQWM5RixFQUFLa0csRUFBaUIsR0FFaEUsSUFBSyxJQUFJbEcsRUFBSXFHLEVBQVVyRyxFQUFJcUcsRUFBV0gsRUFBZ0JsRyxJQUNsRCxJQUFLLElBQUlGLEVBQUlxRyxFQUFVckcsRUFBSXFHLEVBQVdGLEVBQWNuRyxJQUFLLENBQ3JELE1BQU1PLEVBQU8sSUFBSVIsRUFBZUMsRUFBR3NHLEVBQVVwRyxHQUM3QzZGLEVBQUszSyxLQUFLbUYsR0FLbEIsSUFBSyxNQUFNQSxLQUFRd0YsRUFDZixJQUFLLE1BQU0xRixLQUFhMEYsR0FDaEIxRixFQUFVc0YsWUFBWXBGLEVBQUtQLEVBQUksRUFBR08sRUFBS04sRUFBR00sRUFBS0wsSUFDL0NHLEVBQVVzRixZQUFZcEYsRUFBS1AsRUFBSSxFQUFHTyxFQUFLTixFQUFHTSxFQUFLTCxJQUMvQ0csRUFBVXNGLFlBQVlwRixFQUFLUCxFQUFHTyxFQUFLTixFQUFHTSxFQUFLTCxFQUFJLElBQy9DRyxFQUFVc0YsWUFBWXBGLEVBQUtQLEVBQUdPLEVBQUtOLEVBQUdNLEVBQUtMLEVBQUksS0FDL0NLLEVBQUtrRSxpQkFBaUJwRSxHQUtsQyxPQUFPMEYsRUFHWCxTQUFTL0QsRUFBbUIrRCxFQUFNUyxHQUU5QixJQUFLLE1BQU1qRyxLQUFRd0YsRUFDZixJQUFLLE1BQU0xRixLQUFhbUcsR0FDaEJuRyxFQUFVc0YsWUFBWXBGLEVBQUtQLEVBQUksRUFBR08sRUFBS04sRUFBR00sRUFBS0wsSUFDL0NHLEVBQVVzRixZQUFZcEYsRUFBS1AsRUFBSSxFQUFHTyxFQUFLTixFQUFHTSxFQUFLTCxJQUMvQ0csRUFBVXNGLFlBQVlwRixFQUFLUCxFQUFHTyxFQUFLTixFQUFHTSxFQUFLTCxFQUFJLElBQy9DRyxFQUFVc0YsWUFBWXBGLEVBQUtQLEVBQUdPLEVBQUtOLEVBQUdNLEVBQUtMLEVBQUksS0FDL0NLLEVBQUtrRSxpQkFBaUJwRSxHQWtCdEMsU0FBUzJDLEVBQXdCeUQsRUFBS3hGLEdBQ2xDLE1BQU00QixFQUFjLEdBQ2Q2RCxFQUFTRCxFQUFJN0MsY0FDYitDLEVBQVdGLEVBQUkxQixnQkFDZjlFLEVBQUlxRixLQUFLQyxNQUFNbUIsRUFBT3pHLEVBQWtCLEdBQWIwRyxFQUFTMUcsR0FFcEN1RixFQUFVRixLQUFLQyxNQUFNbUIsRUFBTzFHLEVBQWtCLEdBQWIyRyxFQUFTM0csR0FDMUN5RixFQUFVSCxLQUFLQyxNQUFNbUIsRUFBT3hHLEVBQWtCLEdBQWJ5RyxFQUFTekcsR0FFaEQsSUFBSyxJQUFJRixFQUFJd0YsRUFBU3hGLEVBQUl3RixFQUFVbUIsRUFBUzNHLEVBQUdBLElBQzVDLElBQUssSUFBSUUsRUFBSXVGLEVBQVN2RixFQUFJdUYsRUFBVWtCLEVBQVN6RyxFQUFHQSxJQUFLLENBQ2pELE1BQU0wRyxFQUFhLElBQUk5RixHQUFHbUUsS0FBS2pGLEVBQUdDLEVBQUdDLEdBQ3JDMkMsRUFBWXpILEtBQUt3TCxHQUNqQixNQUFNbEIsRUFBb0J6RSxFQUFVUCxXQUFXSCxHQUFTQSxFQUFLb0YsWUFBWTNGLEVBQUdDLEVBQUdDLEtBQy9FLEdBQUl3RixHQUFxQixFQUFHLENBQ3hCLE1BQU1FLEVBQWUzRSxFQUFVM0YsT0FBT29LLEVBQW1CLEdBRXpELElBQUssTUFBTUcsS0FBZUQsRUFDdEIsSUFBSyxNQUFNckYsS0FBUXNGLEVBQVkxRixlQUMzQkksRUFBS3VGLGlCQUFpQkQsSUFTMUMsT0FBT2hELEVBdURYLFNBQVN1QixFQUFXRCxFQUFXMEMsR0FFM0IsTUFBTUMsRUFBWSxJQUFJaEcsR0FBR21FLEtBQUtkLEVBQVVuRSxFQUFJLEVBQUdtRSxFQUFVbEUsRUFBR2tFLEVBQVVqRSxFQUFJLEdBQ3BFNkcsRUFBUSxJQUFJakcsR0FBR21FLEtBQUtkLEVBQVVuRSxFQUFHbUUsRUFBVWxFLEVBQUdrRSxFQUFVakUsRUFBSSxHQUM1RDhHLEVBQVksSUFBSWxHLEdBQUdtRSxLQUFLZCxFQUFVbkUsRUFBSSxFQUFHbUUsRUFBVWxFLEVBQUdrRSxFQUFVakUsRUFBSSxHQUNwRStHLEVBQU8sSUFBSW5HLEdBQUdtRSxLQUFLZCxFQUFVbkUsRUFBSSxFQUFHbUUsRUFBVWxFLEVBQUdrRSxFQUFVakUsR0FDM0RnSCxFQUFZLElBQUlwRyxHQUFHbUUsS0FBS2QsRUFBVW5FLEVBQUksRUFBR21FLEVBQVVsRSxFQUFHa0UsRUFBVWpFLEVBQUksR0FDcEVpSCxFQUFRLElBQUlyRyxHQUFHbUUsS0FBS2QsRUFBVW5FLEVBQUdtRSxFQUFVbEUsRUFBR2tFLEVBQVVqRSxFQUFJLEdBQzVEa0gsRUFBWSxJQUFJdEcsR0FBR21FLEtBQUtkLEVBQVVuRSxFQUFJLEVBQUdtRSxFQUFVbEUsRUFBR2tFLEVBQVVqRSxFQUFJLEdBQ3BFbUgsRUFBTyxJQUFJdkcsR0FBR21FLEtBQUtkLEVBQVVuRSxFQUFJLEVBQUdtRSxFQUFVbEUsRUFBR2tFLEVBQVVqRSxHQUdqRSxTQUFLMkcsRUFBU3ZHLE1BQUtnSCxHQUFLQSxFQUFFM0csT0FBT21HLE9BQ3pCM0MsRUFBVWhFLGVBQWVHLE1BQUtnSCxHQUFLQSxFQUFFM0csT0FBT29HLE9BQ3pDNUMsRUFBVWhFLGVBQWVHLE1BQUtnSCxHQUFLQSxFQUFFM0csT0FBTzBHLFFBTWxEUixFQUFTdkcsTUFBS2dILEdBQUtBLEVBQUUzRyxPQUFPcUcsT0FDekI3QyxFQUFVaEUsZUFBZUcsTUFBS2dILEdBQUtBLEVBQUUzRyxPQUFPb0csT0FDekM1QyxFQUFVaEUsZUFBZUcsTUFBS2dILEdBQUtBLEVBQUUzRyxPQUFPc0csUUFNbERKLEVBQVN2RyxNQUFLZ0gsR0FBS0EsRUFBRTNHLE9BQU91RyxPQUN6Qi9DLEVBQVVoRSxlQUFlRyxNQUFLZ0gsR0FBS0EsRUFBRTNHLE9BQU93RyxPQUN6Q2hELEVBQVVoRSxlQUFlRyxNQUFLZ0gsR0FBS0EsRUFBRTNHLE9BQU9zRyxRQU1sREosRUFBU3ZHLE1BQUtnSCxHQUFLQSxFQUFFM0csT0FBT3lHLE9BQ3pCakQsRUFBVWhFLGVBQWVHLE1BQUtnSCxHQUFLQSxFQUFFM0csT0FBT3dHLE9BQ3pDaEQsRUFBVWhFLGVBQWVHLE1BQUtnSCxHQUFLQSxFQUFFM0csT0FBTzBHLE8sYUNoUzNELE1BQU0sTUFBRXhMLEdBQVUsRUFBUSxLQUduQixNQUFNMEwsVUFBcUIxTCxFQUM5QixTQUNJLE9BQU94SCxLQUFLNEgsVUFFaEIsa0JBQW9CLE1BQU8sZUFFM0IsWUFBWUgsR0FDUjBMLE1BQU1ELEVBQWFFLEtBQU0zTCxHQUc3QixVQUFVNEwsRUFBWUMsR0FDbEIsSUFBSyxNQUFNQyxLQUFldlQsS0FBS3dULEdBQzNCLEdBQUloVSxPQUFPa0YsZUFBZVMsS0FBS25GLEtBQUt3VCxHQUFJRCxHQUFjLENBQ2xELE1BQU1FLEVBQVd6VCxLQUFLd1QsR0FBR0QsR0FFekIsR0FBSS9ULE9BQU9rRixlQUFlUyxLQUFLc08sRUFBVUosR0FDckMsT0FBT0ksRUFBU0osR0FBWUssT0FBT3pDLEtBQUswQyxJQUFJTCxFQUFhLEVBQUcsSUFLeEUsTUFBTSxJQUFJblQsTUFBTSx3QkFBd0JrVCxHQUc1QyxrQkFBa0JBLEdBQ2QsSUFBSyxNQUFNRSxLQUFldlQsS0FBS3dULEdBQzNCLEdBQUloVSxPQUFPa0YsZUFBZVMsS0FBS25GLEtBQUt3VCxHQUFJRCxHQUFjLENBQ2xELE1BQU1FLEVBQVd6VCxLQUFLd1QsR0FBR0QsR0FDekIsR0FBSS9ULE9BQU9rRixlQUFlUyxLQUFLc08sRUFBVUosR0FDckMsT0FBT0UsRUFLbkIsTUFBTSxJQUFJcFQsTUFBTSxnQ0FBZ0NrVCxJQ3JDeEQsTUFBUTdMLE1BQUssR0FBSyxFQUFRLE1BRXBCLFFBQUVvTSxHQUFZLEVBQVEsS0FHckIsTUFBTUMsVUFBbUIsRUFDNUIsU0FDSSxPQUFPN1QsS0FBSzRILFVBRWhCLGtCQUFvQixNQUFPLGFBRTNCLGNBQ0ksTUFBTTRFLEVBQU1DLEdBQUdDLFlBQVlDLGlCQUVyQm1ILEVBRGF0SCxFQUFJdUgsT0FBT3ZPLElBQUksVUFBVXdPLFNBQ2RDLE1BQ3hCQyxFQUFlLElBQUlwRixJQUV6QixJQUFLLE1BQU1xRixLQUFXTCxFQUNsQixHQUFJdFUsT0FBT2tGLGVBQWVTLEtBQUsyTyxFQUFZSyxHQUFVLENBQ2pELE1BQU1DLEVBQW1CTixFQUFXSyxHQUM5QkUsRUFBWTdILEVBQUl1SCxPQUFPdk8sSUFBSTRPLEdBQWtCSixTQUVuREUsRUFBYXhFLElBQUl5RSxFQUFTRSxHQUlsQ2xCLE1BQU1VLEVBQVdULEtBQU1jLEdBR3ZCbFUsS0FBS3NVLGlCQUFjalQsRUFDbkJyQixLQUFLdVUsaUJBQWNsVCxFQUNuQnJCLEtBQUt3VSxpQkFBbUIsRUFDeEJ4VSxLQUFLeVUsa0JBQW9CLEdBRzdCLFFBQVFDLEdBQ0osT0FBSTFVLEtBQUt3VCxHQUFHbEssSUFBSW9MLEdBQ0wxVSxLQUFLd1QsR0FBR2hPLElBQUlrUCxRQUVuQixFQUlSLFFBQVFDLEVBQU1DLEdBQ1YsTUFBTUMsRUFBUUYsRUFBS0UsTUFDbkIsT0FBSXJWLE9BQU9rRixlQUFlUyxLQUFLMFAsRUFBT0QsR0FDM0JDLEVBQU1ELFFBRWIsRUFJUixRQUFRMUksRUFBTTRJLEdBQ1YsTUFBTUMsRUFBUTdJLEVBQUs2SSxNQUNuQixPQUFJRCxFQUFZQyxFQUFNblQsT0FDWG1ULEVBQU1ELFFBRWIsRUFJUixTQUFTRixHQUNMNVUsS0FBS3VVLFlBQWNLLEVBQ25CNVUsS0FBS3dVLGlCQUFtQixFQUc1QixrQkFBa0JFLEdBQ2QxVSxLQUFLc1UsWUFBY0ksRUFDbkIxVSxLQUFLdVUsWUFBYyxRQUNuQnZVLEtBQUt3VSxpQkFBbUIsRUFFeEIsTUFBTUcsRUFBTzNVLEtBQUtnVixRQUFRaFYsS0FBS3NVLGFBQy9CLElBQUtLLEVBQ0QsTUFBTXhVLE1BQU0sK0JBQStCSCxLQUFLc1UseUJBQzdDLElBQUt0VSxLQUFLaVYsUUFBUU4sRUFBTTNVLEtBQUt1VSxhQUNoQyxNQUFNcFUsTUFBTSxxREFBcUR1VSxHQUdyRSxPQUFPQyxFQUdYLHFCQUNJLE1BQU1BLEVBQU8zVSxLQUFLZ1YsUUFBUWhWLEtBQUtzVSxhQUN6QkMsRUFBY3ZVLEtBQUtpVixRQUFRTixFQUFNM1UsS0FBS3VVLGFBQ3RDVyxFQUFZbFYsS0FBS21WLGFBQWFaLEVBQWF2VSxLQUFLd1Usa0JBQ3RELEdBQUlVLEdBQWFBLEVBQVV2TCxLQUFNLENBQzdCLE1BQU15TCxFQUFnQnBWLEtBQUtxViwwQkFBMEJyVixLQUFLc1UsWUFBYXRVLEtBQUt1VSxZQUFhdlUsS0FBS3dVLGtCQUM5RnhVLEtBQUtzVixhQUFhRixHQUV0QixPQUFPRixFQUlYLDBCQUNJLE1BQU1QLEVBQU8zVSxLQUFLZ1YsUUFBUWhWLEtBQUtzVSxhQUN6QkMsRUFBY3ZVLEtBQUtpVixRQUFRTixFQUFNM1UsS0FBS3VVLGFBRTVDdlUsS0FBS3dVLG1CQUVMLE1BQU1VLEVBQVlsVixLQUFLbVYsYUFBYVosRUFBYXZVLEtBQUt3VSxrQkFDdEQsR0FBSVUsR0FBYUEsRUFBVXZMLEtBQU0sQ0FDN0IsTUFBTXlMLEVBQWdCcFYsS0FBS3FWLDBCQUEwQnJWLEtBQUtzVSxZQUFhdFUsS0FBS3VVLFlBQWF2VSxLQUFLd1Usa0JBQzlGeFUsS0FBS3NWLGFBQWFGLEdBRXRCLE9BQU9GLEVBR1gsYUFBYWhKLEVBQU00SSxHQUNmLElBQUlTLEVBQWdCdlYsS0FBS3dWLFFBQVF0SixFQUFNNEksR0FHdkMsR0FBSVMsRUFBZSxDQUNmLElBQUlFLEVBQWlCLEdBS3JCLEdBSklGLEVBQWNHLGFBQ2RELEVBQWlCQSxFQUFleFQsT0FBT3NULEVBQWNHLGFBR3JESCxFQUFjNUwsS0FBTSxDQUNwQixNQUFNeUwsRUFBZ0JwVixLQUFLMlYsa0NBQWtDM1YsS0FBS3NVLFlBQWF0VSxLQUFLdVUsWUFBYU8sR0FDakdXLEVBQWlCQSxFQUFleFQsT0FBT21ULEdBQ3ZDck4sUUFBUUMsSUFBSSxtQkFDWkQsUUFBUUMsSUFBSXlOLEdBR2hCLE9BQUl6VixLQUFLeVYsZUFBZUEsR0FDYkYsR0FFUHZWLEtBQUt3VSxpQkFBbUJNLEVBQVksRUFDN0I5VSxLQUFLbVYsYUFBYWpKLEVBQU1sTSxLQUFLd1UsbUJBSXhDLE9BQU9lLEVBSWYsMEJBQTBCYixFQUFRRSxFQUFRRSxHQUN0QyxNQUFPLEdBQUdKLElBQVNFLElBQVNFLElBR2hDLGtDQUFrQ0osRUFBUUUsRUFBUUUsR0FDOUMsTUFBTyxJQUFJSixJQUFTRSxJQUFTRSxJQUdqQyxhQUFhYyxHQUdULE9BRm9CNVYsS0FBSzZWLHFCQUNVQyxRQUFRRixHQUkvQyxhQUFhRyxJQUMwQyxJQUEvQy9WLEtBQUt5VSxrQkFBa0IzTixRQUFRaVAsSUFDL0IvVixLQUFLeVUsa0JBQWtCMU4sS0FBS2dQLEdBSXBDLGdCQUFnQkEsR0FDWixNQUFNL08sRUFBUWhILEtBQUt5VSxrQkFBa0IzTixRQUFRaVAsR0FDekMvTyxHQUFTLEdBQ1RoSCxLQUFLeVUsa0JBQWtCeE4sT0FBT0QsRUFBTyxHQUk3QyxlQUFlME8sR0FDWCxJQUFJTSxHQUFVLEVBRWQsSUFBSyxNQUFNRCxLQUFhTCxFQUFZLENBRWhDLE1BQU1PLEVBQWdCLEtBQ2hCQyxFQUFlSCxFQUFVSSxNQUFNRixHQUVyQyxHQUFJQyxFQUFhdFUsT0FBUyxFQUFHLENBRXpCLElBQUl3VSxHQUFZLEVBQ2hCLElBQUssTUFBTUMsS0FBcUJILEVBQ3hCbFcsS0FBS3NXLGVBQWVELEtBQ3BCRCxHQUFZLEdBR2hCSixJQUNBQSxFQUFVSSxRQUdWSixJQUNBQSxFQUFVaFcsS0FBS3NXLGVBQWVQLElBSzFDLE9BQU9DLEVBR1gsZUFBZUQsR0FDWCxJQUFJQyxHQUFVLEVBR2QsR0FBSUQsRUFBVVEsV0FBVyxLQUFNLENBQzNCLE1BQU1DLEVBQWlCVCxFQUFVclAsTUFBTSxFQUFHcVAsRUFBVW5VLFFBRWhENUIsS0FBS3lVLGtCQUFrQjNOLFFBQVEwUCxJQUFtQixJQUNsRFIsR0FBVSxRQUVYLEdBQUlELEVBQVVRLFdBQVcsS0FBTSxDQUNsQyxNQUFNQyxFQUFpQlQsRUFBVXJQLE1BQU0sRUFBR3FQLEVBQVVuVSxRQUNwRDVCLEtBQUtzVixhQUFha0IsR0FDbEJSLEdBQVUsT0FDUCxHQUFJRCxFQUFVUSxXQUFXLEtBQU0sQ0FDbEMsTUFBTUMsRUFBaUJULEVBQVVyUCxNQUFNLEVBQUdxUCxFQUFVblUsUUFDcEQ1QixLQUFLeVcsZ0JBQWdCRCxHQUNyQlIsR0FBVSxPQUV5QyxJQUEvQ2hXLEtBQUt5VSxrQkFBa0IzTixRQUFRaVAsS0FDL0JDLEdBQVUsR0FJbEIsT0FBT0EsR0N4TmYsTUFBUXhPLE1BQUssR0FBSyxFQUFRLE1BRXBCLFlBQUVrUCxHQUFnQixFQUFRLEtBR3pCLE1BQU1DLFVBQXVCLEVBQ2hDLFNBQ0ksT0FBTzNXLEtBQUs0SCxVQUVoQixrQkFBb0IsTUFBTyxpQkFFM0IsY0FDSXVMLE1BQU13RCxFQUFldkQsS0FBTSxJQUFJc0QsR0FHbkMscUJBQ0ksT0FBTzFXLEtBQUt3VCxHQUFHb0QsZUFHbkIsbUJBQW1CalgsR0FDZkssS0FBS3dULEdBQUdvRCxlQUFpQmpYLEVBRzdCLHFCQUNJLE9BQU9LLEtBQUt3VCxHQUFHcUQsZUFJbkIscUJBQXFCQyxFQUFVQyxHQUUzQixNQUFNQyxFQUFnQmhYLEtBQUs0VyxlQUFldkssV0FBVTRLLEdBQVFBLEVBQUtDLE9BQVNKLElBQ3BFSyxFQUFlblgsS0FBSzRXLGVBQWUzUCxPQUFPK1AsRUFBZSxHQUMvRCxJQUFJSSxFQUFvQixFQUNwQkMsRUFBVyxFQUNmLElBQUssSUFBSTFNLEVBQUksRUFBR0EsRUFBSTNLLEtBQUs0VyxlQUFlaFYsT0FBUStJLElBQUssQ0FDakQsTUFBTXNNLEVBQU9qWCxLQUFLNFcsZUFBZWpNLEdBRzdCb00sR0FBYUssR0FBcUJMLEVBQVlLLEVBQW9CSCxFQUFLSyxPQUN2RUQsRUFBVzFNLEdBR2Z5TSxHQUFxQkgsRUFBS0ssS0FROUIsR0FMSVAsR0FBYUssSUFDYkMsRUFBV3JYLEtBQUs0VyxlQUFlaFYsUUFJeUIsbUJBQXhEcEMsT0FBT3FCLFVBQVUwVyxTQUFTcFMsS0FBS25GLEtBQUs0VyxnQkFDcEMsTUFBTSxJQUFJelcsTUFBTSxnQ0FNcEIsSUFBS2dYLEVBQWF2VixPQUNkLE1BQU0sSUFBSXpCLE1BQU0sMENBQTRDNlcsR0FJaEVoWCxLQUFLNFcsZUFBZTNQLE9BQU9vUSxFQUFVLEVBQUdGLEVBQWEsSUFHekQseUJBQXlCSyxFQUFTQyxHQUU5QixJQUFpQixVQUFaRCxHQUFtQyxVQUFaQSxJQUEwQyxXQUFsQkMsRUFBU0MsS0FBbUIsQ0FDNUUsTUFBTUMsRUFBZTNYLEtBQUs2VyxlQUFlclIsSUFBSWdTLEdBUTdDLEdBTElHLEdBQTJDLFVBQTNCQSxFQUFhQyxZQUM3QjVYLEtBQUs2VyxlQUFlZ0IsT0FBTyxTQUMzQjdYLEtBQUs2VyxlQUFlZ0IsT0FBTyxVQUdKLFVBQXZCSixFQUFTRyxXQUdULEdBRkE1WCxLQUFLNlcsZUFBZW5ILElBQUk4SCxFQUFTQyxHQUVqQixVQUFaRCxFQUFxQixDQUNyQixNQUFNTSxFQUFZOVgsS0FBSzZXLGVBQWVyUixJQUFJLFNBQ3RDc1MsR0FBYUEsRUFBVVosT0FBU08sRUFBU1AsTUFDekNsWCxLQUFLNlcsZUFBZWdCLE9BQU8sY0FFNUIsR0FBZ0IsVUFBWkwsRUFBcUIsQ0FDNUIsTUFBTU0sRUFBWTlYLEtBQUs2VyxlQUFlclIsSUFBSSxTQUN0Q3NTLEdBQWFBLEVBQVVaLE9BQVNPLEVBQVNQLE1BQ3pDbFgsS0FBSzZXLGVBQWVnQixPQUFPLGVBTW5DN1gsS0FBSzZXLGVBQWVuSCxJQUFJLFFBQVMrSCxHQUNqQ3pYLEtBQUs2VyxlQUFlbkgsSUFBSSxRQUFTK0gsR0FJckMsT0FBTyxFQUdYLE9BQU8sRUFHWCxpQkFBaUJNLEdBQ2IvWCxLQUFLNFcsZUFBZTdQLEtBQUtnUixHQUc3QixnQkFBZ0JQLEdBQ1osT0FBT3hYLEtBQUs2VyxlQUFlclIsSUFBSWdTLElDN0d2QyxNQUFRaFEsTUFBSyxHQUFLLEVBQVEsS0FHbkIsTUFBTXdRLFVBQW1CLEVBQzVCLFNBQ0ksT0FBT2hZLEtBQUs0SCxVQUVoQixrQkFBb0IsTUFBTyxhQUUzQixZQUFZSCxHQUNSMEwsTUFBTTZFLEVBQVc1RSxLQUFNM0wsR0FHM0IsWUFBWXdRLEdBQ1IsSUFBSyxNQUFNMUUsS0FBZXZULEtBQUt3VCxHQUMzQixHQUFJaFUsT0FBT2tGLGVBQWVTLEtBQUtuRixLQUFLd1QsR0FBSUQsR0FBYyxDQUNsRCxNQUFNRSxFQUFXelQsS0FBS3dULEdBQUdELEdBRXpCLEdBREF4TCxRQUFRQyxJQUFJeUwsR0FDUmpVLE9BQU9rRixlQUFlUyxLQUFLc08sRUFBVXdFLEdBRXJDLE1BQU8sQ0FDSEMsR0FBSUQsRUFDSlAsS0FBTW5FLEtBQ0h2VCxLQUFLd1QsR0FBR0QsR0FBYTBFLElBTXhDLE1BQU0sSUFBSTlYLE1BQU0sK0JBQStCOFgsSUM3QnZELE1BQVF6USxNQUFLLEdBQUssRUFBUSxNQUNwQixnQkFBRTJRLEdBQW9CLEVBQVEsS0FHN0IsTUFBTUMsVUFBMEIsRUFDbkMsU0FDSSxPQUFPcFksS0FBSzRILFVBRWhCLGtCQUFvQixNQUFPLG9CQUUzQixjQUNJdUwsTUFBTWlGLEVBQWtCaEYsS0FBTSxJQUFJK0UsR0FHdEMsUUFBUVQsR0FDSixPQUFPMVgsS0FBS3dULEdBQUd3QixRQUFRMEMsSUNSL0IsTUFBUXRWLE9BQU0sR0FBSyxFQUFRLEtBRXBCLFNBQVNpVyxFQUFlalksRUFBYVcsR0FJeEMsRUFBT0gsWUFBWVIsR0FBYTRDLGNBQWMsSUFBSXNWLEVBQUEsR0FHbEQsTUFBTTlMLEVBQU1DLEdBQUdDLFlBQVlDLGlCQUMzQixHQUFJSCxFQUFLLENBQ0wsTUFBTStMLEVBQWMvTCxFQUFJdUgsT0FBT3ZPLElBQUksVUFBVXdPLFNBQzdDLEVBQU9wVCxZQUFZUixHQUFhNEMsY0FBYyxJQUFJa1EsRUFBYXFGLElBQy9ELE1BQU1DLEVBQVloTSxFQUFJdUgsT0FBT3ZPLElBQUksVUFBVXdPLFNBQzNDLEVBQU9wVCxZQUFZUixHQUFhNEMsY0FBYyxJQUFJZ1YsRUFBV1EsSUFDN0QsRUFBTzVYLFlBQVlSLEdBQWE0QyxjQUFjLElBQUk2USxHQUNsRCxFQUFPalQsWUFBWVIsR0FBYTRDLGNBQWMsSUFBSTJULEdBQ2xELEVBQU8vVixZQUFZUixHQUFhNEMsY0FBYyxJQUFJb1YsR0FHbEQsRUFBT3hYLFlBQVlSLEdBQWEyRCxpQkFBaUJ3TSxFQUFBLHdCQUFvQyxTQUNyRixFQUFPM1AsWUFBWVIsR0FBYTJELGlCQUFpQndNLEVBQUEsd0JBQW9DLFlBQ3JGLEVBQU8zUCxZQUFZUixHQUFhMkQsaUJBQWlCd00sRUFBQSx3QkFBb0MsU0FDckYsRUFBTzNQLFlBQVlSLEdBQWEyRCxpQkFBaUJ3TSxFQUFBLHdCQUFvQyxhQUNyRixFQUFPM1AsWUFBWVIsR0FBYTJELGlCQUFpQndNLEVBQUEscUJBQWlDLFVBQVcsU0FDN0YsRUFBTzNQLFlBQVlSLEdBQWEyRCxpQkFBaUJ3TSxFQUFBLHFCQUFpQyxVQUFXLFVDaENyRyxNQUFRbk8sT0FBTSxHQUFLLEVBQVEsS0FHcEIsU0FBU3FXLEVBQW1CclksRUFBYVcsS0FBcUJVLEdBQ2pFLE1BQU0rSyxFQUFNQyxHQUFHQyxZQUFZQyxpQkFDckIrTCxFQUFZalgsRUFBSyxHQUNqQnlOLEVBQVd6TixFQUFLLEdBQ3RCc0csUUFBUUMsSUFBSSxrQkFBa0IwUSxHQUc5QixNQUFNQyxFQUFlbk0sRUFBSU0sS0FBSzhMLFdBQVcsUUFHbkNDLEVBQVFyTSxFQUFJc00sT0FBT0MsS0FBS0wsR0FHOUJsTSxFQUFJc00sT0FBT0UsbUJBQW1CSCxFQUFNSSxLQUFLLFNBQVVDLEVBQUtDLEdBQy9DRCxFQUtEblIsUUFBUXFSLE1BQU1GLEdBSlZQLEdBQ0FBLEVBQWF0SyxVQUtyQixFQUFPek4sWUFBWVIsR0FBYTJELGlCQUFpQndNLEVBQUEsd0JBQW9DbUksR0FDckYsRUFBTzlYLFlBQVlSLEdBQWEyRCxpQkFBaUJ3TSxFQUFBLGdCQUE0Qm1JLEdBQzdFLEVBQU85WCxZQUFZUixHQUFhMkQsaUJBQWlCd00sRUFBQSw4QkFBMENyQixNQzFCNUYsU0FBU21LLEVBQWFDLEdBQ3pCLElBQUlDLEVBQWVELEVBQU0xWCxPQUNyQjRYLE9BQWlCblksRUFDakJvWSxHQUFlLEVBR25CLEtBQU8sSUFBTUYsR0FHVEUsRUFBY3hJLEtBQUt5SSxNQUFNekksS0FBSzBJLFNBQVdKLEdBQ3pDQSxHQUFnQixFQUdoQkMsRUFBaUJGLEVBQU1DLEdBQ3ZCRCxFQUFNQyxHQUFnQkQsRUFBTUcsR0FDNUJILEVBQU1HLEdBQWVELEVBR3pCLE9BQU9GLEUsYUNsQlgsTUFBUTlSLE1BQUssR0FBSyxFQUFRLE1BSXBCLFNBQUVvUyxHQUFhLEVBQVEsS0FHdEIsTUFBTUMsVUFBb0IsRUFDN0IsU0FDSSxPQUFPN1osS0FBSzRILFVBRWhCLGtCQUFvQixNQUFPLGNBRTNCLFlBQVlrUyxFQUFjQyxHQUN0QjVHLE1BQU0wRyxFQUFZekcsS0FBTSxJQUFJd0csRUFBU0UsRUFBY0MsSUFHdkQsYUFDSSxNQUFNRCxFQUFlOVosS0FBS3dULEdBQUdzRyxhQUM3QjlaLEtBQUtnYSxtQkFBcUIsSUFBSWxMLElBQzlCLElBQUssTUFBTW1MLEtBQWVILEVBQWMsQ0FDcEMsTUFBTUksRUFBbUJsYSxLQUFLc0gsT0FBT25FLGNBQWNnWCxFQUFBLE9BQTBCRixHQUM3RWphLEtBQUtnYSxtQkFBbUJ0SyxJQUFJdUssRUFBYUMsSUFJakQsV0FDSSxNQUFNRSxFQUFrQnBhLEtBQUt3VCxHQUFHNEcsZ0JBRWhDLEdBQUlBLEdBQW1CQSxFQUFnQnhZLE9BQVMsRUFBRyxDQUMvQyxNQUFNeVksRUFBYUQsRUFBZ0JFLFFBR25DLEdBRkF0YSxLQUFLd1QsR0FBRytHLGtCQUFvQkYsRUFFVCxjQUFmQSxFQUE0QixDQUU1QnJhLEtBQUtzSCxPQUFPdkQsaUJBQWlCd00sRUFBQSxxQkFBaUMsUUFBUThKLEdBQ3RFLE1BQU1wWCxFQUFRakQsS0FBS2dhLG1CQUFtQnhVLElBQUk2VSxHQUMxQ3BYLEVBQU11WCx1QkFFRnZYLEVBQU13WCxNQUNOemEsS0FBS3NILE9BQU92RCxpQkFBaUJ3TSxFQUFBLDhCQUEwQzhKLEdBRXZFcmEsS0FBS3NILE9BQU92RCxpQkFBaUJ3TSxFQUFBLDRCQUF3QzhKLFFBSXpFcmEsS0FBS3NILE9BQU92RCxpQkFBaUJ3TSxFQUFBLHFCQUFpQyxhQUM5RG1LLFlBQVcsS0FDUDFhLEtBQUtzSCxPQUFPdkQsaUJBQWlCd00sRUFBQSx1QkFDOUIsTUFLZixZQUNJeEksUUFBUUMsSUFBSSxxQkFDWkQsUUFBUUMsSUFBSSxxQkFDWkQsUUFBUUMsSUFBSSxxQkFDWixNQUFNMlMsRUFBYyxHQUNwQixJQUFLLE1BQU9DLEVBQWEzWCxLQUFVakQsS0FBS2dhLG1CQUFtQmEsVUFBVyxDQUNsRSxNQUFNckgsRUFBS3ZRLEVBQU11USxHQUNqQixJQUFLLElBQUk3SSxFQUFJLEVBQUdBLEVBQUk2SSxFQUFHc0gsV0FBWW5RLElBQy9CZ1EsRUFBWTVULEtBQUs2VCxHQUl6QixHQUEyQixJQUF2QkQsRUFBWS9ZLE9BR1osWUFEQTVCLEtBQUtzSCxPQUFPdkQsaUJBQWlCd00sRUFBQSxjQUtqQ29LLEVBQVk1VCxLQUFLLGFBRWpCLElBQUlnVSxFQUFxQjFCLEVBQWFzQixHQUV0QyxLQUFpQyxjQUExQkksRUFBbUIsSUFDdEJBLEVBQXFCMUIsRUFBYTBCLEdBR3RDL2EsS0FBS3dULEdBQUc0RyxnQkFBa0JXLEVBRzlCLDBCQUNJLE9BQU8vYSxLQUFLd1QsR0FBR3dILG9CQUduQix3QkFDSSxPQUFPaGIsS0FBS3dULEdBQUcrRyxrQkFHbkIsc0JBQXNCNWEsR0FDbEJLLEtBQUt3VCxHQUFHK0csa0JBQW9CNWEsRUFHaEMsbUJBQ0ksT0FBT0ssS0FBS3dULEdBQUdzRyxhQUduQixZQUNJLE9BQU85WixLQUFLd1QsR0FBR3VHLE1BR25CLDBCQUEwQmEsR0FFdEI1YSxLQUFLZ2EsbUJBQW1CbkMsT0FBTytDLEdBRS9CNWEsS0FBS3dULEdBQUc0RyxnQkFBa0JwYSxLQUFLd1QsR0FBRzRHLGdCQUFnQmEsUUFBT0MsR0FBS0EsSUFBTU4sSUFFcEUsSUFBSyxNQUFPN2EsRUFBS29iLEtBQVNuYixLQUFLK1osTUFBTWMsVUFBVyxDQUU1QyxNQUFNTyxFQUFpQkQsRUFBS3JVLFFBQVE4VCxHQUNoQ1EsR0FBa0IsR0FDbEJELEVBQUtsVSxPQUFPbVUsRUFBZ0IsR0FHWixJQUFoQkQsRUFBS3ZaLFFBQ0w1QixLQUFLc0gsT0FBT3ZELGlCQUFpQndNLEVBQUEsYUFBeUJ4USxLLGFDdEh0RSxNQUFRcUMsT0FBTSxHQUFLLEVBQVEsS0FPcEIsU0FBU2laLEVBQW1CamIsRUFBYVcsS0FBcUJVLEdBQ2pFLE1BQU02WixFQUF5QjdaLEVBQUssR0FDOUI2RixFQUFTLEVBQU8xRyxZQUFZUixHQUNsQ2tILEVBQU92RCxpQkFBaUJ3TSxFQUFBLHFCQUFpQyxnQkFFbENqSixFQUFPbkUsY0FBY21WLEVBQUEsUUFDN0JpRCxvQkFBb0IsRUFBQUMsa0JBQUEsUUFFbkMsTUFBTUMsRUFBNEJuVSxFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEJtQixHQUNqRmhVLEVBQU92RCxpQkFBaUJ3TSxFQUFBLDBCQUFzQyxVQUFXa0wsR0FJekUsTUFBTTFCLEVBQVEsSUFBSWpMLElBQ1o0TSxFQUFhLENBQUMsVUFDcEIzQixFQUFNckssSUFBSSxjQUFlZ00sR0FFekIsTUFBTUMsRUFBZSxDQUFDTCxHQUF3QnJaLE9BQU93WixFQUEwQkcsYUFBYVgsUUFBTyxTQUFVaEUsRUFBTTRFLEVBQUtDLEdBQ3BILE9BQU9BLEVBQUtoVixRQUFRbVEsSUFBUzRFLEtBRWpDOUIsRUFBTXJLLElBQUksZ0JBQWlCaU0sR0FFM0IsTUFBTTdCLEVBQWU0QixFQUFXelosT0FBTzBaLEdBR2pDSSxFQUFjelUsRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCLFVBRW5FLElBQUssTUFBTUYsS0FBZUgsRUFDdEJ4UyxFQUFPdkQsaUJBQWlCd00sRUFBQSxlQUE0QjBKLEdBQ2hDLFdBQWhCQSxFQUNBM1MsRUFBT3ZELGlCQUFpQndNLEVBQUEsb0JBQWlDMEosRUFBYThCLEVBQVl4SCxhQUVsRmpOLEVBQU92RCxpQkFBaUJ3TSxFQUFBLG9CQUFpQzBKLEVBQWF3QixFQUEwQmxILGFBS3hHLE1BQU15SCxFQUFjLElBQUluQyxFQUFZQyxFQUFjQyxHQUNsRHpTLEVBQU90RSxjQUFjZ1osR0FFckJ0QixZQUFXLEtBQ1BwVCxFQUFPdkQsaUJBQWlCd00sRUFBQSx1QkFDekIsS0NqRFAsTUFBUW5PLE9BQU0sR0FBSyxFQUFRLEtBTXBCLFNBQVM2WixFQUFzQjdiLEVBQWFXLEtBQXFCVSxHQUNwRSxNQUFNNkYsRUFBUyxFQUFPMUcsWUFBWVIsR0FFNUI4YixFQUFZNVUsRUFBT25FLGNBQWNtVixFQUFBLFFBQ2pDMEQsRUFBYzFVLEVBQU9uRSxjQUFjMFcsRUFBWXpHLE1BRWpEOEksRUFBVTFJLEdBQUcySSxlQUFpQixFQUFBWCxrQkFBQSxRQUM5QlEsRUFBWUksV0NicEIsTUFBUWhhLE9BQU0sR0FBSyxFQUFRLEtBTXBCLFNBQVNpYSxFQUF1QmpjLEVBQWFXLEtBQXFCVSxHQUNyRSxNQUFNNkYsRUFBUyxFQUFPMUcsWUFBWVIsR0FFNUI4YixFQUFZNVUsRUFBT25FLGNBQWNtVixFQUFBLFFBQ2pDMEQsRUFBYzFVLEVBQU9uRSxjQUFjMFcsRUFBWXpHLE1BRWpEOEksRUFBVTFJLEdBQUcySSxlQUFpQixFQUFBWCxrQkFBQSxTQUM5QlEsRUFBWU0sWUFDWmhWLEVBQU92RCxpQkFBaUJ3TSxFQUFBLG1CQUErQnlMLEVBQVl4SSxHQUFHd0gsc0JDZDlFLE1BQVE1WSxPQUFNLEdBQUssRUFBUSxLQUlwQixTQUFTbWEsRUFBcUJuYyxFQUFhVyxLQUFxQlUsR0FDbkVpWixZQUFXLEtBQ1AsTUFBTXBULEVBQVMsRUFBTzFHLFlBQVlSLEdBQzVCNGIsRUFBYzFVLEVBQU9uRSxjQUFjMFcsRUFBWXpHLE1BQ3JEOUwsRUFBT3ZELGlCQUFpQndNLEVBQUEsc0JBQ3hCakosRUFBT3ZELGlCQUFpQndNLEVBQUEsbUJBQStCeUwsRUFBWWhCLHVCQUNwRSxLLGFDVlAsTUFBUTVZLE9BQU0sR0FBSyxFQUFRLEtBVXBCLFNBQVNvYSxFQUFpQnBjLEVBQWFXLEtBQXFCVSxHQUMvRCxNQUFNZ2IsRUFBVWhiLEVBQUssR0FDZjZGLEVBQVMsRUFBTzFHLFlBQVlSLEdBSTVCc2MsR0FIZXBWLEVBQU9uRSxjQUFjbU4sRUFBQSxRQUV2QmhKLEVBQU9uRSxjQUFjZ1gsRUFBQSxPQUEwQnNDLEdBQzlCbEksYUFFaEJqTixFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEIsVUFDcEM1RixZQUNHekksZUFHQUcsTUFBS2dILEdBQUtBLEVBQUUzRyxPQUFPb1EsTUFFOUIsSUFBSUMsRUFBQSxHQUNaQyxZQUFZdFYsRUFBUW1WLEcsYUNuQmhDLFNBQVNJLEVBQW9CemMsRUFBYVcsS0FBcUJVLEdBQ2xFLE1BQU02RixFQUFTLEVBQUFsRixPQUFBLFlBQW1CaEMsR0FDNUIwYyxFQUFpQnhWLEVBQU9uRSxjQUFjbVYsRUFBQSxRQUN0Q3lFLEVBQWV6VixFQUFPbkUsY0FBY21OLEVBQUEsUUFHcENwRSxFQUFPekssRUFBSyxHQUVkc2IsRUFBYUMsYUFBYTlRLEtBQ3RCNFEsRUFBZUcsY0FBZ0IsRUFBQXpCLGtCQUFBLFlBQy9CbFUsRUFBT3ZELGlCQUFpQndNLEVBQUEsdUJBQW9DLFNBQVVyRSxHQUMvRDRRLEVBQWVHLGNBQWdCLEVBQUF6QixrQkFBQSxRQUVBLFdBRGxCbFUsRUFBT25FLGNBQWMwVyxFQUFZekcsTUFDckNtSCxtQkFDWmpULEVBQU92RCxpQkFBaUJ3TSxFQUFBLDBCQUFzQyxTQUFVckUsSUNyQnhGLE1BQVE5SixPQUFNLEdBQUssRUFBUSxLQUtwQixTQUFTOGEsRUFBNEI5YyxFQUFhVyxLQUFxQlUsR0FDMUUsTUFBTTZGLEVBQVMsRUFBTzFHLFlBQVlSLEdBQzVCOFgsRUFBS3pXLEVBQUssR0FDVjBiLEVBQWExYixFQUFLLEdBRWxCMmIsRUFBcUI5VixFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEJqQyxHQUNwRTFFLEVBQUs0SixFQUFtQjVKLEdBQ3hCNkosRUFBZ0JsTixFQUFBLHFCQUF5QnFELEVBQUdlLFlBQWFmLEVBQUc4SixtQkFFbEUsSUFBSyxNQUFNcFIsS0FBUW1SLEVBQ1huUixFQUFLSSxPQUFPNlEsSUFDWkksR0FBZ0JqVyxFQUFROFYsRUFBb0JELEdBS3hELFNBQVNJLEdBQWdCalcsRUFBUWtXLEVBQWdCTCxHQUM3QyxNQUFNM0osRUFBS2dLLEVBQWVoSyxHQUNwQmlLLEVBQU90TixFQUFBLGdCQUFvQnFELEVBQUdlLFlBQWE0SSxHQUM3Q00sR0FBUUEsRUFBSzdiLE9BQVMsSUFDdEI0UixFQUFHOEosbUJBQXNCRyxFQUFLN2IsT0FBUyxFQUN2QzRiLEVBQWVqSixZQUFjNEksRUFDN0I3VixFQUFPdkQsaUJBQWlCd00sRUFBQSxzQkFDeEJqSixFQUFPdkQsaUJBQWlCd00sRUFBQSxzQkFBbUNpRCxFQUFHMEUsR0FBSXVGLElDNUJuRSxTQUFTQyxHQUF3QnRkLEVBQWFXLEtBQXFCVSxHQUN0RSxNQUFNa2MsRUFBZ0JsYyxFQUFLLEdBQ3JCK0ssRUFBTUMsR0FBR0MsWUFBWUMsaUJBQ3JCaVIsRUFBb0JwUixFQUFJdUgsT0FBT3ZPLElBQUksVUFDbkNxWSxFQUFZclIsRUFBSU0sS0FBSzhMLFdBQVcsZ0JBRXRDLElBQUssTUFBTTFNLEtBQVF5UixFQUFlLENBQzlCLE1BQU1HLEVBQU9GLEVBQWtCNUosU0FBUytKLGNBQ3hDRCxFQUFLRSxpQkFBaUI5UixFQUFLUCxFQUFHTyxFQUFLTixFQUFHTSxFQUFLTCxHQUMzQ2dTLEVBQVVJLFNBQVNILElDUHBCLFNBQVNJLEdBQXdCOWQsRUFBYVcsS0FBcUJVLEdBQ3RFLE1BQ00wYyxFQURNMVIsR0FBR0MsWUFBWUMsaUJBQ01HLEtBQUtDLFVBQVUsaUJBQ2hELElBQUssTUFBTXFSLEtBQXNCRCxFQUM3QkMsRUFBbUIvUCxVQ0RwQixTQUFTZ1EsR0FBOEJqZSxFQUFhVyxLQUFxQlUsR0FDNUUsTUFBTW1aLEVBQWNuWixFQUFLLEdBQ25CNkYsRUFBUyxFQUFBbEYsT0FBQSxZQUFtQmhDLEdBRzVCb1QsRUFEaUJsTSxFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEJTLEdBQzVDcEgsR0FDcEI2SixFQUFnQmxOLEVBQUEscUJBQXlCcUQsRUFBR2UsWUFBYWYsRUFBRzhKLG1CQUVsRWhXLEVBQU92RCxpQkFBaUJ3TSxFQUFBLHFCQUFpQzhNLEdDTnRELFNBQVNpQixHQUFtQmxlLEVBQWFXLEtBQXFCVSxHQUNqRSxNQUFNNkYsRUFBUyxFQUFBbEYsT0FBQSxZQUFtQmhDLEdBQzVCOFgsRUFBS3pXLEVBQUssR0FDVjhjLEVBQVU5YyxFQUFLLEdBTXJCLEdBSnVCNkYsRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCakMsR0FDdkQzRCxZQUFjZ0ssRUFFWGpYLEVBQU9uRSxjQUFjbVYsRUFBQSxRQUN6QjJFLGNBQWdCLEVBQUF6QixrQkFBQSxPQUEwQixDQUNwRCxNQUFNUSxFQUFjMVUsRUFBT25FLGNBQWMwVyxFQUFZekcsTUFFakQ0SSxJQUNzQyxXQUFsQ0EsRUFBWXpCLGtCQUNaalQsRUFBT3ZELGlCQUFpQndNLEVBQUEsNEJBQXdDMkgsR0FFaEV3QyxZQUFXLEtBQ1BwVCxFQUFPdkQsaUJBQWlCd00sRUFBQSw4QkFBMEMySCxLQUNuRSxPLGNDZFosU0FBU3NHLEdBQTZCcGUsRUFBYVcsS0FBcUJVLEdBQzNFLE1BQU02RixFQUFTLEVBQUFsRixPQUFBLFlBQW1CaEMsR0FFNUI4WCxFQURzQnpXLEVBQUssR0FDRjJMLE9BQStCLHVCQUFFd04sWUFDMURrQyxFQUFpQnhWLEVBQU9uRSxjQUFjbVYsRUFBQSxRQUN0Q3lFLEVBQWV6VixFQUFPbkUsY0FBY21OLEVBQUEsUUFDcENtTyxFQUF1Qm5YLEVBQU9uRSxjQUFjZ1gsRUFBQSxPQUEwQmpDLEdBQ3RFd0csRUFBdUJwWCxFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEIsVUFHdEV3RSxFQURjclgsRUFBT25FLGNBQWMrUCxFQUFhRSxNQUNuQndMLGtCQUFrQkYsRUFBcUJHLGdCQUUxRSxHQUFJL0IsRUFBZUcsY0FBZ0IsRUFBQXpCLGtCQUFBLFlBQ00sV0FBakNzQixFQUFlZ0MsZUFBaUQsV0FBbkJILEVBQ3pDSSxHQUFhaEMsRUFBYzJCLEVBQXNCRCxJQUNqRG5YLEVBQU92RCxpQkFBaUJ3TSxFQUFBLHdCQUFvQyxTQUFVMkgsR0FDdEU1USxFQUFPdkQsaUJBQWlCd00sRUFBQSxlQUEyQjJILElBRW5ENVEsRUFBT3ZELGlCQUFpQndNLEVBQUEscUJBQWlDLG9CQUd4QixXQUFqQ3VNLEVBQWVnQyxjQUNmeFgsRUFBT3ZELGlCQUFpQndNLEVBQUEsbUNBQStDMkgsR0FHdkU1USxFQUFPdkQsaUJBQWlCd00sRUFBQSxpQ0FBNkMySCxRQUkxRSxHQUFJNEUsRUFBZUcsY0FBZ0IsRUFBQXpCLGtCQUFBLE9BQTBCLENBQ2hFLE1BQU1RLEVBQWMxVSxFQUFPbkUsY0FBYzBXLEVBQVl6RyxNQUNyRCxJQUFLNEksR0FBaUQsV0FBbENBLEVBQVl6QixrQkFFNUIsT0FHSixHQUFJbUUsRUFBcUJNLGtCQUFvQixFQUd6QyxZQURBMVgsRUFBT3ZELGlCQUFpQndNLEVBQUEscUJBQWlDLGtCQUk3RCxHQUF1QixXQUFuQm9PLEVBQ0lJLEdBQWFoQyxFQUFjMkIsRUFBc0JELEdBQ2pEblgsRUFBT3ZELGlCQUFpQndNLEVBQUEsd0JBQW9DLFNBQVUySCxHQUV0RTVRLEVBQU92RCxpQkFBaUJ3TSxFQUFBLHFCQUFpQyx5QkFHN0QsR0E0Q1osU0FBMEJtTyxFQUFzQkQsR0FDNUMsTUFBTVEsRUFBcUJSLEVBQXFCbEssWUFFaEQsT0FEdUJtSyxFQUFxQm5LLFlBQVl6SSxlQUNsQ0csTUFBS2dILEdBQUtBLEVBQUUzRyxPQUFPMlMsS0EvQzVCQyxDQUFpQlIsRUFBc0JELEdBY0EsV0FBakMzQixFQUFlZ0MsZUFDZSxXQUFqQ2hDLEVBQWVnQyxlQUNmeFgsRUFBT3ZELGlCQUFpQndNLEVBQUEsaUJBQTZCbU8sRUFBcUJ4RyxHQUFJdUcsRUFBcUJ2RyxRQWhCeEMsQ0FDL0QsTUFBTWlILEVBc0J0QixTQUE2QlQsRUFBc0JELEdBQy9DLE1BRU1XLEVBRmlCWCxFQUFxQmxLLFlBQVl6SSxlQUVqQm1QLFFBQU8vTyxJQUFTQSxFQUFLSCxXQUM1RCxHQUFJcVQsRUFBZ0J4ZCxPQUFTLEVBQUcsQ0FDNUIsTUFBTXlkLEVBQWFYLEVBQXFCbkssWUFFeEMsSUFBSStLLEVBQWVuUCxFQUFBLGdCQUFvQmtQLEVBQVlELEVBQWdCLElBRW5FLElBQUssSUFBSXpVLEVBQUksRUFBR0EsRUFBSXlVLEVBQWdCeGQsT0FBUStJLElBQUssQ0FDN0MsTUFBTTRVLEVBQVlwUCxFQUFBLGdCQUFvQmtQLEVBQVlELEVBQWdCelUsSUFDOUQ0VSxFQUFVM2QsT0FBUzBkLEVBQWExZCxTQUNoQzBkLEVBQWVDLEdBSXZCLE9BQU9ELEdBdENzQkUsQ0FBb0JkLEVBQXNCRCxHQUUzRFUsR0FBZ0JBLEVBQWF2ZCxPQUFTLEdBQUs4YyxFQUFxQmxMLEdBQUc4SixrQkFDOUIsV0FBakNSLEVBQWVnQyxjQUVmeFgsRUFBT3ZELGlCQUFpQndNLEVBQUEsNkJBQXlDLFNBQVVrTyxFQUFxQnZHLEdBQUlpSCxHQUdwRzdYLEVBQU92RCxpQkFBaUJ3TSxFQUFBLDBCQUFzQyxTQUFVNE8sRUFBYTdFLFNBR3pGaFQsRUFBT3ZELGlCQUFpQndNLEVBQUEscUJBQWlDLHlCQXNDN0UsU0FBU3dPLEdBQWFoQyxFQUFjMkIsRUFBc0JELEdBQ3RELE1BQU1nQixHQUFjLFFBQTBCZixHQUN4Q2dCLEdBQWMsUUFBMEJqQixHQUU5QyxPQUFRMUIsRUFBYTRDLGtCQUFrQkYsRUFBYUMsRyxjQzNHakQsU0FBU0UsR0FBcUJ4ZixFQUFhVyxLQUFxQlUsR0FDbkUsTUFBTTZGLEVBQVMsRUFBQWxGLE9BQUEsWUFBbUJoQyxHQUM1QnlmLEVBQWFwZSxFQUFLLEdBQ2xCcWUsRUFBZ0J4WSxFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEIwRixHQUMvREUsRUFBYXRlLEVBQUssR0FDbEJ1ZSxFQUFnQjFZLEVBQU9uRSxjQUFjZ1gsRUFBQSxPQUEwQjRGLEdBRXJFelksRUFBT3ZELGlCQUFpQndNLEVBQUEsb0JBQWlDc1AsRUFBWUcsRUFBY3pMLGFBQ25Gak4sRUFBT3ZELGlCQUFpQndNLEVBQUEsb0JBQWlDd1AsRUFBWUQsRUFBY3ZMLGFBRW5GLE1BQU0wTCxFQUFlM1ksRUFBT25FLGNBQWMrUCxFQUFhRSxNQUNqRDhNLEVBQXlCSixFQUFjakIsZUFBakIsV0FDdEJzQixFQUF5QkgsRUFBY25CLGVBQWpCLFdBRXRCdUIsRUFBcUJOLEVBQWNPLGNBQWNILEdBQ2pESSxFQUFxQlIsRUFBY08sY0FBY0YsR0FFakRJLEVBQWVDLEdBQWdCSixHQUMvQkssRUFBZUQsR0FBZ0JGLEdBTXJDLEdBSEFSLEVBQWNkLGtCQUFvQixFQUc5QnVCLElBQWlCRSxFQUNqQm5aLEVBQU92RCxpQkFBaUJ3TSxFQUFBLGlCQUE4QnNQLEdBQ3REdlksRUFBT3ZELGlCQUFpQndNLEVBQUEsaUJBQThCd1AsR0FFdER6WSxFQUFPdkQsaUJBQWlCd00sRUFBQSxxQkFBaUMsZUFBZWdRLEtBQWdCRSxXQUV4RixHQUFJRixFQUFlRSxFQUFjLENBRTdCLE1BQU1uTixFQUFhb04sR0FBb0JILEVBQWNFLEdBQy9DL00sRUFBU3VNLEVBQWFVLFVBQVViLEVBQWNqQixlQUFnQnZMLEdBQ3BFME0sRUFBY1ksWUFBWWxOLEdBRTFCcE0sRUFBT3ZELGlCQUFpQndNLEVBQUEsaUJBQThCc1AsR0FFbERHLEVBQWNhLE9BQ2R2WixFQUFPdkQsaUJBQWlCd00sRUFBQSxzQkFBa0N3UCxJQUUxRHpZLEVBQU92RCxpQkFBaUJ3TSxFQUFBLGNBQTJCd1AsR0FDbkR6WSxFQUFPdkQsaUJBQWlCd00sRUFBQSxxQkFBaUMsR0FBR3NQLGFBQXNCRSxTQUFrQnJNLFVBSXJHLENBQ0gsTUFDTW9OLEVBQW9DLFVBRG5CYixFQUFhckIsa0JBQWtCb0IsRUFBY25CLGdCQUk5RHZMLEVBQWFvTixHQUFvQkQsRUFBY0YsR0FDL0NRLEVBQVMsRUFBbUJmLEVBQWNuQixlQUFpQm1DLEdBQUEsVUFDM0R0TixFQUFTdU0sRUFBYVUsVUFBVUksRUFBUXpOLEdBQzlDd00sRUFBY2MsWUFBWWxOLEdBQzFCcE0sRUFBT3ZELGlCQUFpQndNLEVBQUEscUJBQWlDLEdBQUd3UCxhQUFzQkYsU0FBa0JuTSxLQUVwR3BNLEVBQU92RCxpQkFBaUJ3TSxFQUFBLGlCQUE4QndQLEdBRWxERCxFQUFjZSxPQUNkdlosRUFBT3ZELGlCQUFpQndNLEVBQUEsc0JBQWtDc1AsR0FHMUR2WSxFQUFPdkQsaUJBQWlCd00sRUFBQSxjQUEyQnNQLEdBTS9ELE1BQU03RCxFQUFjMVUsRUFBT25FLGNBQWMwVyxFQUFZekcsTUFDakQ0SSxHQUFpRCxXQUFsQ0EsRUFBWXpCLG1CQUMzQkcsWUFBVyxLQUNQcFQsRUFBT3ZELGlCQUFpQndNLEVBQUEsOEJBQTBDc1AsS0FFbkUsTUFJWCxTQUFTYSxHQUFvQk8sRUFBWUMsR0FDckMsT0FBT0QsRUFBYUMsRUFHeEIsU0FBU1YsR0FBZ0JXLEdBQ3JCLE9BQU9BLEVBQVFDLEtBQWFBLEtBR2hDLFNBQVNBLEtBQ0wsT0FBT25RLEtBQUtDLE1BQXNCLEVBQWhCRCxLQUFLMEksVSxjQzlGM0IsTUFBUXZYLE9BQU0sSUFBSyxFQUFRLEtBS3BCLFNBQVNpZixHQUE4QmpoQixFQUFhVyxLQUFxQlUsR0FDNUUsTUFBTTZGLEVBQVMsR0FBTzFHLFlBQVlSLEdBQzVCd2EsRUFBY25aLEVBQUssR0FDbkI2ZixFQUFXN2YsRUFBSyxHQUNoQmdjLEVBQU9oYyxFQUFLLEdBRUs2RixFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEJTLEdBQ3ZEMkcsWUFBWTlELEVBQUs3YixPQUFTLEdBQ3pDLE1BQU00ZixFQUFvQmxhLEVBQU83RCxpQkFBaUJnZSxHQUFBLE9BQTZCN0csR0FDL0V0VCxFQUFPdkQsaUJBQWlCd00sRUFBQSxzQkFFRWlSLEVBQWtCRSxtQ0FBbUNqRSxHQUM3RGtFLE1BQUssS0FDbkJyYSxFQUFPdkQsaUJBQWlCd00sRUFBQSxpQkFBNkJxSyxFQUFhMEcsTUNabkUsU0FBU00sR0FBeUJ4aEIsRUFBYVcsS0FBcUJVLEdBQ3ZFLE1BQU02RixFQUFTLEVBQUFsRixPQUFBLFlBQW1CaEMsR0FDNUJ3YSxFQUFjblosRUFBSyxHQUN6QnNHLFFBQVFDLElBQUksb0JBQW9CNFMsR0FDaEMsTUFBTTRDLEVBQWlCbFcsRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCUyxHQUN0RXRULEVBQU92RCxpQkFBaUJ3TSxFQUFBLDBCQUFzQyxRQUFTaU4sR0FDdkVsVyxFQUFPdkQsaUJBQWlCd00sRUFBQSxnQkFBNkJxSyxHQUdqRDRDLElBQ0FBLEVBQWVqSixZQUFZeEksVUFBVyxHQUcxQyxNQUFNaVEsRUFBYzFVLEVBQU9uRSxjQUFjMFcsRUFBWXpHLE1BQ2pENEksR0FDQUEsRUFBWTZGLDBCQUEwQmpILEdDckI5QyxNQUFReFksT0FBTSxJQUFLLEVBQVEsS0FNcEIsU0FBUzBmLEdBQWlCMWhCLEVBQWFXLEtBQXFCVSxHQUMvRCxNQUFNc2dCLEVBQWF0Z0IsRUFBSyxHQUNsQjZGLEVBQVMsR0FBTzFHLFlBQVlSLEdBQzlCa0gsRUFBT3hELFlBQVkrVixFQUFZekcsT0FDL0I5TCxFQUFPM0QsZUFBZWtXLEVBQVl6RyxNQUd0QzlMLEVBQU92RCxpQkFBaUJ3TSxFQUFBLHNCQUd4QixNQUFNdU0sRUFBaUJ4VixFQUFPbkUsY0FBY21WLEVBQUEsUUFFekIsZ0JBQWZ5SixHQUNBakYsRUFBZXZCLG9CQUFvQixFQUFBQyxrQkFBQSxXQUNuQ2xVLEVBQU92RCxpQkFBaUJ3TSxFQUFBLHFCQUFpQyxlQUV6RHVNLEVBQWV2QixvQkFBb0IsRUFBQUMsa0JBQUEsYUFDbkNsVSxFQUFPdkQsaUJBQWlCd00sRUFBQSxxQkFBaUMsWUNmMUQsU0FBU3lSLEdBQTRCNWhCLEVBQWFXLEtBQXFCVSxHQUMxRSxNQUFNNkYsRUFBUyxFQUFBbEYsT0FBQSxZQUFtQmhDLEdBRTVCcWMsRUFBVWhiLEVBQUssR0FDZndnQixFQUFhM2EsRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCc0MsR0FFNUQ5SCxFQURvQnJOLEVBQU9uRSxjQUFjaVYsRUFBa0JoRixNQUNsQzRCLFFBQVFpTixFQUFXQyxjQUM5Q3ZOLEdBQ0FBLEVBQUtpSSxZQUFZdFYsRUFBUW1WLEcsNEJDUjFCLFNBQVMwRixHQUEyQi9oQixFQUFhVyxLQUFxQlUsR0FDekUsTUFBTTZGLEVBQVMsRUFBQWxGLE9BQUEsWUFBbUJoQyxHQUdsQyxJQUFJZ2lCLEVBQWdCLEVBQ2hCQyxFQUFnQixFQUVwQixNQUFNeEMsRUFBYXBlLEVBQUssR0FDbEJxZSxFQUFnQnhZLEVBQU9uRSxjQUFjZ1gsRUFBQSxPQUEwQjBGLEdBQy9EeUMsRUFBZXhDLEVBQWN2TCxZQUNuQyxJQUFJd0wsRUFBYXRlLEVBQUssR0FDbEJ1ZSxFQUFnQjFZLEVBQU9uRSxjQUFjZ1gsRUFBQSxPQUEwQjRGLEdBQ25FLE1BQU13QyxFQUFldkMsRUFBY3pMLFlBRW5Dak4sRUFBT3ZELGlCQUFpQndNLEVBQUEsb0JBQWlDc1AsRUFBWUcsRUFBY3pMLGFBQ25Gak4sRUFBT3ZELGlCQUFpQndNLEVBQUEsb0JBQWlDd1AsRUFBWUQsRUFBY3ZMLGFBRW5GLE1BQU0yTCxFQUF5QkosRUFBY2pCLGVBQWpCLFdBQ3RCdUIsRUFBcUJOLEVBQWNPLGNBQWNILEdBRXZEa0MsR0FBaUIsR0FBZ0JoQyxHQUNqQ2lDLEdBQWlCLEdBQWdCckMsRUFBY21CLE9BRS9DLE1BQU1sQixFQUFlM1ksRUFBT25FLGNBQWMrUCxFQUFhRSxNQUNsQzlMLEVBQU9uRSxjQUFjbU4sRUFBQSxRQUNYa1MsVUFDM0IsSUFBSS9WLEdBQUdtRSxLQUFLMlIsRUFBYTVXLEVBQUc0VyxFQUFhM1csRUFBRzJXLEVBQWExVyxHQUN6RCxJQUFJWSxHQUFHbUUsS0FBSzBSLEVBQWEzVyxFQUFHMlcsRUFBYTFXLEVBQUcwVyxFQUFhelcsTUFHekR3VyxHQUFpQixHQUdyQixNQUFNSSxFQUE0Qm5iLEVBQU83RCxpQkFBaUJpZixHQUFBLFFBRXBEQyxFQUFtQixJQUFJbFcsR0FBR21FLEtBQUtrUCxFQUFjdkwsWUFBWTVJLEVBQzNEbVUsRUFBY3ZMLFlBQVkzSSxFQUFJLEVBQUdrVSxFQUFjdkwsWUFBWTFJLEdBRXpEK1csRUFBbUIsSUFBSW5XLEdBQUdtRSxLQUFLb1AsRUFBY3pMLFlBQVk1SSxFQUMzRHFVLEVBQWN6TCxZQUFZM0ksRUFBSSxFQUFHb1UsRUFBY3pMLFlBQVkxSSxHQUcvRGlVLEVBQWNkLGtCQUFvQixFQUVsQzFYLEVBQU92RCxpQkFBaUJ3TSxFQUFBLGlCQUE4QnNQLEdBQ3RENEMsRUFBMEJJLGlCQUFpQixnQkFBaUJGLEVBQWtCQyxHQUN6RWpCLE1BQUssS0FFRixHQUFJUyxFQUFnQkMsRUFBZSxDQUcvQixNQUFNckcsRUFBYzFVLEVBQU9uRSxjQUFjMFcsRUFBWXpHLE1BQ3JELEdBQUk0SSxFQUFhLENBRWIsTUFBTThHLEVBQW9COUMsRUFBY3pMLFlBQVl6SSxlQUM5Q2lYLEVBQWtCLENBQUNoRCxHQUV6QixJQUFLLE1BQU05RixLQUFlK0IsRUFBWWxDLGFBQWMsQ0FDaEQsTUFBTUksRUFBbUI1UyxFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEJGLElBQ25FQyxFQUFpQjJHLFFBQVVpQyxFQUFrQjdXLE1BQUtnSCxHQUFLQSxFQUFFM0csT0FBTzROLEVBQWlCM0YsZ0JBQ2xGd08sRUFBZ0JoYyxLQUFLa1QsR0FJN0I4RixFQUFhZ0QsRUFBZ0I5UixLQUFLeUksTUFBTXpJLEtBQUswSSxTQUFXb0osRUFBZ0JuaEIsU0FDeEVvZSxFQUFnQjFZLEVBQU9uRSxjQUFjZ1gsRUFBQSxPQUEwQjRGLEdBS25FLE1BQU16TSxFQUFpQzhPLEVBQWVDLEVBQ2hEM08sRUFBU3VNLEVBQWFVLFVBQVViLEVBQWNqQixlQUFnQnZMLEdBQ3BFME0sRUFBY1ksWUFBWWxOLEdBR3RCc00sRUFBY2EsT0FDZHZaLEVBQU92RCxpQkFBaUJ3TSxFQUFBLHNCQUFrQ3dQLElBRTFEelksRUFBT3ZELGlCQUFpQndNLEVBQUEsY0FBMkJ3UCxHQUNuRHpZLEVBQU92RCxpQkFBaUJ3TSxFQUFBLHFCQUFpQyxHQUFHc1AsYUFBc0JFLFNBQWtCck0sV0FNeEdwTSxFQUFPdkQsaUJBQWlCd00sRUFBQSwwQkFBc0MsUUFBU3lQLEdBRzNFLE1BQU1oRSxFQUFjMVUsRUFBT25FLGNBQWMwVyxFQUFZekcsTUFDakQ0SSxHQUFpRCxXQUFsQ0EsRUFBWXpCLG1CQUMzQkcsWUFBVyxLQUNQcFQsRUFBT3ZELGlCQUFpQndNLEVBQUEsOEJBQTBDc1AsS0FFbkUsUUFTbkIsU0FBUyxHQUFnQnNCLEdBQ3JCLE9BQU9BLEVBQVEsS0FBYSxLQUdoQyxTQUFTLEtBQ0wsT0FBT2xRLEtBQUtDLE1BQXNCLEVBQWhCRCxLQUFLMEksVUNuSDNCLE1BQVF2WCxPQUFNLElBQUssRUFBUSxLQU9wQixTQUFTNGdCLEdBQW1CNWlCLEVBQWFXLEtBQXFCVSxHQUNqRSxNQUFNNkYsRUFBUyxHQUFPMUcsWUFBWVIsR0FHbEMsR0FEdUJrSCxFQUFPbkUsY0FBY21WLEVBQUEsUUFDekIyRSxjQUFnQixFQUFBekIsa0JBQUEsUUFFTyxXQURsQmxVLEVBQU9uRSxjQUFjMFcsRUFBWXpHLE1BQ3JDbUgsa0JBRVosWUFEQWpULEVBQU92RCxpQkFBaUJ3TSxFQUFBLHFCQUFpQyxtQ0FLakUsTUFBTXFLLEVBQWNuWixFQUFLLEdBQ25Cc2YsRUFBU3RmLEVBQUssR0FFZCtiLEVBQWlCbFcsRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCUyxHQUVsRTRDLElBQ0FBLEVBQWVxQixlQUFpQmtDLEVBRWhDelosRUFBT3ZELGlCQUFpQndNLEVBQUEscUJBQWlDLEdBQUdxSyxZQUFzQm1HLE1DdEJuRixTQUFTa0MsR0FBNkI3aUIsRUFBYVcsS0FBcUJVLEdBQzNFLE1BQU02RixFQUFTLEVBQUFsRixPQUFBLFlBQW1CaEMsR0FDNUI4aUIsRUFBbUJ6aEIsRUFBSyxHQUN4QjJOLEVBQW1CM04sRUFBSyxHQUN4QjROLEVBQW9CNU4sRUFBSyxHQUd6QjBoQixFQURlN2IsRUFBT25FLGNBQWNtTixFQUFBLFFBQ1I4UyxnQkFBZ0JGLEdBQzNCNWIsRUFBTzdELGlCQUFpQmdlLEdBQUEsT0FBNkIsVUFFN0Q0QixzQkFBc0JGLEdBQ2hDeEIsTUFBSyxLQUNGcmEsRUFBT3ZELGlCQUFpQndNLEVBQUEsZUFBMkJuQixFQUFrQkMsTUNqQmpGLE1BQVFqTixPQUFNLElBQUssRUFBUSxLQUdwQixTQUFTa2hCLEdBQStCbGpCLEVBQWFXLEtBQXFCVSxHQUM3RSxNQUFNNkYsRUFBUyxHQUFPMUcsWUFBWVIsR0FFNUI4TyxFQUFXek4sRUFBSyxHQUNoQitLLEVBQU1DLEdBQUdDLFlBQVlDLGlCQUNyQjRXLEVBQXVCL1csRUFBSXVILE9BQU92TyxJQUFJLFVBQ3RDcVksRUFBWXJSLEVBQUlNLEtBQUs4TCxXQUFXLGdCQUNoQzRLLEVBQWVELEVBQXFCdlAsU0FBUytKLGNBQ25ERixFQUFVSSxTQUFTdUYsR0FFbkIsTUFDTXJVLEVBRFc3SCxFQUFPbkUsY0FBY21OLEVBQUEsUUFDZG1ULGVBQWV2VSxHQUN2Q3NVLEVBQWF4RixpQkFBaUI3TyxFQUFPRyxlQ2Z6QyxNQUFRbE4sT0FBTSxJQUFLLEVBQVEsS0FNcEIsU0FBU3NoQixHQUFrQ3RqQixFQUFhVyxLQUFxQlUsR0FDaEYsTUFBTTZGLEVBQVMsR0FBTzFHLFlBQVlSLEdBRTVCdWpCLEVBQW9CbGlCLEVBQUssR0FFekJpZCxFQUF1QnBYLEVBQU9uRSxjQUFjZ1gsRUFBQSxPQUEwQixVQUN0RXNFLEVBQXVCblgsRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCd0osR0FFdEVDLEVBQTBCdGMsRUFBTzdELGlCQUFpQmdlLEdBQUEsT0FBNkIsVUFHL0V0QyxFQVFWLFNBQTZCVCxFQUFzQkQsR0FDL0MsTUFBTTNTLEVBQWlCMlMsRUFBcUJsSyxZQUFZekksZUFDbER1VCxFQUFhWCxFQUFxQm5LLFlBSXhDLEdBRm1CekksRUFBZUcsTUFBS2dILEdBQUtBLEVBQUUzRyxPQUFPK1MsS0FJakQsTUFBTyxDQUFDQSxHQUNMLENBQ0gsTUFBTUQsRUFBa0J0VCxFQUFlbVAsUUFBTy9PLElBQVNBLEVBQUtILFdBQzVELEdBQUlxVCxFQUFnQnhkLE9BQVMsRUFBRyxDQUU1QixJQUFJMGQsRUFBZW5QLEVBQUEsZ0JBQW9Ca1AsRUFBWUQsRUFBZ0IsSUFFbkUsSUFBSyxJQUFJelUsRUFBSSxFQUFHQSxFQUFJeVUsRUFBZ0J4ZCxPQUFRK0ksSUFBSyxDQUM3QyxNQUFNNFUsRUFBWXBQLEVBQUEsZ0JBQW9Ca1AsRUFBWUQsRUFBZ0J6VSxNQUM3RDJVLEdBQWlCQyxHQUFhQSxFQUFVM2QsT0FBUzBkLEVBQWExZCxVQUMvRDBkLEVBQWVDLEdBSXZCLE9BQU9ELEVBRVgsUUFoQ2lCLENBQW9CWixFQUFzQkQsR0FDM0RVLEdBQ0F5RSxFQUF3QmxDLG1DQUFtQ3ZDLEdBQWN3QyxNQUFLLEtBQzFFcmEsRUFBT3ZELGlCQUFpQndNLEVBQUEsaUJBQTZCb1QsTUNwQmpFLE1BQVF2aEIsT0FBTSxJQUFLLEVBQVEsS0FPcEIsU0FBU3loQixHQUFxQnpqQixFQUFhVyxLQUFxQlUsR0FDbkUsTUFBTTZGLEVBQVMsR0FBTzFHLFlBQVlSLEdBQzVCMGpCLEVBQWlCeGMsRUFBT25FLGNBQWNtVixFQUFBLFFBQ3RDcUwsRUFBb0JsaUIsRUFBSyxHQUV6QnNpQixFQUFhemMsRUFBT25FLGNBQWMwUSxFQUFXVCxNQUU3Q3NMLEVBQXVCcFgsRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCLFVBQ3RFc0UsRUFBdUJuWCxFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEJ3SixHQUN0RUssRUFBZXZGLEVBQXFCdUYsYUFDeEJELEVBQVdFLGtCQUFrQkQsR0FFL0NGLEVBQWV2SSxvQkFBb0IsRUFBQUMsa0JBQUEsVUFFbkNsVSxFQUFPdkQsaUJBQWlCd00sRUFBQSxvQkFBaUMsU0FBVWtPLEVBQXFCbEssYUFDeEZqTixFQUFPdkQsaUJBQWlCd00sRUFBQSxvQkFBaUNvVCxFQUFtQmpGLEVBQXFCbkssYUFDakdqTixFQUFPdkQsaUJBQWlCd00sRUFBQSx1QkFFeEIsTUFBTTJULEVBQWNILEVBQVdsTyxxQkFDL0J2TyxFQUFPdkQsaUJBQWlCd00sRUFBQSx3QkFBb0MsQ0FDeERtRSxPQUFRc1AsRUFDUkcsS0FBTUQsSUN4QlAsU0FBU0UsR0FBNEJoa0IsRUFBYVcsS0FBcUJVLEdBQzFFLE1BQU02RixFQUFTLEVBQUFsRixPQUFBLFlBQW1CaEMsR0FDNUIyakIsRUFBYXpjLEVBQU9uRSxjQUFjMFEsRUFBV1QsTUFDN0NpUixFQUFXTixFQUFXTywwQkFDNUIsR0FBSUQsRUFBVSxDQVFWLEdBTklBLEVBQVN2TyxRQUNUeE8sRUFBT3ZELGlCQUFpQndNLEVBQUEsaUNBRXhCakosRUFBT3ZELGlCQUFpQndNLEVBQUEsaUNBR3hCOFQsRUFBUzVkLGNBQ1QsSUFBSyxNQUFNSSxLQUFnQndkLEVBQVM1ZCxjQUNoQ2EsRUFBT3ZELGlCQUFpQjhDLEVBQWE5RSxRQUFTOEUsRUFBYXBGLE1BSW5FNkYsRUFBT3ZELGlCQUFpQndNLEVBQUEsd0JBQW9DLENBQ3hEbUUsT0FBUXFQLEVBQVd6UCxZQUNuQjZQLEtBQU1FLFNBR1YvYyxFQUFPdkQsaUJBQWlCd00sRUFBQSxnQkN2QnpCLFNBQVNnVSxHQUE0Qm5rQixFQUFhVyxLQUFxQlUsR0FDMUUsTUFBTTZGLEVBQVMsRUFBQWxGLE9BQUEsWUFBbUJoQyxHQUM1QndWLEVBQWNuVSxFQUFLLEdBQ25Cc2lCLEVBQWF6YyxFQUFPbkUsY0FBYzBRLEVBQVdULE1BQzdDb1IsRUFBaUJULEVBQVdVLGFBQWE3TyxHQUUvQ3RPLEVBQU92RCxpQkFBaUJ3TSxFQUFBLDBCQUV4QixNQUFNbVUsRUFBVyxDQUNiQyxNQUFPLE1BQ1BDLEtBQU1KLEVBQWVJLEtBQ3JCQyxZQUFhLFdBR2pCdmQsRUFBT3ZELGlCQUFpQndNLEVBQUEsd0JBQW9DLENBQ3hEbUUsT0FBUXFQLEVBQVd6UCxZQUNuQjZQLEtBQU1PLElBR05GLEVBQWVNLEtBQ2Z4ZCxFQUFPdkQsaUJBQWlCd00sRUFBQSw4QkFBMENpVSxFQUFlTSxNQUc3RU4sRUFBZU8sTUFDZnpkLEVBQU92RCxpQkFBaUJ3TSxFQUFBLHNCQUFrQ2lVLEVBQWVPLE1DeEI5RSxTQUFTQyxHQUF3QjVrQixFQUFhVyxLQUFxQlUsR0FDdEUsTUFBTTZGLEVBQVMsRUFBQWxGLE9BQUEsWUFBbUJoQyxHQUM1QjJqQixFQUFhemMsRUFBT25FLGNBQWMwUSxFQUFXVCxNQUM3QzZSLEVBQVV4akIsRUFBSyxHQUNyQnNpQixFQUFXbUIsU0FBU0QsR0FDcEIsTUFBTUUsRUFBY3BCLEVBQVdsTyxxQkFFL0IsR0FBSXNQLEdBU0EsR0FSQTdkLEVBQU92RCxpQkFBaUJ3TSxFQUFBLGlDQUN4QmpKLEVBQU92RCxpQkFBaUJ3TSxFQUFBLHdCQUFvQyxDQUN4RG1FLE9BQVFxUCxFQUFXelAsWUFDbkI2UCxLQUFNZ0IsSUFFVnBkLFFBQVFDLElBQUksU0FDWkQsUUFBUUMsSUFBSW1kLEdBRVJBLEVBQVkxZSxjQUNaLElBQUssTUFBTUksS0FBZ0JzZSxFQUFZMWUsY0FDbkNzQixRQUFRQyxJQUFJLGtCQUFrQm5CLEVBQWE5RSxNQUMzQ3VGLEVBQU92RCxpQkFBaUI4QyxFQUFhOUUsUUFBUzhFLEVBQWFwRixXQUluRTZGLEVBQU92RCxpQkFBaUJ3TSxFQUFBLGdCQzNCaEMsTUFBUW5PLE9BQU0sSUFBSyxFQUFRLEtBS3BCLFNBQVNnakIsR0FBbUJobEIsRUFBYVcsS0FBcUJVLEdBQ2pFLE1BQU02RixFQUFTLEdBQU8xRyxZQUFZUixHQUNYa0gsRUFBT25FLGNBQWNtVixFQUFBLFFBQzdCaUQsb0JBQW9CLEVBQUFDLGtCQUFBLGFBR25DbFUsRUFBT3ZELGlCQUFpQndNLEVBQUEsdUJDWDVCLE1BQVFuTyxPQUFNLElBQUssRUFBUSxLQU1wQixTQUFTaWpCLEdBQW9DamxCLEVBQWFXLEtBQXFCVSxHQUNsRixNQUFNNkYsRUFBUyxHQUFPMUcsWUFBWVIsR0FFNUJ1akIsRUFBb0JsaUIsRUFBSyxHQUV6QmlkLEVBQXVCcFgsRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCLFVBQ3RFc0UsRUFBdUJuWCxFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEJ3SixHQUV0RUMsRUFBMEJ0YyxFQUFPN0QsaUJBQWlCZ2UsR0FBQSxPQUE2QixVQUcvRXRDLEVBVVYsU0FBNkJULEVBQXNCRCxHQUMvQyxNQUFNM1MsRUFBaUIyUyxFQUFxQmxLLFlBQVl6SSxlQUNsRHVULEVBQWFYLEVBQXFCbkssWUFJeEMsR0FGbUJ6SSxFQUFlRyxNQUFLZ0gsR0FBS0EsRUFBRTNHLE9BQU8rUyxLQUlqRCxNQUFPLENBQUNBLEdBQ0wsQ0FDSCxNQUFNRCxFQUFrQnRULEVBQWVtUCxRQUFPL08sSUFBU0EsRUFBS0gsV0FDNUQsR0FBSXFULEVBQWdCeGQsT0FBUyxFQUFHLENBRTVCLElBQUkwZCxFQUFlblAsRUFBQSxnQkFBb0JrUCxFQUFZRCxFQUFnQixJQUVuRSxJQUFLLElBQUl6VSxFQUFJLEVBQUdBLEVBQUl5VSxFQUFnQnhkLE9BQVErSSxJQUFLLENBQzdDLE1BQU00VSxFQUFZcFAsRUFBQSxnQkFBb0JrUCxFQUFZRCxFQUFnQnpVLElBQzlENFUsRUFBVTNkLE9BQVMwZCxFQUFhMWQsU0FDaEMwZCxFQUFlQyxHQUl2QixPQUFPRCxFQUVYLFFBbENpQixDQUFvQlosRUFBc0JELEdBQzNEVSxHQUNBeUUsRUFBd0JsQyxtQ0FBbUN2QyxHQUFjd0MsTUFBSyxLQUMxRXJhLEVBQU92RCxpQkFBaUJ3TSxFQUFBLGVBQTJCb1QsR0FDbkRyYyxFQUFPdkQsaUJBQWlCd00sRUFBQSxpQkFBNkIsU0FBVW9ULE1DckIzRSxNQUFRdmhCLE9BQU0sSUFBSyxFQUFRLEtBR3BCLFNBQVNrakIsR0FBNEJsbEIsRUFBYVcsS0FBcUJVLEdBQzFFLE1BQU02RixFQUFTLEdBQU8xRyxZQUFZUixHQUM1Qm1sQixFQUFZOWpCLEVBQUssR0FDQTZGLEVBQU9uRSxjQUFjbVYsRUFBQSxRQUM3QndHLGNBQWdCeUcsRUNINUIsU0FBU0MsR0FBZ0NwbEIsRUFBYVcsS0FBcUJVLEdBQzlFLE1BQU02RixFQUFTLEVBQUFsRixPQUFBLFlBQW1CaEMsR0FDNUIwa0IsRUFBT3JqQixFQUFLLEdBR1pna0IsRUFGaUJuZSxFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEIsVUFFbkNrRyxjQUFjeUUsRUFBSzNELE9BR2hEdUUsRUFBTyxLQUNQQyxFQUFPLEtBSVAzUCxFQUFVeVAsR0FGRUMsRUFBT0MsRUFJekJyZSxFQUFPdkQsaUJBQWlCd00sRUFBQSw4QkFBMEN1VSxFQUFLM0QsTUFBT3NFLEVBQWFDLEVBQU1DLEVBQU0zUCxHQUVuR0EsR0FDQWpPLFFBQVFDLElBQUksYUFBYThjLEVBQUszRCxnQkFBZ0JzRSxRQUFrQkMsS0FBUUMsS0FDeEVyZSxFQUFPdkQsaUJBQWlCd00sRUFBQSxzQkFBa0N1VSxFQUFLOU8sUUFBUStPLFFBR3ZFaGQsUUFBUUMsSUFBSSxVQUFVOGMsRUFBSzNELGdCQUFnQnNFLFFBQWtCQyxLQUFRQyxLQUNyRXJlLEVBQU92RCxpQkFBaUJ3TSxFQUFBLHNCQUFrQ3VVLEVBQUtjLFFBQVFiLE9BTS9FLFNBQVMsS0FDTCxPQUFPOVQsS0FBS0MsTUFBc0IsRUFBaEJELEtBQUswSSxVQ2xDM0IsTUFBUXZYLE9BQU0sSUFBSyxFQUFRLEtBSXBCLFNBQVN5akIsR0FBNEJ6bEIsRUFBYVcsS0FBcUJVLEdBQzFFLE1BQU02RixFQUFTLEdBQU8xRyxZQUFZUixHQUM1QjBsQixFQUFpQnhlLEVBQU9uRSxjQUFjd1QsRUFBZXZELE1BRTNEOUwsRUFBT3ZELGlCQUFpQndNLEVBQUEsMEJBQXNDdVYsRUFBZWxQLGVBQWdCa1AsRUFBZWpQLGdCQ1JoSCxNQUFRelUsT0FBTSxJQUFLLEVBQVEsS0FJcEIsU0FBUzJqQixHQUE0QjNsQixFQUFhVyxLQUFxQlUsR0FDMUUsTUFBTTZGLEVBQVMsR0FBTzFHLFlBQVlSLEdBQzVCMGxCLEVBQWlCeGUsRUFBT25FLGNBQWN3VCxFQUFldkQsTUFFckQwRCxFQUFXclYsRUFBSyxHQUNoQjRWLEVBQVc1VixFQUFLLEdBRXRCcWtCLEVBQWVFLHFCQUFxQmxQLEVBQVVPLEdBRTlDL1AsRUFBT3ZELGlCQUFpQndNLEVBQUEsMEJBQXNDdVYsRUFBZWxQLGVBQWdCa1AsRUFBZWpQLGdCLGNDSnpHLFNBQVNvUCxHQUF1QjdsQixFQUFhVyxLQUFxQlUsR0FDckUsTUFBTTZGLEVBQVMsRUFBQWxGLE9BQUEsWUFBbUJoQyxHQUM1QjBsQixFQUFpQnhlLEVBQU9uRSxjQUFjd1QsRUFBZXZELE1BQ3JENkUsRUFBU3hXLEVBQUssR0FDZHlrQixFQUFlemtCLEVBQUssR0FFcEIwa0IsRUFBa0JMLEVBQWVsUCxlQUFlbUMsTUFBSzlCLEdBQVFBLEVBQUtpQixLQUFPRCxJQUUvRSxHQUFJa08sRUFDNkJMLEVBQWVNLHlCQUF5QkYsRUFBY0MsSUFHbEQsV0FBekJBLEVBQWdCek8sTUFDaEJwUSxFQUFPdkQsaUJBQWlCd00sRUFBQSxlQUEyQixTQUFVNFYsRUFBZ0JqTyxRQUdsRixDQUNILE1BQU1tTyxFQUFhL2UsRUFBT25FLGNBQWM2VSxFQUFXNUUsTUFDN0MwUyxFQUFpQnhlLEVBQU9uRSxjQUFjd1QsRUFBZXZELE1BQ3JEa1QsRUFBZ0IsSUFBSUMsR0FBQSxFQUFjRixFQUFXRyxZQUFZdk8sSUFFbEM2TixFQUFlTSx5QkFBeUJGLEVBQWNJLElBR3BELFdBQXZCQSxFQUFjNU8sTUFDZHBRLEVBQU92RCxpQkFBaUJ3TSxFQUFBLGVBQTJCLFNBQVUrVixFQUFjcE8sSUFRdkY1USxFQUFPdkQsaUJBQWlCd00sRUFBQSx3QkFBb0N1VixFQUFlalAsZ0JBQzNFdlAsRUFBT3ZELGlCQUFpQndNLEVBQUEsMEJBQXNDdVYsRUFBZWxQLGVBQWdCa1AsRUFBZWpQLGdCQzNDaEgsTUFBUXpVLE9BQU0sSUFBSyxFQUFRLEtBTXBCLFNBQVNxa0IsR0FBMEJybUIsRUFBYVcsS0FBcUJVLEdBQ3hFLE1BQU13VyxFQUFTeFcsRUFBSyxHQUNkNkYsRUFBUyxHQUFPMUcsWUFBWVIsR0FDNUJpbUIsRUFBYS9lLEVBQU9uRSxjQUFjNlUsRUFBVzVFLE1BQzdDMFMsRUFBaUJ4ZSxFQUFPbkUsY0FBY3dULEVBQWV2RCxNQUNyRGtULEVBQWdCLElBQUlDLEdBQUEsRUFBY0YsRUFBV0csWUFBWXZPLElBQy9ENk4sRUFBZVksaUJBQWlCSixHQ1pwQyxNQUFRbGtCLE9BQU0sSUFBSyxFQUFRLEtBTXBCLFNBQVN1a0IsR0FBdUJ2bUIsRUFBYVcsS0FBcUJVLEdBQ3JFLE1BQU02RixFQUFTLEdBQU8xRyxZQUFZUixHQUM1QjBsQixFQUFpQnhlLEVBQU9uRSxjQUFjd1QsRUFBZXZELE1BQ3JEMEosRUFBaUJ4VixFQUFPbkUsY0FBY21WLEVBQUEsUUFFdENzTyxFQUFtQm5sQixFQUFLLEdBQ3hCb2xCLEVBQWVmLEVBQWVnQixnQkFBZ0JGLEdBRWhEQyxHQUMwQixXQUF0QkEsRUFBYW5QLE9BQ3dCLFdBQWpDb0YsRUFBZWdDLGVBQ2Z4WCxFQUFPdkQsaUJBQWlCd00sRUFBQSxlQUEyQixTQUFVc1csRUFBYTNPLElBQzFFNEUsRUFBZWdDLGNBQWdCLFNBQy9CeFgsRUFBT3ZELGlCQUFpQndNLEVBQUEsZ0NBQTRDcVcsR0FBa0IsS0FHdEY5SixFQUFlZ0MsY0FBZ0IsV0FDL0J4WCxFQUFPdkQsaUJBQWlCd00sRUFBQSxnQ0FBNENxVyxHQUFrQixLQ3ZCdEcsTUFBUXhrQixPQUFNLElBQUssRUFBUSxLQXlDcEIsTUFBTTJrQixXQUFtQixHQUM1QixtQkFBbUJobkIsR0FJZixPQUhLLEdBQU9HLFlBQVlILEtBQ3BCLEdBQU9HLFlBQVlILEdBQU8sSUFBSWduQixHQUFXaG5CLElBRXRDLEdBQU9HLFlBQVlILEdBRzlCLGlCQUFtQixNQUFPLFVBQzFCLGtCQUFvQixNQUFPLGdCQUMzQixxQkFBdUIsT0FBT2duQixHQUFXM1QsS0FBTyxVQUVoRCxRQUFRNFQsR0FDSmhuQixLQUFLK0QsaUJBQWlCZ2pCLEdBQVdFLFFBQVNELEdBRzlDLGlCQUFpQmptQixLQUFxQlUsR0FDbEMwUixNQUFNcFAsaUJBQWlCaEQsS0FBcUJVLEdBR2hELHVCQUNJMFIsTUFBTXpTLHVCQUNOVixLQUFLYyxnQkFBZ0JpbUIsR0FBV0UsUUFBUzVPLEdBQ3pDclksS0FBS2MsZ0JBQWdCeVAsRUFBQSxlQUEyQmtJLEdBQ2hEelksS0FBS2MsZ0JBQWdCeVAsRUFBQSxnQkFBNEJoRSxHQUNqRHZNLEtBQUtjLGdCQUFnQnlQLEVBQUEsZUFBMkI4SyxHQUNoRHJiLEtBQUtjLGdCQUFnQnlQLEVBQUEsbUJBQStCMEwsR0FDcERqYyxLQUFLYyxnQkFBZ0J5UCxFQUFBLG9CQUFnQzhMLEdBQ3JEcmMsS0FBS2MsZ0JBQWdCeVAsRUFBQSxrQkFBOEJnTSxHQUNuRHZjLEtBQUtjLGdCQUFnQnlQLEVBQUEsYUFBeUJpTSxHQUM5Q3hjLEtBQUtjLGdCQUFnQnlQLEVBQUEsZ0JBQTRCc00sR0FDakQ3YyxLQUFLYyxnQkFBZ0J5UCxFQUFBLDBCQUFzQzJNLEdBQzNEbGQsS0FBS2MsZ0JBQWdCeVAsRUFBQSw4QkFBMEN5UixJQUUvRGhpQixLQUFLYyxnQkFBZ0J5UCxFQUFBLHFCQUFpQ21OLElBQ3REMWQsS0FBS2MsZ0JBQWdCeVAsRUFBQSxxQkFBaUMyTixJQUN0RGxlLEtBQUtjLGdCQUFnQnlQLEVBQUEsNEJBQXdDOE4sSUFDN0RyZSxLQUFLYyxnQkFBZ0J5UCxFQUFBLGdCQUE0QitOLElBQ2pEdGUsS0FBS2MsZ0JBQWdCeVAsRUFBQSx3QkFBb0NpTyxJQUV6RHhlLEtBQUtjLGdCQUFnQnlQLEVBQUEsaUJBQTZCcVAsSUFDbEQ1ZixLQUFLYyxnQkFBZ0J5UCxFQUFBLHdCQUFvQzRSLElBQ3pEbmlCLEtBQUtjLGdCQUFnQnlQLEVBQUEsNkJBQXlDOFEsSUFDOURyaEIsS0FBS2MsZ0JBQWdCeVAsRUFBQSxtQ0FBK0M4VSxJQUVwRXJsQixLQUFLYyxnQkFBZ0J5UCxFQUFBLHNCQUFrQ3FSLElBQ3ZENWhCLEtBQUtjLGdCQUFnQnlQLEVBQUEsYUFBeUJ1UixJQUM5QzloQixLQUFLYyxnQkFBZ0J5UCxFQUFBLGVBQTJCeVMsSUFDaERoakIsS0FBS2MsZ0JBQWdCeVAsRUFBQSwwQkFBc0MwUyxJQUMzRGpqQixLQUFLYyxnQkFBZ0J5UCxFQUFBLDhCQUEwQytTLElBQy9EdGpCLEtBQUtjLGdCQUFnQnlQLEVBQUEsaUNBQTZDbVQsSUFDbEUxakIsS0FBS2MsZ0JBQWdCeVAsRUFBQSxpQkFBNkJzVCxJQUNsRDdqQixLQUFLYyxnQkFBZ0J5UCxFQUFBLHlCQUFxQzZULElBQzFEcGtCLEtBQUtjLGdCQUFnQnlQLEVBQUEseUJBQXFDZ1UsSUFDMUR2a0IsS0FBS2MsZ0JBQWdCeVAsRUFBQSxzQkFBa0N5VSxJQUN2RGhsQixLQUFLYyxnQkFBZ0J5UCxFQUFBLGVBQTJCNlUsSUFDaERwbEIsS0FBS2MsZ0JBQWdCeVAsRUFBQSwwQkFBc0MrVSxJQUMzRHRsQixLQUFLYyxnQkFBZ0J5UCxFQUFBLDhCQUEwQ2lWLElBRy9EeGxCLEtBQUtjLGdCQUFnQnlQLEVBQUEseUJBQXFDc1YsSUFDMUQ3bEIsS0FBS2MsZ0JBQWdCeVAsRUFBQSx3QkFBb0N3VixJQUN6RC9sQixLQUFLYyxnQkFBZ0J5UCxFQUFBLHFCQUFpQzBWLElBQ3REam1CLEtBQUtjLGdCQUFnQnlQLEVBQUEsd0JBQW9Da1csSUFDekR6bUIsS0FBS2MsZ0JBQWdCeVAsRUFBQSxvQkFBZ0NvVyxPLHVDQ3pHdEQsTUFBTU8sRUFDVCxrQkFBb0IsT0FBTyxFQUMzQix5QkFBMkIsT0FBTyxFQUNsQywwQkFBNEIsT0FBTyxHQUloQyxNQUFNQyxFQUFvQixDQUM3QixDQUFFQyxLQUFNRixFQUFrQkUsTUFDMUIsQ0FBRUMsWUFBYUgsRUFBa0JHLGFBQ2pDLENBQUVDLGFBQWNKLEVBQWtCSSxnQiw2RENOL0IsTUFBTUMsVUFBc0IsSUFDL0IsS0FBS0MsR0FJRCxPQUhlQSxFQUFLQyxXQUFXamlCLElBQUksVUFBVSxHQUFPLEdBQzdDekIsaUJBQWlCLHFCQUVqQixlLHFEQ05SLE1BQU0yakIsVUFBMEIsSUFDbkMsS0FBS0YsR0FFRCxPQURBQSxFQUFLQyxXQUFXL1gsSUFBSSxTQUFVLFNBQVU4WCxFQUFLN1MsS0FBS3VELElBQUksR0FDL0MsZSw4RENEUixNQUFNeVAsVUFBNEIsSUFDckMsS0FBS0gsR0FDRCxNQUFNbGdCLEVBQVNrZ0IsRUFBS0MsV0FBV2ppQixJQUFJLFVBQVUsR0FBTyxHQUM5Q29WLEVBQWM0TSxFQUFLQyxXQUFXamlCLElBQUksY0FBZWdpQixFQUFLN1MsS0FBS3VELElBQUksR0FHckUsT0FGdUI1USxFQUFPbkUsY0FBYyxTQUEwQnlYLEdBRW5Eb0UsaUJBQW1CLEVBQzNCLFlBR0EsZSw4RENYWixNQUFNNEksVUFBNkIsSUFDdEMsS0FBS0osR0FDRCxNQUFNbGdCLEVBQVNrZ0IsRUFBS0MsV0FBV2ppQixJQUFJLFVBQVUsR0FBTyxHQUM5Q29WLEVBQWM0TSxFQUFLQyxXQUFXamlCLElBQUksY0FBZWdpQixFQUFLN1MsS0FBS3VELElBQUksR0FLckUsT0FIdUI1USxFQUFPbkUsY0FBYyxTQUEwQnlYLEdBR25EMEMsa0JBQW9CLEVBQzVCLFlBRUEsZSw2RENYWixNQUFNdUssVUFBZSxJQUN4QixLQUFLTCxHQUNELE1BQU1sZ0IsRUFBU2tnQixFQUFLQyxXQUFXamlCLElBQUksVUFBVSxHQUFPLEdBQzlDb1YsRUFBYzRNLEVBQUtDLFdBQVdqaUIsSUFBSSxjQUFlZ2lCLEVBQUs3UyxLQUFLdUQsSUFBSSxHQUtyRSxPQUZvQjVRLEVBQU9uRSxjQUFjLFNBQTBCeVgsR0FFbkRpRyxPQUNMLFlBRUEsZSw2RENYWixNQUFNaUgsVUFBcUIsSUFDOUIsS0FBS04sR0FDRCxNQUFNbGdCLEVBQVNrZ0IsRUFBS0MsV0FBV2ppQixJQUFJLFVBQVUsR0FBTyxHQUM5QzhiLEVBQVdrRyxFQUFLQyxXQUFXamlCLElBQUksU0FBVWdpQixFQUFLN1MsS0FBS3VELElBQUksR0FLN0QsT0FGb0I1USxFQUFPbkUsY0FBYyxTQUEwQm1lLEdBRW5EVCxPQUNMLFlBRUEsZSxxRENaWixNQUFNa0gsRUFDVCxZQUFZQyxHQUNSaG9CLEtBQUtpb0IsV0FBV0QsR0FHcEIsV0FBV0EsR0FDUGhvQixLQUFLa1ksSUFBSyxTQUNWbFksS0FBS2dvQixTQUFXQSxHQUFZLEdBR2hDLFFBQVFSLEdBRUp4bkIsS0FBS2tvQixPQUFPVixHQUdQQSxFQUFLQyxXQUFXamlCLElBQUksU0FBVWdpQixFQUFLN1MsS0FBS3VELEdBQUlsWSxLQUFLa1ksS0FDbERsWSxLQUFLbW9CLE1BQU1YLEdBSWYsTUFBTVksRUFBU3BvQixLQUFLcW9CLE1BQU1iLEdBVTFCLE9BUElZLElBQVcsYUFDWHBvQixLQUFLc29CLE9BQU9kLEdBSWhCeG5CLEtBQUt1b0IsTUFBTWYsR0FFSlksRUFHWCxPQUFPWixHQUNIQSxFQUFLZ0IsVUFBVXhvQixNQUNmQSxLQUFLeW9CLE1BQU1qQixHQUdmLE1BQU1BLEdBQ0ZBLEVBQUtrQixTQUFTMW9CLE1BQ2R3bkIsRUFBS0MsV0FBVy9YLElBQUksVUFBVSxFQUFNOFgsRUFBSzdTLEtBQUt1RCxHQUFJbFksS0FBS2tZLElBQ3ZEbFksS0FBSzJvQixLQUFLbkIsR0FHZCxNQUFNQSxHQUVGLE9BREFBLEVBQUtvQixTQUFTNW9CLE1BQ1BBLEtBQUt3bkIsS0FBS0EsR0FHckIsT0FBT0EsR0FDSEEsRUFBS3FCLFVBQVU3b0IsTUFDZnduQixFQUFLQyxXQUFXL1gsSUFBSSxVQUFVLEVBQU84WCxFQUFLN1MsS0FBS3VELEdBQUlsWSxLQUFLa1ksSUFDeERsWSxLQUFLOG9CLE1BQU10QixHQUdmLE1BQU1BLEdBQ0ZBLEVBQUt1QixTQUFTL29CLE1BQ2RBLEtBQUtncEIsS0FBS3hCLEdBSWQsTUFBTUEsSUFDTixLQUFLQSxJQUNMLEtBQUtBLEdBQVEsT0FBTyxVQUNwQixNQUFNQSxJQUNOLEtBQUtBLE8sK0JDcEVGLE1BQU15QixFQUNULHFCQUF1QixPQUFPLEVBQzlCLHFCQUF1QixPQUFPLEVBQzlCLHFCQUF1QixPQUFPLEVBQzlCLG1CQUFxQixPQUFPLEsscURDRHpCLE1BQU1DLFVBQW1CLElBQzVCLEtBQUsxQixHQUNELElBQUssTUFBTTJCLEtBQWFucEIsS0FBS2dvQixTQUN6Qm1CLEVBQVVDLFFBQVE1QixHQUd0QixPQUFPLGUsb0RDTlIsTUFBTTZCLFVBQW9CLElBQzdCLEtBQUs3QixHQUNEQSxFQUFLQyxXQUFXL1gsSUFBSSxlQUFnQixFQUFHOFgsRUFBSzdTLEtBQUt1RCxHQUFJbFksS0FBS2tZLElBRzlELEtBQUtzUCxHQUdELElBQUssSUFBSTdjLEVBRks2YyxFQUFLQyxXQUFXamlCLElBQUksZUFBZ0JnaUIsRUFBSzdTLEtBQUt1RCxHQUFJbFksS0FBS2tZLElBRWpEdk4sRUFBSTNLLEtBQUtnb0IsU0FBU3BtQixPQUFRK0ksSUFBSyxDQUMvQyxJQUFJeWQsRUFBU3BvQixLQUFLZ29CLFNBQVNyZCxHQUFHeWUsUUFBUTVCLEdBRXRDLEdBQUlZLElBQVcsWUFJWCxPQUhJQSxJQUFXLGFBQ1haLEVBQUtDLFdBQVcvWCxJQUFJLGVBQWdCL0UsRUFBRzZjLEVBQUs3UyxLQUFLdUQsR0FBSWxZLEtBQUtrWSxJQUV2RGtRLEVBSWYsT0FBTyxlLHFEQ25CUixNQUFNa0IsVUFBaUIsSUFDMUIsS0FBSzlCLEdBQ0QsSUFBSyxNQUFNK0IsS0FBU3ZwQixLQUFLZ29CLFNBQVUsQ0FDL0IsTUFBTUksRUFBU21CLEVBQU1ILFFBQVE1QixHQUU3QixHQUFJWSxJQUFXLFlBQ1gsT0FBT0EsRUFJZixPQUFPLGUscURDVlIsTUFBTW9CLFVBQWlCLElBQzFCLEtBQUtoQyxHQUdELE1BQU0rQixFQUFRdnBCLEtBQUtnb0IsU0FBUyxHQUU1QixJQUFLdUIsRUFDRCxPQUFPLFVBR1gsSUFBSW5CLEVBQVNtQixFQUFNSCxRQUFRNUIsR0FPM0IsT0FMSVksR0FBVSxZQUNWQSxFQUFTLFlBQ0pBLEdBQVUsY0FDZkEsRUFBUyxhQUVOQSxLLGlHQ2hCUixNQUFNcUIsVUFBMEIxQixFQUFBLEVBQ25DLEtBQUtQLEdBQ0QsTUFBTWxnQixFQUFTa2dCLEVBQUtDLFdBQVdqaUIsSUFBSSxVQUFVLEdBQU8sR0FDOUNxYSxFQUFhMkgsRUFBS0MsV0FBV2ppQixJQUFJLGNBQWVnaUIsRUFBSzdTLEtBQUt1RCxJQUFJLEdBQzlENkgsRUFBYXlILEVBQUtDLFdBQVdqaUIsSUFBSSxTQUFVZ2lCLEVBQUs3UyxLQUFLdUQsSUFBSSxHQUUvRCxPQURBNVEsRUFBT3ZELGlCQUFpQndNLEVBQUEsaUJBQTZCc1AsRUFBWUUsR0FDMURrSixFQUFBLFcsK0JDTlIsTUFBTVMsVUFBdUIzQixFQUFBLEVBQ2hDLEtBQUtQLEdBQ0QsTUFBTWxnQixFQUFTa2dCLEVBQUtDLFdBQVdqaUIsSUFBSSxVQUFVLEdBQU8sR0FDOUNvVixFQUFjNE0sRUFBS0MsV0FBV2ppQixJQUFJLGNBQWVnaUIsRUFBSzdTLEtBQUt1RCxJQUFJLEdBRy9EeVIsRUFEaUJyaUIsRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCUyxHQUMxQnJHLFlBUzVDLE9BUG9Cak4sRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCLFVBQ3BDNUYsWUFDR3pJLGVBR0FHLE1BQUtnSCxHQUFLQSxFQUFFM0csT0FBT3FkLEtBRzFDVixFQUFBLFVBRUFBLEVBQUEsVyxzQ0NoQlosTUFBTVcsVUFBMEI3QixFQUFBLEVBQ25DLEtBQUtQLEdBQ0QsTUFBTWxnQixFQUFTa2dCLEVBQUtDLFdBQVdqaUIsSUFBSSxVQUFVLEdBQU8sR0FDOUNvVixFQUFjNE0sRUFBS0MsV0FBV2ppQixJQUFJLGNBQWVnaUIsRUFBSzdTLEtBQUt1RCxJQUFJLEdBQy9Eb0osRUFBV2tHLEVBQUtDLFdBQVdqaUIsSUFBSSxTQUFVZ2lCLEVBQUs3UyxLQUFLdUQsSUFBSSxHQUV2RHNGLEVBQWlCbFcsRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCUyxHQUNoRStPLEVBQXVCbk0sRUFBZWpKLFlBS3RDc1YsRUFKY3ZpQixFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEJtSCxHQUM3Qi9NLFlBQ0d6SSxlQUVYbVAsUUFBTy9PLElBQVNBLEVBQUtILFdBR25ELEdBQUk4ZCxFQUFPam9CLE9BQVMsRUFBRyxDQUVuQixJQUFJc0ssRUFBTzJkLEVBQU9DLFFBQU8sQ0FBQ0MsRUFBRzFsQixJQUFNMmxCLEVBQWFMLEVBQXNCSSxHQUFLQyxFQUFhTCxFQUFzQnRsQixHQUFLMGxCLEVBQUkxbEIsSUFFdkgsTUFBTW9aLEVBQU90TixFQUFBLGdCQUFvQndaLEVBQXNCemQsR0FDdkQsR0FBSXVSLEdBQVFBLEVBQUs3YixPQUFTLEVBQUcsQ0FFekIsTUFBTTRSLEVBQUtnSyxFQUFlaEssR0FDMUIsS0FBT2lLLEVBQUs3YixPQUFTNFIsRUFBRzhKLG1CQUNwQkcsRUFBS25ELFFBSVRoVCxFQUFPdkQsaUJBQWlCd00sRUFBQSxzQkFBbUNxSyxFQUFhNkMsR0FDeEVELEVBQWVqSixZQUFjckksR0FRckMsT0FGQXNSLEVBQWVGLGtCQUFvQixFQUU1QjJMLEVBQUEsV0FJZixTQUFTZSxFQUFhQyxFQUFJQyxHQUN0QixPQUFPalosS0FBS2taLElBQUlELEVBQUd2ZSxFQUFJc2UsRUFBR3RlLEVBQUcsR0FBS3NGLEtBQUtrWixJQUFJRCxFQUFHdGUsRUFBSXFlLEVBQUdyZSxFQUFHLEcscUJDNUNyRCxNQUFNd2UsVUFBaUNyQyxFQUFBLEVBQzFDLEtBQUtQLEdBQ0QsTUFBTWxnQixFQUFTa2dCLEVBQUtDLFdBQVdqaUIsSUFBSSxVQUFVLEdBQU8sR0FDOUNvVixFQUFjNE0sRUFBS0MsV0FBV2ppQixJQUFJLGNBQWVnaUIsRUFBSzdTLEtBQUt1RCxJQUFJLEdBS3JFLE9BSnVCNVEsRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCUyxHQUV2RDBDLGtCQUFvQixFQUU1QjJMLEVBQUEsV0NJUixNQUFNdE0sVUFBdUIwTixFQUFBLEVBRWhDLGNBQ0lsWCxNQUFNLGtCQUdWLGFBQ0luVCxLQUFLMlUsS0FBSzdILEtBQU8sSUFBSW9jLEVBQUEsRUFBVyxDQUM1QixJQUFJSSxFQUFBLEVBQ0EsQ0FDSSxJQUFJRCxFQUFBLEVBQVksQ0FDWixJQUFJM0IsRUFBQSxFQUNKLElBQUk4QixFQUFBLEVBQVMsQ0FBQyxJQUFJM0IsRUFBQSxJQUNsQixJQUFJMkIsRUFBQSxFQUFTLENBQUMsSUFBSTFCLEVBQUEsSUFDbEIsSUFBSXdCLEVBQUEsRUFBUyxDQUNULElBQUlELEVBQUEsRUFBWSxDQUNaLElBQUlLLEVBQ0osSUFBSS9CLEVBQUEsRUFDSixJQUFJRCxFQUFBLEVBQ0osSUFBSStCLEVBQ0osSUFBSVcsSUFFUixJQUFJZixFQUFBLEVBQVksQ0FDWixJQUFJekIsRUFBQSxFQUNKLElBQUlGLEVBQUEsRUFDSixJQUFJa0MsUUFLaEIsSUFBSXJDLEVBQUEsUyw2SkMxQ2pCLE1BQU0rQyxVQUEwQnZDLEVBQUEsRUFDbkMsS0FBS1AsR0FDRCxNQUFNbGdCLEVBQVNrZ0IsRUFBS0MsV0FBV2ppQixJQUFJLFVBQVUsR0FBTyxHQUM5Q3FhLEVBQWEySCxFQUFLQyxXQUFXamlCLElBQUksY0FBZWdpQixFQUFLN1MsS0FBS3VELElBQUksR0FDOUQ2SCxFQUFheUgsRUFBS0MsV0FBV2ppQixJQUFJLFNBQVVnaUIsRUFBSzdTLEtBQUt1RCxJQUFJLEdBRS9ELE9BREE1USxFQUFPdkQsaUJBQWlCd00sRUFBQSx3QkFBb0NzUCxFQUFZRSxHQUNqRWtKLEVBQUEsVyxzQkNKUixNQUFNc0IsVUFBbUN4QyxFQUFBLEVBQzVDLFlBQVl5QyxFQUFhQyxHQUNyQnRYLE1BQU0sSUFDTm5ULEtBQUt3cUIsWUFBY0EsRUFDbkJ4cUIsS0FBS3lxQixZQUFjQSxFQUd2QixLQUFLakQsR0FDRCxNQUFNbGdCLEVBQVNrZ0IsRUFBS0MsV0FBV2ppQixJQUFJLFVBQVUsR0FBTyxHQUM5Q29WLEVBQWM0TSxFQUFLQyxXQUFXamlCLElBQUksY0FBZWdpQixFQUFLN1MsS0FBS3VELElBQUksR0FDL0RvSixFQUFXa0csRUFBS0MsV0FBV2ppQixJQUFJLFNBQVVnaUIsRUFBSzdTLEtBQUt1RCxJQUFJLEdBRXZEc0YsRUFBaUJsVyxFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEJTLEdBQ2hFK08sRUFBdUJuTSxFQUFlakosWUFFdENtVyxFQURjcGpCLEVBQU9uRSxjQUFjZ1gsRUFBQSxPQUEwQm1ILEdBQzdCL00sWUFFaENvVyxFQUFrQjFaLEtBQUtrWixJQUFJbnFCLEtBQUt3cUIsWUFBYSxHQUM3Q0ksRUFBa0IzWixLQUFLa1osSUFBSW5xQixLQUFLeXFCLFlBQWEsR0FFN0NJLEVBQXNCck4sRUFBZUYsa0JBQzNDRSxFQUFlRixrQkFBb0IsRUFHbkMsTUFBTXdOLEVBQW1CZCxFQUFhVSxFQUFtQmYsR0FDekQsR0FBSW1CLEdBQW9CSCxHQUFtQkcsR0FBb0JGLEVBRTNELE9BQU8zQixFQUFBLFVBQ0osQ0FDSCxNQUFNNUwsRUFBZ0JsTixFQUFBLHFCQUF5QndaLEVBQXNCa0IsR0FDckUsR0FBSXhOLEVBQWN6YixPQUFTLEVBQUcsQ0FDMUIsR0FBSWtwQixFQUFtQkgsRUFBaUIsQ0FFcEMsSUFBSXplLEVBQU9tUixFQUFjeU0sUUFBTyxDQUFDQyxFQUFHMWxCLElBQU0ybEIsRUFBYVUsRUFBbUJYLEdBQUtDLEVBQWFVLEVBQW1Ccm1CLEdBQUswbEIsRUFBSTFsQixJQUN4SCxNQUFNb1osRUFBT3ROLEVBQUEsZ0JBQW9Cd1osRUFBc0J6ZCxHQUVuRHVSLEdBQVFBLEVBQUs3YixPQUFTLElBRXRCMEYsRUFBT3ZELGlCQUFpQndNLEVBQUEsc0JBQW1DcUssRUFBYTZDLEdBQ3hFRCxFQUFlakosWUFBY3JJLE9BRTlCLENBRUgsSUFBSUEsRUFBT21SLEVBQWN5TSxRQUFPLENBQUNDLEVBQUcxbEIsSUFBTTJsQixFQUFhVSxFQUFtQlgsR0FBS0MsRUFBYVUsRUFBbUJybUIsR0FBSzBsQixFQUFJMWxCLElBQ3hILE1BQU1vWixFQUFPdE4sRUFBQSxnQkFBb0J3WixFQUFzQnpkLEdBRW5EdVIsR0FBUUEsRUFBSzdiLE9BQVMsSUFFdEIwRixFQUFPdkQsaUJBQWlCd00sRUFBQSxzQkFBbUNxSyxFQUFhNkMsR0FDeEVELEVBQWVqSixZQUFjckksR0FJckMsT0FBTytjLEVBQUEsVUFHUCxPQUFPQSxFQUFBLFlBT3ZCLFNBQVNlLEVBQWFDLEVBQUlDLEdBQ3RCLE9BQU9qWixLQUFLa1osSUFBSUQsRUFBR3ZlLEVBQUlzZSxFQUFHdGUsRUFBRyxHQUFLc0YsS0FBS2taLElBQUlELEVBQUd0ZSxFQUFJcWUsRUFBR3JlLEVBQUcsR0FBS3FGLEtBQUtrWixJQUFJRCxFQUFHcmUsRUFBSW9lLEVBQUdwZSxFQUFHLEdDbEVoRixNQUFNa2YsVUFBdUJoRCxFQUFBLEVBQ2hDLEtBQUtQLEdBQ0QsTUFBTWxnQixFQUFTa2dCLEVBQUtDLFdBQVdqaUIsSUFBSSxVQUFVLEdBQU8sR0FDOUNvVixFQUFjNE0sRUFBS0MsV0FBV2ppQixJQUFJLGNBQWVnaUIsRUFBSzdTLEtBQUt1RCxJQUFJLEdBRXJFd0MsWUFBVyxLQUNQcFQsRUFBT3ZELGlCQUFpQndNLEVBQUEsOEJBQTBDcUssS0FDbkUsTSxzQkNMSixNQUFNb1EsVUFBcUJqRCxFQUFBLEVBQzlCLEtBQUtQLEdBQ0QsTUFBTWxnQixFQUFTa2dCLEVBQUtDLFdBQVdqaUIsSUFBSSxVQUFVLEdBQU8sR0FDOUNvVixFQUFjNE0sRUFBS0MsV0FBV2ppQixJQUFJLGNBQWVnaUIsRUFBSzdTLEtBQUt1RCxJQUFJLEdBQy9Eb0osRUFBV2tHLEVBQUtDLFdBQVdqaUIsSUFBSSxTQUFVZ2lCLEVBQUs3UyxLQUFLdUQsSUFBSSxHQUV2RHNGLEVBQWlCbFcsRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCUyxHQUdoRXFRLEdBRnVCek4sRUFBZWpKLFlBRXhCak4sRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCbUgsSUFHN0R2RSxHQUZha08sRUFBWTFXLFlBRVZqTixFQUFPbkUsY0FBY21OLEVBQUEsU0FHcEM0YSxHQUFVLE9BQTBCMU4sR0FDcEMyTixHQUFRLE9BQTBCRixHQUd4QyxPQURzQmxPLEVBQWE0QyxrQkFBa0J1TCxFQUFTQyxHQUluRGxDLEVBQUEsVUFGQUEsRUFBQSxXQ2xCWixNQUFNbUMsVUFBc0NyRCxFQUFBLEVBQy9DLEtBQUtQLEdBQ0QsTUFBTWxnQixFQUFTa2dCLEVBQUtDLFdBQVdqaUIsSUFBSSxVQUFVLEdBQU8sR0FDOUNvVixFQUFjNE0sRUFBS0MsV0FBV2ppQixJQUFJLGNBQWVnaUIsRUFBSzdTLEtBQUt1RCxJQUFJLEdBQy9Eb0osRUFBV2tHLEVBQUtDLFdBQVdqaUIsSUFBSSxTQUFVZ2lCLEVBQUs3UyxLQUFLdUQsSUFBSSxHQUV2RHNGLEVBQWlCbFcsRUFBT25FLGNBQWNnWCxFQUFBLE9BQTBCUyxHQUNoRStPLEVBQXVCbk0sRUFBZWpKLFlBQ3RDMFcsRUFBYzNqQixFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEJtSCxHQUU3RHhWLEVBRGFtZixFQUFZMVcsWUFDR3pJLGVBRzVCaVIsRUFBZXpWLEVBQU9uRSxjQUFjbU4sRUFBQSxRQUdwQ3VaLEVBQVMvZCxFQUFlbVAsUUFBTy9PLElBQVNBLEVBQUtILFdBR25ELEdBQUk4ZCxFQUFPam9CLE9BQVMsRUFBRyxDQUVuQixJQUFJc0ssRUFBTzJkLEVBQU9DLFFBQU8sQ0FBQ0MsRUFBRzFsQixJQUFNLEVBQWFzbEIsRUFBc0JJLEdBQUssRUFBYUosRUFBc0J0bEIsR0FBSzBsQixFQUFJMWxCLElBRXZILE1BQU1vWixFQUFPdE4sRUFBQSxnQkFBb0J3WixFQUFzQnpkLEdBQ3ZELEdBQUl1UixHQUFRQSxFQUFLN2IsT0FBUyxFQUFHLENBRXpCLE1BQU00UixFQUFLZ0ssRUFBZWhLLEdBQzFCLEtBQU9pSyxFQUFLN2IsT0FBUzRSLEVBQUc4SixtQkFDcEJHLEVBQUtuRCxRQUdULE1BQU02USxHQUFRLE9BQTBCRixHQUd4QyxJQUFJSSxFQUFjLEVBQ2xCLElBQUssSUFBSTFnQixFQUFJOFMsRUFBSzdiLE9BQVMsRUFBRytJLEdBQUssRUFBR0EsSUFBSyxDQUN2QyxNQUFNMmdCLEVBQVc3TixFQUFLOVMsR0FFaEJ1Z0IsRUFBVSxJQUFJemUsR0FBR21FLEtBQUswYSxFQUFTM2YsRUFDakMyZixFQUFTMWYsRUFBNEIsR0FBeEI0UixFQUFlK04sT0FDNUJELEVBQVN6ZixHQUdiLElBRHNCa1IsRUFBYTRDLGtCQUFrQnVMLEVBQVNDLEdBQzVDLENBQ2RFLEVBQWMxZ0IsRUFDZCxPQU1SOFMsRUFBS3hXLE9BQU8sRUFBR29rQixHQUdmL2pCLEVBQU92RCxpQkFBaUJ3TSxFQUFBLHNCQUFtQ3FLLEVBQWE2QyxHQUN4RUQsRUFBZWpKLFlBQWNySSxHQVFyQyxPQUZBc1IsRUFBZUYsa0JBQW9CLEVBRTVCMkwsRUFBQSxXQUlmLFNBQVMsRUFBYWdCLEVBQUlDLEdBQ3RCLE9BQU9qWixLQUFLa1osSUFBSUQsRUFBR3ZlLEVBQUlzZSxFQUFHdGUsRUFBRyxHQUFLc0YsS0FBS2taLElBQUlELEVBQUd0ZSxFQUFJcWUsRUFBR3JlLEVBQUcsR0MzRHJELE1BQU00ZixVQUF3Qm5CLEVBQUEsRUFFakMsY0FDSWxYLE1BQU0sbUJBR1YsYUFDSW5ULEtBQUsyVSxLQUFLN0gsS0FBTyxJQUFJb2MsRUFBQSxFQUFXLENBQzVCLElBQUlJLEVBQUEsRUFDQSxDQUNJLElBQUlELEVBQUEsRUFBWSxDQUNaLElBQUkzQixFQUFBLEVBQ0osSUFBSThCLEVBQUEsRUFBUyxDQUFDLElBQUkzQixFQUFBLElBQ2xCLElBQUkyQixFQUFBLEVBQVMsQ0FBQyxJQUFJMUIsRUFBQSxJQUNsQixJQUFJd0IsRUFBQSxFQUFTLENBQ1QsSUFBSUQsRUFBQSxFQUFZLENBQ1osSUFBSXpCLEVBQUEsRUFDSixJQUFJNEIsRUFBQSxFQUFTLENBQUMsSUFBSXdCLElBQ2xCLElBQUlJLElBRVIsSUFBSS9CLEVBQUEsRUFBWSxDQUNaLElBQUl6QixFQUFBLEVBQ0osSUFBSTBCLEVBQUEsRUFBUyxDQUNULElBQUlpQixFQUEyQixFQUFHLElBQ2xDLElBQUlRLE1BR1osSUFBSTFCLEVBQUEsRUFBWSxDQUNaLElBQUkxQixFQUFBLEVBQ0osSUFBSXFELEVBQ0osSUFBSVYsUUFJaEIsSUFBSS9DLEVBQUEsUywrQkNuRGpCLE1BQU1rRSxFQUNULGNBQ0l6ckIsS0FBSzByQixhQUdULGFBQ0kxckIsS0FBSzJyQixXQUFhLEdBQ2xCM3JCLEtBQUs0ckIsV0FBYSxHQUd0QixjQUFjQyxHQU9WLE9BTks3ckIsS0FBSzRyQixXQUFXQyxLQUNqQjdyQixLQUFLNHJCLFdBQVdDLEdBQWEsQ0FDekJDLFdBQVksR0FDWkMsVUFBVyxLQUdaL3JCLEtBQUs0ckIsV0FBV0MsR0FHM0IsY0FBY0QsRUFBWUksR0FDdEIsTUFBTUMsRUFBU0wsRUFBdUIsV0FLdEMsT0FKS0ssRUFBT3ZuQixlQUFlc25CLEtBQ3ZCQyxFQUFPRCxHQUFhLElBR2pCQyxFQUFPRCxHQUdsQixVQUFVSCxFQUFXRyxHQUNqQixJQUFJQyxFQUFTanNCLEtBQUsyckIsV0FVbEIsT0FSSUUsSUFDQUksRUFBU2pzQixLQUFLa3NCLGNBQWNMLEdBRXhCRyxJQUNBQyxFQUFTanNCLEtBQUttc0IsY0FBY0YsRUFBUUQsS0FJckNDLEVBR1gsSUFBSWxzQixFQUFLSixFQUFPa3NCLEVBQVdHLEdBQ1Joc0IsS0FBS29zQixVQUFVUCxFQUFXRyxHQUNsQ2pzQixHQUFPSixFQUdsQixJQUFJSSxFQUFLOHJCLEVBQVdHLEdBRWhCLE9BRGVoc0IsS0FBS29zQixVQUFVUCxFQUFXRyxHQUMzQmpzQixJQ2xEZixNQUFNc3NCLEVBQ1QsY0FDSXJzQixLQUFLMHJCLGFBR1QsYUFDSTFyQixLQUFLMlUsVUFBT3RULEVBQ1pyQixLQUFLK3JCLFVBQVksR0FDakIvckIsS0FBS3NzQixVQUFZLEVBQ2pCdHNCLEtBQUtPLFdBQVFjLEVBQ2JyQixLQUFLdXNCLFlBQVNsckIsRUFDZHJCLEtBQUt5bkIsZ0JBQWFwbUIsRUFHdEIsVUFBVTZLLEdBQ05sTSxLQUFLc3NCLFlBQ0x0c0IsS0FBSytyQixVQUFVaGxCLEtBQUttRixHQUd4QixTQUFTQSxJQUlULFNBQVNBLElBSVQsVUFBVUEsR0FDTmxNLEtBQUsrckIsVUFBVVMsTUFHbkIsU0FBU3RnQixLQzdCTixNQUFNdWdCLEVBQ1QsWUFBWXZVLEdBQ1JsWSxLQUFLMHJCLFdBQVd4VCxHQUdwQixXQUFXQSxHQUNQbFksS0FBS2tZLEdBQUtBLEVBQ1ZsWSxLQUFLOE0sVUFBT3pMLEVBR2hCLEtBQUtrckIsRUFBUTlFLEdBRVQsTUFBTUQsRUFBTyxJQUFJNkUsRUFDakI3RSxFQUFLK0UsT0FBU0EsRUFDZC9FLEVBQUtDLFdBQWFBLEVBQ2xCRCxFQUFLN1MsS0FBTzNVLEtBR1pBLEtBQUs4TSxLQUFLc2MsUUFBUTVCLEdBR2xCLE1BQU1rRixFQUFnQmpGLEVBQVdqaUIsSUFBSSxZQUFheEYsS0FBS2tZLEtBQU8sR0FDeER5VSxFQUFnQm5GLEVBQUt1RSxVQUFVcmxCLE1BQU0sR0FHM0MsSUFBSWttQixFQUFRLEVBQ1osSUFBSyxJQUFJamlCLEVBQUksRUFBR0EsRUFBSXNHLEtBQUswQyxJQUFJK1ksRUFBYzlxQixPQUFRK3FCLEVBQWMvcUIsVUFDN0RnckIsRUFBUWppQixFQUFJLEVBQ1IraEIsRUFBYy9oQixLQUFPZ2lCLEVBQWNoaUIsSUFGK0JBLEtBUTFFLElBQUssSUFBSUEsRUFBSStoQixFQUFjOXFCLE9BQVMsRUFBRytJLEdBQUtpaUIsRUFBT2ppQixJQUMvQytoQixFQUFjL2hCLEdBQUdtZSxNQUFNdEIsR0FJM0JDLEVBQVcvWCxJQUFJLFlBQWFpZCxFQUFlM3NCLEtBQUtrWSxJQUNoRHVQLEVBQVcvWCxJQUFJLFlBQWE4WCxFQUFLOEUsVUFBV3RzQixLQUFLa1ksS0N2Q2xELE1BQU1tUyxFQUNULFlBQVluUyxHQUNSbFksS0FBS2tZLEdBQUssaUJBQ1ZsWSxLQUFLeW5CLFdBQWEsSUFBSWdFLEVBQ3RCenJCLEtBQUsyVSxLQUFPLElBQUk4WCxFQUFjdlUsR0FFOUJsWSxLQUFLMHJCLGFBR1QsY0FJQSxZQUFZcGtCLEVBQVFzVCxHQUNoQjVhLEtBQUt5bkIsV0FBVy9YLElBQUksU0FBVXBJLEdBQVEsR0FBTyxHQUM3Q3RILEtBQUt5bkIsV0FBVy9YLElBQUksY0FBZWtMLEVBQWE1YSxLQUFLMlUsS0FBS3VELElBQUksR0FFOURsWSxLQUFLMlUsS0FBSzZTLEtBQUt4bkIsS0FBTUEsS0FBS3luQixlLDhCQ3BCM0IsTUFBTWxYLEVBQ1QsMEJBQTRCLE1BQU8sZUFDbkMsbUNBQXFDLE1BQU8sd0JBQzVDLDZCQUErQixNQUFPLGtCQUN0QywyQkFBNkIsTUFBTyxnQkFDcEMsOEJBQWdDLE1BQU8sbUJBRXZDLDhCQUFnQyxNQUFPLG1CQUN2QyxrQ0FBb0MsTUFBTyx1QkFDM0MscUNBQXVDLE1BQU8sMEJBQzlDLHFDQUF1QyxNQUFPLDBCQUM5QywrQkFBaUMsTUFBTyxvQkFDeEMsOEJBQWdDLE1BQU8sbUJBRXZDLDJCQUE2QixNQUFPLGdCQUNwQywyQkFBNkIsTUFBTyxnQkFDcEMsMEJBQTRCLE1BQU8sZUFDbkMsZ0NBQWtDLE1BQU8scUJBRXpDLDhCQUFnQyxNQUFPLG1CQUN2QywrQkFBaUMsTUFBTyxvQkFFeEMsd0JBQTBCLE1BQU8sYUFDakMsNkJBQStCLE1BQU8sa0JBQ3RDLHdCQUEwQixNQUFPLGFBQ2pDLDJCQUE2QixNQUFPLGdCQUNwQyx5Q0FBMkMsTUFBTyw4QkFFbEQsaUNBQW1DLE1BQU8sc0JBRTFDLGdDQUFrQyxNQUFPLHFCQUN6QyxnQ0FBa0MsTUFBTyxxQkFHekMsMEJBQTRCLE1BQU8sZUFDbkMsdUNBQXlDLE1BQU8sNEJBQ2hELG1DQUFxQyxNQUFPLHdCQUU1QyxtQ0FBcUMsTUFBTyx3QkFFNUMsMkJBQTZCLE1BQU8sZ0JBRXBDLCtCQUFpQyxNQUFPLG9CQUV4Qyw0QkFBOEIsTUFBTyxpQkFDckMsbUNBQXFDLE1BQU8sd0JBQzVDLHdDQUEwQyxNQUFPLDZCQUVqRCw0QkFBOEIsTUFBTyxpQkFDckMsMkJBQTZCLE1BQU8sZ0JBQ3BDLDRCQUE4QixNQUFPLGlCQUNyQyx5QkFBMkIsTUFBTyxjQUNsQyxpQ0FBbUMsTUFBTyxzQkFFMUMsK0JBQWlDLE1BQU8sb0JBQ3hDLDRCQUE4QixNQUFPLGlCQUVyQywwQkFBNEIsTUFBTyxlQUNuQyx3QkFBMEIsTUFBTyxhQUVqQyxxQ0FBdUMsTUFBTywwQkFDOUMseUNBQTJDLE1BQU8sOEJBRWxELDRDQUE4QyxNQUFPLGlDQUNyRCw4Q0FBZ0QsTUFBTyxtQ0FDdkQsaUNBQW1DLE1BQU8sc0JBQzFDLGlDQUFtQyxNQUFPLHNCQUUxQywyQ0FBNkMsTUFBTyxnQ0FDcEQsMkNBQTZDLE1BQU8sZ0NBRXBELG1DQUFxQyxNQUFPLHdCQUM1Qyx5Q0FBMkMsTUFBTyw4QkFFbEQsb0NBQXNDLE1BQU8seUJBQzdDLG9DQUFzQyxNQUFPLHlCQUM3Qyx5Q0FBMkMsTUFBTyw4QkFDbEQsb0NBQXNDLE1BQU8seUJBQzdDLGlDQUFtQyxNQUFPLHNCQUUxQyw0QkFBOEIsTUFBTyxpQkFDckMsMEJBQTRCLE1BQU8sZUFHbkMscUNBQXVDLE1BQU8sMEJBRzlDLG9DQUFzQyxNQUFPLHlCQUM3QyxxQ0FBdUMsTUFBTywwQkFDOUMsbUNBQXFDLE1BQU8sd0JBQzVDLGdDQUFrQyxNQUFPLHFCQUN6QyxtQ0FBcUMsTUFBTyx3QkFDNUMsbUNBQXFDLE1BQU8sd0JBQzVDLCtCQUFpQyxNQUFPLG9CQUV4QywyQ0FBNkMsTUFBTyxtQyx1Q0MvRmpELE1BQU15USxFQUVULG1CQUFxQixNQUFPLFFBQzVCLGlCQUFtQixNQUFPLE1BQzFCLG1CQUFxQixNQUFPLFFBQzVCLG1CQUFxQixNQUFPLFFBQzVCLG9CQUFzQixNQUFPLFNBQzdCLG1CQUFxQixNQUFPLFFBQzVCLGtCQUFvQixNQUFPLE9BQzNCLHFCQUF1QixNQUFPLFVBQzlCLGtCQUFvQixNQUFPLE9BQzNCLHdCQUEwQixNQUFPLGFBQ2pDLGtCQUFvQixNQUFPLE9BQzNCLHFCQUF1QixNQUFPLFVBQzlCLG9CQUFzQixNQUFPLFNBRzdCLG1CQUFxQixNQUFPLFFBQzVCLGlCQUFtQixNQUFPLE1BQzFCLHNCQUF3QixNQUFPLFdBQy9CLHNCQUF3QixNQUFPLFlBRzVCLE1BQU02TCxFQUFjcnRCLE9BQU9xYixRQUFRcmIsT0FBT3N0QiwwQkFBMEI5TCxJQUN0RS9GLFFBQU8sRUFBRWxiLEVBQUtndEIsS0FBMEMsbUJBQW5CQSxFQUFXdm5CLE1BQ2hEd25CLEtBQUksRUFBRWp0QixNQUNJLENBQUUsQ0FBQ0EsR0FBTWloQixFQUFZamhCLFEsbUZDdEI3QixNQUFNb1ksRUFDVCxZQUFZMkIsRUFBY0MsR0FDdEIvWixLQUFLaXRCLGVBQWlCLElBQUluZSxJQUUxQjlPLEtBQUtpdEIsZUFBZXZkLElBQUksZ0JBQStCLElBQUksS0FDM0QxUCxLQUFLaXRCLGVBQWV2ZCxJQUFJLGlCQUFnQyxJQUFJLEtBR2hFLFFBQVFnSSxHQUNKLE9BQU8xWCxLQUFLaXRCLGVBQWV6bkIsSUFBSWtTLE0sNkNDYmhDLE1BQU1rQyxFQUNULFlBQVlFLEVBQWNDLEdBQ3RCL1osS0FBSzhaLGFBQWVBLEVBQ3BCOVosS0FBS29hLGdCQUFrQixHQUN2QnBhLEtBQUt1YSx1QkFBb0JsWixFQUN6QnJCLEtBQUsrWixNQUFRQSxFQUdqQiwwQkFDSSxPQUFPL1osS0FBS29hLGdCQUFnQixNLDJDQ1RwQyxNQUFNLE1BQUU1UyxHQUFVLEVBQVEsTUFFcEIsZ0JBQUUwbEIsR0FBb0IsRUFBUSxLQUc3QixNQUFNL1MsVUFBMkIzUyxFQUNwQyxTQUNJLE9BQU94SCxLQUFLNEgsVUFFaEIsa0JBQW9CLE1BQU8sc0JBRTNCLFlBQVl1bEIsR0FDUmhhLE1BQU1nSCxFQUFtQi9HLEtBQU8rWixFQUFPalYsR0FBSSxJQUFJZ1YsRUFBZ0JDLElBR25FLHVCQUNJbnRCLEtBQUt3VCxHQUFHOEosa0JBQW9CdGQsS0FBS3dULEdBQUc0WixZQUNwQ3B0QixLQUFLd1QsR0FBR3dMLGlCQUFtQmhmLEtBQUt3VCxHQUFHNlosa0JBR3ZDLFlBQVlDLEdBQ1J0dEIsS0FBS3dULEdBQUc4SixtQkFBcUJnUSxFQUdqQyxZQUFZQyxHQUNSdnRCLEtBQUt3VCxHQUFHZ2EsZ0JBQWtCRCxFQUMxQnZ0QixLQUFLd1QsR0FBR2dhLGVBQWlCdmMsS0FBS3djLElBQUksRUFBR3p0QixLQUFLd1QsR0FBR2dhLGdCQUV6Q3h0QixLQUFLd1QsR0FBR2dhLGVBQWlCLEVBRXpCeHRCLEtBQUtzSCxPQUFPdkQsaUJBQWlCLG1CQUE4Qi9ELEtBQUtrWSxHQUM1RGxZLEtBQUt3VCxHQUFHZ2EsZUFBZ0J4dEIsS0FBS3dULEdBQUdrYSxnQkFHcEMzbEIsUUFBUUMsSUFBT2hJLEtBQUtrWSxHQUFSLFNBR2hCbFksS0FBS3NILE9BQU92RCxpQkFBaUIsbUJBQThCL0QsS0FBS2tZLEdBQUlsWSxLQUFLd1QsR0FBR2dhLGVBQWdCeHRCLEtBQUt3VCxHQUFHbWEsWUFHeEcsY0FBY0MsR0FDVixPQUFJNXRCLEtBQUt3VCxHQUFHcWEsZUFBZXZrQixJQUFJc2tCLEdBQ3BCNXRCLEtBQUttaEIsTUFBUW5oQixLQUFLd1QsR0FBR3FhLGVBQWVyb0IsSUFBSW9vQixHQUV4QzV0QixLQUFLbWhCLE1BSXBCLFNBQ0ksT0FBT25oQixLQUFLd1QsR0FBRzBFLEdBR25CLG1CQUNJLE9BQU9sWSxLQUFLd1QsR0FBR3dRLGFBR25CLGtCQUNJLE9BQU9oa0IsS0FBS3dULEdBQUdlLFlBR25CLGdCQUFnQjVVLEdBQ1JLLEtBQUt3VCxHQUFHZSxjQUNSdlUsS0FBS3dULEdBQUdlLFlBQVl4SSxVQUFXLEdBR25DL0wsS0FBS3dULEdBQUdlLFlBQWM1VSxFQUN0QkssS0FBS3dULEdBQUdlLFlBQVl4SSxVQUFXLEVBR25DLGtCQUNJLE9BQU8vTCxLQUFLd1QsR0FBR29JLFlBR25CLFlBQ0ksT0FBTzViLEtBQUt3VCxHQUFHaUgsTUFHbkIsd0JBQ0ksT0FBT3phLEtBQUt3VCxHQUFHOEosa0JBR25CLHNCQUFzQjNkLEdBQ2xCSyxLQUFLd1QsR0FBRzhKLGtCQUFvQjNkLEVBR2hDLHVCQUNJLE9BQU9LLEtBQUt3VCxHQUFHd0wsaUJBR25CLHFCQUFxQnJmLEdBQ2pCSyxLQUFLd1QsR0FBR3dMLGlCQUFtQnJmLEVBQzNCSyxLQUFLc0gsT0FBT3ZELGlCQUFpQixlQUEwQi9ELEtBQUtrWSxHQUN4RGxZLEtBQUtnZixpQkFBa0JoZixLQUFLcXRCLG1CQUdwQyx3QkFDSSxPQUFPcnRCLEtBQUt3VCxHQUFHNlosa0JBR25CLFlBQ0ksT0FBT3J0QixLQUFLd1QsR0FBRzJOLE1BR25CLHFCQUNJLE9BQU9uaEIsS0FBS3dULEdBQUdnYSxlQUduQixrQkFDSSxPQUFPeHRCLEtBQUt3VCxHQUFHZ2EsZUFHbkIsYUFDSSxPQUFPeHRCLEtBQUt3VCxHQUFHZ2EsZ0JBQWtCLEVBR3JDLG1CQUNJLE9BQU94dEIsS0FBS3dULEdBQUcwTyxhQUduQixxQkFDSSxPQUFPbGlCLEtBQUt3VCxHQUFHcUwsZUFHbkIsbUJBQW1CbGYsR0FDZkssS0FBS3dULEdBQUdxTCxlQUFpQmxmLEVBRzdCLGFBQ0ksT0FBT0ssS0FBS3dULEdBQUcrWCxVLG9EQ2hJaEIsTUFBTTJCLEVBQ1QsWUFBWUMsR0FDUm50QixLQUFLa1ksR0FBS2lWLEVBQU9qVixHQUNqQmxZLEtBQUt5YSxNQUFRMFMsRUFBTzFTLE1BQ3BCemEsS0FBSzRiLFlBQWN1UixFQUFPdlIsYUFBZSxHQUN6QzViLEtBQUtna0IsYUFBZW1KLEVBQU9uSixjQUFnQmhrQixLQUFLa1ksR0FDaERsWSxLQUFLdVUsaUJBQWNsVCxFQUduQnJCLEtBQUs4YSxXQUFhcVMsRUFBT3JTLFlBQWMsRUFDdkM5YSxLQUFLb3RCLFlBQWNELEVBQU9DLGFBQWUsRUFDekNwdEIsS0FBS3VyQixPQUFTNEIsRUFBTzVCLFFBQVUsSUFDL0J2ckIsS0FBS3F0QixrQkFBb0IsRUFDekJydEIsS0FBS2dmLGlCQUFtQmhmLEtBQUtxdEIsa0JBQzdCcnRCLEtBQUtzZCxrQkFBb0J0ZCxLQUFLb3RCLFlBRTlCcHRCLEtBQUttaEIsTUFBUWdNLEVBQU9oTSxPQUFTLEVBRTdCbmhCLEtBQUsydEIsV0FBYVIsRUFBT1EsWUFBYyxFQUN2QzN0QixLQUFLd3RCLGVBQWlCeHRCLEtBQUsydEIsV0FFM0IzdEIsS0FBSzh0QixRQUFVWCxFQUFPVyxTQUFXLEVBQ2pDOXRCLEtBQUsrdEIsWUFBYy90QixLQUFLOHRCLFFBRXhCOXRCLEtBQUs2dEIsZUFBaUJWLEVBQU9VLGdCQUFrQixJQUFJL2UsSUFFbkQ5TyxLQUFLa2lCLGFBQWVpTCxFQUFPakwsY0FBZ0IsRUFFM0NsaUIsS0FBSzZlLGVBQWlCc08sRUFBT3RPLGdCQUFrQixhLDRDQzVCdkQsTUFBTSxNQUFFclgsR0FBVSxFQUFRLE1BR3BCLFVBQUV3bUIsR0FBYyxFQUFRLEtBRXZCLE1BQU0xZCxVQUFxQjlJLEVBQzlCLFNBQ0ksT0FBT3hILEtBQUs0SCxVQUVoQixrQkFBb0IsTUFBTyxlQUUzQixZQUFZcW1CLEVBQVNDLEVBQW1CM2YsRUFBT00sRUFBU3NmLEdBQ3BEaGIsTUFBTTdDLEVBQWE4QyxNQUVuQnBULEtBQUsySCxRQUFRLENBQ1RzbUIsUUFBU0EsRUFDVEMsa0JBQW1CQSxFQUNuQjNmLE1BQU9BLEVBQ1BNLFFBQVNBLEVBQ1R1ZixlQUFnQkQsSUFJeEIsY0FJQSxnQkFBZ0J6TyxHQUNaLE1BQU11TyxFQUFVanVCLEtBQUt3VCxHQUFHeWEsUUFFeEIsSUFBSUksRUFBY0osRUFBUSxHQUN0QkssRUFBd0JuZSxFQUFBLGlCQUFxQmtlLEVBQWEzTyxHQUM5RCxJQUFLLE1BQU14VCxLQUFRK2hCLEVBQVMsQ0FDeEIsTUFBTU0sRUFBYXBlLEVBQUEsaUJBQXFCakUsRUFBTXdULEdBRTFDNk8sRUFBYUQsSUFDYkEsRUFBd0JDLEVBQ3hCRixFQUFjbmlCLEdBSXRCLE9BQU9taUIsRUFHWCxvQkFBb0IzTyxHQUNoQixNQUFNeU8sRUFBVW51QixLQUFLd1QsR0FBRzRhLGVBRXhCLElBQUlDLEVBQWNGLEVBQVEsR0FDdEJHLEVBQXdCbmUsRUFBQSxpQkFBcUJrZSxFQUFhM08sR0FDOUQsSUFBSyxNQUFNeFQsS0FBUWlpQixFQUFTLENBQ3hCLE1BQU1JLEVBQWFwZSxFQUFBLGlCQUFxQmpFLEVBQU13VCxHQUUxQzZPLEVBQWFELElBQ2JBLEVBQXdCQyxFQUN4QkYsRUFBY25pQixHQUl0QixPQUFPbWlCLEVBR1gsa0JBQWtCRyxFQUFNQyxHQUNwQixNQUFNQyxFQUFXRixFQUFLRSxTQUFTRCxHQUN6QkUsRUFBWUYsRUFBR0csUUFBUUMsSUFBSUwsRUFBS0ksU0FBU0UsWUFDekNDLEVBQU0sSUFBSXRpQixHQUFHdWlCLElBQUlSLEVBQU1HLEdBRXZCTSxFQUFXanZCLEtBQUt3VCxHQUFHMGEsa0JBQ3pCLElBQUssTUFBTXBkLEtBQVFtZSxFQUFVLENBQ3pCLE1BQU1DLEVBQWMsSUFBSXppQixHQUFHbUUsS0FFM0IsR0FEZUUsRUFBS3FlLGNBQWNKLEVBQUtHLElBRWJBLEVBQVlSLFNBQVNGLEdBRXZCRSxFQUNoQixPQUFPLEVBS25CLE9BQU8sRUFHWCxZQUNJLE9BQU8xdUIsS0FBS3dULEdBQUdqRixNQUluQixVQUFVbVIsRUFBYTBQLEdBQ25CLE1BQU1DLEVBQXNCLEdBQ3RCQyxFQ3pGUCxTQUEyQkMsR0FDOUIsTUFBTUMsRUFBUyxHQVVmLE9BUkFBLEVBQU96b0IsS0FBSyxJQUFJMEYsR0FBR21FLEtBQUsyZSxFQUFNNWpCLEVBQUc0akIsRUFBTTNqQixFQUFHMmpCLEVBQU0xakIsRUFBSSxJQUVwRDJqQixFQUFPem9CLEtBQUssSUFBSTBGLEdBQUdtRSxLQUFLMmUsRUFBTTVqQixFQUFJLEVBQUc0akIsRUFBTTNqQixFQUFHMmpCLEVBQU0xakIsSUFFcEQyakIsRUFBT3pvQixLQUFLLElBQUkwRixHQUFHbUUsS0FBSzJlLEVBQU01akIsRUFBSSxFQUFHNGpCLEVBQU0zakIsRUFBRzJqQixFQUFNMWpCLElBRXBEMmpCLEVBQU96b0IsS0FBSyxJQUFJMEYsR0FBR21FLEtBQUsyZSxFQUFNNWpCLEVBQUc0akIsRUFBTTNqQixFQUFHMmpCLEVBQU0xakIsRUFBSSxJQUU3QzJqQixFRDhFb0JDLENBQWtCL1AsR0FFekMsSUFBSyxNQUFNZ1EsS0FBaUJKLEVBQ0h0dkIsS0FBS3VPLE1BQU13SyxNQUFNeEcsR0FBZW1kLEVBQWNwakIsT0FBT2lHLE1BRXRFOGMsRUFBb0J0b0IsS0FBSzJvQixHQUlqQyxHQUFJTCxFQUFvQnp0QixPQUFTLEVBQUcsQ0FDaEMsTUFBTWtwQixFQUFtQnBMLEVBQVlnUCxTQUFTVSxHQUM5QyxJQUFLLE1BQU1PLEtBQXNCTixFQUU3QixHQUR3Qk0sRUFBbUJqQixTQUFTVSxHQUM5QnRFLEVBQ2xCLE9BQU8sRUFHZixPQUFPLEVBRVAsT0FBTyxFQUlmLGVBQWU1YixHQUNYLE9BQU9sUCxLQUFLd1QsR0FBRzNFLFFBQVFySixJQUFJMEosR0FHL0IsYUFBYTBnQixFQUFPQyxHQUNoQixNQUFNM2YsRUFBT0MsRUFBQSx5QkFBNkJ5ZixFQUFNamtCLEVBQUdpa0IsRUFBTS9qQixFQUFHZ2tCLEVBQU1sa0IsRUFBR2trQixFQUFNaGtCLEdBQzNFLE9BQU9zRSxFQUFBLGlCQUFxQkQsRUFBTWxRLEtBQUt3VCxHQUFHeWEsU0FHOUMsYUFBYS9oQixHQUNULE9BQU9sTSxLQUFLd1QsR0FBR3lhLFFBQVFoaUIsTUFBS2dILEdBQUtBLEVBQUUzRyxPQUFPSixRLDhDRTFIM0MsTUFBTThoQixFQUNULGNBQ0lodUIsS0FBS2l1QixRQUFVLE0sK0JDRmhCLE1BQU02QixFQUNULGNBQ0k5dkIsS0FBS3lILEtBQU8sR0FHaEIsS0FBSzlILEVBQU9vd0IsRUFBVyxHQUNuQixPQUFPL3ZCLEtBQUt5SCxLQUFLVixLQUFLLENBQ2xCcEgsTUFBT0EsRUFDUG93QixTQUFVQSxJQUlsQixNQUNJLElBQUkvb0IsRUFBUSxFQUNSMk0sRUFBTXFjLElBQ1YsSUFBSyxJQUFJcmxCLEVBQUksRUFBR0EsRUFBSTNLLEtBQUt5SCxLQUFLN0YsT0FBUStJLElBQUssQ0FDdkMsSUFBSW9sQixFQUFXL3ZCLEtBQUt5SCxLQUFLa0QsR0FBR29sQixTQUN4QjllLEtBQUswQyxJQUFJQSxFQUFLb2MsS0FBY0EsSUFDNUJwYyxFQUFNb2MsRUFDTi9vQixFQUFRMkQsR0FHaEIsT0FBTzNLLEtBQUt5SCxLQUFLUixPQUFPRCxFQUFPLEdBQUcsR0FBR3JILE1BR3pDLE9BQ0ksT0FBT0ssS0FBS3lILEtBQUs3RixPQUdyQixRQUNJLE9BQTRCLElBQXJCNUIsS0FBS3lILEtBQUs3RixRQzVCbEIsTUFBTXVPLEVBQ1QsMEJBQTBCeWMsRUFBT3FELEdBQzdCLElBQUlDLEVBQVcsR0FDZixNQUFNQyxFQUFlLEdBQ3JCRCxFQUFTbnBCLEtBQUs2bEIsR0FFZCxNQUFNd0QsRUFBVyxJQUFJdGhCLElBQ3JCc2hCLEVBQVMxZ0IsSUFBSWtkLEVBQU9BLEdBRXBCLElBQUl5RCxFQUFRLEVBRVosS0FBT0gsRUFBU3R1QixPQUFTLEdBQUt5dUIsRUFBUUosR0FBWSxDQUM5QyxNQUFNSyxFQUFjLEdBQ3BCLElBQUssTUFBTUMsS0FBV0wsRUFDbEIsSUFBSyxJQUFJdmxCLEVBQUksRUFBR0EsRUFBSTRsQixFQUFRemtCLGVBQWVsSyxPQUFRK0ksSUFBSyxDQUNwRCxNQUFNNmxCLEVBQU9ELEVBQVF6a0IsZUFBZW5CLEdBRy9CNmxCLEVBQUt6a0IsVUFBY3FrQixFQUFTOW1CLElBQUlrbkIsS0FDakNGLEVBQVl2cEIsS0FBS3lwQixHQUNqQkwsRUFBYXBwQixLQUFLeXBCLEdBQ2xCSixFQUFTMWdCLElBQUk4Z0IsRUFBTUQsSUFLL0JMLEVBQVdJLEVBRVhELElBR0osT0FBT0YsRUFJWCxxQkFBcUJ2RCxFQUFPNkQsR0FDeEIsTUFBTVAsRUFBVyxJQUFJSixFQUNyQkksRUFBU25wQixLQUFLNmxCLEVBQU8sR0FFckIsTUFBTXdELEVBQVcsSUFBSXRoQixJQUNmNGhCLEVBQVksSUFBSTVoQixJQUt0QixJQUhBc2hCLEVBQVMxZ0IsSUFBSWtkLEVBQU9BLEdBQ3BCOEQsRUFBVWhoQixJQUFJa2QsRUFBTyxJQUVic0QsRUFBU1MsU0FBUyxDQUN0QixNQUFNSixFQUFVTCxFQUFTMUQsTUFFekIsR0FBSStELEVBQVFqa0IsT0FBT21rQixHQUNmLE1BR0osSUFBSyxJQUFJOWxCLEVBQUksRUFBR0EsRUFBSTRsQixFQUFRemtCLGVBQWVsSyxPQUFRK0ksSUFBSyxDQUNwRCxNQUFNNmxCLEVBQU9ELEVBQVF6a0IsZUFBZW5CLEdBRTlCaW1CLEVBQVVGLEVBQVVsckIsSUFBSStxQixHQUFXLEVBRXpDLElBQUtDLEVBQUt6a0IsWUFBYzJrQixFQUFVcG5CLElBQUlrbkIsSUFBU0ksRUFBVUYsRUFBVWxyQixJQUFJZ3JCLElBQVEsQ0FDM0VFLEVBQVVoaEIsSUFBSThnQixFQUFNSSxHQUNwQixJQUFJYixFQUFXYSxFQUFVNXdCLEtBQUs2d0IsVUFBVUwsRUFBTUMsR0FDOUNQLEVBQVNucEIsS0FBS3lwQixFQUFNVCxHQUNwQkssRUFBUzFnQixJQUFJOGdCLEVBQU1ELEtBTS9CLElBQUlBLEVBQVVFLEVBQ1ZLLEdBQWUsRUFDbkIsTUFBTXJULEVBQU8sR0FHYixJQUZBQSxFQUFLMVcsS0FBS3dwQixJQUVGQSxFQUFRamtCLE9BQU9zZ0IsS0FBV2tFLEdBQzFCVixFQUFTOW1CLElBQUlpbkIsS0FBYUEsRUFBUWprQixPQUFPbWtCLElBQ3pDRixFQUFVSCxFQUFTNXFCLElBQUkrcUIsR0FDdkI5UyxFQUFLMVcsS0FBS3dwQixJQUVWTyxHQUFlLEVBSXZCLE9BQUlBLE9BQ0EsRUFJT3JULEVBSWYsOEJBQThCbVAsRUFBTzZELEdBQ2pDLE1BQU1QLEVBQVcsSUFBSUosRUFDckJJLEVBQVNucEIsS0FBSzZsQixFQUFPLEdBRXJCLE1BQU13RCxFQUFXLElBQUl0aEIsSUFDZjRoQixFQUFZLElBQUk1aEIsSUFLdEIsSUFIQXNoQixFQUFTMWdCLElBQUlrZCxFQUFPQSxHQUNwQjhELEVBQVVoaEIsSUFBSWtkLEVBQU8sSUFFYnNELEVBQVNTLFNBQVMsQ0FDdEIsTUFBTUosRUFBVUwsRUFBUzFELE1BRXpCLEdBQUkrRCxFQUFRamtCLE9BQU9ta0IsR0FDZixNQUdKLElBQUssSUFBSTlsQixFQUFJLEVBQUdBLEVBQUk0bEIsRUFBUXprQixlQUFlbEssT0FBUStJLElBQUssQ0FDcEQsTUFBTTZsQixFQUFPRCxFQUFRemtCLGVBQWVuQixHQUM5Qm9tQixFQUFZL3dCLEtBQUtneEIsZUFBZVIsRUFBTUQsR0FDdENLLEVBQVVGLEVBQVVsckIsSUFBSStxQixHQUFXUSxFQUV6QyxJQUFLUCxFQUFLemtCLFlBQWMya0IsRUFBVXBuQixJQUFJa25CLElBQVNJLEVBQVVGLEVBQVVsckIsSUFBSWdyQixJQUFRLENBQzNFRSxFQUFVaGhCLElBQUk4Z0IsRUFBTUksR0FDcEIsSUFBSWIsRUFBV2EsRUFBVTV3QixLQUFLNndCLFVBQVVMLEVBQU1DLEdBQzlDUCxFQUFTbnBCLEtBQUt5cEIsRUFBTVQsR0FDcEJLLEVBQVMxZ0IsSUFBSThnQixFQUFNRCxLQU0vQixJQUFJQSxFQUFVRSxFQUNWSyxHQUFlLEVBQ25CLE1BQU1yVCxFQUFPLEdBR2IsSUFGQUEsRUFBSzFXLEtBQUt3cEIsSUFFRkEsRUFBUWprQixPQUFPc2dCLEtBQVdrRSxHQUMxQlYsRUFBUzltQixJQUFJaW5CLEtBQWFBLEVBQVFqa0IsT0FBT21rQixJQUN6Q0YsRUFBVUgsRUFBUzVxQixJQUFJK3FCLEdBQ3ZCOVMsRUFBSzFXLEtBQUt3cEIsSUFFVk8sR0FBZSxFQUl2QixPQUFJQSxPQUNBLEVBSU9yVCxFQUlmLHNCQUFzQndULEVBQUtDLEdBQ3ZCLE9BQVNELEVBQUl0bEIsRUFBSXVsQixFQUFJdmxCLElBQU1zbEIsRUFBSXRsQixFQUFJdWxCLEVBQUl2bEIsSUFDaENzbEIsRUFBSXJsQixFQUFJc2xCLEVBQUl0bEIsSUFBTXFsQixFQUFJcmxCLEVBQUlzbEIsRUFBSXRsQixJQUM5QnFsQixFQUFJcGxCLEVBQUlxbEIsRUFBSXJsQixJQUFNb2xCLEVBQUlwbEIsRUFBSXFsQixFQUFJcmxCLEdBR3pDLGlCQUFpQmtlLEVBQUcxbEIsR0FDaEIsT0FBTzRNLEtBQUtrZ0IsSUFBSXBILEVBQUVwZSxFQUFJdEgsRUFBRXNILEdBQUtzRixLQUFLa2dCLElBQUlwSCxFQUFFbmUsRUFBSXZILEVBQUV1SCxHQUFLcUYsS0FBS2tnQixJQUFJcEgsRUFBRWxlLEVBQUl4SCxFQUFFd0gsR0FHeEUsOEJBQThCdWxCLEVBQUlDLEVBQUlDLEVBQUlDLEdBQ3RDLElBQUlDLEVBQUtGLEVBQUtGLEVBQ1ZLLEVBQUtGLEVBQUtGLEVBQ1ZLLEVBQUt6Z0IsS0FBS2tnQixJQUFJSyxHQUNkRyxFQUFLMWdCLEtBQUtrZ0IsSUFBSU0sR0FFbEIsTUFBTUcsRUFBU0osRUFBSyxFQUFJLEdBQUssRUFDdkJLLEVBQVNKLEVBQUssRUFBSSxHQUFLLEVBR3ZCaHRCLEVBQUksQ0FBRWtILEVBQUd5bEIsRUFBSXhsQixFQUFHLEVBQUdDLEVBQUd3bEIsR0FDdEI3QixFQUFTLEdBRWYsSUFBSyxJQUFJc0MsRUFBSyxFQUFHQyxFQUFLLEVBQUdELEVBQUtKLEdBQU1LLEVBQUtKLElBQ2hDLEdBQU1HLEdBQU1KLEdBQU0sR0FBTUssR0FBTUosR0FFL0JsdEIsRUFBRWtILEdBQUtpbUIsRUFDUEUsTUFHQXJ0QixFQUFFb0gsR0FBS2dtQixFQUNQRSxLQUVKdkMsRUFBT3pvQixLQUFLLENBQUU0RSxFQUFHbEgsRUFBRWtILEVBQUdDLEVBQUcsRUFBR0MsRUFBR3BILEVBQUVvSCxJQUdyQyxPQUFPMmpCLEVBSVgsc0JBQXNCdGYsRUFBTThjLEdBQ3hCLElBQUlnRixHQUFjLEVBQ2xCLElBQUssTUFBTXpDLEtBQVNyZixFQUNYOGMsRUFBSS9nQixNQUFLZ0gsR0FBS0EsRUFBRTNHLE9BQU9pakIsT0FDeEJ5QyxHQUFjLEdBSXRCLE9BQU9BLEssK0JDbk1mLE1BQU0sTUFBRXhxQixHQUFVLEVBQVEsTUFFcEIsWUFBRXlxQixHQUFnQixFQUFRLEtBR3pCLE1BQU0zWixVQUF1QjlRLEVBQ2hDLFNBQ0ksT0FBT3hILEtBQUs0SCxVQUVoQixrQkFBb0IsTUFBTyxpQkFFM0IsY0FDSXVMLE1BQU1tRixFQUFlbEYsS0FBTSxJQUFJNmUsR0FHbkMsb0JBQW9CQyxHQUNoQmx5QixLQUFLd1QsR0FBRzJJLGFBQWUrVixFQUczQixrQkFDSSxPQUFPbHlCLEtBQUt3VCxHQUFHMkksYUFHbkIsb0JBQ0ksT0FBT25jLEtBQUt3VCxHQUFHMmUsZUFHbkIsa0JBQWtCeHlCLEdBQ2RLLEtBQUt3VCxHQUFHMmUsZUFBaUJ4eUIsSyx3RUM1QjFCLE1BQU02YixFQUFvQixDQUM3QjRXLFlBQWEsY0FDYkMsT0FBUSxTQUNSQyxTQUFVLFdBQ1ZDLFVBQVcsYUFJUixNQUFNTixFQUNULGNBQ0lqeUIsS0FBS21jLGFBQWVYLEVBQWtCNFcsWUFDdENweUIsS0FBS215QixlQUFpQixVLDZEQ1R2QixNQUFNemIsRUFDVCxjQUNJMVcsS0FBSzRXLGVBQWlCLEdBQ3RCNVcsS0FBSzZXLGVBQWlCLElBQUkvSCxJQUk5QixRQUFRMkksR0FDSnpYLEtBQUs0VyxlQUFlN1AsS0FDaEIsSUFBSSxJQUFjMFEsTyw0Q0NUdkIsTUFBTThPLEVBQ1QsWUFBWTllLEdBQ1J6SCxLQUFLa1gsTUFBTyxTQUNabFgsS0FBS2tZLEdBQUt6USxFQUFLeVEsR0FDZmxZLEtBQUt3eUIsS0FBTy9xQixFQUFLK3FCLEtBQ2pCeHlCLEtBQUsrQixLQUFPMEYsRUFBSzFGLEtBQ2pCL0IsS0FBS3l5QixZQUFjaHJCLEVBQUtnckIsWUFDeEJ6eUIsS0FBSzBYLEtBQU9qUSxFQUFLaVEsS0FDakIxWCxLQUFLc1gsS0FBTzdQLEVBQUs2UCxNQUFRLEVBQ3pCdFgsS0FBSzRYLFVBQVluUSxFQUFLbVEsV0FBYSxVLDRDQ1ZwQyxNQUFNaEUsRUFDVCxrQixjQ0ZHLFNBQVM4ZSxFQUEwQmxWLEdBQ3RDLE1BQU1qSixFQUFjaUosRUFBZWpKLFlBQ25DLE9BQU8sSUFBSTlILEdBQUdtRSxLQUFLMkQsRUFBWTVJLEVBQzNCNEksRUFBWTNJLEVBQTRCLEdBQXhCNFIsRUFBZStOLE9BQy9CaFgsRUFBWTFJLEcsZ0NDSmIsU0FBUzhtQixJQUdaLElBRkEsSUFBSUMsRUFBSSxHQUNKQyxFQUFZLG1CQUNQbG9CLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxJQUNwQmlvQixFQUFFam9CLEdBQUtrb0IsRUFBVUMsT0FBTzdoQixLQUFLeUksTUFBc0IsR0FBaEJ6SSxLQUFLMEksVUFBa0IsR0FXOUQsT0FSQWlaLEVBQUUsSUFBTSxJQUdSQSxFQUFFLElBQU1DLEVBQVVDLE9BQWdCLEVBQVJGLEVBQUUsSUFBYSxFQUFLLEdBRTlDQSxFQUFFLEdBQUtBLEVBQUUsSUFBTUEsRUFBRSxJQUFNQSxFQUFFLElBQU0sSUFFcEJBLEVBQUVHLEtBQUssSSx3RkNUdEIsTUFBTSxTQUFFaHVCLEdBQWEsRUFBUSxLQUV0QixNQUFNMGMsVUFBOEIxYyxFQUN2QyxrQkFBb0IsTUFBTyx5QkFFM0IsWUFBWW1ULEVBQUlqVCxFQUFlK3RCLEdBQzNCN2YsTUFBTXNPLEVBQXNCck8sS0FBTzhFLEdBQ25DbFksS0FBS2tZLEdBQUtBLEVBRVYsSUFBSXpSLEVBQWdCLENBQ2hCLDBCQUNBLHFCQUFnQ3pHLEtBQUtrWSxHQUNyQyx5QkFBb0NsWSxLQUFLa1ksR0FDekMsd0JBQW1DbFksS0FBS2tZLEdBQ3hDLDBCQUFxQ2xZLEtBQUtrWSxHQUMxQyxrQkFBNkJsWSxLQUFLa1ksR0FDbEMsbUJBQThCbFksS0FBS2tZLEdBQ25DLGdCQUEyQmxZLEtBQUtrWSxHQUNoQyxzQkFBaUNsWSxLQUFLa1ksR0FDdEMsaUJBQ0Esc0JBSUp6UixFQUFnQkEsRUFBY3hFLE9BQU8rd0IsR0FFckNoekIsS0FBS2tHLHNCQUFzQk8sR0FFM0J6RyxLQUFLaUYsY0FBZ0JBLEVBQ3JCakYsS0FBS2lGLGNBQWNzRCxHQUFHLG9CQUFxQnZJLEtBQUtpekIsa0JBQW1CanpCLE1BQ25FQSxLQUFLaUYsY0FBY3NELEdBQUcsZUFBZ0J2SSxLQUFLa3pCLG1CQUFvQmx6QixNQUUvREEsS0FBS2lGLGNBQWNzRCxHQUFHLFdBQVcsS0FDN0J2SSxLQUFLaUYsY0FBY3NHLElBQUksb0JBQXFCdkwsS0FBS2l6QixrQkFBbUJqekIsTUFDcEVBLEtBQUtpRixjQUFjc0csSUFBSSxlQUFnQnZMLEtBQUtrekIsbUJBQW9CbHpCLFNBSXhFLFdBQVd1RixHQUNQNE4sTUFBTXJOLFdBQVdQLEdBR3JCLG1CQUFtQnhFLEtBQXFCVSxHQUNoQ3pCLEtBQUtpRixlQUNMakYsS0FBS2lGLGNBQWNrdUIsS0FBS3B5QixFQUFrQmYsS0FBS2tZLE1BQU96VyxHQUcxRCxJQUFLLE1BQU0yeEIsS0FBYXB6QixLQUFLaUYsY0FBY21JLE9BQ3ZDLEdBQUk1TixPQUFPa0YsZUFBZVMsS0FBS25GLEtBQUtpRixjQUFjbUksT0FBUWdtQixHQUFZLENBQ2xFLE1BQU1DLEVBQWtCcnpCLEtBQUtpRixjQUFjbUksT0FBT2dtQixHQUVBLG1CQUF2Q0MsRUFBZ0JucUIsb0JBRXZCbXFCLEVBQWdCbnFCLG1CQUFtQm5JLEVBQWtCZixLQUFLa1ksTUFBT3pXLEdBSzdFLE9BQVFWLEdBQ0osS0FBSyxpQkFDRGYsS0FBS3N6QixvQkFDTCxNQUNKLEtBQUsscUJBQ0QsTUFBTXZXLEVBQWUvYyxLQUFLc0gsT0FBT25FLGNBQWMsVUFDcEJuRCxLQUFLc0gsT0FBT25FLGNBQWMsU0FBMEJuRCxLQUFLa1ksSUFDakUzRCxZQUFjd0ksRUFBYXFHLGdCQUFnQnBqQixLQUFLaUYsY0FBYzJNLG9CQUVqRixNQUNKLEtBQUsscUJBQWdDNVIsS0FBS2tZLEdBQ3RDbFksS0FBS3V6QixxQkFBcUI5eEIsRUFBSyxJQUMvQixNQUNKLEtBQUsseUJBQW9DekIsS0FBS2tZLEdBQzFDbFksS0FBS3d6Qix5QkFBeUIveEIsRUFBSyxJQUNuQyxNQUNKLEtBQUssd0JBQW1DekIsS0FBS2tZLEdBQ3pDbFksS0FBS3l6Qix3QkFBd0JoeUIsRUFBSyxJQUNsQyxNQUNKLEtBQUssMEJBQXFDekIsS0FBS2tZLEdBQzNDbFksS0FBSzB6Qix5QkFBeUJqeUIsRUFBSyxJQUNuQyxNQUNKLEtBQUssc0JBQWlDekIsS0FBS2tZLEdBQ3ZDLE1BQU15YixFQUFZbHlCLEVBQUssR0FDdkJ6QixLQUFLaUYsY0FBY21JLE9BQStCLHVCQUFFd21CLFlBQVlELEdBQ2hFLE1BQ0osS0FBSyxrQkFBNkIzekIsS0FBS2tZLEdBQ25DLE1BQU16SSxFQUFTelAsS0FBS2lGLGNBQWMyVCxXQUFXLFVBQ3pDbkosR0FDQUEsRUFBTzBqQixLQUFLLGlCQUVoQm56QixLQUFLaUYsY0FBY21JLE9BQStCLHVCQUFFeW1CLGVBQ3BELE1BQ0osS0FBSyxtQkFBOEI3ekIsS0FBS2tZLEdBQ3BDbFksS0FBS2lGLGNBQWNtSSxPQUErQix1QkFBRTBtQixnQkFDcEQsTUFDSixLQUFLLGdCQUEyQjl6QixLQUFLa1ksR0FDakNsWSxLQUFLaUYsY0FBY21JLE9BQStCLHVCQUFFMm1CLGNBUWhFLHFCQUFxQjVXLEdBQ2pCLE1BQU1KLEVBQWUvYyxLQUFLc0gsT0FBT25FLGNBQWMsVUFDekNpYSxFQUFxQnBkLEtBQUtzSCxPQUFPbkUsY0FBYyxTQUEwQm5ELEtBQUtrWSxJQUVwRmtGLEVBQW1CN0ksWUFBY3dJLEVBQWFxRyxnQkFBZ0JwakIsS0FBS2lGLGNBQWMyTSxvQkFFakYsTUFBTTZMLEVBQU8sa0JBQW9CTCxFQUFtQjdJLFlBQWE0SSxHQUM3RE0sR0FBUUEsRUFBSzdiLE9BQVMsSUFDdEI1QixLQUFLaUYsY0FBY21JLE9BQStCLHVCQUFFNG1CLFFBQVF2VyxHQUM1REwsRUFBbUI3SSxZQUFjNEksR0FLekMseUJBQXlCQSxHQUNyQixNQUFNSixFQUFlL2MsS0FBS3NILE9BQU9uRSxjQUFjLFVBQ3pDaWEsRUFBcUJwZCxLQUFLc0gsT0FBT25FLGNBQWMsU0FBMEJuRCxLQUFLa1ksSUFFcEZrRixFQUFtQjdJLFlBQWN3SSxFQUFhcUcsZ0JBQWdCcGpCLEtBQUtpRixjQUFjMk0sb0JBQ2pGLE1BQU0yQyxFQUFjNkksRUFBbUI3SSxZQUVqQzBmLEVBQWtCbFgsRUFBYW1YLG9CQUFvQmwwQixLQUFLaUYsY0FBYzJNLG9CQUN0RXVpQixFQUF3QnBYLEVBQWFtWCxvQkFBb0IvVyxHQTJCL0QsR0FBSUosRUFBYXFYLGFBQWE3ZixFQUFhNEksR0FBYSxDQUNwRCxNQUFNTSxFQUFPLENBQUNOLEVBQVk1SSxHQUMxQnZVLEtBQUtpRixjQUFjbUksT0FBK0IsdUJBQUU0bUIsUUFBUXZXLEdBQzVETCxFQUFtQjdJLFlBQWM0SSxNQUM5QixDQUNILE1BQU1NLEVBQU8sMkJBQTZCd1csRUFBaUJFLEdBQzNELEdBQUkxVyxHQUFRQSxFQUFLN2IsT0FBUyxFQUFHLENBQ3JCNmIsRUFBSzdiLE9BQVMsR0FFVm1iLEVBQWFxWCxhQUFhM1csRUFBSyxHQUFJTixJQUNuQ00sRUFBS25ELFFBSWIsSUFBSStaLEdBQWlCLEVBQ3JCLEtBQU81VyxFQUFLN2IsT0FBUyxHQUFLeXlCLEdBQ2xCdFgsRUFBYXFYLGFBQWEzVyxFQUFLQSxFQUFLN2IsT0FBUyxHQUFJMlMsR0FDakRrSixFQUFLK08sTUFFTDZILEdBQWlCLEVBS3pCNVcsRUFBSzZXLFFBQVFuWCxHQUVibmQsS0FBS2lGLGNBQWNtSSxPQUErQix1QkFBRTRtQixRQUFRdlcsR0FDNURMLEVBQW1CN0ksWUFBYzRJLElBSzdDLHdCQUF3Qk0sR0FDcEJ6ZCxLQUFLaUYsY0FBY21JLE9BQStCLHVCQUFFNG1CLFFBQVF2VyxHQUdoRSxzQkFBc0JOLEdBQ2xCLE1BQU1KLEVBQWUvYyxLQUFLc0gsT0FBT25FLGNBQWMsVUFFekNpYSxFQUFxQnBkLEtBQUtzSCxPQUFPbkUsY0FBYyxTQUEwQm5ELEtBQUtrWSxJQUUvRWtGLEVBQW1CN0ksWUFFeEI2SSxFQUFtQjdJLFlBQWN3SSxFQUFhcUcsZ0JBQWdCcGpCLEtBQUtpRixjQUFjMk0sb0JBR2pGLE1BQU02TCxFQUFPLGtCQUFvQkwsRUFBbUI3SSxZQUFhNEksR0FNakUsT0FMSU0sR0FBUUEsRUFBSzdiLE9BQVMsSUFDdEI1QixLQUFLaUYsY0FBY21JLE9BQStCLHVCQUFFNG1CLFFBQVF2VyxHQUM1REwsRUFBbUI3SSxZQUFjNEksR0FHOUIsSUFBSW9YLFNBQVEsQ0FBQ0MsRUFBU0MsS0FDekJ6MEIsS0FBS2lGLGNBQWNzRCxHQUFHLGdCQUFnQixLQUNsQ2lzQixPQUdKeDBCLEtBQUtpRixjQUFjc0QsR0FBRyxjQUFjLEtBQ2hDa3NCLFVBS1osbUNBQW1DaFgsR0FHL0IsT0FGQXpkLEtBQUtpRixjQUFjbUksT0FBK0IsdUJBQUU0bUIsUUFBUXZXLEdBRXJELElBQUk4VyxTQUFRLENBQUNDLEVBQVNDLEtBQ3pCejBCLEtBQUtpRixjQUFjc0QsR0FBRyxnQkFBZ0IsS0FDbENpc0IsT0FHSngwQixLQUFLaUYsY0FBY3NELEdBQUcsY0FBYyxLQUNoQ2tzQixVQUtaLGtCQUFrQnhQLEdBQ2RqbEIsS0FBS3NILE9BQU92RCxpQkFBaUIsa0JBQTZCL0QsS0FBS2tZLEdBQUkrTSxHQUl2RSxtQkFBbUJBLEdBQ2ZqbEIsS0FBS3NILE9BQU92RCxpQkFBaUIsa0JBQTRCL0QsS0FBS2tZLEdBQUkrTSxHQUd0RSxpQkFBaUIvTSxFQUFJaE0sR0FDakIsSUFBSyxNQUFNd29CLEtBQWMxMEIsS0FBSzIwQixXQUN0QkQsRUFBV3BvQixPQUFPSixLQUNsQmxNLEtBQUtpRixjQUFjbUksT0FBK0IsdUJBQUV3bUIsWUFBWTFuQixHQUNoRWxNLEtBQUtzSCxPQUFPdkQsaUJBQWlCLGlCQUEyQi9ELEtBQUtpRixjQUFlLENBQUNpVCxLQUt6RixvQkFDNEJsWSxLQUFLc0gsT0FBT25FLGNBQWMsU0FBMEJuRCxLQUFLa1ksSUFBSTFFLEdBS3pGLHlCQUF5QnRILEdBQ01sTSxLQUFLc0gsT0FBT25FLGNBQWMsU0FBMEJuRCxLQUFLa1ksSUFDakUzRCxZQUFjckksRUFDakNsTSxLQUFLaUYsY0FBY21JLE9BQStCLHVCQUFFd25CLGFBQWExb0IsTSwrQkNuUXpFLE1BQU0sU0FBRW5ILEdBQWEsRUFBUSxLQUV0QixNQUFNMmQsVUFBa0MzZCxFQUMzQyxrQkFBb0IsTUFBTyw0QkFFM0IsWUFBWUUsR0FDUmtPLE1BQU11UCxFQUEwQnRQLE1BQ2hDcFQsS0FBS2tHLHNCQUFzQixJQUkzQmxHLEtBQUtpRixjQUFnQkEsRUFHekIsV0FBV00sR0FDUDROLE1BQU1yTixXQUFXUCxHQUdyQixtQkFBbUJ4RSxLQUFxQlUsSUFNeEMsaUJBQWlCaVcsRUFBTW1kLEVBQWFuVixHQUNoQyxPQUFPMWYsS0FBS2lGLGNBQWNtSSxPQUFtQywyQkFBRXlWLGlCQUFpQm5MLEVBQU1tZCxFQUFhblYsT0MxQnZHb1YsRUFBMkIsR0FHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLEdBQUdGLEVBQXlCRSxHQUMzQixPQUFPRixFQUF5QkUsR0FBVXQxQixRQUczQyxJQUFJK0wsRUFBU3FwQixFQUF5QkUsR0FBWSxDQUdqRHQxQixRQUFTLElBT1YsT0FIQXUxQixFQUFvQkQsR0FBVTd2QixLQUFLc0csRUFBTy9MLFFBQVMrTCxFQUFRQSxFQUFPL0wsUUFBU3ExQixHQUdwRXRwQixFQUFPL0wsUUNuQmZxMUIsRUFBb0Izd0IsRUFBSSxDQUFDMUUsRUFBU3cxQixLQUNqQyxJQUFJLElBQUluMUIsS0FBT20xQixFQUNYSCxFQUFvQkksRUFBRUQsRUFBWW4xQixLQUFTZzFCLEVBQW9CSSxFQUFFejFCLEVBQVNLLElBQzVFUCxPQUFPQyxlQUFlQyxFQUFTSyxFQUFLLENBQUUwRixZQUFZLEVBQU1ELElBQUswdkIsRUFBV24xQixNQ0ozRWcxQixFQUFvQkksRUFBSSxDQUFDQyxFQUFLQyxJQUFTNzFCLE9BQU9xQixVQUFVNkQsZUFBZVMsS0FBS2l3QixFQUFLQyxHQ0NqRk4sRUFBb0JPLEVBQUs1MUIsSUFDSCxvQkFBWDYxQixRQUEwQkEsT0FBT0MsYUFDMUNoMkIsT0FBT0MsZUFBZUMsRUFBUzYxQixPQUFPQyxZQUFhLENBQUU3MUIsTUFBTyxXQUU3REgsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSywyQkNMdkQsTUFBTSxPQUFFeUMsR0FBVyxFQUFRLE1BRW5CMmtCLFdBQVUsR0FBSyxFQUFRLEtBRWxCME8sRUFBY2hwQixHQUFHaXBCLGFBQWEsZUFHM0NELEVBQVk1MEIsVUFBVW9uQixXQUFhLFdBQy9Cam9CLEtBQUtzSCxPQUFTbEYsRUFBT3hCLFlBQVksRUFBVyswQixLQUM1QzMxQixLQUFLc0gsT0FBT3ZELGlCQUFpQndNLEVBQUEsbUJBQzdCdlEsS0FBS3NILE9BQU92RCxpQkFBaUJ3TSxFQUFBLGVBQTJCLGVBQWdCLGFBSTVFa2xCLEVBQVk1MEIsVUFBVSswQixPQUFTLFNBQVVDLEssYUNYbEMsTUFBTUMsRUFBc0JycEIsR0FBR2lwQixhQUFhLHVCQUVuREksRUFBb0JDLFdBQVdDLElBQUksc0JBQXVCLENBQ3REdGUsS0FBTSxTQUNONEIsT0FBTyxFQUNQcUwsTUFBTyx5QkFHWG1SLEVBQW9CajFCLFVBQVVvbkIsV0FBYSxXQUN2QyxNQUFNeFgsRUFBUXpRLEtBQUtpMkIsT0FBT3ZsQixnQkFDcEJDLEVBQWMsSUFBSWxFLEdBQUdtRSxLQUFLSCxFQUFNOUUsRUFBSSxFQUFHLElBQU04RSxFQUFNNUUsRUFBSSxHQUM3RDdMLEtBQUtrTyxLQUFPLElBQUl6QixHQUFHb0UsWUFBWTdRLEtBQUtpMkIsT0FBTzFtQixjQUFlb0IsR0FDMUQzUSxLQUFLd00sSUFBSWpFLEdBQUcsaUJBQWtCdkksS0FBS2syQixjQUFlbDJCLE1BRWxEQSxLQUFLaTJCLE9BQU9yZCxXQUFXLFNBQVN1ZCxTQUFVLEVBQzFDbjJCLEtBQUtpMkIsT0FBT3RzQixLQUFLLFdBQVcsS0FDeEIzSixLQUFLd00sSUFBSWpCLElBQUksaUJBQWtCdkwsS0FBS2syQixjQUFlbDJCLFVBSTNEODFCLEVBQW9CajFCLFVBQVVxMUIsY0FBZ0IsU0FBVW5ILEVBQUtxSCxHQUN6RCxNQUFNbEgsRUFBYyxJQUFJemlCLEdBQUdtRSxLQUNaNVEsS0FBS2tPLEtBQUtpaEIsY0FBY0osRUFBS0csSUFFeENsdkIsS0FBS3dNLElBQUkybUIsS0FBSyxnQkFBaUJuekIsS0FBS2kyQixPQUFRL0csRUFBYWtILElBT2pFTixFQUFvQmoxQixVQUFVeU0sUUFBVSxTQUFVK29CLEdBQzlDcjJCLEtBQUtxMkIsU0FBV0EsR0FHcEJQLEVBQW9CajFCLFVBQVUrTSxRQUFVLFdBQ3BDLE9BQU81TixLQUFLcTJCLFVBR2hCUCxFQUFvQmoxQixVQUFVeTFCLGVBQWlCLFNBQVU1VyxHQUNyRCxJQUFJMk8sRUFBY3J1QixLQUFLcTJCLFNBQVMsR0FDNUIvSCxFQUF3Qm5lLEVBQUEsaUJBQXFCa2UsRUFBYTNPLEdBQzlELElBQUssTUFBTXhULEtBQVFsTSxLQUFLcTJCLFNBQVUsQ0FDOUIsTUFBTTlILEVBQWFwZSxFQUFBLGlCQUFxQmpFLEVBQU13VCxHQUUxQzZPLEVBQWFELElBQ2JBLEVBQXdCQyxFQUN4QkYsRUFBY25pQixHQUd0QixPQUFPbWlCLEcsMERDN0NKLE1BQU1rSSxFQUF5QjlwQixHQUFHaXBCLGFBQWEsMEJBK1B0RCxTQUFTYyxFQUEwQkMsR0FDL0IsTUFBTXpKLEVBQU0sSUFBSWxlLElBRWhCLElBQUssTUFBTTRuQixLQUFlRCxFQUN0QnpKLEVBQUl0ZCxJQUFJZ25CLEVBQVlDLFVBQVdELEVBQVlFLFlBRy9DLE9BQU81SixFQXpOWHVKLEVBQXVCUixXQUFXQyxJQUFJLGNBQWUsQ0FDakR0ZSxLQUFNLFNBQ05pTixNQUFPLGlCQUdYNFIsRUFBdUJSLFdBQVdDLElBQUksaUJBQWtCLENBQ3BEdGUsS0FBTSxTQUNOaU4sTUFBTyxrQkFDUGtTLFFBQVMsSUFJYk4sRUFBdUJSLFdBQVdDLElBQUksa0JBQW1CLENBQ3JEdGUsS0FBTSxTQUNOaU4sTUFBTyxtQkFDUGtTLFFBQVMsTUFHYk4sRUFBdUJSLFdBQVdDLElBQUksUUFBUyxDQUMzQ3RlLEtBQU0sVUFDTmlOLE1BQU8sU0FDUGtTLFNBQVMsSUFHYk4sRUFBdUJSLFdBQVdDLElBQUksaUJBQWtCLENBQ3BEdGUsS0FBTSxPQUNOaU4sTUFBTyxrQkFDUG1TLE9BdEVnQixDQUNoQixDQUNJLzBCLEtBQU0sUUFDTjRpQixNQUFPLFFBQ1BqTixLQUFNLFNBQ05tZixRQUFTLEdBRWIsQ0FDSTkwQixLQUFNLGFBQ040aUIsTUFBTyxVQUNQak4sS0FBTSxTQUNObWYsUUFBUyxHQUNWLENBQ0M5MEIsS0FBTSxVQUNONGlCLE1BQU8sT0FDUGpOLEtBQU0sU0FDTm1mLFFBQVMsR0FDVixDQUNDOTBCLEtBQU0sYUFDTjRpQixNQUFPLGFBQ1BqTixLQUFNLFNBQ05tZixRQUFTLEdBQ1YsQ0FDQzkwQixLQUFNLGNBQ040aUIsTUFBTyxXQUNQak4sS0FBTSxTQUNObWYsUUFBUyxNQStDakJOLEVBQXVCUixXQUFXQyxJQUFJLGlCQUFrQixDQUNwRHRlLEtBQU0sT0FDTmlOLE1BQU8sa0JBQ1BtUyxPQTlDeUIsQ0FDekIsQ0FDSS8wQixLQUFNLFlBQ040aUIsTUFBTyxhQUNQak4sS0FBTSxVQUVWLENBQ0kzVixLQUFNLGFBQ040aUIsTUFBTyxjQUNQak4sS0FBTSxXQXNDVjRCLE9BQU8sSUFHWGlkLEVBQXVCUixXQUFXQyxJQUFJLGtCQUFtQixDQUNyRHRlLEtBQU0sU0FDTmlOLE1BQU8sc0JBR1g0UixFQUF1QlIsV0FBV0MsSUFBSSxtQkFBb0IsQ0FDdER0ZSxLQUFNLFNBQ05pTixNQUFPLHVCQUdYNFIsRUFBdUJSLFdBQVdDLElBQUksZUFBZ0IsQ0FDbER0ZSxLQUFNLFNBQ05pTixNQUFPLGdCQUNQb1MsS0FBTSxJQUNORixRQUFTLElBSWJOLEVBQXVCUixXQUFXQyxJQUFJLGlCQUFrQixDQUNwRHRlLEtBQU0sU0FDTmlOLE1BQU8sa0JBQ1BvUyxLQUFNLElBQ05GLFFBQVMsWUFLYk4sRUFBdUIxMUIsVUFBVW0yQix3QkFBMEIsU0FBVW53QixHQUM1RDdHLEtBQUtnekIsNkJBQ05oekIsS0FBS2d6QiwyQkFBNkIsSUFHdENoekIsS0FBS2d6QiwyQkFBMkJqc0IsS0FBS0YsSUFJekMwdkIsRUFBdUIxMUIsVUFBVW8yQixlQUFpQixXQUM5Q2ozQixLQUFLazNCLGFBQWUsR0FDcEJsM0IsS0FBS3NILE9BQVMsRUFBQWxGLE9BQUEsWUFBbUIya0IsRUFBVyxXQUFYLEtBRzVCL21CLEtBQUtnekIsNkJBQ05oekIsS0FBS2d6QiwyQkFBNkIsSUFHdEMsTUFBTW1FLEVBQWlCbjNCLEtBQUttM0IsZUFDdEJDLEVBQWMsQ0FDaEJsZixHQUFJbFksS0FBSzRhLFlBQ1RILE1BQU96YSxLQUFLeWEsTUFDWjhRLE9BQVF2ckIsS0FBS3EzQixnQkFDYnhKLGVBQWdCMkksRUFBMEJ4MkIsS0FBSzZ0QixnQkFDL0NoUCxlQUFnQjdlLEtBQUs2ZSxrQkFDbEJzWSxFQUNIalYsYUFBY2xpQixLQUFLa2lCLGFBQ25COEIsYUFBY2hrQixLQUFLczNCLGtCQUd2QixHQUFJdDNCLEtBQUt1M0IsaUJBQTRDLEtBQXpCdjNCLEtBQUt1M0IsZ0JBQXdCLENBQ3JELE1BQU1DLEVBQWtCeDNCLEtBQUt3TSxJQUFJTSxLQUFLQyxVQUFVLGVBQWUvTSxLQUFLdTNCLGlCQUU5RDNiLEVBQWMsR0FDcEIsSUFBSyxNQUFNNmIsS0FBaUJELEVBRXhCLEdBQUlDLEVBQWN0QixRQUFTLENBQ3ZCLE1BQU11QixFQUFZRCxFQUFjcnFCLE9BQStCLHVCQUFFd04sWUFDakVnQixFQUFZN1UsS0FBSzJ3QixHQUd6Qk4sRUFBWXhiLFlBQWNBLEVBTzlCLEdBSkk1YixLQUFLc0gsT0FBT3hELFlBQVkyZCxFQUFBLE9BQTZCemhCLEtBQUs0YSxjQUMxRDVhLEtBQUtzSCxPQUFPM0QsZUFBZThkLEVBQUEsT0FBNkJ6aEIsS0FBSzRhLGFBRzdENWEsS0FBS3NILE9BQU9oRSxTQUFTNlcsRUFBQSxPQUEwQm5hLEtBQUs0YSxrQkFFakQsQ0FDSCxNQUFNNEMsRUFBaUIsSUFBSXJELEVBQUEsRUFBbUJpZCxHQUV4Q3JhLEVBQWUvYyxLQUFLc0gsT0FBT25FLGNBQWNtTixFQUFBLFFBQy9DLEdBQUl5TSxFQUFjLENBQ2QsTUFBTXhJLEVBQWN3SSxFQUFhcUcsZ0JBQWdCcGpCLEtBQUtpMkIsT0FBTzFtQixlQUM3RGlPLEVBQWVqSixZQUFjQSxFQUdqQ3ZVLEtBQUtzSCxPQUFPdEUsY0FBY3dhLEdBSTlCeGQsS0FBS3NILE9BQU8vRCxpQkFBaUIsSUFBSWtlLEVBQUEsRUFBc0J6aEIsS0FBSzRhLFlBQWE1YSxLQUFLaTJCLE9BQVFqMkIsS0FBS2d6Qiw2QkFFM0ZoekIsS0FBSzIzQixRQUFVMzNCLEtBQUtpMkIsT0FBTzdvQixPQUF5QixpQkFDcERwTixLQUFLaTJCLE9BQU8yQixVQUFVQyxLQUFLLFdBQVksS0FLM0N0QixFQUF1QjExQixVQUFVbXpCLFFBQVUsU0FBVXZXLEdBQzdDemQsS0FBS2szQixjQUFnQmwzQixLQUFLazNCLGFBQWF0MUIsT0FBUyxHQUNoRDVCLEtBQUtpMkIsT0FBTzlDLEtBQUssY0FFckJuekIsS0FBS2szQixhQUFlelosRUFFcEJ6ZCxLQUFLaTJCLE9BQU8yQixVQUFVRSxNQUFPLEVBQzdCOTNCLEtBQUtpMkIsT0FBTzJCLFVBQVVDLEtBQUssV0FBWSxLQUczQ3RCLEVBQXVCMTFCLFVBQVUrekIsYUFBZSxTQUFVcmdCLEdBQ3REdlUsS0FBS2szQixhQUFlLEdBQ3BCbDNCLEtBQUtpMkIsT0FBT2pZLGlCQUFpQnpKLEVBQVk1SSxFQUFHNEksRUFBWTNJLEVBQUcySSxFQUFZMUksR0FFdkU3TCxLQUFLaTJCLE9BQU8yQixVQUFVRSxNQUFPLEVBQzdCOTNCLEtBQUtpMkIsT0FBTzJCLFVBQVVDLEtBQUssV0FBWSxLQUczQ3RCLEVBQXVCMTFCLFVBQVUrMEIsT0FBUyxTQUFVQyxHQUNoRDcxQixLQUFLKzNCLGNBQWNsQyxJQUd2QlUsRUFBdUIxMUIsVUFBVWszQixjQUFnQixTQUFVbEMsR0FFdkQsR0FBSTcxQixLQUFLazNCLGFBQWF0MUIsT0FBUyxFQUFHLENBQzlCLE1BQU1vMkIsRUFBZ0JoNEIsS0FBS2szQixhQUFhbDNCLEtBQUtrM0IsYUFBYXQxQixPQUFTLEdBQzdEcTJCLEVBQVdqNEIsS0FBS2kyQixPQUFPcmtCLG1CQUN2QnNtQixFQUFZLElBQUl6ckIsR0FBR21FLEtBQUtvbkIsRUFBY3JzQixFQUFHcXNCLEVBQWNwc0IsRUFBR29zQixFQUFjbnNCLEdBSTlFLEdBRDJCb3NCLEVBQVN2SixTQUFTd0osSUFDbEJyQyxFQUFLNzFCLEtBQUttNEIsZUFBaUIsQ0FDbEQsTUFBTTVqQixFQUFjdlUsS0FBS2szQixhQUFhMUssTUFFTCxJQUE3QnhzQixLQUFLazNCLGFBQWF0MUIsU0FDbEI1QixLQUFLaTJCLE9BQU85QyxLQUFLLGVBQWdCNWUsR0FDakN2VSxLQUFLaTJCLE9BQU8yQixVQUFVRSxNQUFPLEVBQzdCOTNCLEtBQUtpMkIsT0FBTzJCLFVBQVVDLEtBQUssV0FBWSxLQUUzQzczQixLQUFLaTJCLE9BQU85QyxLQUFLLG9CQUFxQjVlLFFBRWxDdlUsS0FBS2szQixhQUFhdDFCLE9BQVMsRUFDM0I1QixLQUFLMjNCLFFBQVFTLEtBQUtGLEVBQVdyQyxHQUU3QjcxQixLQUFLMjNCLFFBQVFVLE9BQU9ILEVBQVdyQyxHQUVuQzcxQixLQUFLMjNCLFFBQVFXLGdCQUFnQnpDLEtBS3pDVSxFQUF1QjExQixVQUFVK3lCLFlBQWMsU0FBVXJFLEdBQ3JELE1BQU0wSSxFQUFXajRCLEtBQUtpMkIsT0FBT3JrQixtQkFFdkI0ZixFQUFLakMsRUFBTTVqQixFQUFJc3NCLEVBQVN0c0IsRUFDeEI0c0IsRUFBS2hKLEVBQU0xakIsRUFBSW9zQixFQUFTcHNCLEVBQ3hCMnNCLEVBQW1DLElBQXJCdm5CLEtBQUt3bkIsTUFBTWpILEVBQUkrRyxHQUFZdG5CLEtBQUt5bkIsR0FDcEQxNEIsS0FBS2kyQixPQUFPMEMsZUFBZSxFQUFHSCxFQUFhLElBRy9DakMsRUFBdUIxMUIsVUFBVWd6QixhQUFlLFdBQzVDN3pCLEtBQUtpMkIsT0FBTzJCLFVBQVVFLE1BQU8sRUFDN0I5M0IsS0FBS2kyQixPQUFPMkIsVUFBVUMsS0FBSyxVQUFXLEtBRzFDdEIsRUFBdUIxMUIsVUFBVWt6QixXQUFhLFdBQzFDL3pCLEtBQUtpMkIsT0FBTzJCLFVBQVVFLE1BQU8sRUFDN0I5M0IsS0FBS2kyQixPQUFPMkIsVUFBVUMsS0FBSyxVQUFXLEtBRzFDdEIsRUFBdUIxMUIsVUFBVWl6QixjQUFnQixXQUM3Qzl6QixLQUFLaTJCLE9BQU8yQixVQUFVRSxNQUFPLEVBQzdCOTNCLEtBQUtpMkIsT0FBTzJCLFVBQVVDLEtBQUssYUFBYyxLLHNCQ3BRdEMsTUFBTWUsRUFBNkJuc0IsR0FBR2lwQixhQUFhLDhCQVUxRGtELEVBQTJCN0MsV0FBV0MsSUFBSSxhQUFjLENBQ3BEdGUsS0FBTSxTQUNOaU4sTUFBTyxjQUNQa1MsUUFBUyxJQUliK0IsRUFBMkIvM0IsVUFBVW9uQixXQUFhLFdBQzlDam9CLEtBQUtpMkIsT0FBTzdvQixPQUErQix1QkFBRTRwQix3QkFBd0J6bUIsRUFBQSxvQkFDckV2USxLQUFLaTJCLE9BQU83b0IsT0FBK0IsdUJBQUU0cEIsd0JBQXdCem1CLEVBQUEsZ0JBQTZCLFVBRWxHdlEsS0FBS2kyQixPQUFPMXRCLEdBQUdnSSxFQUFBLG1CQUErQnZRLEtBQUs2NEIscUJBQXNCNzRCLE1BQ3pFQSxLQUFLaTJCLE9BQU8xdEIsR0FBR2dJLEVBQUEsZ0JBQTZCLFNBQVV2USxLQUFLODRCLGtCQUFtQjk0QixNQUM5RStILFFBQVFDLElBQUkscUJBR2hCNHdCLEVBQTJCLzNCLFVBQVVnNEIscUJBQXVCLFNBQVUzZ0IsS0FBT3pXLEdBQ3pFLE1BQU02RixFQUFTLEVBQUFsRixPQUFBLFlBQW1CMmtCLEVBQVcsV0FBWCxLQUNsQy9tQixLQUFLd2QsZUFBaUJsVyxFQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEJqQyxJQUd6RTBnQixFQUEyQi8zQixVQUFVaTRCLGtCQUFvQixTQUFVNWdCLEVBQUlpRixHQUNuRSxNQUFNN1YsRUFBUyxFQUFBbEYsT0FBQSxZQUFtQjJrQixFQUFXLFdBQVgsS0FJbEMsR0FIa0J6ZixFQUFPbkUsY0FBY21WLEVBQUEsUUFBcUI5RSxHQUc5QzJJLGVBQWlCLEVBQUFYLGtCQUFBLGFBQWlDeGIsS0FBS3dkLGVBQWVxRCxPQUNoRixPQUdKLE1BQU10TSxFQUFjdlUsS0FBS3dkLGVBQWVqSixZQUNsQ3drQixFQUFpQixJQUFJdHNCLEdBQUdtRSxLQUFLMkQsRUFBWTVJLEVBQUc0SSxFQUFZM0ksRUFBRzJJLEVBQVkxSSxHQUN2RTZULEVBQWMsSUFBSWpULEdBQUdtRSxLQUFLdU0sRUFBV3hSLEVBQUd3UixFQUFXdlIsRUFBR3VSLEVBQVd0UixHQUV2RSxHQUFJa3RCLEVBQWVySyxTQUFTaFAsSUFBZ0IxZixLQUFLZzVCLFdBQVksQ0FFekQsTUFBTWpjLEVBQWV6VixFQUFPbkUsY0FBY21OLEVBQUEsUUFDMUN5b0IsRUFBZW50QixHQUFLNUwsS0FBS3dkLGVBQWUrTixPQUVuQ3hPLEVBQWE0QyxrQkFBa0JvWixFQUFnQnJaLEtBQ2hEcFksRUFBT3ZELGlCQUFpQndNLEVBQUEsd0JBQXFDLFNBQVU0TSxHQUN2RTdWLEVBQU92RCxpQkFBaUJ3TSxFQUFBLGVBQTJCMkgsTUNqRC9ELE1BQU0sU0FBRW5ULEdBQWEsRUFBUSxLQUV0QixNQUFNazBCLFVBQTZCbDBCLEVBQ3RDLGtCQUFvQixNQUFPLHVCQUUzQixZQUFZRSxHQUNSa08sTUFBTThsQixFQUFxQjdsQixNQUMzQnBULEtBQUtrRyxzQkFBc0IsQ0FDdkJxSyxFQUFBLHVCQUdKdlEsS0FBS2lGLGNBQWdCQSxFQUd6QixXQUFXTSxHQUNQNE4sTUFBTXJOLFdBQVdQLEdBR3JCLG1CQUFtQnhFLEtBQXFCVSxHQUNwQyxPQUFRVixHQUNKLEtBQUt3UCxFQUFBLHFCQUNEdlEsS0FBS2lGLGNBQWNtSSxPQUE4QixzQkFBRThyQixXQUFXejNCLEVBQUssTUNuQjVFLE1BQU0wM0IsRUFBd0Ixc0IsR0FBR2lwQixhQUFhLHlCQUVyRHlELEVBQXNCcEQsV0FBV0MsSUFBSSxjQUFlLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLGlCQUM3RXdVLEVBQXNCcEQsV0FBV0MsSUFBSSxjQUFlLENBQUV0ZSxLQUFNLFNBQVVtZixRQUFTLEVBQUdsUyxNQUFPLGlCQUd6RndVLEVBQXNCdDRCLFVBQVVvbkIsV0FBYSxXQUN6Q2pvQixLQUFLc0gsT0FBUyxFQUFBbEYsT0FBQSxZQUFtQjJrQixFQUFXLFdBQVgsS0FDN0IvbUIsS0FBS3NILE9BQU94RCxZQUFZbTFCLEVBQXFCN2xCLE9BQzdDcFQsS0FBS3NILE9BQU8zRCxlQUFlczFCLEVBQXFCN2xCLE1BR3BEcFQsS0FBS281QixhQUFlLEdBQ3BCcDVCLEtBQUtxNUIsb0JBQWlCaDRCLEVBRXRCckIsS0FBS3NILE9BQU8vRCxpQkFBaUIsSUFBSTAxQixFQUFxQmo1QixLQUFLaTJCLFVBRy9Ea0QsRUFBc0J0NEIsVUFBVXE0QixXQUFhLFNBQVVJLEdBQ2xCLElBQTdCdDVCLEtBQUtvNUIsYUFBYXgzQixRQUNsQjVCLEtBQUtvNUIsYUFBYXJ5QixLQUFLdXlCLEdBQ3ZCdDVCLEtBQUt1NUIsbUJBRUx2NUIsS0FBS281QixhQUFhcnlCLEtBQUt1eUIsSUFLL0JILEVBQXNCdDRCLFVBQVUwNEIsZ0JBQWtCLFdBQzlDLEdBQUl2NUIsS0FBS281QixhQUFheDNCLE9BQVMsRUFBRyxDQUM5QixNQUFNNDNCLEVBQWN4NUIsS0FBS281QixhQUFhLEdBRXRDcDVCLEtBQUt5NUIsWUFBWUMsUUFBUTlVLEtBQU80VSxFQUVoQzllLFlBQVcsS0FDUDFhLEtBQUtvNUIsYUFBYTllLFFBQ2xCdGEsS0FBS3U1QixvQkFDYSxJQUFuQnY1QixLQUFLMjVCLGtCQUVSMzVCLEtBQUt5NUIsWUFBWUMsUUFBUTlVLEtBQU8sSUMzQ0FuWSxHQUFHaXBCLGFBQWEsNEJBTS9CNzBCLFVBQVVvMkIsZUFBaUIsV0FDakMsRUFBQTcwQixPQUFBLFlBQW1CMmtCLEVBQVcsV0FBWCxLQUMzQmhqQixpQkFBaUJ3TSxFQUFBLG9CQUFnQ3ZRLEtBQUtpMkIsU0NOakUsTUFBUWx4QixTQUFRLEdBQUssRUFBUSxLQUV0QixNQUFNNjBCLFVBQTJCLEVBQ3BDLGtCQUFvQixNQUFPLHFCQUUzQixZQUFZMzBCLEdBQ1JrTyxNQUFNeW1CLEVBQW1CeG1CLE1BQ3pCcFQsS0FBS2tHLHNCQUFzQixDQUN2QnFLLEVBQUEsMEJBRUp2USxLQUFLaUYsY0FBZ0JBLEVBQ3JCakYsS0FBS2lGLGNBQWNzRCxHQUFHLHVCQUF3QnZJLEtBQUs2NUIsMEJBQTJCNzVCLE1BQzlFQSxLQUFLaUYsY0FBY3NELEdBQUcsb0JBQXFCdkksS0FBSzg1Qix1QkFBd0I5NUIsTUFDeEVBLEtBQUtpRixjQUFjc0QsR0FBRyxZQUFhdkksS0FBSys1QixnQkFBaUIvNUIsTUFJN0QsV0FBV3VGLEdBQ1A0TixNQUFNck4sV0FBV1AsR0FHckIsbUJBQW1CeEUsS0FBcUJVLEdBQ3BDLE9BQVFWLEdBQ0osS0FBS3dQLEVBQUEsMEJBS2IsMEJBQTBCeXBCLEdBQ3RCaDZCLEtBQUtzSCxPQUFPdkQsaUJBQWlCd00sRUFBQSx3QkFBb0N5cEIsR0FHckUsdUJBQXVCOXRCLEdBQ25CbE0sS0FBS3NILE9BQU92RCxpQkFBaUJ3TSxFQUFBLGdCQUE0QnJFLEdBRzdELGdCQUFnQnlpQixHQUNaM3VCLEtBQUtzSCxPQUFPdkQsaUJBQWlCd00sRUFBQSxtQkFBK0JvZSxJQ3ZDN0QsTUFBTXNMLEVBQWF4dEIsR0FBR2lwQixhQUFhLGNBSzFDdUUsRUFBV2xFLFdBQVdDLElBQUksV0FBWSxDQUFFdGUsS0FBTSxTQUFVbWYsUUFBUyxJQUFLbFMsTUFBTyxhQUM3RXNWLEVBQVdsRSxXQUFXQyxJQUFJLGtCQUFtQixDQUFFdGUsS0FBTSxTQUFVbWYsUUFBUyxHQUFLbFMsTUFBTyxvQkFDcEZzVixFQUFXbEUsV0FBV0MsSUFBSSxrQkFBbUIsQ0FBRXRlLEtBQU0sU0FBVW1mLFFBQVMsR0FBS2xTLE1BQU8sb0JBRXBGc1YsRUFBV2xFLFdBQVdDLElBQUksaUJBQWtCLENBQUV0ZSxLQUFNLFVBQVdtZixTQUFTLEVBQU9sUyxNQUFPLG9CQUN0RnNWLEVBQVdsRSxXQUFXQyxJQUFJLGtCQUFtQixDQUFFdGUsS0FBTSxTQUFVbWYsUUFBUyxFQUFHbFMsTUFBTyxzQkFDbEZzVixFQUFXbEUsV0FBV0MsSUFBSSxrQkFBbUIsQ0FBRXRlLEtBQU0sU0FBVW1mLFFBQVMsSUFBS2xTLE1BQU8sc0JBR3BGc1YsRUFBV3A1QixVQUFVb25CLFdBQWEsV0FDOUJqb0IsS0FBS3NILE9BQVMsRUFBQWxGLE9BQUEsWUFBbUIya0IsRUFBVyxXQUFYLEtBQzdCL21CLEtBQUtzSCxPQUFPeEQsWUFBWW8yQixFQUFtQjltQixPQUMzQ3BULEtBQUtzSCxPQUFPM0QsZUFBZXUyQixFQUFtQjltQixNQUdsRHBULEtBQUtzSCxPQUFPL0QsaUJBQWlCLElBQUkyMkIsRUFBbUJsNkIsS0FBS2kyQixVQUk3RGdFLEVBQVdwNUIsVUFBVXM1QixnQkFBa0IsU0FBVUMsR0FDN0NwNkIsS0FBS282QixhQUFlQSxFQUNwQnA2QixLQUFLcTZCLFNBQVdyNkIsS0FBS2kyQixPQUFPcUUsaUJBQWlCMXVCLEVBQzdDNUwsS0FBS3U2QixhQUFldjZCLEtBQUtpMkIsT0FBT3JrQixtQkFBbUJoRyxHQUd2RHF1QixFQUFXcDVCLFVBQVUyNUIsV0FBYSxTQUFVN0wsR0FHeEMsR0FGQTN1QixLQUFLcTZCLFVBQVkxTCxFQUFVaGpCLEVBQUkzTCxLQUFLeTZCLGdCQUVoQ3o2QixLQUFLMDZCLGVBQWdCLENBQ3JCLElBQUlDLEVBQWtCMzZCLEtBQUt1NkIsYUFBZ0I1TCxFQUFVL2lCLEVBQUk1TCxLQUFLNDZCLGdCQUM5REQsRUFBa0JsdUIsR0FBR291QixLQUFLQyxNQUFNSCxFQUFpQjM2QixLQUFLKzZCLGdCQUFpQi82QixLQUFLZzdCLGlCQUM1RWg3QixLQUFLdTZCLGFBQWVJLElBSTVCVixFQUFXcDVCLFVBQVVvNkIsd0JBQTBCLFNBQVVDLEdBQ3JELE1BQU1DLEVBQWlCbjdCLEtBQUtpMkIsT0FBT3JrQixtQkFFN0J3cEIsRUFBVW5xQixLQUFLb3FCLElBQUtyN0IsS0FBYSxTQUFJaVIsS0FBS3luQixHQUFLLEtBQU8xNEIsS0FBSzB1QixTQUMzRDRNLEVBQVVycUIsS0FBS3NxQixJQUFLdjdCLEtBQWEsU0FBSWlSLEtBQUt5bkIsR0FBSyxLQUFPMTRCLEtBQUswdUIsU0FFakUsT0FBTyxJQUFJamlCLEdBQUdtRSxLQUFLc3FCLEVBQVd2dkIsRUFBSXl2QixFQUFTRCxFQUFldnZCLEVBQUdzdkIsRUFBV3J2QixFQUFJeXZCLElBSWhGckIsRUFBV3A1QixVQUFVKzBCLE9BQVMsU0FBVUMsR0FDcEMsR0FBSTcxQixLQUFLbzZCLGFBQWMsQ0FDbkIsTUFBTW9CLEVBQXVCeDdCLEtBQUtvNkIsYUFBYXhvQixtQkFDekM2cEIsRUFBaUJ6N0IsS0FBS2k3Qix3QkFBd0JPLEdBRTlDRSxFQUFhMTdCLEtBQUtpMkIsT0FBT3JrQixtQkFDekIrcEIsR0FBVUYsRUFBZTl2QixFQUFtQixFQUFmK3ZCLEVBQVcvdkIsR0FBUyxHQUNqRGl3QixHQUFVNTdCLEtBQUt1NkIsYUFBOEIsRUFBZm1CLEVBQVc5dkIsR0FBUyxHQUNsRGl3QixHQUFVSixFQUFlNXZCLEVBQW1CLEVBQWY2dkIsRUFBVzd2QixHQUFTLEdBRXZEN0wsS0FBS2kyQixPQUFPalksaUJBQWlCMmQsRUFBUUMsRUFBUUMsR0FFN0M3N0IsS0FBS2kyQixPQUFPNkYsT0FBT04sS0MzRDNCLE1BQVF6MkIsU0FBUSxHQUFLLEVBQVEsS0FFdEIsTUFBTW0xQixVQUEyQixFQUNwQyxrQkFBb0IsTUFBTyxxQkFFM0IsWUFBWWoxQixHQUNSa08sTUFBTSttQixFQUFtQjltQixNQUN6QnBULEtBQUtrRyxzQkFBc0IsQ0FDdkJxSyxFQUFBLHdCQUFvQ0EsRUFBQSxtQkFBK0JBLEVBQUEsc0JBRXZFdlEsS0FBS2lGLGNBQWdCQSxFQUl6QixXQUFXTSxHQUNQNE4sTUFBTXJOLFdBQVdQLEdBR3JCLG1CQUFtQnhFLEtBQXFCVSxHQUNwQyxPQUFRVixHQUNKLEtBQUt3UCxFQUFBLG9CQUNEdlEsS0FBS2lGLGNBQWNtSSxPQUFtQixXQUFFK3NCLGdCQUFnQjE0QixFQUFLLElBQzdELE1BQ0osS0FBSzhPLEVBQUEsbUJBQ0R2USxLQUFLaUYsY0FBY21JLE9BQW1CLFdBQUVvdEIsV0FBVy80QixFQUFLLE1DdEJqRSxNQUFNczZCLEVBQXNCdHZCLEdBQUdpcEIsYUFBYSx1QkFFbkRxRyxFQUFvQmhHLFdBQVdDLElBQUksZUFBZ0IsQ0FDL0N0ZSxLQUFNLFNBQ05pTixNQUFPLGtCQUdYb1gsRUFBb0JoRyxXQUFXQyxJQUFJLFdBQVksQ0FDM0N0ZSxLQUFNLFNBQ05pTixNQUFPLFlBQ1BrUyxRQUFTLEtBR2JrRixFQUFvQmw3QixVQUFVb25CLFdBQWEsV0FDdkNqb0IsS0FBS3NILE9BQVMsRUFBQWxGLE9BQUEsWUFBbUIya0IsRUFBVyxXQUFYLEtBQzdCL21CLEtBQUtzSCxPQUFPeEQsWUFBWTgxQixFQUFtQnhtQixPQUMzQ3BULEtBQUtzSCxPQUFPM0QsZUFBZWkyQixFQUFtQnhtQixNQUdsRHBULEtBQUtzSCxPQUFPL0QsaUJBQWlCLElBQUlxMkIsRUFBbUI1NUIsS0FBS2kyQixTQUN6RGoyQixLQUFLK3VCLElBQU0sSUFBSXRpQixHQUFHdWlCLElBQ2xCaHZCLEtBQUtnOEIsV0FBYSxHQUdsQmg4QixLQUFLd00sSUFBSXl2QixNQUFNQyxxQkFDZmw4QixLQUFLbThCLGVBQWlCLEVBQ3RCbjhCLEtBQUtvOEIsWUFBYSxFQUVsQnA4QixLQUFLd00sSUFBSWpFLEdBQUcsZ0JBQWlCdkksS0FBS3E4QixtQkFBb0JyOEIsTUFFbERBLEtBQUt3TSxJQUFJeXZCLFFBQ1RqOEIsS0FBS3dNLElBQUl5dkIsTUFBTTF6QixHQUFHa0UsR0FBRzZ2QixnQkFBaUJ0OEIsS0FBS3U4QixZQUFhdjhCLE1BQ3hEQSxLQUFLaTJCLE9BQU95RCxRQUFRbnhCLEdBQUdrRSxHQUFHK3ZCLGdCQUFpQng4QixLQUFLeThCLFlBQWF6OEIsTUFDN0RBLEtBQUt3TSxJQUFJeXZCLE1BQU0xekIsR0FBR2tFLEdBQUdpd0IsY0FBZTE4QixLQUFLMjhCLFVBQVczOEIsTUFFcERBLEtBQUtpMkIsT0FBT3RzQixLQUFLLFdBQVcsS0FDeEIzSixLQUFLd00sSUFBSXl2QixNQUFNMXdCLElBQUlrQixHQUFHNnZCLGdCQUFpQnQ4QixLQUFLdThCLFlBQWF2OEIsTUFDekRBLEtBQUt3TSxJQUFJeXZCLE1BQU0xd0IsSUFBSWtCLEdBQUdpd0IsY0FBZTE4QixLQUFLMjhCLFVBQVczOEIsVUFLekRBLEtBQUt3TSxJQUFJb3dCLFFBQ1Q1OEIsS0FBS3dNLElBQUlvd0IsTUFBTXIwQixHQUFHa0UsR0FBR293QixpQkFBa0JDLElBQ25DOThCLEtBQUt1OEIsWUFBWU8sRUFBU0MsUUFBUSxPQUd0Qy84QixLQUFLaTJCLE9BQU95RCxRQUFRbnhCLEdBQUdrRSxHQUFHdXdCLGtCQUFtQkYsSUFDekM5OEIsS0FBS3k4QixZQUFZSyxFQUFTQyxRQUFRLE9BR3RDLzhCLEtBQUtpMkIsT0FBT3lELFFBQVFueEIsR0FBR2tFLEdBQUd3d0IsZ0JBQWlCSCxJQUN2Qzk4QixLQUFLMjhCLGlCQU1qQlosRUFBb0JsN0IsVUFBVTQ3QixZQUFjLFNBQVV4eUIsR0FDbERqSyxLQUFLbzhCLFlBQWEsRUFDbEJwOEIsS0FBS204QixlQUFpQmUsS0FBS0MsTUFDM0JuOUIsS0FBS285QixnQkFBa0IsQ0FBRXp4QixFQUFHMUIsRUFBSTBCLEVBQUdDLEVBQUczQixFQUFJMkIsSUFJOUNtd0IsRUFBb0JsN0IsVUFBVTA3QixZQUFjLFNBQVV0eUIsR0FDbEQsR0FBSWpLLEtBQUtvOEIsV0FBWSxDQUNqQixNQUFNek4sRUFBWSxJQUFJbGlCLEdBQUc0d0IsS0FBS3I5QixLQUFLbzlCLGdCQUFnQnp4QixFQUFJMUIsRUFBSTBCLEVBQUczTCxLQUFLbzlCLGdCQUFnQnh4QixFQUFJM0IsRUFBSTJCLEdBQzNGNUwsS0FBS2kyQixPQUFPOUMsS0FBSyxZQUFheEUsR0FDOUIzdUIsS0FBS285QixnQkFBa0IsQ0FBRXp4QixFQUFHMUIsRUFBSTBCLEVBQUdDLEVBQUczQixFQUFJMkIsS0FJbERtd0IsRUFBb0JsN0IsVUFBVTg3QixVQUFZLFdBQ3RDMzhCLEtBQUtvOEIsWUFBYSxFQUVkYyxLQUFLQyxNQUFRbjlCLEtBQUttOEIsZUFBa0MsSUFBaEJuOEIsS0FBS3M5QixVQUNyQ3Q5QixLQUFLbzlCLGlCQUVMcDlCLEtBQUt1OUIsd0JBQXdCdjlCLEtBQUtvOUIsZ0JBQWdCenhCLEVBQUczTCxLQUFLbzlCLGdCQUFnQnh4QixJQUt0Rm13QixFQUFvQmw3QixVQUFVMDhCLHdCQUEwQixTQUFVNXhCLEVBQUdDLEdBQ2pFLE1BQU00eEIsRUFBZXg5QixLQUFLdzlCLGFBQ3BCQyxFQUFrQno5QixLQUFLdzlCLGFBQWFFLE9BQzFDRCxFQUFnQkUsY0FBY2h5QixFQUFHQyxFQUFHNnhCLEVBQWdCRyxRQUFTNTlCLEtBQUsrdUIsSUFBSUosV0FDdEUzdUIsS0FBSyt1QixJQUFJOE8sT0FBT0MsS0FBS04sRUFBYWp1QixlQUNsQ3ZQLEtBQUsrdUIsSUFBSUosVUFBVUUsSUFBSTd1QixLQUFLK3VCLElBQUk4TyxRQUFRL08sWUFFeEM5dUIsS0FBS3dNLElBQUkybUIsS0FBSyxpQkFBa0JuekIsS0FBSyt1QixJQUFLLENBQUVwakIsSUFBR0MsT0FHbkRtd0IsRUFBb0JsN0IsVUFBVXc3QixtQkFBcUIsU0FBVTBCLEVBQWM3TyxFQUFha0gsR0FDcEZwMkIsS0FBS2c4QixXQUFXajFCLEtBQUssQ0FDakJrdkIsT0FBUThILEVBQ1I3TyxZQUFhQSxFQUNiOE8sZUFBZ0I1SCxLQUl4QjJGLEVBQW9CbDdCLFVBQVUrMEIsT0FBUyxTQUFVQyxHQUM3QzcxQixLQUFLaStCLHFCQUlUbEMsRUFBb0JsN0IsVUFBVW85QixrQkFBb0IsV0FFOUMsR0FBSWorQixLQUFLZzhCLFdBQVdwNkIsT0FBUyxFQUFHLENBQzVCLElBQUlzOEIsRUFBc0JsK0IsS0FBS2c4QixXQUFXLEdBQ3RDbUMsR0FBbUIsRUFFdkIsSUFBSyxNQUFNQyxLQUFRcCtCLEtBQUtnOEIsV0FBWSxDQUNoQyxNQUFNcUMsR0FzQ0dwSSxFQXRDd0JtSSxFQUFLbkksUUF1Q25DcUksS0FBS2gxQixJQUFJLGlCQUNULEVBR1Ayc0IsRUFBT3FJLEtBQUtoMUIsSUFBSSxVQUNULEVBR1Ayc0IsRUFBT3FJLEtBQUtoMUIsSUFBSSxjQUNULEdBR0gsRUFsREkrMEIsRUFBZUYsSUFDZkQsRUFBc0JFLEVBQ3RCRCxFQUFrQkUsR0FJMUJyK0IsS0FBS2c4QixXQUFhLEdBRWRrQyxFQUFvQmpJLE9BQU9xSSxLQUFLaDFCLElBQUksa0JBQ3BDdEosS0FBS3UrQixvQkFBb0JMLEVBQW9CakksT0FBUWlJLEVBQW9CaFAsYUFHekVnUCxFQUFvQmpJLE9BQU9xSSxLQUFLaDFCLElBQUksZUFDcEN0SixLQUFLdytCLGlCQUFpQk4sRUFBb0JqSSxPQUFRaUksRUFBb0JoUCxhQUd0RWdQLEVBQW9CakksT0FBT3FJLEtBQUtoMUIsSUFBSSxXQUNwQ3RKLEtBQUt5K0IsYUFBYVAsRUFBb0JqSSxPQUFRaUksRUFBb0JoUCxhQW9COUUsSUFBcUIrRyxHQWRyQjhGLEVBQW9CbDdCLFVBQVUwOUIsb0JBQXNCLFNBQVVSLEVBQWM3TyxHQUN4RWx2QixLQUFLaTJCLE9BQU85QyxLQUFLLHVCQUF3QjRLLElBRzdDaEMsRUFBb0JsN0IsVUFBVTI5QixpQkFBbUIsU0FBVVQsRUFBYzdPLEdBQ3JFLE1BQ01iLEVBRFUwUCxFQUFhM3dCLE9BQTRCLG9CQUM3QmtwQixlQUFlcEgsR0FDM0NsdkIsS0FBS2kyQixPQUFPOUMsS0FBSyxvQkFBcUI5RSxJQUcxQzBOLEVBQW9CbDdCLFVBQVU0OUIsYUFBZSxTQUFVVixFQUFjN08sR0FDakU2TyxFQUFhNUssS0FBSyxrQkNySnRCLE1BQVFwdUIsU0FBUSxHQUFLLEVBQVEsS0FFdEIsTUFBTTI1QixVQUFrQyxFQUMzQyxrQkFBb0IsTUFBTyw0QkFFM0IsWUFBWXo1QixHQUNSa08sTUFBTXVyQixFQUEwQnRyQixNQUNoQ3BULEtBQUtrRyxzQkFBc0IsQ0FDdkJxSyxFQUFBLHdCQUNBQSxFQUFBLDRCQUNBQSxFQUFBLG9CQUdKdlEsS0FBS2lGLGNBQWdCQSxFQUVyQmpGLEtBQUtpRixjQUFjc0QsR0FBRyxnQkFBaUJ2SSxLQUFLMitCLGNBQWUzK0IsTUFHL0QsV0FBV3VGLEdBQ1A0TixNQUFNck4sV0FBV1AsR0FHckIsbUJBQW1CeEUsS0FBcUJVLEdBQ3BDLE9BQVFWLEdBQ0osS0FBS3dQLEVBQUEsd0JBQ0R2USxLQUFLaUYsY0FBY2t4QixTQUFVLEVBQzdCLE1BQ0osS0FBSzVsQixFQUFBLDRCQUNEdlEsS0FBS2lGLGNBQWNreEIsU0FBVSxFQUM3QixNQUNKLEtBQUs1bEIsRUFBQSxrQkFDRHZRLEtBQUtpRixjQUFja3hCLFNBQVUsR0FLekMsY0FBY2xzQixHQUNWakssS0FBSytELGlCQUFpQndNLEVBQUEsb0JDdEN2QixNQUFNcXVCLEVBQTZCbnlCLEdBQUdpcEIsYUFBYSw4QkFFMURrSixFQUEyQjdJLFdBQVdDLElBQUksZ0JBQWlCLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLG9CQUdwRmlhLEVBQTJCLzlCLFVBQVVvbkIsV0FBYSxhQUlsRDJXLEVBQTJCLzlCLFVBQVVvbkIsV0FBYSxXQUU5Q2pvQixLQUFLc0gsT0FBUyxFQUFBbEYsT0FBQSxZQUFtQjJrQixFQUFXLFdBQVgsS0FDN0IvbUIsS0FBS3NILE9BQU94RCxZQUFZNDZCLEVBQTBCdHJCLE9BQ2xEcFQsS0FBS3NILE9BQU8zRCxlQUFlKzZCLEVBQTBCdHJCLE1BR3pEcFQsS0FBS281QixhQUFlLEdBQ3BCcDVCLEtBQUtxNUIsb0JBQWlCaDRCLEVBRXRCckIsS0FBS3NILE9BQU8vRCxpQkFBaUIsSUFBSW03QixFQUEwQjErQixLQUFLaTJCLFNBRWhFajJCLEtBQUs2K0IsY0FBY25GLFFBQVFueEIsR0FBRyxRQUFTdkksS0FBSzgrQixhQUFjOStCLE9BRzlENCtCLEVBQTJCLzlCLFVBQVVpK0IsYUFBZSxTQUFVNzBCLEdBQzFEakssS0FBS2kyQixPQUFPOUMsS0FBSyxrQkM3QmQsTUFBTTRMLEVBQWtCdHlCLEdBQUdpcEIsYUFBYSxtQkFHL0NxSixFQUFnQmwrQixVQUFVbzJCLGVBQWlCLFdBQ3ZDLE1BQU14bUIsRUFBUXpRLEtBQUtpMkIsT0FBT3ZsQixnQkFDcEJDLEVBQWMsSUFBSWxFLEdBQUdtRSxLQUFLSCxFQUFNOUUsRUFBSSxFQUFHOEUsRUFBTTdFLEVBQUksRUFBRzZFLEVBQU01RSxFQUFJLEdBQ3BFN0wsS0FBS2tPLEtBQU8sSUFBSXpCLEdBQUdvRSxZQUFZN1EsS0FBS2kyQixPQUFPMW1CLGNBQWVvQixHQUMxRDNRLEtBQUt3TSxJQUFJakUsR0FBRyxpQkFBa0J2SSxLQUFLazJCLGNBQWVsMkIsTUFFbERBLEtBQUtpMkIsT0FBTzF0QixHQUFHLGlCQUFpQixLQUM1QnZJLEtBQUt3TSxJQUFJakIsSUFBSSxpQkFBa0J2TCxLQUFLazJCLGNBQWVsMkIsU0FHdkRBLEtBQUtpMkIsT0FBTzF0QixHQUFHLFdBQVcsS0FDdEJ2SSxLQUFLd00sSUFBSWpCLElBQUksaUJBQWtCdkwsS0FBS2syQixjQUFlbDJCLFNBR3ZEQSxLQUFLaTJCLE9BQU8veUIsTUFBTWl6QixTQUFVLEdBSWhDNEksRUFBZ0JsK0IsVUFBVXExQixjQUFnQixTQUFVbkgsRUFBS3FILEdBQ3JELE1BQU1sSCxFQUFjLElBQUl6aUIsR0FBR21FLEtBQ1o1USxLQUFLa08sS0FBS2loQixjQUFjSixFQUFLRyxJQUV4Q2x2QixLQUFLd00sSUFBSTJtQixLQUFLLGdCQUFpQm56QixLQUFLaTJCLE9BQU85YyxPQUFRK1YsRUFBYWtILElBSXhFMkksRUFBZ0JsK0IsVUFBVSswQixPQUFTLFNBQVVDLEdBQ3pDNzFCLEtBQUtrTyxLQUFLOHdCLE9BQU9sQixLQUFLOTlCLEtBQUtpMkIsT0FBTzFtQixnQkM1QnRDLE1BQVF4SyxTQUFRLEdBQUssRUFBUSxLQUV0QixNQUFNazZCLFVBQTRCLEVBQ3JDLGtCQUFvQixNQUFPLHNCQUUzQixZQUFZaDZCLEdBQ1JrTyxNQUFNOHJCLEVBQW9CN3JCLE1BQzFCcFQsS0FBS2tHLHNCQUFzQixDQUN2QnFLLEVBQUEsb0JBQWdDQSxFQUFBLGdCQUNoQ0EsRUFBQSxzQkFFSnZRLEtBQUtpRixjQUFnQkEsRUFFckJqRixLQUFLaUYsY0FBY3NELEdBQUcsb0JBQXFCdkksS0FBS2svQixrQkFBbUJsL0IsTUFJdkUsV0FBV3VGLEdBQ1A0TixNQUFNck4sV0FBV1AsR0FHckIsbUJBQW1CeEUsS0FBcUJVLEdBQ3BDLE9BQVFWLEdBQ0osS0FBS3dQLEVBQUEsZ0JBQ0QsTUFBTTR1QixFQUFhMTlCLEVBQUssR0FDeEJ6QixLQUFLaUYsY0FBY21JLE9BQTZCLHFCQUFFZ3lCLGFBQWFELEdBQy9ELE1BQ0osS0FBSzV1QixFQUFBLHNCQU1iLGtCQUFrQnpJLEtBQWdCckcsR0FDOUJ6QixLQUFLc0gsT0FBT3ZELGlCQUFpQitELEtBQWdCckcsSUNwQzlDLE1BQU00OUIsRUFBd0I1eUIsR0FBR2lwQixhQUFhLHlCQWdCckQySixFQUFzQnRKLFdBQVdDLElBQUksa0JBQW1CLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLHFCQUNqRjBhLEVBQXNCdEosV0FBV0MsSUFBSSxhQUFjLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLGdCQUM1RTBhLEVBQXNCdEosV0FBV0MsSUFBSSxXQUFZLENBQUV0ZSxLQUFNLE9BQVFvZixPQWYzQyxDQUNsQixDQUNJLzBCLEtBQU0sY0FDTjRpQixNQUFPLGVBQ1BqTixLQUFNLFVBRVYsQ0FDSTNWLEtBQU0sY0FDTjRpQixNQUFPLG9CQUNQak4sS0FBTSxTQUFVNEIsT0FBTyxJQU15RHFMLE1BQU8sZUFBZ0JyTCxPQUFPLElBR3RIK2xCLEVBQXNCeCtCLFVBQVVvbkIsV0FBYSxXQUN6Q2pvQixLQUFLcy9CLGdCQUFnQm5KLFNBQVUsRUFDL0JuMkIsS0FBS2kyQixPQUFPMXRCLEdBQUcsZ0JBQWlCdkksS0FBS3UvQixtQkFBb0J2L0IsTUFDekRBLEtBQUtpMkIsT0FBT3lELFFBQVFueEIsR0FBRyxRQUFTdkksS0FBS3cvQixZQUFheC9CLE9BR3REcS9CLEVBQXNCeCtCLFVBQVUyK0IsWUFBYyxTQUFVdjFCLEdBQ3BELElBQUssTUFBTXBJLEtBQVc3QixLQUFLeS9CLFNBQVUsQ0FDakMsTUFBTTMzQixFQUFjakcsRUFBUWlHLFlBQ3RCNDNCLEVBQWM3OUIsRUFBUTY5QixZQUM1QjEvQixLQUFLaTJCLE9BQU85YyxPQUFPZ2EsS0FBSyxvQkFBcUJyckIsS0FBZ0I0M0IsS0FLckVMLEVBQXNCeCtCLFVBQVUwK0IsbUJBQXFCLFNBQVVoNUIsR0FDdkR2RyxLQUFLaTJCLE9BQU9sMEIsT0FBU3dFLEVBQ3JCdkcsS0FBS3MvQixnQkFBZ0JuSixTQUFXbjJCLEtBQUtzL0IsZ0JBQWdCbkosUUFHckRuMkIsS0FBS3MvQixnQkFBZ0JuSixTQUFVLEdDekNoQyxNQUFNd0osRUFBdUJsekIsR0FBR2lwQixhQUFhLHdCQU1wRGlLLEVBQXFCNUosV0FBV0MsSUFBSSxnQkFBaUIsQ0FBRXRlLEtBQU0sU0FBVWlOLE1BQU8saUJBQWtCckwsT0FBTyxJQUd2R3FtQixFQUFxQjkrQixVQUFVb25CLFdBQWEsV0FDeENqb0IsS0FBS3NILE9BQVMsRUFBQWxGLE9BQUEsWUFBbUIya0IsRUFBVyxXQUFYLEtBQzdCL21CLEtBQUtzSCxPQUFPeEQsWUFBWW03QixFQUFvQjdyQixPQUM1Q3BULEtBQUtzSCxPQUFPM0QsZUFBZXM3QixFQUFvQjdyQixNQUduRHBULEtBQUtzSCxPQUFPL0QsaUJBQWlCLElBQUkwN0IsRUFBb0JqL0IsS0FBS2kyQixVQUc5RDBKLEVBQXFCOStCLFVBQVV1K0IsYUFBZSxTQUFVRCxHQUNwRCxJQUFLLE1BQU1TLEtBQVU1L0IsS0FBSzYvQixjQUN0QkQsRUFBT3pNLEtBQUssZ0JBQWlCZ00sSUNwQkoxeUIsR0FBR2lwQixhQUFhLHFCQUUvQjcwQixVQUFVb25CLFdBQWEsV0FDckNqb0IsS0FBS2kyQixPQUFPeUQsUUFBUW54QixHQUFHa0UsR0FBRyt2QixpQkFBa0J2eUIsSUFDeENBLEVBQUk2MUIscUJBR1I5L0IsS0FBS2kyQixPQUFPeUQsUUFBUW54QixHQUFHa0UsR0FBRyt2QixpQkFBa0J2eUIsSUFDeENBLEVBQUk2MUIscUJBR1I5L0IsS0FBS2kyQixPQUFPeUQsUUFBUW54QixHQUFHa0UsR0FBR3V3QixrQkFBbUIveUIsSUFDekNBLEVBQUk2MUIscUJBR1I5L0IsS0FBS2kyQixPQUFPeUQsUUFBUW54QixHQUFHa0UsR0FBR293QixpQkFBa0I1eUIsSUFDeENBLEVBQUk2MUIscUJBR1I5L0IsS0FBS2kyQixPQUFPeUQsUUFBUW54QixHQUFHa0UsR0FBR3d3QixnQkFBaUJoekIsSUFDdkNBLEVBQUk2MUIsc0IsYUNoQkwsTUFBTUMsRUFBNkJ0ekIsR0FBR2lwQixhQUFhLDhCQWUxRHFLLEVBQTJCaEssV0FBV0MsSUFBSSxrQkFBbUIsQ0FDekR0ZSxLQUFNLE9BQ05pTixNQUFPLG1CQUNQbVMsT0FoQnFCLENBQ3JCLENBQ0kvMEIsS0FBTSxpQkFDTjRpQixNQUFPLGtCQUNQak4sS0FBTSxVQUVWLENBQ0kzVixLQUFNLHFCQUNONGlCLE1BQU8sc0JBQ1BqTixLQUFNLFVBUVY0QixPQUFPLElBR1h5bUIsRUFBMkJsL0IsVUFBVW9uQixXQUFhLFdBQzlDam9CLEtBQUtzSCxPQUFTLEVBQUFsRixPQUFBLFlBQW1CMmtCLEVBQVcsV0FBWCxLQUM3Qi9tQixLQUFLc0gsT0FBT3hELFlBQVk0ZSxFQUFBLFNBQ3hCMWlCLEtBQUtzSCxPQUFPM0QsZUFBZStlLEVBQUEsUUFFL0IxaUIsS0FBS3NILE9BQU8vRCxpQkFBaUIsSUFBSW1mLEVBQUEsRUFBMEIxaUIsS0FBS2kyQixVQUlwRThKLEVBQTJCbC9CLFVBQVVnaUIsaUJBQW1CLFNBQVVtZCxFQUFnQm5MLEVBQWFuVixHQUMzRixPQUFPLElBQUk2VSxTQUFRLENBQUNDLEVBQVNDLEtBRXpCLE1BQU13TCxFQUFtQmpnQyxLQUFLa2dDLGdCQUFnQm5uQixNQUFLb25CLEdBQVVBLEVBQU9ILGlCQUFtQkEsSUFDdkYsSUFBSUMsRUFVQSxNQURBeEwsSUFDTSxJQUFJdDBCLE1BQU0sZ0NBQWdDNi9CLE1BVjlCLENBQ2xCLE1BQU1JLEVBQWdCSCxFQUFpQkksbUJBQW1CcnNCLFNBQVMrSixjQUNuRS9kLEtBQUtpMkIsT0FBT2hZLFNBQVNtaUIsR0FDckJBLEVBQWN6MkIsS0FBSyxxQkFBcUIsS0FDcEM2cUIsT0FFSjRMLEVBQWNoekIsT0FBNEIsb0JBQUVrekIsVUFBVXpMLEVBQWFuVixRQzNDeEUsTUFBTTZnQixFQUFzQjl6QixHQUFHaXBCLGFBQWEsdUJBRW5ENkssRUFBb0J4SyxXQUFXQyxJQUFJLGtCQUFtQixDQUNsRHRlLEtBQU0sU0FDTmlOLE1BQU8sbUJBQ1BrUyxRQUFTLElBSWIwSixFQUFvQjEvQixVQUFVb25CLFdBQWEsYUFJM0NzWSxFQUFvQjEvQixVQUFVeS9CLFVBQVksU0FBVXpMLEVBQWFuVixHQUM3RDFmLEtBQUtpMkIsT0FBT2pZLGlCQUFpQjZXLEVBQVlscEIsRUFBR2twQixFQUFZanBCLEVBQUdpcEIsRUFBWWhwQixHQUN2RTdMLEtBQUswZixZQUFjQSxFQUNuQjFmLEtBQUs0ekIsWUFBWTV6QixLQUFLMGYsY0FJMUI2Z0IsRUFBb0IxL0IsVUFBVSswQixPQUFTLFNBQVVDLEdBQzdDLEdBQUk3MUIsS0FBSzBmLFlBQWEsQ0FDbEIsTUFBTXVZLEVBQVdqNEIsS0FBS2kyQixPQUFPcmtCLG1CQUN2QjR1QixFQUFjLElBQUkvekIsR0FBR21FLEtBQ3JCNnZCLEVBQVEsSUFBSWgwQixHQUFHbUUsS0FBS2lsQixFQUFLNzFCLEtBQUswZ0MsZ0JBQWlCN0ssRUFBSzcxQixLQUFLMGdDLGdCQUFpQjdLLEVBQUs3MUIsS0FBSzBnQyxpQkFDMUZGLEVBQVlHLEtBQUszZ0MsS0FBSzBmLFlBQVlrUCxRQUFTcUosR0FDM0N1SSxFQUFZMVIsWUFDWjBSLEVBQVlJLElBQUlILEdBQ2hCRCxFQUFZeEssSUFBSWlDLEdBRWhCajRCLEtBQUtpMkIsT0FBT2pZLGlCQUFpQndpQixHQUVGQSxFQUFZOVIsU0FBUzF1QixLQUFLMGYsY0FDMUJtVyxFQUFLNzFCLEtBQUswZ0Msa0JBQ2pDMWdDLEtBQUtpMkIsT0FBTzlDLEtBQUsscUJBQ2pCbnpCLEtBQUtpMkIsT0FBTzVuQixhQU14Qmt5QixFQUFvQjEvQixVQUFVK3lCLFlBQWMsU0FBVXJFLEdBQ2xELE1BQU0wSSxFQUFXajRCLEtBQUtpMkIsT0FBT3JrQixtQkFFdkI0ZixFQUFLakMsRUFBTTVqQixFQUFJc3NCLEVBQVN0c0IsRUFDeEI0c0IsRUFBS2hKLEVBQU0xakIsRUFBSW9zQixFQUFTcHNCLEVBQ3hCMnNCLEVBQW1DLElBQXJCdm5CLEtBQUt3bkIsTUFBTWpILEVBQUkrRyxHQUFZdG5CLEtBQUt5bkIsR0FDcEQxNEIsS0FBS2kyQixPQUFPMEMsZUFBZSxFQUFHSCxFQUFhLElDOUMvQyxNQUFRenpCLFNBQVEsR0FBSyxFQUFRLEtBRXRCLE1BQU04N0IsVUFBMkIsRUFDcEMsa0JBQW9CLE1BQU8scUJBRTNCLFlBQVk1N0IsR0FDUmtPLE1BQU0wdEIsRUFBbUJ6dEIsTUFDekJwVCxLQUFLa0csc0JBQXNCLENBQ3ZCcUssRUFBQSxpQkFBOEIsV0FHbEN2USxLQUFLaUYsY0FBZ0JBLEVBR3pCLFdBQVdNLEdBQ1A0TixNQUFNck4sV0FBV1AsR0FHckIsbUJBQW1CeEUsS0FBcUJVLEdBQ3BDLE9BQVFWLEdBQ0osS0FBS3dQLEVBQUEsaUJBQThCLFNBQy9CLE1BQU11d0IsRUFBYXIvQixFQUFLLEdBQ2xCa3NCLEVBQWFsc0IsRUFBSyxHQUN4QnpCLEtBQUtpRixjQUFjbUksT0FBNEIsb0JBQUUyekIsY0FBY0QsRUFBWW5ULEtDdEJwRixNQUFNcVQsRUFBc0J2MEIsR0FBR2lwQixhQUFhLHVCQUVuRHNMLEVBQW9CakwsV0FBV0MsSUFBSSxZQUFhLENBQzVDdGUsS0FBTSxTQUNOaU4sTUFBTyxlQUdYcWMsRUFBb0JqTCxXQUFXQyxJQUFJLGVBQWdCLENBQy9DdGUsS0FBTSxTQUNOaU4sTUFBTyxrQkFJWHFjLEVBQW9CbmdDLFVBQVVvbkIsV0FBYSxXQUN2Q2pvQixLQUFLc0gsT0FBUyxFQUFBbEYsT0FBQSxZQUFtQjJrQixFQUFXLFdBQVgsS0FDN0IvbUIsS0FBS3NILE9BQU94RCxZQUFZKzhCLEVBQW1CenRCLE9BQzNDcFQsS0FBS3NILE9BQU8zRCxlQUFlazlCLEVBQW1CenRCLE1BRWxEcFQsS0FBS3NILE9BQU8vRCxpQkFBaUIsSUFBSXM5QixFQUFtQjdnQyxLQUFLaTJCLFNBRXpEajJCLEtBQUtpaEMsa0JBQW9CamhDLEtBQUtraEMsVUFBVXhILFFBQVF5SCxPQUlwREgsRUFBb0JuZ0MsVUFBVWtnQyxjQUFnQixTQUFVdlQsRUFBZ0JHLEdBQ3BFLE1BQU1odUIsRUFBUThNLEdBQUdvdUIsS0FBS0MsTUFBTXROLEVBQWlCRyxFQUFZLEVBQUcsR0FDdER3VCxFQUFRMTBCLEdBQUdvdUIsS0FBS3VHLEtBQUssRUFBR3BoQyxLQUFLaWhDLGtCQUFtQnRoQyxHQUV0REssS0FBS2toQyxVQUFVeEgsUUFBUXlILE1BQVFBLEVBTS9CbmhDLEtBQUtraEMsVUFBVXhILFFBQVEySCxLQUFLeDFCLEVBQUlsTSxFQUVoQ0ssS0FBS2toQyxVQUFVeEgsUUFBUTJILEtBQU9yaEMsS0FBS2toQyxVQUFVeEgsUUFBUTJILEtBRXJEcmhDLEtBQUtzaEMsYUFBYTVILFFBQVE5VSxLQUFPLEdBQUc0SSxLQUFrQkcsS0N2QzFELE1BQVE1b0IsU0FBUSxHQUFLLEVBQVEsS0FFdEIsTUFBTXc4QixVQUFzQyxFQUMvQyxrQkFBb0IsTUFBTyxnQ0FFM0IsWUFBWXQ4QixHQUNSa08sTUFBTW91QixFQUE4Qm51QixNQUNwQ3BULEtBQUtrRyxzQkFBc0IsQ0FDdkJxSyxFQUFBLHdCQUNBQSxFQUFBLDRCQUNBQSxFQUFBLGtCQUNBQSxFQUFBLGFBQTBCLFdBRTlCdlEsS0FBS2lGLGNBQWdCQSxFQUd6QixXQUFXTSxHQUNQNE4sTUFBTXJOLFdBQVdQLEdBR3JCLG1CQUFtQnhFLEtBQXFCVSxHQUNwQyxPQUFRVixHQUNKLEtBQUt3UCxFQUFBLHdCQUNEdlEsS0FBS2lGLGNBQWNreEIsU0FBVSxFQUM3QixNQUNKLEtBQUs1bEIsRUFBQSw0QkFDRCxNQUFNd0wsRUFBYy9iLEtBQUtzSCxPQUFPbkUsY0FBY2dYLEVBQUEsT0FBMEIsVUFDbEU2RSxFQUFtQmpELEVBQVlpRCxpQkFDL0J3aUIsRUFBYXpsQixFQUFZc1Isa0JBQy9CcnRCLEtBQUtpRixjQUFjbUksT0FBdUMsK0JBQUVxMEIsb0JBQW9CemlCLEVBQWtCd2lCLEdBQ2xHeGhDLEtBQUtpRixjQUFja3hCLFNBQVUsRUFDN0IsTUFDSixLQUFLNWxCLEVBQUEsYUFBMEIsU0FDM0J2USxLQUFLaUYsY0FBY21JLE9BQXVDLCtCQUFFcTBCLG9CQUFvQmhnQyxFQUFLLEdBQUlBLEVBQUssSUFFOUYsTUFDSixLQUFLOE8sRUFBQSxrQkFDRHZRLEtBQUtpRixjQUFja3hCLFNBQVUsSUN4Q3RDLE1BQU11TCxFQUFpQ2oxQixHQUFHaXBCLGFBQWEsa0NBSzlEZ00sRUFBK0IzTCxXQUFXQyxJQUFJLGNBQWUsQ0FBRXRlLEtBQU0sUUFBU2lOLE1BQU8saUJBR3JGK2MsRUFBK0I3Z0MsVUFBVW9uQixXQUFhLFdBQ2xEam9CLEtBQUtzSCxPQUFTLEVBQUFsRixPQUFBLFlBQW1CMmtCLEVBQVcsV0FBWCxLQUM3Qi9tQixLQUFLc0gsT0FBT3hELFlBQVl5OUIsRUFBOEJudUIsT0FDdERwVCxLQUFLc0gsT0FBTzNELGVBQWU0OUIsRUFBOEJudUIsTUFHN0RwVCxLQUFLc0gsT0FBTy9ELGlCQUFpQixJQUFJZytCLEVBQThCdmhDLEtBQUtpMkIsU0FFcEVqMkIsS0FBSzJoQyxLQUFPLElBR2hCRCxFQUErQjdnQyxVQUFVNGdDLG9CQUFzQixTQUFVemlCLEVBQWtCd2lCLEdBQ3ZGLEtBQU94aEMsS0FBSzJoQyxLQUFLLy9CLE9BQVM0L0IsR0FDdEJ4aEMsS0FBSzRoQyxZQUdULElBQUssSUFBSWozQixFQUFJLEVBQUdBLEVBQUkzSyxLQUFLMmhDLEtBQUsvL0IsT0FBUStJLElBQzlCQSxFQUFJcVUsRUFDSmhmLEtBQUsyaEMsS0FBS2gzQixHQUFHd29CLEtBQUssYUFBYSxHQUUvQm56QixLQUFLMmhDLEtBQUtoM0IsR0FBR3dvQixLQUFLLGFBQWEsSUFNM0N1TyxFQUErQjdnQyxVQUFVK2dDLFVBQVksV0FDakQsTUFBTUMsRUFBUzdoQyxLQUFLOGhDLFlBQVk5dEIsU0FBUytKLGNBQ3pDL2QsS0FBS2kyQixPQUFPaFksU0FBUzRqQixHQUNyQjdoQyxLQUFLMmhDLEtBQUs1NkIsS0FBSzg2QixJQ3JDWixNQUFNRSxFQUErQnQxQixHQUFHaXBCLGFBQWEsZ0NBRTVEcU0sRUFBNkJoTSxXQUFXQyxJQUFJLFdBQVksQ0FBRXRlLEtBQU0sU0FBVWlOLE1BQU8sY0FHakZvZCxFQUE2QmxoQyxVQUFVb25CLFdBQWEsV0FDaERqb0IsS0FBS2kyQixPQUFPMXRCLEdBQUcsYUFBY3k1QixJQUN6QmhpQyxLQUFLaWlDLFNBQVM5TCxRQUFVNkwsTUNMaEMsTUFBUWo5QixTQUFRLEdBQUssRUFBUSxLQUV0QixNQUFNbTlCLFVBQXNDLEVBQy9DLGtCQUFvQixNQUFPLGdDQUUzQixZQUFZajlCLEdBQ1JrTyxNQUFNK3VCLEVBQThCOXVCLE1BQ3BDcFQsS0FBS2tHLHNCQUFzQixDQUN2QnFLLEVBQUEsNEJBRUp2USxLQUFLaUYsY0FBZ0JBLEVBSXpCLFdBQVdNLEdBQ1A0TixNQUFNck4sV0FBV1AsR0FHckIsbUJBQW1CeEUsS0FBcUJVLEdBQ3BDLE9BQVFWLEdBQ0osS0FBS3dQLEVBQUEsMEJBQ0QsTUFBTTR4QixFQUFhbmlDLEtBQUtpRixjQUFjbUksT0FBdUMsK0JBQ3ZFZzFCLEVBQWMzZ0MsRUFBSyxHQUNuQndwQixFQUFjeHBCLEVBQUssR0FFekIwZ0MsRUFBV0UsY0FBY0QsRUFBYW5YLEtDM0IvQyxNQUFNcVgsRUFBbUM3MUIsR0FBR2lwQixhQUFhLG9DQUtoRTRNLEVBQWlDemhDLFVBQVVvbkIsV0FBYSxhQUV4RHFhLEVBQWlDemhDLFVBQVUwaEMsaUJBQW1CLFNBQVVDLEVBQWU5RSxFQUFRK0UsR0FDM0Z6aUMsS0FBS2kyQixPQUFPRSxTQUFVLEVBQ3RCbjJCLEtBQUt3aUMsY0FBZ0JBLEVBQ3JCeGlDLEtBQUswaUMsT0FBUzFpQyxLQUFLd00sSUFBSW0yQixlQUN2QjNpQyxLQUFLdzlCLGFBQWVFLEVBQ3BCMTlCLEtBQUs0aUMsYUFBZUgsRUFFcEIvbkIsWUFBVyxLQUNQMWEsS0FBS2kyQixPQUFPNW5CLFlBQ2IsTUFJUGkwQixFQUFpQ3poQyxVQUFVZ2lDLFdBQWEsU0FBVWhOLEdBQzlELE1BQU1pTixFQUFXOWlDLEtBQUsraUMsd0JBQXdCL2lDLEtBQUt3aUMsY0FBYzVULFNBQzdEa1UsR0FDQTlpQyxLQUFLaTJCLE9BQU9qWSxpQkFBaUI4a0IsSUFJckNSLEVBQWlDemhDLFVBQVVraUMsd0JBQTBCLFNBQVVsbkIsR0FDM0UsR0FBSTdiLEtBQUswaUMsUUFBVTFpQyxLQUFLdzlCLGNBQWdCeDlCLEtBQUs0aUMsYUFBYyxDQUN2RCxNQUFNSSxFQUFXbm5CLEVBQUkrUyxRQUNmd0gsRUFBWSxJQUFJM3BCLEdBQUdtRSxLQUV6QjVRLEtBQUt3OUIsYUFBYUUsT0FBT3VGLGNBQWNELEVBQVU1TSxHQUNqRCxNQUFNOE0sRUFBYWxqQyxLQUFLd00sSUFBSW0yQixlQUFlUSxjQUMzQy9NLEVBQVV6cUIsR0FBS3UzQixFQUNmOU0sRUFBVXhxQixHQUFLczNCLEVBRWYsTUFFTUUsRUFGYXBqQyxLQUFLNGlDLGFBQWFILE9BRVBoeUIsTUFDeEI5RSxFQUFLeXFCLEVBQVV6cUIsRUFBSXkzQixFQUNuQngzQixHQUFLNUwsS0FBSzBpQyxPQUFPblgsT0FBUzZLLEVBQVV4cUIsR0FBS3czQixFQUUvQyxPQUFPLElBQUkzMkIsR0FBR21FLEtBQUtqRixFQUFHQyxFQUFHLEtDM0MxQixNQUFNeTNCLEVBQWlDNTJCLEdBQUdpcEIsYUFBYSxrQ0FtQjlEMk4sRUFBK0J0TixXQUFXQyxJQUFJLGVBQWdCLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLGtCQUN2RjBlLEVBQStCdE4sV0FBV0MsSUFBSSxlQUFnQixDQUFFdGUsS0FBTSxTQUFVaU4sTUFBTyxrQkFDdkYwZSxFQUErQnROLFdBQVdDLElBQUksbUJBQW9CLENBQUV0ZSxLQUFNLE9BQVFvZixPQWZyRCxDQUN6QixDQUNJLzBCLEtBQU0sT0FDTjRpQixNQUFPLE9BQ1BqTixLQUFNLFVBRVYsQ0FDSTNWLEtBQU0sV0FDTjRpQixNQUFPLFdBQ1BqTixLQUFNLFVBTWtHaU4sTUFBTyxvQkFBcUJyTCxPQUFPLElBR25KK3BCLEVBQStCeGlDLFVBQVVvbkIsV0FBYSxXQUNsRGpvQixLQUFLc0gsT0FBUyxFQUFBbEYsT0FBQSxZQUFtQjJrQixFQUFXLFdBQVgsS0FDN0IvbUIsS0FBS3NILE9BQU94RCxZQUFZbytCLEVBQThCOXVCLE9BQ3REcFQsS0FBS3NILE9BQU8zRCxlQUFldStCLEVBQThCOXVCLE1BRzdEcFQsS0FBS3NILE9BQU8vRCxpQkFBaUIsSUFBSTIrQixFQUE4QmxpQyxLQUFLaTJCLFVBSXhFb04sRUFBK0J4aUMsVUFBVXdoQyxjQUFnQixTQUFVdGdDLEVBQU1rcEIsS0FBZ0J4cEIsR0FDckYsTUFBTTArQixFQUFTbmdDLEtBQUtzakMsaUJBQWlCdnFCLE1BQU13cUIsR0FBZ0JBLEVBQVl4aEMsT0FBU0EsSUFDaEYsSUFBSW8rQixFQVVBLE1BQU0sSUFBSWhnQyxNQUFNLGtDQUFrQzRCLEdBVjFDLENBRVIsTUFBTW9iLEVBQWE4TixFQUFZMVcsWUFDekJpdkIsRUFBWSxJQUFJLzJCLEdBQUdtRSxLQUFLdU0sRUFBV3hSLEVBQUd3UixFQUFXdlIsRUFBSXFmLEVBQVlNLE9BQVFwTyxFQUFXdFIsR0FDcEY0M0IsRUFBWXRELEVBQU91RCxTQUFTMXZCLFNBQVMrSixjQUMzQzBsQixFQUFVcjJCLE9BQXlDLGlDQUFFbTFCLGlCQUFpQmlCLEVBQ2xFeGpDLEtBQUt3OUIsYUFBY3g5QixLQUFLNGlDLGNBQzVCNWlDLEtBQUtpMkIsT0FBTzljLE9BQU84RSxTQUFTd2xCLEtDdkNwQyxNQUFRMStCLFNBQVEsR0FBSyxFQUFRLEtBRXRCLE1BQU00K0IsVUFBdUIsRUFDaEMsa0JBQW9CLE1BQU8saUJBRTNCLFlBQVkxK0IsR0FDUmtPLE1BQU13d0IsRUFBZXZ3QixNQUNyQnBULEtBQUtrRyxzQkFBc0IsQ0FDdkJxSyxFQUFBLDBCQUVKdlEsS0FBS2lGLGNBQWdCQSxFQUVyQmpGLEtBQUtpRixjQUFjc0QsR0FBRyxnQkFBaUJ2SSxLQUFLNGpDLGVBQWdCNWpDLE1BSWhFLFdBQVd1RixHQUNQNE4sTUFBTXJOLFdBQVdQLEdBR3JCLG1CQUFtQnhFLEtBQXFCVSxHQUNwQyxPQUFRVixHQUNKLEtBQUt3UCxFQUFBLHNCQUtiLGlCQUNJLE1BQU11TSxFQUFpQjljLEtBQUtzSCxPQUFPbkUsY0FBY21WLEVBQUEsUUFDM0NySixFQUFrQmpQLEtBQUtpRixjQUFjbUksT0FBd0IsZ0JBQzdEZ0MsRUFBbUJILEVBQWdCRyxpQkFDbkNDLEVBQW9CSixFQUFnQkksa0JBQ3BDNlQsRUFBbUJqVSxFQUFnQkssY0FBY0MsY0FFbkR1TixFQUFlRyxjQUFnQixFQUFBekIsa0JBQUEsYUFDL0J4YixLQUFLc0gsT0FBT3ZELGlCQUFpQndNLEVBQUEsMEJBQ3pCMlMsRUFBa0I5VCxFQUFrQkMsSUN4QzdDLE1BQU13MEIsRUFBa0JwM0IsR0FBR2lwQixhQUFhLG1CQUsvQ21PLEVBQWdCOU4sV0FBV0MsSUFBSSxXQUFZLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLGNBQ3BFa2YsRUFBZ0I5TixXQUFXQyxJQUFJLG1CQUFvQixDQUFFdGUsS0FBTSxTQUFVaU4sTUFBTyxzQkFDNUVrZixFQUFnQjlOLFdBQVdDLElBQUksb0JBQXFCLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLHVCQUM3RWtmLEVBQWdCOU4sV0FBV0MsSUFBSSxTQUFVLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLFdBQ2xFa2YsRUFBZ0I5TixXQUFXQyxJQUFJLGdCQUFpQixDQUFFdGUsS0FBTSxTQUFVaU4sTUFBTyxtQkFHekVrZixFQUFnQmhqQyxVQUFVb25CLFdBQWEsV0FDbkNqb0IsS0FBS3NILE9BQVMsRUFBQWxGLE9BQUEsWUFBbUIya0IsRUFBVyxXQUFYLEtBQzdCL21CLEtBQUtzSCxPQUFPeEQsWUFBWTYvQixFQUFldndCLE9BQ3ZDcFQsS0FBS3NILE9BQU8zRCxlQUFlZ2dDLEVBQWV2d0IsTUFHOUNwVCxLQUFLc0gsT0FBTy9ELGlCQUFpQixJQUFJb2dDLEVBQWUzakMsS0FBS2kyQixTQUVyRGoyQixLQUFLc1AsY0FBY3BNLE1BQU1pekIsU0FBVSxHQ2xCdkMsTUFBUXB4QixTQUFRLEdBQUssRUFBUSxLQUV0QixNQUFNKytCLFdBQThCLEVBQ3ZDLGtCQUFvQixNQUFPLHdCQUUzQixZQUFZNytCLEdBQ1JrTyxNQUFNMndCLEdBQXNCMXdCLE1BQzVCcFQsS0FBS2tHLHNCQUFzQixDQUN2QnFLLEVBQUEsc0JBQ0FBLEVBQUEsc0JBQ0FBLEVBQUEsd0JBQ0FBLEVBQUEsOEJBQ0FBLEVBQUEseUJBQ0FBLEVBQUEsZ0NBQ0FBLEVBQUEsa0NBRUp2USxLQUFLaUYsY0FBZ0JBLEVBRXJCakYsS0FBS2lGLGNBQWNzRCxHQUFHLG1CQUFvQnZJLEtBQUsrakMsb0JBQXFCL2pDLE1BQ3BFQSxLQUFLaUYsY0FBY3NELEdBQUcsaUJBQWtCdkksS0FBS2drQyxrQkFBbUJoa0MsTUFJcEUsV0FBV3VGLEdBQ1A0TixNQUFNck4sV0FBV1AsR0FHckIsbUJBQW1CeEUsS0FBcUJVLEdBQ3BDLE9BQVFWLEdBQ0osS0FBS3dQLEVBQUEsc0JBQ0R2USxLQUFLaUYsY0FBY2t4QixTQUFVLEVBQzdCLE1BQ0osS0FBSzVsQixFQUFBLHNCQUNEdlEsS0FBS2lGLGNBQWNtSSxPQUErQix1QkFBRTYyQixhQUNwRGprQyxLQUFLaUYsY0FBY2t4QixTQUFVLEVBQzdCLE1BQ0osS0FBSzVsQixFQUFBLHdCQUNEdlEsS0FBS2lGLGNBQWNtSSxPQUErQix1QkFBRTgyQixXQUFXemlDLEVBQUssSUFDcEUsTUFDSixLQUFLOE8sRUFBQSw4QkFDRHZRLEtBQUtpRixjQUFjbUksT0FBK0IsdUJBQUUrMkIsbUJBQW1CMWlDLEdBQ3ZFLE1BQ0osS0FBSzhPLEVBQUEseUJBQ0R2USxLQUFLaUYsY0FBY21JLE9BQStCLHVCQUFFZzNCLHVCQUNwRCxNQUNKLEtBQUs3ekIsRUFBQSxnQ0FDRHZRLEtBQUtpRixjQUFjbUksT0FBK0IsdUJBQUVpM0IsbUJBQWtCLEdBQ3RFLE1BQ0osS0FBSzl6QixFQUFBLGdDQUNEdlEsS0FBS2lGLGNBQWNtSSxPQUErQix1QkFBRWkzQixtQkFBa0IsSUFNbEYsc0JBQ0lya0MsS0FBS3NILE9BQU92RCxpQkFBaUJ3TSxFQUFBLDBCQUdqQyxrQkFBa0J2SixHQUNkaEgsS0FBS3NILE9BQU92RCxpQkFBaUJ3TSxFQUFBLHlCQUFxQ3ZKLElDOURuRSxNQUFNczlCLEdBQXlCNzNCLEdBQUdpcEIsYUFBYSwwQkFLdEQ0TyxHQUF1QnZPLFdBQVdDLElBQUksc0JBQXVCLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLG1CQUN0RjJmLEdBQXVCdk8sV0FBV0MsSUFBSSxnQkFBaUIsQ0FBRXRlLEtBQU0sU0FBVWlOLE1BQU8sbUJBQ2hGMmYsR0FBdUJ2TyxXQUFXQyxJQUFJLGFBQWMsQ0FBRXRlLEtBQU0sU0FBVWlOLE1BQU8sZ0JBQzdFMmYsR0FBdUJ2TyxXQUFXQyxJQUFJLGdCQUFpQixDQUFFdGUsS0FBTSxTQUFVaU4sTUFBTyxpQkFBa0JrUyxRQUFTLE1BRTNHeU4sR0FBdUJ2TyxXQUFXQyxJQUFJLG9CQUFxQixDQUFFdGUsS0FBTSxRQUFTaU4sTUFBTyxxQkFDbkYyZixHQUF1QnZPLFdBQVdDLElBQUksc0JBQXVCLENBQUV0ZSxLQUFNLFFBQVNpTixNQUFPLHVCQUNyRjJmLEdBQXVCdk8sV0FBV0MsSUFBSSx5QkFBMEIsQ0FBRXRlLEtBQU0sUUFBU2lOLE1BQU8sMkJBRXhGMmYsR0FBdUJ2TyxXQUFXQyxJQUFJLHVCQUF3QixDQUFFdGUsS0FBTSxTQUFVaU4sTUFBTyxvQkFJdkYyZixHQUF1QnpqQyxVQUFVb25CLFdBQWEsV0FDMUNqb0IsS0FBS3NILE9BQVMsRUFBQWxGLE9BQUEsWUFBbUIya0IsRUFBVyxXQUFYLEtBQzdCL21CLEtBQUtzSCxPQUFPeEQsWUFBWWdnQyxHQUFzQjF3QixPQUM5Q3BULEtBQUtzSCxPQUFPM0QsZUFBZW1nQyxHQUFzQjF3QixNQUdyRHBULEtBQUtzSCxPQUFPL0QsaUJBQWlCLElBQUl1Z0MsR0FBc0I5akMsS0FBS2kyQixTQUU1RGoyQixLQUFLaTJCLE9BQU9FLFNBQVUsRUFFdEJuMkIsS0FBSzhWLFFBQVUsR0FFZjlWLEtBQUt1a0MscUJBQXFCN0ssUUFBUW54QixHQUFHLFNBQVMsS0FDMUN2SSxLQUFLaTJCLE9BQU85QyxLQUFLLHNCQUNsQm56QixPQUlQc2tDLEdBQXVCempDLFVBQVVxakMsV0FBYSxTQUFVTSxHQUdwRCxHQUZBeGtDLEtBQUt5a0MsV0FBV0QsRUFBU3JnQixNQUVyQnFnQixFQUFTcmdCLEtBQUtyTyxRQUNkLElBQUssSUFBSW5MLEVBQUksRUFBR0EsRUFBSTY1QixFQUFTcmdCLEtBQUtyTyxRQUFRbFUsT0FBUStJLElBQUssQ0FDbkQsTUFBTSs1QixFQUFTRixFQUFTcmdCLEtBQUtyTyxRQUFRbkwsR0FDckMzSyxLQUFLMmtDLGFBQWFoNkIsRUFBRys1QixFQUFPOWYsUUFLeEMwZixHQUF1QnpqQyxVQUFVNGpDLFdBQWEsU0FBVUQsR0FDcEQsTUFBTUksRUFBVTVrQyxLQUFLNmtDLGtCQUFrQjd3QixTQUFTK0osY0FDaEQ2bUIsRUFBUXgzQixPQUE4QixzQkFBRTAzQixNQUFNTixHQUM5Q3hrQyxLQUFLK2tDLFdBQVc5bUIsU0FBUzJtQixHQUN6QjVrQyxLQUFLZ2xDLG1CQUVMdHFCLFlBQVcsS0FDUDFhLEtBQUtpbEMsb0JBQW9CQyxVQUFVdmxDLE1BQVEsSUFDNUMsS0FHUDJrQyxHQUF1QnpqQyxVQUFVOGpDLGFBQWUsU0FBVTM5QixFQUFPNGQsR0FDN0QsTUFBTXVnQixFQUFZbmxDLEtBQUtvbEMsb0JBQW9CcHhCLFNBQVMrSixjQUNwRG9uQixFQUFVLzNCLE9BQWdDLHdCQUFFMDNCLE1BQU05OUIsRUFBTzRkLEdBQ3pEdWdCLEVBQVV6TCxRQUFROVUsS0FBT0EsRUFDekI1a0IsS0FBSytrQyxXQUFXOW1CLFNBQVNrbkIsR0FDekJubEMsS0FBSzhWLFFBQVEvTyxLQUFLbytCLEdBRWxCQSxFQUFVNThCLEdBQUcsUUFBU3ZJLEtBQUtxbEMsbUJBQW9CcmxDLE1BRS9DQSxLQUFLZ2xDLG1CQUVMdHFCLFlBQVcsS0FDUDFhLEtBQUtpbEMsb0JBQW9CQyxVQUFVdmxDLE1BQVEsSUFDNUMsS0FHUDJrQyxHQUF1QnpqQyxVQUFVc2pDLGdCQUFrQixTQUFVeE4sRUFBV0MsRUFBWWxSLEVBQU1DLEVBQU0yZixHQUM1RixNQUFNQyxFQUFldmxDLEtBQUt3bEMsdUJBQXVCeHhCLFNBQVMrSixjQUMxRHduQixFQUFhbjRCLE9BQW1DLDJCQUFFMDNCLE1BQU1uTyxFQUFXQyxFQUFZbFIsRUFBTUMsRUFBTTJmLEdBQzNGdGxDLEtBQUsra0MsV0FBVzltQixTQUFTc25CLEdBRXpCdmxDLEtBQUtnbEMsbUJBRUx0cUIsWUFBVyxLQUNQMWEsS0FBS2lsQyxvQkFBb0JDLFVBQVV2bEMsTUFBUSxJQUM1QyxLQUdQMmtDLEdBQXVCempDLFVBQVV1akMscUJBQXVCLFdBQ3BELElBQUssTUFBTU0sS0FBVTFrQyxLQUFLOFYsUUFDdEI0dUIsRUFBT241QixJQUFJLFFBQVN2TCxLQUFLcWxDLG1CQUFvQnJsQyxNQUM3QzBrQyxFQUFPcjJCLFVBR1hyTyxLQUFLOFYsUUFBVSxJQUduQnd1QixHQUF1QnpqQyxVQUFVb2pDLFdBQWEsV0FDMUMsS0FBT2prQyxLQUFLK2tDLFdBQVcvYyxTQUFTcG1CLE9BQVMsR0FDckM1QixLQUFLK2tDLFdBQVcvYyxTQUFTLEdBQUczWixXQUlwQ2kyQixHQUF1QnpqQyxVQUFVd2tDLG1CQUFxQixTQUFVcitCLEdBQzVEaEgsS0FBS2kyQixPQUFPOUMsS0FBSyxpQkFBa0Juc0IsSUFHdkNzOUIsR0FBdUJ6akMsVUFBVW1rQyxpQkFBbUIsV0FDaEQsSUFBSVMsRUFBa0J6bEMsS0FBSytrQyxXQUFXVyxZQUFZQyxRQUFRLzVCLEVBQ3REMmYsRUFBUyxFQUViLElBQUssTUFBTXFhLEtBQWE1bEMsS0FBSytrQyxXQUFXL2MsU0FDcEN1RCxHQUFVcWEsRUFBVWxNLFFBQVFuTyxPQUM1QkEsR0FBVWthLEVBR2R6bEMsS0FBSzZsQyxjQUFjbk0sUUFBUW5PLE9BQVN0YSxLQUFLd2MsSUFBSXp0QixLQUFLOGxDLGNBQWV2YSxJQUdyRStZLEdBQXVCempDLFVBQVV3akMsa0JBQW9CLFNBQVUxa0MsR0FDM0RLLEtBQUt1a0MscUJBQXFCcE8sUUFBVXgyQixHQ3RIakMsTUFBTW9tQyxHQUEwQnQ1QixHQUFHaXBCLGFBQWEsMkJBRXZEcVEsR0FBd0JoUSxXQUFXQyxJQUFJLGNBQWUsQ0FBRXRlLEtBQU0sU0FBVWlOLE1BQU8saUJBQy9Fb2hCLEdBQXdCaFEsV0FBV0MsSUFBSSxjQUFlLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLGlCQUkvRW9oQixHQUF3QmxsQyxVQUFVb25CLFdBQWEsYUFJL0M4ZCxHQUF3QmxsQyxVQUFVaWtDLE1BQVEsU0FBVTk5QixFQUFPZy9CLEdBQ3ZEaG1DLEtBQUtpbUMsWUFBWXZNLFFBQVE5VSxLQUFRNWQsRUFBUSxFQUFLLElBQzlDaEgsS0FBS3k1QixZQUFZQyxRQUFROVUsS0FBT29oQixFQUVoQ2htQyxLQUFLaTJCLE9BQU95RCxRQUFRbk8sT0FBU3ZyQixLQUFLeTVCLFlBQVlDLFFBQVFuTyxPQUV0RHZyQixLQUFLaTJCLE9BQU95RCxRQUFRbnhCLEdBQUcsU0FBUyxLQUM1QnZJLEtBQUtpMkIsT0FBTzlDLEtBQUssUUFBU25zQixPQUlsQysrQixHQUF3QmxsQyxVQUFVKzBCLE9BQVMsU0FBVUMsR0FDakQ3MUIsS0FBS2kyQixPQUFPeUQsUUFBUW5PLE9BQVN2ckIsS0FBS3k1QixZQUFZQyxRQUFRbk8sUUN2Qm5ELE1BQU0yYSxHQUE0Qno1QixHQUFHaXBCLGFBQWEsNkJBRXpEd1EsR0FBMEJuUSxXQUFXQyxJQUFJLGdCQUFpQixDQUN0RHRlLEtBQU0sU0FDTmlOLE1BQU8sbUJBSVh1aEIsR0FBMEJybEMsVUFBVW8yQixlQUFpQixXQUNqRGozQixLQUFLaTJCLE9BQU8yQixVQUFVRSxNQUFPLEVBQzdCOTNCLEtBQUtpMkIsT0FBTzJCLFVBQVVDLEtBQUs3M0IsS0FBS21tQyxjQUFlLEtDVjVDLE1BQU1DLEdBQXdCMzVCLEdBQUdpcEIsYUFBYSx5QkFFckQwUSxHQUFzQnJRLFdBQVdDLElBQUksaUJBQWtCLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLG1CQUFvQmtTLFFBQVMsTUFDN0d1UCxHQUFzQnJRLFdBQVdDLElBQUksb0JBQXFCLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLG1CQUFvQmtTLFFBQVMsTUFFaEh1UCxHQUFzQnJRLFdBQVdDLElBQUksZ0JBQWlCLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLG1CQUMvRXloQixHQUFzQnJRLFdBQVdDLElBQUksY0FBZSxDQUFFdGUsS0FBTSxTQUFVaU4sTUFBTyxpQkFDN0V5aEIsR0FBc0JyUSxXQUFXQyxJQUFJLGFBQWMsQ0FBRXRlLEtBQU0sU0FBVWlOLE1BQU8sZ0JBRTVFeWhCLEdBQXNCclEsV0FBV0MsSUFBSSxxQkFBc0IsQ0FBRXRlLEtBQU0sU0FBVWlOLE1BQU8sd0JBQ3BGeWhCLEdBQXNCclEsV0FBV0MsSUFBSSxpQkFBa0IsQ0FBRXRlLEtBQU0sU0FBVWlOLE1BQU8sb0JBSWhGeWhCLEdBQXNCdmxDLFVBQVVvbkIsV0FBYSxhQUk3Q21lLEdBQXNCdmxDLFVBQVVpa0MsTUFBUSxTQUFVTixHQUMxQ0EsRUFBUzdmLE9BQ1Qza0IsS0FBS3FtQyxZQUFZM00sUUFBUTlVLEtBQU80ZixFQUFTN2YsTUFFckM2ZixFQUFTM2YsYUFDVDdrQixLQUFLcW1DLFlBQVkzTSxRQUFRNE0sTUFBTUMsV0FBVy9CLEVBQVMzZixjQUl2RDdrQixLQUFLcW1DLFlBQVlsUSxTQUFVLEVBRzNCcU8sRUFBU2dDLFVBQ1R4bUMsS0FBS3ltQyxjQUFjL00sUUFBUXlILE1BQVFuaEMsS0FBSzBtQyxnQkFFeEMxbUMsS0FBS3ltQyxjQUFjL00sUUFBUXlILE1BQVFuaEMsS0FBSzJtQyxrQkFDeEMzbUMsS0FBSzRtQyxtQkFBbUJDLFFBQVMsR0FHckM3bUMsS0FBSzhtQyxXQUFXcE4sUUFBUTlVLEtBQU80ZixFQUFTNWYsTUFJNUN3aEIsR0FBc0J2bEMsVUFBVWttQyxVQUFZLFdBQ3hDLE1BQU1DLEVBQWFobkMsS0FBSzRtQyxtQkFBeUIsT0FBSTVtQyxLQUFLNG1DLG1CQUFtQmxOLFFBQVFuTyxPQUFTLEVBQzlGLElBQUlBLEVBQVMsRUFDVG9hLEVBQVUzbEMsS0FBS3ltQyxjQUFjZixZQUFZQyxRQUFRLzVCLEVBQ3JELElBQUssTUFBTXE3QixLQUFham5DLEtBQUt5bUMsY0FBY3plLFNBQ3ZDdUQsR0FBVTBiLEVBQVV2TixRQUFRbk8sT0FBU29hLEVBSXBDM2xDLEtBQUtxbUMsWUFBWWxRLFVBQ2xCbjJCLEtBQUs4bUMsV0FBV3BOLFFBQVF5SCxNQUFRbmhDLEtBQUswbUMsZ0JBSXpDMW1DLEtBQUtpMkIsT0FBT3lELFFBQVFuTyxPQUFTdGEsS0FBS3djLElBQUl1WixFQUFXemIsSUFJckQ2YSxHQUFzQnZsQyxVQUFVbzJCLGVBQWlCLFdBQzdDajNCLEtBQUsrbUMsYUFJVFgsR0FBc0J2bEMsVUFBVSswQixPQUFTLFNBQVVDLEtDOURuRCxNQUFROXdCLFNBQVEsSUFBSyxFQUFRLEtBRXRCLE1BQU1taUMsV0FBNkIsR0FDdEMsa0JBQW9CLE1BQU8sdUJBRTNCLFlBQVlqaUMsR0FDUmtPLE1BQU0rekIsR0FBcUI5ekIsTUFDM0JwVCxLQUFLa0csc0JBQXNCLENBQ3ZCcUssRUFBQSw0QkFFSnZRLEtBQUtpRixjQUFnQkEsRUFFckJqRixLQUFLaUYsY0FBY3NELEdBQUcscUJBQXNCdkksS0FBS21uQyxtQkFBb0JubkMsTUFJekUsV0FBV3VGLEdBQ1A0TixNQUFNck4sV0FBV1AsR0FHckIsbUJBQW1CeEUsS0FBcUJVLEdBQ3BDLE9BQVFWLEdBQ0osS0FBS3dQLEVBQUEsMEJBRWtCLFdBREE5TyxFQUFLLEdBRXBCekIsS0FBS2lGLGNBQWNtSSxPQUE4QixzQkFBRWc2QixpQkFBZ0IsR0FFbkVwbkMsS0FBS2lGLGNBQWNtSSxPQUE4QixzQkFBRWc2QixpQkFBZ0IsSUFNbkYsbUJBQW1CQyxHQUNYQSxFQUNBcm5DLEtBQUtzSCxPQUFPdkQsaUJBQWlCd00sRUFBQSwwQkFBc0MsVUFFbkV2USxLQUFLc0gsT0FBT3ZELGlCQUFpQndNLEVBQUEsMEJBQXNDLGFDdkN4RSxNQUFNKzJCLEdBQXdCNzZCLEdBQUdpcEIsYUFBYSx5QkFLckQ0UixHQUFzQnZSLFdBQVdDLElBQUksa0JBQW1CLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLHFCQUdqRjJpQixHQUFzQnptQyxVQUFVb25CLFdBQWEsV0FDekNqb0IsS0FBS3NILE9BQVMsRUFBQWxGLE9BQUEsWUFBbUIya0IsRUFBVyxXQUFYLEtBQzdCL21CLEtBQUtzSCxPQUFPeEQsWUFBWW9qQyxHQUFxQjl6QixPQUM3Q3BULEtBQUtzSCxPQUFPM0QsZUFBZXVqQyxHQUFxQjl6QixNQUdwRHBULEtBQUtzSCxPQUFPL0QsaUJBQWlCLElBQUkyakMsR0FBcUJsbkMsS0FBS2kyQixTQUUzRGoyQixLQUFLaTJCLE9BQU95RCxRQUFRbnhCLEdBQUcsUUFBU3ZJLEtBQUt3L0IsWUFBYXgvQixPQUd0RHNuQyxHQUFzQnptQyxVQUFVMitCLFlBQWMsU0FBVXYxQixHQUNwRGpLLEtBQUtpMkIsT0FBTzlDLEtBQUssc0JBQXVCbnpCLEtBQUtzL0IsZ0JBQWdCbkosVUFHakVtUixHQUFzQnptQyxVQUFVdW1DLGdCQUFrQixTQUFVRyxHQUN4RHZuQyxLQUFLcy9CLGdCQUFnQm5KLFFBQVVvUixHQ3RCbkMsTUFBUXhpQyxTQUFRLElBQUssRUFBUSxLQUV0QixNQUFNeWlDLFdBQThCLEdBQ3ZDLGtCQUFvQixNQUFPLHdCQUUzQixZQUFZdmlDLEVBQWUyaEIsR0FDdkJ6VCxNQUFNcTBCLEdBQXNCcDBCLEtBQU93VCxHQUNuQzVtQixLQUFLNG1CLGlCQUFtQkEsRUFFeEI1bUIsS0FBS2tHLHNCQUFzQixDQUN2QnFLLEVBQUEsMEJBQXNDQSxFQUFBLHdCQUN0Q0EsRUFBQSxrQ0FFSnZRLEtBQUtpRixjQUFnQkEsRUFFckJqRixLQUFLaUYsY0FBY3NELEdBQUcsZ0JBQWlCdkksS0FBS3luQyxjQUFlem5DLE1BSS9ELFdBQVd1RixHQUNQNE4sTUFBTXJOLFdBQVdQLEdBR3JCLG1CQUFtQnhFLEtBQXFCVSxHQUNwQyxPQUFRVixHQUNKLEtBQUt3UCxFQUFBLDBCQUVrQixXQURBOU8sRUFBSyxHQUVwQnpCLEtBQUtpRixjQUFjbUksT0FBK0IsdUJBQUVnNkIsaUJBQWdCLEdBRXBFcG5DLEtBQUtpRixjQUFjbUksT0FBK0IsdUJBQUVnNkIsaUJBQWdCLEdBRXhFLE1BQ0osS0FBSzcyQixFQUFBLHdCQUNELE1BQ01tM0IsRUFEaUJqbUMsRUFBSyxHQUNRK0QsSUFBSXhGLEtBQUs0bUIsa0JBQ3pDOGdCLEdBQWdCQSxFQUFhbFYsS0FFN0J4eUIsS0FBS2lGLGNBQWNtSSxPQUErQix1QkFBRXU2QixRQUFRRCxFQUFhbFYsTUFFekV4eUIsS0FBS2lGLGNBQWNtSSxPQUErQix1QkFBRXc2QixpQkFHeEQsTUFDSixLQUFLcjNCLEVBQUEsZ0NBQ0QsTUFBTXMzQixFQUFhcG1DLEVBQUssR0FFeEIsR0FEQXNHLFFBQVFDLElBQUksY0FBYzYvQixRQUFpQjduQyxLQUFLNG1CLG9CQUM1Q2loQixJQUFlN25DLEtBQUs0bUIsaUJBQWtCLENBQ3RDLE1BQU1raEIsRUFBZ0JybUMsRUFBSyxHQUMzQnpCLEtBQUtpRixjQUFjbUksT0FBK0IsdUJBQUVnNkIsZ0JBQWdCVSxLQU9wRixnQkFDSTluQyxLQUFLc0gsT0FBT3ZELGlCQUFpQndNLEVBQUEsb0JBQWdDdlEsS0FBSzRtQixtQkMzRG5FLE1BQU1taEIsR0FBeUJ0N0IsR0FBR2lwQixhQUFhLDBCQUt0RHFTLEdBQXVCaFMsV0FBV0MsSUFBSSxtQkFBb0IsQ0FBRXRlLEtBQU0sU0FBVWlOLE1BQU8sdUJBQ25Gb2pCLEdBQXVCaFMsV0FBV0MsSUFBSSxhQUFjLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLGdCQUM3RW9qQixHQUF1QmhTLFdBQVdDLElBQUksa0JBQW1CLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLHFCQUNsRm9qQixHQUF1QmhTLFdBQVdDLElBQUksY0FBZSxDQUFFdGUsS0FBTSxRQUFTaU4sTUFBTyxpQkFHN0VvakIsR0FBdUJsbkMsVUFBVW9uQixXQUFhLFdBQzFDam9CLEtBQUtzSCxPQUFTLEVBQUFsRixPQUFBLFlBQW1CMmtCLEVBQVcsV0FBWCxLQUM3Qi9tQixLQUFLc0gsT0FBT3hELFlBQVkwakMsR0FBc0JwMEIsS0FBT3BULEtBQUs0bUIsbUJBQzFENW1CLEtBQUtzSCxPQUFPM0QsZUFBZTZqQyxHQUFzQnAwQixLQUFPcFQsS0FBSzRtQixrQkFHakU1bUIsS0FBS3NILE9BQU8vRCxpQkFBaUIsSUFBSWlrQyxHQUFzQnhuQyxLQUFLaTJCLE9BQVFqMkIsS0FBSzRtQixtQkFFekU1bUIsS0FBS2kyQixPQUFPeUQsUUFBUW54QixHQUFHLFFBQVN2SSxLQUFLdy9CLFlBQWF4L0IsT0FHdEQrbkMsR0FBdUJsbkMsVUFBVThtQyxRQUFVLFNBQVVLLEdBQ2pELE1BQU1DLEVBQVlqb0MsS0FBS3dNLElBQUl1SCxPQUFPdk8sSUFBSXdpQyxHQUN0Q2hvQyxLQUFLa29DLFdBQVd4TyxRQUFReU8sWUFBY0YsR0FHMUNGLEdBQXVCbG5DLFVBQVUrbUMsZUFBaUIsV0FDOUM1bkMsS0FBS2tvQyxXQUFXeE8sUUFBUXlPLFlBQWNub0MsS0FBS29vQyxhQUcvQ0wsR0FBdUJsbkMsVUFBVTIrQixZQUFjLFNBQVV2MUIsR0FDckRqSyxLQUFLaTJCLE9BQU85QyxLQUFLLGtCQUdyQjRVLEdBQXVCbG5DLFVBQVV1bUMsZ0JBQWtCLFNBQVVHLEdBQ3pEdm5DLEtBQUtzL0IsZ0JBQWdCbkosUUFBVW9SLEdDcEM1QixNQUFNYyxHQUFtQjU3QixHQUFHaXBCLGFBQWEsb0JBeUVoRCxTQUFTNFMsR0FBVUMsRUFBTUMsR0FDckIsT0FBSUQsRUFBSzNtQyxTQUFXNG1DLEVBQ1RELEVBRUFBLEVBQUt6WixZQUFZcmUsTUFBTSszQixHQTNFdENILEdBQWlCdFMsV0FBV0MsSUFBSSxPQUFRLENBQ3BDdGUsS0FBTSxTQUNOaU4sTUFBTyxPQUNQa1MsUUFBUyxJQUdid1IsR0FBaUJ0UyxXQUFXQyxJQUFJLFdBQVksQ0FDeEN0ZSxLQUFNLFNBQ05pTixNQUFPLFlBQ1BrUyxRQUFTLElBR2J3UixHQUFpQnRTLFdBQVdDLElBQUksV0FBWSxDQUN4Q3RlLEtBQU0sU0FDTmlOLE1BQU8sWUFDUGtTLFFBQVMsS0FHYndSLEdBQWlCdFMsV0FBV0MsSUFBSSxrQkFBbUIsQ0FDL0N0ZSxLQUFNLFNBQ05pTixNQUFPLG9CQUNQa1MsUUFBUyxJQUdid1IsR0FBaUJ4bkMsVUFBVW9uQixXQUFhLFdBQ3BDam9CLEtBQUt5b0MsU0FBVyxJQUFJaDhCLEdBQUdtRSxLQUN2QjVRLEtBQUswb0MsY0FBZ0IsSUFBSWo4QixHQUFHbUUsTUFJaEN5M0IsR0FBaUJ4bkMsVUFBVXkzQixnQkFBa0IsU0FBVXpDLEdBQ25ELE1BQU1pTixFQUFXOWlDLEtBQUtpMkIsT0FBTzFtQixjQUU3QnZQLEtBQUswb0MsY0FBZ0JKLEdBQVV0b0MsS0FBSzBvQyxjQUFnQjFvQyxLQUFhLFVBQ2pFQSxLQUFLMG9DLGNBQWdCMW9DLEtBQUswb0MsY0FBY2o0QixNQUFNLEVBQUt6USxLQUFTLE1BQzVEQSxLQUFLeW9DLFNBQVd6b0MsS0FBS3lvQyxTQUFTelMsSUFBSWgyQixLQUFLMG9DLGVBQ3ZDMW9DLEtBQUt5b0MsU0FBV0gsR0FBVXRvQyxLQUFLeW9DLFNBQVd6b0MsS0FBSzJvQyxTQUFXOVMsR0FFMUQ3MUIsS0FBSzBvQyxjQUFnQixJQUFJajhCLEdBQUdtRSxLQUU1QjVRLEtBQUtpMkIsT0FBT2pZLGlCQUFpQjhrQixFQUFTOU0sSUFBSWgyQixLQUFLeW9DLFdBRS9DLE1BQU1HLEVBQXNDLEtBcUM5QkwsRUFyQ2F2b0MsS0FBS3lvQyxTQXNDekJ4M0IsS0FBS3duQixNQUFNOFAsRUFBSzU4QixFQUFHNDhCLEVBQUsxOEIsSUF0Q21Cb0YsS0FBS3luQixHQXFDM0QsSUFBa0I2UCxFQXBDZHZvQyxLQUFLaTJCLE9BQU8wQyxlQUFlLEVBQUdpUSxFQUFXLElBSTdDUCxHQUFpQnhuQyxVQUFVdTNCLEtBQU8sU0FBVTdMLEVBQVFzSixHQUNoRCxNQUFNaU4sRUFBVzlpQyxLQUFLaTJCLE9BQU9ya0IsbUJBQzdCLElBQUlpM0IsRUFBa0J0YyxFQUFPcUMsUUFBUUMsSUFBSWlVLEdBQ3pDK0YsRUFBa0JBLEVBQWdCL1osWUFDbEMrWixFQUFnQnA0QixNQUFNelEsS0FBSzJvQyxTQUFXOVMsR0FDdEMsTUFBTWlULEVBQVFELEVBQWdCaGEsSUFBSTd1QixLQUFLeW9DLFVBQ3ZDem9DLEtBQUswb0MsY0FBZ0Ixb0MsS0FBSzBvQyxjQUFjMVMsSUFBSThTLElBR2hEVCxHQUFpQnhuQyxVQUFVdzNCLE9BQVMsU0FBVTlMLEdBQzFDLE1BQU11VyxFQUFXOWlDLEtBQUtpMkIsT0FBTzFtQixjQUM3QixJQUFJczVCLEVBQWtCdGMsRUFBT3FDLFFBQVFDLElBQUlpVSxHQUFVaFUsWUFBWXJlLE1BQU16USxLQUFLMm9DLFVBQzFFLE1BQU03ZCxFQUFtQmdZLEVBQVNwVSxTQUFTbkMsR0FHdkNzYyxFQURBL2QsRUFBbUI5cUIsS0FBSytvQyxpQkFDTkYsRUFBZ0JwNEIsTUFBTXpRLEtBQUsyb0MsVUFFM0JFLEVBQWdCcDRCLE1BQU96USxLQUFLMm9DLFNBQVc3ZCxFQUFtQjlxQixLQUFLZ3BDLGlCQUdyRixNQUFNRixFQUFRRCxFQUFnQmhhLElBQUk3dUIsS0FBS3lvQyxVQUN2Q3pvQyxLQUFLMG9DLGNBQWdCMW9DLEtBQUswb0MsY0FBYzFTLElBQUk4UyxJQ3RFekMsTUFBTUcsR0FBd0J4OEIsR0FBR2lwQixhQUFhLHlCQUVyRHVULEdBQXNCcG9DLFVBQVVxb0MsT0FBU0EsT0FFekNELEdBQXNCcG9DLFVBQVVvMkIsZUFBaUIsV0FDN0NqM0IsS0FBS21wQyxXQUVMbnBDLEtBQUtrcEMsT0FBT0UsaUJBQWlCLFNBQVVwcEMsS0FBS21wQyxTQUFTeGdDLEtBQUszSSxPQUFPLElBSXJFaXBDLEdBQXNCcG9DLFVBQVVzb0MsU0FBVyxXQUN2QyxNQUFNeEcsRUFBaUIzaUMsS0FBS3dNLElBQUltMkIsZUFFNUJBLEVBQWV4QixNQUFRd0IsRUFBZXBYLE9BQ3RDdnJCLEtBQUtpMkIsT0FBT3dNLE9BQU80RyxXQUFhLEVBRWhDcnBDLEtBQUtpMkIsT0FBT3dNLE9BQU80RyxXQUFhLEVBR3BDcnBDLEtBQUtpMkIsT0FBT3dNLE9BQU82RyxvQkFBc0IsSUFBSTc4QixHQUFHNHdCLEtBQUtzRixFQUFleEIsTUFBT3dCLEVBQWVwWCxTQ3BCdkYsTUFBTWdlLEdBQTZCOThCLEdBQUdpcEIsYUFBYSw4QkFFMUQ2VCxHQUEyQnhULFdBQVdDLElBQUksaUJBQWtCLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLHFCQUNyRjRrQixHQUEyQnhULFdBQVdDLElBQUksa0JBQW1CLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLHNCQUN0RjRrQixHQUEyQnhULFdBQVdDLElBQUksWUFBYSxDQUFFdGUsS0FBTSxTQUFVaU4sTUFBTyxnQkFDaEY0a0IsR0FBMkJ4VCxXQUFXQyxJQUFJLFlBQWEsQ0FBRXRlLEtBQU0sU0FBVWlOLE1BQU8sZ0JBQ2hGNGtCLEdBQTJCeFQsV0FBV0MsSUFBSSxlQUFnQixDQUFFdGUsS0FBTSxTQUFVaU4sTUFBTyxrQkFDbkY0a0IsR0FBMkJ4VCxXQUFXQyxJQUFJLGVBQWdCLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLGtCQUtuRjRrQixHQUEyQjFvQyxVQUFVb25CLFdBQWEsYUFJbERzaEIsR0FBMkIxb0MsVUFBVWlrQyxNQUFRLFNBQVVuTyxFQUFXQyxFQUFZbFIsRUFBTUMsRUFBTTJmLEdBQ3RGdGxDLEtBQUt3cEMsZUFBZTlQLFFBQVE5VSxLQUFPK1IsRUFDbkMzMkIsS0FBS3lwQyxnQkFBZ0IvUCxRQUFROVUsS0FBT2dTLEVBQ3BDNTJCLEtBQUswcEMsVUFBVWhRLFFBQVE5VSxLQUFPYyxFQUM5QjFsQixLQUFLMnBDLFVBQVVqUSxRQUFROVUsS0FBT2UsRUFDOUIzbEIsS0FBSzRwQyxhQUFhelQsUUFBVW1QLEVBQzVCdGxDLEtBQUs2cEMsYUFBYTFULFNBQVdtUCxHQ3RCMUIsTUFBTXdFLEdBQXlCcjlCLEdBQUdpcEIsYUFBYSwwQkFFdERvVSxHQUF1Qi9ULFdBQVdDLElBQUksYUFBYyxDQUFFdGUsS0FBTSxTQUFVaU4sTUFBTyxnQkFDN0VtbEIsR0FBdUIvVCxXQUFXQyxJQUFJLGNBQWUsQ0FBRXRlLEtBQU0sU0FBVWlOLE1BQU8saUJBQzlFbWxCLEdBQXVCL1QsV0FBV0MsSUFBSSxhQUFjLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLGNBQWVrUyxRQUFTLEtBRXJHaVQsR0FBdUIvVCxXQUFXQyxJQUFJLGlCQUFrQixDQUFFdGUsS0FBTSxTQUFVaU4sTUFBTyxvQkFHakZtbEIsR0FBdUJqcEMsVUFBVWlrQyxNQUFRLFNBQVVydEIsR0FDL0N6WCxLQUFLd3lCLEtBQU8vYSxFQUFTK2EsS0FDckIsTUFBTXlWLEVBQVlqb0MsS0FBS3dNLElBQUl1SCxPQUFPdk8sSUFBSXhGLEtBQUt3eUIsTUFDM0N4eUIsS0FBS2tvQyxXQUFXeE8sUUFBUXlPLFlBQWNGLEVBQ3RDam9DLEtBQUtzWCxLQUFPRyxFQUFTSCxLQUNyQnRYLEtBQUt5NUIsWUFBWUMsUUFBUTlVLEtBQU9uTixFQUFTMVYsS0FDekMvQixLQUFLaTJCLE9BQU95RCxRQUFRbk8sT0FBU3ZyQixLQUFLK3BDLFdBQWEvcEMsS0FBS3NYLEtBQ3BEdFgsS0FBS2dxQyxlQUFldFEsUUFBUW5PLE9BQVN2ckIsS0FBSytwQyxXQUFhL3BDLEtBQUtzWCxLQUU1RHRYLEtBQUt5WCxTQUFXQSxHQUdwQnF5QixHQUF1QmpwQyxVQUFVb3BDLFNBQVcsV0FDeENqcUMsS0FBS2dxQyxlQUFlN1QsU0FBVSxHQUdsQzJULEdBQXVCanBDLFVBQVVxcEMsT0FBUyxXQUN0Q2xxQyxLQUFLZ3FDLGVBQWU3VCxTQUFVLEdBSWxDMlQsR0FBdUJqcEMsVUFBVW8yQixlQUFpQixXQUUzQixJQUFJeHFCLEdBQUcwOUIsa0JBQWtCbnFDLEtBQUtpMkIsT0FBT3lELFFBQVMsTUFDdERueEIsR0FBRyxhQUFjdkksS0FBS29xQyxZQUFhcHFDLE9BR2xEOHBDLEdBQXVCanBDLFVBQVV1cEMsWUFBYyxXQUMzQ3BxQyxLQUFLaTJCLE9BQU85YyxPQUFPZ2EsS0FBSyxhQUFjbnpCLEtBQUtpMkIsT0FBUWoyQixLQUFLc1gsT0NsQzVELE1BQVF2UyxTQUFRLElBQUssRUFBUSxLQUV0QixNQUFNc2xDLFdBQStCLEdBQ3hDLGtCQUFvQixNQUFPLHlCQUUzQixZQUFZcGxDLEdBQ1JrTyxNQUFNazNCLEdBQXVCajNCLE1BQzdCcFQsS0FBS2tHLHNCQUFzQixDQUN2QnFLLEVBQUEsNEJBRUp2USxLQUFLaUYsY0FBZ0JBLEVBQ3JCakYsS0FBS2lGLGNBQWNzRCxHQUFHLGNBQWV2SSxLQUFLc3FDLGlCQUFrQnRxQyxNQUM1REEsS0FBS2lGLGNBQWNzRCxHQUFHLFlBQWF2SSxLQUFLdXFDLGdCQUFpQnZxQyxNQUN6REEsS0FBS2lGLGNBQWNreEIsU0FBVSxFQUdqQyxXQUFXNXdCLEdBQ1A0TixNQUFNck4sV0FBV1AsR0FHckIsbUJBQW1CeEUsS0FBcUJVLEdBQ3BDLE9BQVFWLEdBQ0osS0FBS3dQLEVBQUEsMEJBQ0QsTUFBTWk2QixFQUFRL29DLEVBQUssR0FDYmdwQyxFQUFjaHBDLEVBQUssR0FDekJ6QixLQUFLaUYsY0FBY21JLE9BQWdDLHdCQUFFczlCLGFBQWFGLEVBQU9DLEdBQ3pFenFDLEtBQUtpRixjQUFja3hCLFNBQVUsR0FLekMsaUJBQWlCcmYsRUFBVU8sR0FDdkJyWCxLQUFLc0gsT0FBT3ZELGlCQUFpQndNLEVBQUEsd0JBQW9DdUcsRUFBVU8sR0FHL0UsZ0JBQWdCWSxFQUFRVCxHQUNwQnhYLEtBQUtzSCxPQUFPdkQsaUJBQWlCd00sRUFBQSxxQkFBaUMwSCxFQUFRVCxJQ3RDOUUsTUFhYW16QixHQUEwQmwrQixHQUFHaXBCLGFBQWEsMkJBcUp2RCxTQUFTa1YsR0FBV3JiLEVBQU9zYixHQUN2QixPQUFPdGIsRUFBTTVqQixFQUFJay9CLEVBQU92WixJQUFNL0IsRUFBTTVqQixFQUFJay9CLEVBQU9DLElBQU12YixFQUFNM2pCLEVBQUlpL0IsRUFBT0UsSUFBTXhiLEVBQU0zakIsRUFBSWkvQixFQUFPRyxHQWpKakdMLEdBQXdCNVUsV0FBV0MsSUFBSSxnQkFBaUIsQ0FBRXRlLEtBQU0sU0FBVWlOLE1BQU8sbUJBQ2pGZ21CLEdBQXdCNVUsV0FBV0MsSUFBSSxrQkFBbUIsQ0FBRXRlLEtBQU0sU0FBVWlOLE1BQU8sc0JBQ25GZ21CLEdBQXdCNVUsV0FBV0MsSUFBSSxjQUFlLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLGlCQUMvRWdtQixHQUF3QjVVLFdBQVdDLElBQUksWUFBYSxDQUFFdGUsS0FBTSxRQUFTaU4sTUFBTyxlQUU1RWdtQixHQUF3QjVVLFdBQVdDLElBQUksV0FBWSxDQUFFdGUsS0FBTSxTQUFVaU4sTUFBTyxjQUM1RWdtQixHQUF3QjVVLFdBQVdDLElBQUksWUFBYSxDQUFFdGUsS0FBTSxTQUFVaU4sTUFBTyxhQUFja1MsUUFBUyxNQUNwRzhULEdBQXdCNVUsV0FBV0MsSUFBSSxhQUFjLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLGNBQWVrUyxRQUFTLEtBQ3RHOFQsR0FBd0I1VSxXQUFXQyxJQUFJLFdBQVksQ0FBRXRlLEtBQU0sU0FBVWlOLE1BQU8sWUFBYWtTLFFBQVMsS0FFbEc4VCxHQUF3QjVVLFdBQVdDLElBQUksaUJBQWtCLENBQUV0ZSxLQUFNLE9BQVFvZixPQTVCN0MsQ0FDeEIsQ0FDSS8wQixLQUFNLE1BQ040aUIsTUFBTyxxQkFDUGpOLEtBQU0sVUFFVixDQUNJM1YsS0FBTSxTQUNONGlCLE1BQU8sd0JBQ1BqTixLQUFNLFdBbUJ3RjRCLE9BQU8sRUFBTXFMLE1BQU8sb0JBRTFIZ21CLEdBQXdCOXBDLFVBQVVvbkIsV0FBYSxXQUMzQ2pvQixLQUFLc0gsT0FBUyxFQUFBbEYsT0FBQSxZQUFtQjJrQixFQUFXLFdBQVgsS0FDN0IvbUIsS0FBS3NILE9BQU94RCxZQUFZdW1DLEdBQXVCajNCLE9BQy9DcFQsS0FBS3NILE9BQU8zRCxlQUFlMG1DLEdBQXVCajNCLE1BR3REcFQsS0FBS3NILE9BQU8vRCxpQkFBaUIsSUFBSThtQyxHQUF1QnJxQyxLQUFLaTJCLFNBQzdEajJCLEtBQUtpMkIsT0FBTzF0QixHQUFHLGFBQWN2SSxLQUFLaXJDLGdCQUFpQmpyQyxNQUNuREEsS0FBS2tyQyxZQUFZeFIsUUFBUW54QixHQUFHLFFBQVN2SSxLQUFLbXJDLFlBQWFuckMsTUFFdkRBLEtBQUtvckMsc0JBQXdCLElBR2pDVCxHQUF3QjlwQyxVQUFVb3FDLGdCQUFrQixTQUFVSSxFQUFZL3pCLEdBQ3RFK3pCLEVBQVdDLFNBQVN0ckMsS0FBS2kyQixRQUN6QmoyQixLQUFLdXJDLFNBQVNELFNBQVN0ckMsS0FBS2kyQixRQUV4QmoyQixLQUFLd00sSUFBSW93QixPQUNUNThCLEtBQUt3TSxJQUFJb3dCLE1BQU1yMEIsR0FBR2tFLEdBQUdvd0IsaUJBQWtCNXlCLElBQy9CQSxFQUFJOHlCLFFBQVFuN0IsT0FBUyxHQUNyQjVCLEtBQUt3ckMsZ0JBQWdCSCxFQUFZL3pCLEVBQU1yTixFQUFJOHlCLFFBQVEsTUFFeEQvOEIsTUFFSEEsS0FBS3dNLElBQUlvd0IsTUFBTXIwQixHQUFHa0UsR0FBR3d3QixnQkFBaUJoekIsSUFDOUJBLEVBQUl3aEMsZUFBZTdwQyxPQUFTLEdBQzVCNUIsS0FBSzByQyxjQUFjTCxFQUFZL3pCLEVBQU1yTixFQUFJd2hDLGVBQWUsTUFHN0R6ckMsUUFFSEEsS0FBS2kyQixPQUFPeUQsUUFBUW54QixHQUFHa0UsR0FBRzZ2QixpQkFBa0JyeUIsSUFDeENqSyxLQUFLd3JDLGdCQUFnQkgsRUFBWS96QixFQUFNck4sS0FDeENqSyxNQUVIQSxLQUFLaTJCLE9BQU95RCxRQUFRbnhCLEdBQUdrRSxHQUFHaXdCLGVBQWdCenlCLElBQ3RDakssS0FBSzByQyxjQUFjTCxFQUFZL3pCLEVBQU1yTixLQUN0Q2pLLFFBSVgycUMsR0FBd0I5cEMsVUFBVThxQyw0QkFBOEIsU0FBVTFoQyxHQUN0RSxNQUFNbXNCLEVBQVksSUFBSTNwQixHQUFHbUUsS0FBSzNHLEVBQUkwQixFQUFHMUIsRUFBSTJCLEVBQUcsR0FDdENzM0IsRUFBYWxqQyxLQUFLd00sSUFBSW0yQixlQUFlUSxjQUMzQy9NLEVBQVV6cUIsR0FBS3UzQixFQUNmOU0sRUFBVXhxQixHQUFLczNCLEVBRWYsTUFBTTBJLEVBQWE1ckMsS0FBS2kyQixPQUFPeUQsUUFBUStJLE9BQU9BLE9BQ3hDQyxFQUFTMWlDLEtBQUt3TSxJQUFJbTJCLGVBRWxCUyxFQUFhd0ksRUFBV243QixNQUN4QjlFLEVBQUt5cUIsRUFBVXpxQixFQUFJeTNCLEVBQ25CeDNCLEdBQUs4MkIsRUFBT25YLE9BQVM2SyxFQUFVeHFCLEdBQUt3M0IsRUFFMUMsT0FBTyxJQUFJMzJCLEdBQUdtRSxLQUFLakYsRUFBR0MsRUFBRyxJQUc3QisrQixHQUF3QjlwQyxVQUFVMnFDLGdCQUFrQixTQUFVSCxFQUFZL3pCLEVBQU1yTixHQUM1RSxNQUFNdTJCLEVBQWN4Z0MsS0FBSzJyQyw0QkFBNEIxaEMsR0FDckRqSyxLQUFLdXJDLFNBQVN2dEIsaUJBQWlCd2lCLEdBRS9CeGdDLEtBQUs2ckMscUJBQXFCUixFQUFZL3pCLEVBQU1rcEIsSUFNaERtSyxHQUF3QjlwQyxVQUFVNnFDLGNBQWdCLFNBQVVMLEVBQVkvekIsRUFBTXJOLEdBQzFFLE1BQU02aEMsRUFBVTlyQyxLQUFLMnJDLDRCQUE0QjFoQyxHQUNqRGpLLEtBQUt1ckMsU0FBU3BWLFNBQVUsRUFDeEJrVixFQUFXaitCLE9BQStCLHVCQUFFODhCLFNBQzVDbHFDLEtBQUtpMkIsT0FBT3lELFFBQVFudUIsSUFBSWtCLEdBQUc2dkIsaUJBQzNCdDhCLEtBQUtpMkIsT0FBT3lELFFBQVFudUIsSUFBSWtCLEdBQUdpd0IsZUFFdkIxOEIsS0FBS3dNLElBQUlvd0IsUUFDVDU4QixLQUFLd00sSUFBSW93QixNQUFNcnhCLElBQUlrQixHQUFHb3dCLGlCQUN0Qjc4QixLQUFLd00sSUFBSW93QixNQUFNcnhCLElBQUlrQixHQUFHd3dCLGlCQUcxQixNQUFNOE8sRUFBa0IvckMsS0FBSytyQyxnQkFBZ0JuNkIsbUJBTzdDLEdBRGlCZzVCLEdBQVdrQixFQUxiLENBQ1h4YSxHQUFJeWEsRUFBZ0JwZ0MsRUFBR28vQixHQUFJZ0IsRUFBZ0JuZ0MsRUFBSTVMLEtBQUtnc0MsU0FBV2hzQyxLQUFLK3BDLFdBQ3BFZSxHQUFJaUIsRUFBZ0JwZ0MsRUFBSTNMLEtBQUtpc0MsVUFBV2pCLEdBQUllLEVBQWdCbmdDLElBSWxELENBQ1YsTUFBTXNnQyxFQUFlbHNDLEtBQUt3TSxJQUFJbTJCLGVBQWVwWCxPQUd2QzRnQixFQUFrQixDQUFFeGdDLEVBQUcwL0IsRUFBVzNSLFFBQVEwUyxjQUFjLEdBQUd6Z0MsRUFBR0MsRUFBR3NnQyxFQUFlYixFQUFXM1IsUUFBUTBTLGNBQWMsR0FBR3hnQyxHQUNwSHlnQyxFQUFZcnNDLEtBQUsyckMsNEJBQTRCUSxHQUU3Q3AxQixFQUFZOUYsS0FBS3djLElBQUksRUFBR3hjLEtBQUt5SSxPQUFPcXlCLEVBQWdCbmdDLEVBQUl5Z0MsRUFBVXpnQyxHQUFLNUwsS0FBSytwQyxhQUM1RXR5QixFQUFXNHpCLEVBQVdqK0IsT0FBK0IsdUJBQUVxSyxTQUM3RHpYLEtBQUtpMkIsT0FBTzlDLEtBQUssY0FBZTFiLEVBQVNQLEtBQU1ILFFBRy9DL1csS0FBS3NzQyx5QkFBeUJqQixFQUFZcGhDLElBSWxEMGdDLEdBQXdCOXBDLFVBQVV5ckMseUJBQTJCLFNBQVVDLEVBQWdCQyxHQUNuRixJQUFLLE1BQU01MEIsS0FBYTVYLEtBQUs2VyxlQUFnQixDQUN6QyxNQUFNNDFCLEVBQWU3MEIsRUFBVTdYLElBRXpCMnNDLEVBRGtCOTBCLEVBQVVxZSxPQUNGeUQsUUFBUTBTLGNBQ2xDN2dCLEVBQVN2ckIsS0FBS3dNLElBQUltMkIsZUFBZXBYLE9BT3ZDLEdBQUlxZixHQU5VLENBQUVqL0IsRUFBRzZnQyxFQUFXN2dDLEVBQUdDLEVBQUcyZixFQUFTaWhCLEVBQVc1Z0MsR0FDekMsQ0FDWDBsQixHQUFJb2IsRUFBUSxHQUFHL2dDLEVBQUdvL0IsR0FBSTJCLEVBQVEsR0FBRzlnQyxFQUNqQ2svQixHQUFJNEIsRUFBUSxHQUFHL2dDLEVBQUdxL0IsR0FBSTBCLEVBQVEsR0FBRzlnQyxJQUdOLENBQzNCLE1BQU02TCxFQUFXODBCLEVBQWVuL0IsT0FBK0IsdUJBQUVxSyxTQUVqRXpYLEtBQUtpMkIsT0FBTzlDLEtBQUssWUFBYTFiLEVBQVNTLEdBQUl1MEIsTUFNdkQ5QixHQUF3QjlwQyxVQUFVOHJDLGVBQWlCLFNBQVVKLEVBQWdCNXNDLEdBQ3JFSyxLQUFLNHFDLFdBQVdqckMsR0FDaEI0c0MsRUFBZW4vQixPQUErQix1QkFBRTg4QixTQUVoRHFDLEVBQWVuL0IsT0FBK0IsdUJBQUU2OEIsV0FFcERqcUMsS0FBSzRzQyxxQkFBcUJqdEMsSUFPOUJnckMsR0FBd0I5cEMsVUFBVXNxQyxZQUFjLFNBQVVsaEMsR0FFdEQsT0FEQUEsRUFBSUgsTUFBTStpQywyQkFDSDdzQyxLQUFLaTJCLE9BQU9FLFNBQVUsR0FHakN3VSxHQUF3QjlwQyxVQUFVNnBDLGFBQWUsU0FBVUYsRUFBT0MsR0FDOUQxaUMsUUFBUUMsSUFBSXdpQyxHQUNaemlDLFFBQVFDLElBQUl5aUMsR0FDWnpxQyxLQUFLaWtDLGFBQ0wsTUFBTThILEVBQWtCL3JDLEtBQUsrckMsZ0JBQWdCbjZCLG1CQUM3QyxJQUFJazdCLEVBQWUsRUFDbkIsSUFBSyxJQUFJbmlDLEVBQUksRUFBR0EsRUFBSTYvQixFQUFNNW9DLE9BQVErSSxJQUFLLENBQ25DLE1BQU1zTSxFQUFPdXpCLEVBQU03L0IsR0FDbkJtaUMsR0FBZ0I3MUIsRUFBS0ssS0FFckIsTUFBTXkxQixFQUFtQi9zQyxLQUFLZ3RDLFVBQVVoNUIsU0FBUytKLGNBQ2pEZ3ZCLEVBQWlCMy9CLE9BQStCLHVCQUFFMDNCLE1BQU03dEIsR0FDeEQ4MUIsRUFBaUIvdUIsaUJBQWlCK3RCLEVBQWdCcGdDLEVBQUdvZ0MsRUFBZ0JuZ0MsRUFBS2toQyxFQUFlOXNDLEtBQUsrcEMsV0FBYSxHQUUzRy9wQyxLQUFLb3JDLHNCQUFzQnJrQyxLQUFLZ21DLEdBRWhDL3NDLEtBQUtpMkIsT0FBT2hZLFNBQVM4dUIsR0FHekIsSUFBSyxNQUFNbjFCLEtBQWE1WCxLQUFLNlcsZUFBZ0IsQ0FDekMsTUFBTTQxQixFQUFlNzBCLEVBQVU3WCxJQUN6Qmt0QyxFQUFrQnIxQixFQUFVcWUsT0FFbEMsR0FBSXdVLEVBQVluaEMsSUFBSW1qQyxHQUFlLENBQy9CLE1BQU01bEIsRUFBZTRqQixFQUFZamxDLElBQUlpbkMsR0FDckNRLEVBQWdCNy9CLE9BQXVDLCtCQUFFMDNCLE1BQU1qZSxFQUFhMkwsV0FFNUV5YSxFQUFnQjcvQixPQUF1QywrQkFBRTgvQixVQU1yRXZDLEdBQXdCOXBDLFVBQVVnckMscUJBQXVCLFNBQVVSLEVBQVkvekIsRUFBTXcwQixHQUNqRixNQUFNQyxFQUFrQi9yQyxLQUFLK3JDLGdCQUFnQm42QixtQkFPN0MsR0FEaUJnNUIsR0FBV2tCLEVBTGIsQ0FDWHhhLEdBQUl5YSxFQUFnQnBnQyxFQUFHby9CLEdBQUlnQixFQUFnQm5nQyxFQUFJNUwsS0FBS2dzQyxTQUFXaHNDLEtBQUsrcEMsV0FDcEVlLEdBQUlpQixFQUFnQnBnQyxFQUFJM0wsS0FBS2lzQyxVQUFXakIsR0FBSWUsRUFBZ0JuZ0MsSUFJbEQsQ0FFVnkvQixFQUFXaitCLE9BQStCLHVCQUFFODhCLFNBQzVDbHFDLEtBQUt1ckMsU0FBU3BWLFNBQVUsRUFDeEIsTUFBTStWLEVBQWVsc0MsS0FBS3dNLElBQUltMkIsZUFBZXBYLE9BR3ZDNGdCLEVBQWtCLENBQUV4Z0MsRUFBRzAvQixFQUFXM1IsUUFBUTBTLGNBQWMsR0FBR3pnQyxFQUFHQyxFQUFHc2dDLEVBQWViLEVBQVczUixRQUFRMFMsY0FBYyxHQUFHeGdDLEdBQ3BIeWdDLEVBQVlyc0MsS0FBSzJyQyw0QkFBNEJRLEdBRTdDcDFCLEVBQVk5RixLQUFLd2MsSUFBSSxFQUFHeGMsS0FBS3lJLE9BQU9xeUIsRUFBZ0JuZ0MsRUFBSXlnQyxFQUFVemdDLEdBQUs1TCxLQUFLK3BDLGFBQ2xGL3BDLEtBQUttdEMsbUJBQW1COUIsRUFBWUEsRUFBV2orQixPQUErQix1QkFBRWtLLEtBQU1QLFFBR3RGczBCLEVBQVdqK0IsT0FBK0IsdUJBQUU2OEIsV0FDNUNqcUMsS0FBS3VyQyxTQUFTcFYsU0FBVSxHQUloQ3dVLEdBQXdCOXBDLFVBQVVzc0MsbUJBQXFCLFNBQVU5QixFQUFZL3pCLEVBQU04MUIsR0FDL0UsTUFBTXJCLEVBQWtCL3JDLEtBQUsrckMsZ0JBQWdCbjZCLG1CQUM3QyxJQUFJazdCLEVBQWUsRUFFbkIsSUFBSyxJQUFJbmlDLEVBQUksRUFBR0EsRUFBSTNLLEtBQUtvckMsc0JBQXNCeHBDLE9BQVErSSxJQUFLLENBQ3hELE1BQU0waUMsRUFBc0JydEMsS0FBS29yQyxzQkFBc0J6Z0MsR0FHbkQwZ0MsSUFBZWdDLElBQ1hELEdBQVlOLEdBQWdCTSxFQUFXTixFQUFlTyxFQUFvQmpnQyxPQUErQix1QkFBRWtLLE9BQzNHdzFCLEdBQWdCeDFCLEdBRXBCdzFCLEdBQWdCTyxFQUFvQmpnQyxPQUErQix1QkFBRWtLLEtBRXJFKzFCLEVBQW9CcnZCLGlCQUFpQit0QixFQUFnQnBnQyxFQUFHb2dDLEVBQWdCbmdDLEVBQUtraEMsRUFBZTlzQyxLQUFLK3BDLFdBQWEsTUFNMUhZLEdBQXdCOXBDLFVBQVVvakMsV0FBYSxXQUMzQyxLQUFPamtDLEtBQUtvckMsc0JBQXNCeHBDLE9BQVMsR0FDeEI1QixLQUFLb3JDLHNCQUFzQjVlLE1BQ25DbmUsV0MvUFIsTUFBTWkvQixHQUE2QjdnQyxHQUFHaXBCLGFBQWEsOEJBTTFENFgsR0FBMkJ6c0MsVUFBVW9uQixXQUFhLGFBSWxEcWxCLEdBQTJCenNDLFVBQVVpa0MsTUFBUSxTQUFVL2lDLEVBQU11VixLQ1Z0RCxNQUFNaTJCLEdBQWlDOWdDLEdBQUdpcEIsYUFBYSxrQ0FFOUQ2WCxHQUErQnhYLFdBQVdDLElBQUksZUFBZ0IsQ0FBRXRlLEtBQU0sUUFBU2lOLE1BQU8sa0JBRXRGNG9CLEdBQStCeFgsV0FBV0MsSUFBSSxhQUFjLENBQUV0ZSxLQUFNLFNBQVVpTixNQUFPLGdCQUVyRjRvQixHQUErQjFzQyxVQUFVb25CLFdBQWEsYUFFdERzbEIsR0FBK0Ixc0MsVUFBVWlrQyxNQUFRLFNBQVUwSSxHQUN2RCxNQUFNQyxFQUFRenRDLEtBQUt3TSxJQUFJdUgsT0FBT3ZPLElBQUlnb0MsR0FDbEN4dEMsS0FBS2tvQyxXQUFXeE8sUUFBUXlPLFlBQWNzRixHQUsxQ0YsR0FBK0Ixc0MsVUFBVXFzQyxNQUFRLFdBQzdDbHRDLEtBQUtrb0MsV0FBV3hPLFFBQVF5TyxZQUFjbm9DLEtBQUswdEMsY0NoQi9DLE1BQVF0ckMsT0FBTSxJQUFLLEVBQVEsTUFDckIsUUFBRTlCLElBQVksRUFBUSxLQThDZixJQVhiLE1BQ0ksY0FDSUEsR0FBUUMsT0FBUSxFQUNoQixHQUFPSyxZQUFjbW1CLEVBQVcsV0FBWCxZQUNyQmhmLFFBQVFDLElBQUksSUFFWmhJLEtBQUtzSCxPQUFTLEdBQU8xRyxZQUFZbW1CLEVBQVcsV0FBWCxLQUNqQy9tQixLQUFLc0gsT0FBT3FtQyxRQUFRM3RDLFMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFB1cmVNVkNfMSA9IHJlcXVpcmUoXCIuL1B1cmVNVkNcIik7XG52YXIgVmlld18xID0gcmVxdWlyZShcIi4vVmlld1wiKTtcbnZhciBNVUxUSVRPTl9NU0cgPSBcImNvbnRyb2xsZXIga2V5IGZvciB0aGlzIE11bHRpdG9uIGtleSBhbHJlYWR5IGNvbnN0cnVjdGVkXCI7XG52YXIgQ29udHJvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb250cm9sbGVyKGtleSkge1xuICAgICAgICB0aGlzLmNvbW1hbmRNYXAgPSB7fTtcbiAgICAgICAgaWYgKENvbnRyb2xsZXIuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE1VTFRJVE9OX01TRyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tdWx0aXRvbktleSA9IGtleTtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBQdXJlTVZDXzEuUHVyZU1WQy5kZWJ1ZyA/IFB1cmVNVkNfMS5QdXJlTVZDLmxvZ0NvbW1hbmQgOiBQdXJlTVZDXzEuUHVyZU1WQy5sb2dOb25lO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVDb250cm9sbGVyKCk7XG4gICAgfVxuICAgIENvbnRyb2xsZXIucmVtb3ZlQ29udHJvbGxlciA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuaW5zdGFuY2VNYXBba2V5XTtcbiAgICB9O1xuICAgIENvbnRyb2xsZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZU1hcFtrZXldID0gbmV3IENvbnRyb2xsZXIoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZU1hcFtrZXldO1xuICAgIH07XG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUucmVnaXN0ZXJDb21tYW5kID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUsIGNvbW1hbmRDbGFzc1JlZikge1xuICAgICAgICBpZiAoIXRoaXMuY29tbWFuZE1hcFtub3RpZmljYXRpb25OYW1lXSkge1xuICAgICAgICAgICAgdGhpcy52aWV3LnJlZ2lzdGVyT2JzZXJ2ZXIobm90aWZpY2F0aW9uTmFtZSwgdGhpcy5leGVjdXRlQ29tbWFuZCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21tYW5kTWFwW25vdGlmaWNhdGlvbk5hbWVdID0gY29tbWFuZENsYXNzUmVmO1xuICAgIH07XG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUuaGFzQ29tbWFuZCA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRNYXBbbm90aWZpY2F0aW9uTmFtZV0gIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIENvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZUNvbW1hbmQgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICBpZiAodGhpcy5oYXNDb21tYW5kKG5vdGlmaWNhdGlvbk5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcucmVtb3ZlT2JzZXJ2ZXIobm90aWZpY2F0aW9uTmFtZSwgdGhpcy5leGVjdXRlQ29tbWFuZCwgdGhpcyk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5jb21tYW5kTWFwW25vdGlmaWNhdGlvbk5hbWVdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250cm9sbGVyLnByb3RvdHlwZS5pbml0aWFsaXplQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy52aWV3ID0gVmlld18xLlZpZXcuZ2V0SW5zdGFuY2UodGhpcy5tdWx0aXRvbktleSk7XG4gICAgfTtcbiAgICBDb250cm9sbGVyLnByb3RvdHlwZS5leGVjdXRlQ29tbWFuZCA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb21tYW5kID0gdGhpcy5jb21tYW5kTWFwW25vdGlmaWNhdGlvbk5hbWVdO1xuICAgICAgICBpZiAoIWNvbW1hbmQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvZ2dlcihDb250cm9sbGVyLl9jb25zb2xlQXJncywgbm90aWZpY2F0aW9uTmFtZSwgY29tbWFuZC5uYW1lKTtcbiAgICAgICAgY29tbWFuZC5hcHBseSh2b2lkIDAsIFt0aGlzLm11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lXS5jb25jYXQoYXJncykpO1xuICAgIH07XG4gICAgQ29udHJvbGxlci5fY29uc29sZUFyZ3MgPSBbXG4gICAgICAgIFwiXCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMzRjIzNEVcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzZFMjk5NFwiLFxuICAgICAgICBcImNvbG9yOiBcIiArIFwiI0Q0QkZFMFwiICsgXCI7IGJhY2tncm91bmQ6IFwiICsgXCIjODcyNEJEXCIgKyBcIjtcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzZFMjk5NFwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjM0YyMzRFXCJcbiAgICBdO1xuICAgIENvbnRyb2xsZXIuaW5zdGFuY2VNYXAgPSB7fTtcbiAgICByZXR1cm4gQ29udHJvbGxlcjtcbn0oKSk7XG5leHBvcnRzLkNvbnRyb2xsZXIgPSBDb250cm9sbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29udHJvbGxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ3JlYXRlZCBieSBzYXJnaXMgb24gNy80LzE3LlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ29udHJvbGxlcl8xID0gcmVxdWlyZShcIi4vQ29udHJvbGxlclwiKTtcbnZhciBNb2RlbF8xID0gcmVxdWlyZShcIi4vTW9kZWxcIik7XG52YXIgUHVyZU1WQ18xID0gcmVxdWlyZShcIi4vUHVyZU1WQ1wiKTtcbnZhciBWaWV3XzEgPSByZXF1aXJlKFwiLi9WaWV3XCIpO1xudmFyIE1VTFRJVE9OX01TRyA9IFwiRmFjYWRlIGluc3RhbmNlIGZvciB0aGlzIE11bHRpdG9uIGtleSBhbHJlYWR5IGNvbnN0cnVjdGVkIVwiO1xudmFyIEZhY2FkZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGYWNhZGUoa2V5KSB7XG4gICAgICAgIGlmIChGYWNhZGUuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE1VTFRJVE9OX01TRyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2dnZXIgPSBQdXJlTVZDXzEuUHVyZU1WQy5kZWJ1ZyA/IFB1cmVNVkNfMS5QdXJlTVZDLmxvZ05vdGlmaWNhdGlvbiA6IFB1cmVNVkNfMS5QdXJlTVZDLmxvZ05vbmU7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZU5vdGlmaWVyKGtleSk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZUZhY2FkZSgpO1xuICAgIH1cbiAgICBGYWNhZGUuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUZhY2FkZS5pbnN0YW5jZU1hcFtrZXldKSB7XG4gICAgICAgICAgICBGYWNhZGUuaW5zdGFuY2VNYXBba2V5XSA9IG5ldyBGYWNhZGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRmFjYWRlLmluc3RhbmNlTWFwW2tleV07XG4gICAgfTtcbiAgICBGYWNhZGUuaGFzQ29yZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VNYXBba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgRmFjYWRlLnJlbW92ZUNvcmUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghdGhpcy5pbnN0YW5jZU1hcFtrZXldKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgTW9kZWxfMS5Nb2RlbC5yZW1vdmVNb2RlbChrZXkpO1xuICAgICAgICBWaWV3XzEuVmlldy5yZW1vdmVWaWV3KGtleSk7XG4gICAgICAgIENvbnRyb2xsZXJfMS5Db250cm9sbGVyLnJlbW92ZUNvbnRyb2xsZXIoa2V5KTtcbiAgICAgICAgZGVsZXRlIHRoaXMuaW5zdGFuY2VNYXBba2V5XTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuaW5pdGlhbGl6ZUZhY2FkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplTW9kZWwoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplQ29udHJvbGxlcigpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVWaWV3KCk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnJlZ2lzdGVyQ29tbWFuZCA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lLCBjb21tYW5kQ2xhc3NSZWYpIHtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyLnJlZ2lzdGVyQ29tbWFuZChub3RpZmljYXRpb25OYW1lLCBjb21tYW5kQ2xhc3NSZWYpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5yZW1vdmVDb21tYW5kID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyLnJlbW92ZUNvbW1hbmQobm90aWZpY2F0aW9uTmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLmhhc0NvbW1hbmQgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyLmhhc0NvbW1hbmQobm90aWZpY2F0aW9uTmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnJlZ2lzdGVyUHJveHkgPSBmdW5jdGlvbiAocHJveHkpIHtcbiAgICAgICAgdGhpcy5tb2RlbC5yZWdpc3RlclByb3h5KHByb3h5KTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUucmV0cmlldmVQcm94eSA9IGZ1bmN0aW9uIChwcm94eU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwucmV0cmlldmVQcm94eShwcm94eU5hbWUpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5yZW1vdmVQcm94eSA9IGZ1bmN0aW9uIChwcm94eU5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsLnJlbW92ZVByb3h5KHByb3h5TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLmhhc1Byb3h5ID0gZnVuY3Rpb24gKHByb3h5TmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5oYXNQcm94eShwcm94eU5hbWUpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5yZWdpc3Rlck1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yKSB7XG4gICAgICAgIHRoaXMudmlldy5yZWdpc3Rlck1lZGlhdG9yKG1lZGlhdG9yKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUucmV0cmlldmVNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5yZXRyaWV2ZU1lZGlhdG9yKG1lZGlhdG9yTmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnJlbW92ZU1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LnJlbW92ZU1lZGlhdG9yKG1lZGlhdG9yTmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnNsZWVwTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuc2xlZXBNZWRpYXRvcihtZWRpYXRvck5hbWUpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5hd2FrZU1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LmF3YWtlTWVkaWF0b3IobWVkaWF0b3JOYW1lKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuaGFzTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuaGFzTWVkaWF0b3IobWVkaWF0b3JOYW1lKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuc2VuZE5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5sb2dnZXIuYXBwbHkodGhpcywgW0ZhY2FkZS5fY29uc29sZUFyZ3MsIG5vdGlmaWNhdGlvbk5hbWVdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIChfYSA9IHRoaXMudmlldykubm90aWZ5T2JzZXJ2ZXJzLmFwcGx5KF9hLCBbbm90aWZpY2F0aW9uTmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuaW5pdGlhbGl6ZU5vdGlmaWVyID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0aGlzLm11bHRpdG9uS2V5ID0ga2V5O1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5pbml0aWFsaXplQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udHJvbGxlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IENvbnRyb2xsZXJfMS5Db250cm9sbGVyLmdldEluc3RhbmNlKHRoaXMubXVsdGl0b25LZXkpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5pbml0aWFsaXplTW9kZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm1vZGVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb2RlbCA9IE1vZGVsXzEuTW9kZWwuZ2V0SW5zdGFuY2UodGhpcy5tdWx0aXRvbktleSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLmluaXRpYWxpemVWaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy52aWV3KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52aWV3ID0gVmlld18xLlZpZXcuZ2V0SW5zdGFuY2UodGhpcy5tdWx0aXRvbktleSk7XG4gICAgfTtcbiAgICBGYWNhZGUuX2NvbnNvbGVBcmdzID0gW1xuICAgICAgICBcIlwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjNzU3MTMwXCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiNERUQ0MzRcIixcbiAgICAgICAgXCJjb2xvcjogXCIgKyBcIiMyRjJFMTVcIiArIFwiOyBiYWNrZ3JvdW5kOiBcIiArIFwiI0ZGRjMyNVwiICsgXCI7XCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiNERUQ0MzRcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzc1NzEzMFwiXG4gICAgXTtcbiAgICBGYWNhZGUuaW5zdGFuY2VNYXAgPSB7fTtcbiAgICByZXR1cm4gRmFjYWRlO1xufSgpKTtcbmV4cG9ydHMuRmFjYWRlID0gRmFjYWRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmFjYWRlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTm90aWZpZXJfMSA9IHJlcXVpcmUoXCIuL05vdGlmaWVyXCIpO1xudmFyIFB1cmVNVkNfMSA9IHJlcXVpcmUoXCIuL1B1cmVNVkNcIik7XG52YXIgTkFNRSA9IFwiTWVkaWF0b3JcIjtcbnZhciBNZWRpYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWVkaWF0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWVkaWF0b3IobWVkaWF0b3JOYW1lLCB2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmxvZ2dlciA9IFB1cmVNVkNfMS5QdXJlTVZDLmRlYnVnID8gUHVyZU1WQ18xLlB1cmVNVkMubG9nTWVkaWF0b3IgOiBQdXJlTVZDXzEuUHVyZU1WQy5sb2dOb25lO1xuICAgICAgICBfdGhpcy5tZWRpYXRvck5hbWUgPSBtZWRpYXRvck5hbWUgfHwgTkFNRTtcbiAgICAgICAgX3RoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgICAgIF90aGlzLnNsZWVwaW5nID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuc3Vic2NyaWJlZE5vdGlmaWNhdGlvbnMgPSBbXTtcbiAgICAgICAgX3RoaXMubm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVkaWF0b3IucHJvdG90eXBlLCBcIm5vdGlmaWNhdGlvbnNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN1YnNjcmliZWROb3RpZmljYXRpb25zO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNZWRpYXRvci5wcm90b3R5cGUuZ2V0TWVkaWF0b3JOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZWRpYXRvck5hbWU7XG4gICAgfTtcbiAgICBNZWRpYXRvci5wcm90b3R5cGUuc2V0Vmlld0NvbXBvbmVudCA9IGZ1bmN0aW9uICh2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgfTtcbiAgICBNZWRpYXRvci5wcm90b3R5cGUuZ2V0Vmlld0NvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0NvbXBvbmVudDtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5vblJlZ2lzdGVyID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSA9IG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZTtcbiAgICAgICAgdGhpcy5sb2dnZXIoTWVkaWF0b3IuX2NvbnNvbGVBcmdzLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIFwicmVnaXN0ZXJcIik7XG4gICAgfTtcbiAgICBNZWRpYXRvci5wcm90b3R5cGUub25SZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5sb2dnZXIoTWVkaWF0b3IuX2NvbnNvbGVBcmdzLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIFwicmVtb3ZlXCIpO1xuICAgIH07XG4gICAgTWVkaWF0b3IucHJvdG90eXBlLm9uU2xlZXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2xlZXBpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmxvZ2dlcihNZWRpYXRvci5fY29uc29sZUFyZ3MsIHRoaXMuY29uc3RydWN0b3IubmFtZSwgXCJzbGVlcFwiKTtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5vbkF3YWtlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNsZWVwaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9nZ2VyKE1lZGlhdG9yLl9jb25zb2xlQXJncywgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBcImF3YWtlXCIpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lZGlhdG9yLnByb3RvdHlwZSwgXCJpc1NsZWVwaW5nXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zbGVlcGluZztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTWVkaWF0b3IucHJvdG90eXBlLnN1YnNjcmliZU5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlU3Vic2NyaXB0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIHRoaXMuYWRkU3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS51bnN1YnNjcmliZU5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlU3Vic2NyaXB0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIHRoaXMucmVtb3ZlU3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5jaGFuZ2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSwgYWN0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBvbGROb3RpZmljYXRpb25zID0gdGhpcy5ub3RpZmljYXRpb25zLnNsaWNlKCk7XG4gICAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIGlmIChub3RpZmljYXRpb25OYW1lIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbk5hbWUuZm9yRWFjaChmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlZCA9IGFjdGlvbi5jYWxsKF90aGlzLCBub3RpZmljYXRpb24pIHx8IGNoYW5nZWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNoYW5nZWQgPSBhY3Rpb24uY2FsbCh0aGlzLCBub3RpZmljYXRpb25OYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhbmdlZCAmJiB0aGlzLm5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UodGhpcywgb2xkTm90aWZpY2F0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5hZGRTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmaWNhdGlvbnMuaW5kZXhPZihub3RpZmljYXRpb24pID09PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnB1c2gobm90aWZpY2F0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5yZW1vdmVTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMubm90aWZpY2F0aW9ucy5pbmRleE9mKG5vdGlmaWNhdGlvbik7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgTWVkaWF0b3IuX2NvbnNvbGVBcmdzID0gW1xuICAgICAgICBcIlwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjMkEzMzUxXCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMzNjREOThcIixcbiAgICAgICAgXCJjb2xvcjogXCIgKyBcIiNGNEY2RkVcIiArIFwiOyBiYWNrZ3JvdW5kOiBcIiArIFwiIzM2NTZDMVwiICsgXCI7XCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMzNjREOThcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzJBMzM1MVwiXG4gICAgXTtcbiAgICByZXR1cm4gTWVkaWF0b3I7XG59KE5vdGlmaWVyXzEuTm90aWZpZXIpKTtcbmV4cG9ydHMuTWVkaWF0b3IgPSBNZWRpYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1lZGlhdG9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE1VTFRJVE9OX01TRyA9IFwiTW9kZWwgaW5zdGFuY2UgZm9yIHRoaXMgTXVsdGl0b24ga2V5IGFscmVhZHkgY29uc3RydWN0ZWQhXCI7XG52YXIgTW9kZWwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kZWwoa2V5KSB7XG4gICAgICAgIHRoaXMucHJveHlNYXAgPSB7fTtcbiAgICAgICAgaWYgKE1vZGVsLmluc3RhbmNlTWFwW2tleV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihNVUxUSVRPTl9NU0cpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubXVsdGl0b25LZXkgPSBrZXk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZU1vZGVsKCk7XG4gICAgfVxuICAgIE1vZGVsLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlTWFwW2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VNYXBba2V5XSA9IG5ldyBNb2RlbChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlTWFwW2tleV07XG4gICAgfTtcbiAgICBNb2RlbC5yZW1vdmVNb2RlbCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuaW5zdGFuY2VNYXBba2V5XTtcbiAgICB9O1xuICAgIE1vZGVsLnByb3RvdHlwZS5yZWdpc3RlclByb3h5ID0gZnVuY3Rpb24gKHByb3h5KSB7XG4gICAgICAgIHByb3h5LmluaXRpYWxpemVOb3RpZmllcih0aGlzLm11bHRpdG9uS2V5KTtcbiAgICAgICAgdGhpcy5wcm94eU1hcFtwcm94eS5nZXRQcm94eU5hbWUoKV0gPSBwcm94eTtcbiAgICAgICAgcHJveHkub25SZWdpc3RlcigpO1xuICAgIH07XG4gICAgTW9kZWwucHJvdG90eXBlLnJldHJpZXZlUHJveHkgPSBmdW5jdGlvbiAocHJveHlOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3h5TWFwW3Byb3h5TmFtZV07XG4gICAgfTtcbiAgICBNb2RlbC5wcm90b3R5cGUuaGFzUHJveHkgPSBmdW5jdGlvbiAocHJveHlOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3h5TWFwW3Byb3h5TmFtZV0gIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIE1vZGVsLnByb3RvdHlwZS5yZW1vdmVQcm94eSA9IGZ1bmN0aW9uIChwcm94eU5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMucHJveHlNYXBbcHJveHlOYW1lXSkge1xuICAgICAgICAgICAgdmFyIHByb3h5ID0gdGhpcy5wcm94eU1hcFtwcm94eU5hbWVdO1xuICAgICAgICAgICAgcHJveHkub25SZW1vdmUoKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnByb3h5TWFwW3Byb3h5TmFtZV07XG4gICAgICAgICAgICByZXR1cm4gcHJveHk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBNb2RlbC5wcm90b3R5cGUuaW5pdGlhbGl6ZU1vZGVsID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIE1vZGVsLmluc3RhbmNlTWFwID0ge307XG4gICAgcmV0dXJuIE1vZGVsO1xufSgpKTtcbmV4cG9ydHMuTW9kZWwgPSBNb2RlbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1vZGVsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHNhcmdpcyBvbiA3LzQvMTcuXG4gKi9cbnZhciBGYWNhZGVfMSA9IHJlcXVpcmUoXCIuL0ZhY2FkZVwiKTtcbnZhciBNVUxUSVRPTl9NU0cgPSBcIm11bHRpdG9uS2V5IGZvciB0aGlzIE5vdGlmaWVyIG5vdCB5ZXQgaW5pdGlhbGl6ZWQhXCI7XG52YXIgTm90aWZpZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm90aWZpZXIoKSB7XG4gICAgfVxuICAgIE5vdGlmaWVyLnByb3RvdHlwZS5pbml0aWFsaXplTm90aWZpZXIgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHRoaXMubXVsdGl0b25LZXkgPSBrZXk7XG4gICAgICAgIHRoaXMuZmFjYWRlID0gdGhpcy5nZXRGYWNhZGUoKTtcbiAgICB9O1xuICAgIE5vdGlmaWVyLnByb3RvdHlwZS5zZW5kTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5mYWNhZGUpIHtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuZmFjYWRlKS5zZW5kTm90aWZpY2F0aW9uLmFwcGx5KF9hLCBbbm90aWZpY2F0aW9uTmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTm90aWZpZXIucHJvdG90eXBlLmdldEZhY2FkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubXVsdGl0b25LZXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihNVUxUSVRPTl9NU0cpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBGYWNhZGVfMS5GYWNhZGUuZ2V0SW5zdGFuY2UodGhpcy5tdWx0aXRvbktleSk7XG4gICAgfTtcbiAgICByZXR1cm4gTm90aWZpZXI7XG59KCkpO1xuZXhwb3J0cy5Ob3RpZmllciA9IE5vdGlmaWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQ3JlYXRlZCBieSBzYXJnaXMgb24gNy80LzE3LlxuICovXG52YXIgTm90aWZpZXJfMSA9IHJlcXVpcmUoXCIuL05vdGlmaWVyXCIpO1xudmFyIFB1cmVNVkNfMSA9IHJlcXVpcmUoXCIuL1B1cmVNVkNcIik7XG52YXIgTkFNRSA9IFwiUHJveHlcIjtcbnZhciBQcm94eSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUHJveHksIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUHJveHkocHJveHlOYW1lLCBkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb3h5TmFtZSA9IHByb3h5TmFtZSB8fCBOQU1FO1xuICAgICAgICBfdGhpcy5sb2dnZXIgPSBQdXJlTVZDXzEuUHVyZU1WQy5kZWJ1ZyA/IFB1cmVNVkNfMS5QdXJlTVZDLmxvZ1Byb3h5IDogUHVyZU1WQ18xLlB1cmVNVkMubG9nTm9uZTtcbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIF90aGlzLnNldERhdGEoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBQcm94eS5wcm90b3R5cGUuZ2V0UHJveHlOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm94eU5hbWU7XG4gICAgfTtcbiAgICBQcm94eS5wcm90b3R5cGUuc2V0RGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfTtcbiAgICBQcm94eS5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgICB9O1xuICAgIFByb3h5LnByb3RvdHlwZS5vblJlZ2lzdGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxvZ2dlcihQcm94eS5fY29uc29sZUFyZ3MsIHRoaXMuY29uc3RydWN0b3IubmFtZSwgXCJyZWdpc3RlclwiKTtcbiAgICB9O1xuICAgIFByb3h5LnByb3RvdHlwZS5vblJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIoUHJveHkuX2NvbnNvbGVBcmdzLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIFwicmVtb3ZlXCIpO1xuICAgIH07XG4gICAgUHJveHkuX2NvbnNvbGVBcmdzID0gW1xuICAgICAgICBcIlwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjMjk1QTM0XCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMyRkFBNEFcIixcbiAgICAgICAgXCJjb2xvcjogXCIgKyBcIiMxMDI0MTVcIiArIFwiOyBiYWNrZ3JvdW5kOiBcIiArIFwiIzI3RDA0Q1wiICsgXCI7XCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMyRkFBNEFcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzI5NUEzNFwiXG4gICAgXTtcbiAgICByZXR1cm4gUHJveHk7XG59KE5vdGlmaWVyXzEuTm90aWZpZXIpKTtcbmV4cG9ydHMuUHJveHkgPSBQcm94eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByb3h5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFB1cmVNVkMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHVyZU1WQygpIHtcbiAgICB9XG4gICAgUHVyZU1WQy5sb2dDb21tYW5kID0gZnVuY3Rpb24gKGNvbnNvbGVBcmdzLCBub3RpZmljYXRpb25OYW1lLCBjb21tYW5kTmFtZSkge1xuICAgICAgICBjb25zb2xlQXJnc1swXSA9IFwiJWMgJWMgJWMgXCIgKyBub3RpZmljYXRpb25OYW1lICsgXCIgPT4gIFwiICsgY29tbWFuZE5hbWUgKyBcIiAlYyAlYyBcIjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgY29uc29sZUFyZ3MpO1xuICAgIH07XG4gICAgUHVyZU1WQy5sb2dOb3RpZmljYXRpb24gPSBmdW5jdGlvbiAoY29uc29sZUFyZ3MsIG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZUFyZ3NbMF0gPSBcIiVjICVjICVjIFwiICsgbm90aWZpY2F0aW9uTmFtZSArIFwiOiBhcmdzIFsgXCIgKyBhcmdzICsgXCIgXSAlYyAlYyBcIjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgY29uc29sZUFyZ3MpO1xuICAgIH07XG4gICAgUHVyZU1WQy5sb2dNZWRpYXRvciA9IGZ1bmN0aW9uIChjb25zb2xlQXJncywgbmFtZSwgYWN0aW9uKSB7XG4gICAgICAgIGNvbnNvbGVBcmdzWzBdID0gXCIlYyAlYyAlYyBcIiArIG5hbWUgKyBcIjogXCIgKyBhY3Rpb24gKyBcIiAlYyAlYyBcIjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgY29uc29sZUFyZ3MpO1xuICAgIH07XG4gICAgUHVyZU1WQy5sb2dQcm94eSA9IGZ1bmN0aW9uIChjb25zb2xlQXJncywgbmFtZSwgYWN0aW9uKSB7XG4gICAgICAgIGNvbnNvbGVBcmdzWzBdID0gXCIlYyAlYyAlYyBcIiArIG5hbWUgKyBcIjogXCIgKyBhY3Rpb24gKyBcIiAlYyAlYyBcIjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgY29uc29sZUFyZ3MpO1xuICAgIH07XG4gICAgUHVyZU1WQy5sb2dOb25lID0gZnVuY3Rpb24gKGNvbnNvbGVBcmdzKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQdXJlTVZDLmRlYnVnID0gdHJ1ZTtcbiAgICByZXR1cm4gUHVyZU1WQztcbn0oKSk7XG5leHBvcnRzLlB1cmVNVkMgPSBQdXJlTVZDO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHVyZU1WQy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiZXZlbnRlbWl0dGVyM1wiKTtcbnZhciBNVUxUSVRPTl9NU0cgPSBcIlZpZXcgaW5zdGFuY2UgZm9yIHRoaXMgTXVsdGl0b24ga2V5IGFscmVhZHkgY29uc3RydWN0ZWQhXCI7XG52YXIgVmlldyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWaWV3KGtleSkge1xuICAgICAgICB0aGlzLm1lZGlhdG9yTWFwID0ge307XG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICBpZiAoVmlldy5pbnN0YW5jZU1hcFtrZXldKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTVVMVElUT05fTVNHKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm11bHRpdG9uS2V5ID0ga2V5O1xuICAgICAgICB0aGlzLmluaXRpYWxpemVWaWV3KCk7XG4gICAgfVxuICAgIFZpZXcuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZU1hcFtrZXldID0gbmV3IFZpZXcoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZU1hcFtrZXldO1xuICAgIH07XG4gICAgVmlldy5yZW1vdmVWaWV3ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWxldGUgdGhpcy5pbnN0YW5jZU1hcFtrZXldO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmVtb3ZlT2JzZXJ2ZXIgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSwgb2JzZXJ2ZXJNZXRob2QsIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobm90aWZpY2F0aW9uTmFtZSwgb2JzZXJ2ZXJNZXRob2QsIGNvbnRleHQpO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmVnaXN0ZXJPYnNlcnZlciA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lLCBvYnNlcnZlck1ldGhvZCwgY29udGV4dCkge1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5vbihub3RpZmljYXRpb25OYW1lLCBvYnNlcnZlck1ldGhvZCwgY29udGV4dCk7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5ub3RpZnlPYnNlcnZlcnMgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuZXZlbnRFbWl0dGVyKS5lbWl0LmFwcGx5KF9hLCBbbm90aWZpY2F0aW9uTmFtZSwgbm90aWZpY2F0aW9uTmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnJlZ2lzdGVyTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3IpIHtcbiAgICAgICAgaWYgKHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3IuZ2V0TWVkaWF0b3JOYW1lKCldKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbWVkaWF0b3IuaW5pdGlhbGl6ZU5vdGlmaWVyKHRoaXMubXVsdGl0b25LZXkpO1xuICAgICAgICAvLyByZWdpc3RlciB0aGUgbWVkaWF0b3IgZm9yIHJldHJpZXZhbCBieSBuYW1lXG4gICAgICAgIHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3IuZ2V0TWVkaWF0b3JOYW1lKCldID0gbWVkaWF0b3I7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJPYnNlcnZlcnMobWVkaWF0b3IpO1xuICAgICAgICBtZWRpYXRvci5vblJlZ2lzdGVyKHRoaXMub25NZWRpYXRvck5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgbWVkaWF0b3Iub25Bd2FrZSgpO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUuYXdha2VNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvck5hbWUpIHtcbiAgICAgICAgdmFyIG1lZGlhdG9yID0gdGhpcy5tZWRpYXRvck1hcFttZWRpYXRvck5hbWVdO1xuICAgICAgICBpZiAobWVkaWF0b3IpIHtcbiAgICAgICAgICAgIGlmICghbWVkaWF0b3IuaXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZWRpYXRvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJPYnNlcnZlcnMobWVkaWF0b3IpO1xuICAgICAgICAgICAgLy8gYWxlcnQgdGhlIG1lZGlhdG9yIHRoYXQgaXQgaGFzIGJlZW4gYXdha2VuXG4gICAgICAgICAgICBtZWRpYXRvci5vbkF3YWtlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lZGlhdG9yO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmV0cmlldmVNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3JOYW1lXTtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnJlbW92ZU1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yTmFtZSkge1xuICAgICAgICB2YXIgbWVkaWF0b3IgPSB0aGlzLm1lZGlhdG9yTWFwW21lZGlhdG9yTmFtZV07XG4gICAgICAgIGlmIChtZWRpYXRvcikge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVPYnNlcnZlcnMobWVkaWF0b3IpO1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBtZWRpYXRvciBmcm9tIHRoZSBtYXBcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm1lZGlhdG9yTWFwW21lZGlhdG9yTmFtZV07XG4gICAgICAgICAgICBtZWRpYXRvci5vblNsZWVwKCk7XG4gICAgICAgICAgICAvLyBhbGVydCB0aGUgbWVkaWF0b3IgdGhhdCBpdCBoYXMgYmVlbiByZW1vdmVkXG4gICAgICAgICAgICBtZWRpYXRvci5vblJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZWRpYXRvcjtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnNsZWVwTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHZhciBtZWRpYXRvciA9IHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3JOYW1lXTtcbiAgICAgICAgaWYgKG1lZGlhdG9yKSB7XG4gICAgICAgICAgICBpZiAobWVkaWF0b3IuaXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZWRpYXRvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVtb3ZlT2JzZXJ2ZXJzKG1lZGlhdG9yKTtcbiAgICAgICAgICAgIC8vIGFsZXJ0IHRoZSBtZWRpYXRvciB0aGF0IGl0IGhhcyBiZWVuIHNsZXB0XG4gICAgICAgICAgICBtZWRpYXRvci5vblNsZWVwKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lZGlhdG9yO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUuaGFzTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lZGlhdG9yTWFwW21lZGlhdG9yTmFtZV0gIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLmluaXRpYWxpemVWaWV3ID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIFZpZXcucHJvdG90eXBlLnJlbW92ZU9ic2VydmVycyA9IGZ1bmN0aW9uIChtZWRpYXRvciwgaW50ZXJlc3RzKSB7XG4gICAgICAgIC8vIGZvciBldmVyeSBub3RpZmljYXRpb24gdGhlIG1lZGlhdG9yIGlzIGludGVyZXN0ZWQgaW4uLi5cbiAgICAgICAgdmFyIG5vdGlmaWNhdGlvbkludGVyZXN0cyA9IGludGVyZXN0cyB8fCBtZWRpYXRvci5ub3RpZmljYXRpb25zO1xuICAgICAgICBpZiAobm90aWZpY2F0aW9uSW50ZXJlc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgbm90aWZpY2F0aW9uSW50ZXJlc3RzXzEgPSBub3RpZmljYXRpb25JbnRlcmVzdHM7IF9pIDwgbm90aWZpY2F0aW9uSW50ZXJlc3RzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGludGVyZXN0ID0gbm90aWZpY2F0aW9uSW50ZXJlc3RzXzFbX2ldO1xuICAgICAgICAgICAgICAgIC8vIGludGVyZXN0XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVPYnNlcnZlcihpbnRlcmVzdCwgbWVkaWF0b3IuaGFuZGxlTm90aWZpY2F0aW9uLCBtZWRpYXRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnJlZ2lzdGVyT2JzZXJ2ZXJzID0gZnVuY3Rpb24gKG1lZGlhdG9yLCBpbnRlcmVzdHMpIHtcbiAgICAgICAgLy8gZ2V0IG5vdGlmaWNhdGlvbiBpbnRlcmVzdHMgaWYgYW55XG4gICAgICAgIHZhciBub3RpZmljYXRpb25JbnRlcmVzdHMgPSBpbnRlcmVzdHMgfHwgbWVkaWF0b3Iubm90aWZpY2F0aW9ucztcbiAgICAgICAgLy8gcmVnaXN0ZXIgbWVkaWF0b3IgYXMgYW4gb2JzZXJ2ZXIgZm9yIGVhY2ggbm90aWZpY2F0aW9uXG4gICAgICAgIGlmIChub3RpZmljYXRpb25JbnRlcmVzdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBub3RpZmljYXRpb25JbnRlcmVzdHNfMiA9IG5vdGlmaWNhdGlvbkludGVyZXN0czsgX2kgPCBub3RpZmljYXRpb25JbnRlcmVzdHNfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJlc3QgPSBub3RpZmljYXRpb25JbnRlcmVzdHNfMltfaV07XG4gICAgICAgICAgICAgICAgdGhpcy5yZWdpc3Rlck9ic2VydmVyKGludGVyZXN0LCBtZWRpYXRvci5oYW5kbGVOb3RpZmljYXRpb24sIG1lZGlhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUub25NZWRpYXRvck5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSA9IGZ1bmN0aW9uIChtZWRpYXRvciwgb2xkTm90aWZpY2F0aW9ucykge1xuICAgICAgICB0aGlzLnJlbW92ZU9ic2VydmVycyhtZWRpYXRvciwgb2xkTm90aWZpY2F0aW9ucyk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJPYnNlcnZlcnMobWVkaWF0b3IpO1xuICAgIH07XG4gICAgVmlldy5pbnN0YW5jZU1hcCA9IHt9O1xuICAgIHJldHVybiBWaWV3O1xufSgpKTtcbmV4cG9ydHMuVmlldyA9IFZpZXc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WaWV3LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIENvbnRyb2xsZXJfMSA9IHJlcXVpcmUoXCIuL2NvbS9rb3JlZXovcHVyZW12Yy9Db250cm9sbGVyXCIpO1xuZXhwb3J0cy5Db250cm9sbGVyID0gQ29udHJvbGxlcl8xLkNvbnRyb2xsZXI7XG52YXIgRmFjYWRlXzEgPSByZXF1aXJlKFwiLi9jb20va29yZWV6L3B1cmVtdmMvRmFjYWRlXCIpO1xuZXhwb3J0cy5GYWNhZGUgPSBGYWNhZGVfMS5GYWNhZGU7XG52YXIgTWVkaWF0b3JfMSA9IHJlcXVpcmUoXCIuL2NvbS9rb3JlZXovcHVyZW12Yy9NZWRpYXRvclwiKTtcbmV4cG9ydHMuTWVkaWF0b3IgPSBNZWRpYXRvcl8xLk1lZGlhdG9yO1xudmFyIE1vZGVsXzEgPSByZXF1aXJlKFwiLi9jb20va29yZWV6L3B1cmVtdmMvTW9kZWxcIik7XG5leHBvcnRzLk1vZGVsID0gTW9kZWxfMS5Nb2RlbDtcbnZhciBOb3RpZmllcl8xID0gcmVxdWlyZShcIi4vY29tL2tvcmVlei9wdXJlbXZjL05vdGlmaWVyXCIpO1xuZXhwb3J0cy5Ob3RpZmllciA9IE5vdGlmaWVyXzEuTm90aWZpZXI7XG52YXIgUHJveHlfMSA9IHJlcXVpcmUoXCIuL2NvbS9rb3JlZXovcHVyZW12Yy9Qcm94eVwiKTtcbmV4cG9ydHMuUHJveHkgPSBQcm94eV8xLlByb3h5O1xudmFyIFB1cmVNVkNfMSA9IHJlcXVpcmUoXCIuL2NvbS9rb3JlZXovcHVyZW12Yy9QdXJlTVZDXCIpO1xuZXhwb3J0cy5QdXJlTVZDID0gUHVyZU1WQ18xLlB1cmVNVkM7XG52YXIgVmlld18xID0gcmVxdWlyZShcIi4vY29tL2tvcmVlei9wdXJlbXZjL1ZpZXdcIik7XG5leHBvcnRzLlZpZXcgPSBWaWV3XzEuVmlldztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCBwcmVmaXggPSAnfic7XG5cbi8qKlxuICogQ29uc3RydWN0b3IgdG8gY3JlYXRlIGEgc3RvcmFnZSBmb3Igb3VyIGBFRWAgb2JqZWN0cy5cbiAqIEFuIGBFdmVudHNgIGluc3RhbmNlIGlzIGEgcGxhaW4gb2JqZWN0IHdob3NlIHByb3BlcnRpZXMgYXJlIGV2ZW50IG5hbWVzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRXZlbnRzKCkge31cblxuLy9cbi8vIFdlIHRyeSB0byBub3QgaW5oZXJpdCBmcm9tIGBPYmplY3QucHJvdG90eXBlYC4gSW4gc29tZSBlbmdpbmVzIGNyZWF0aW5nIGFuXG4vLyBpbnN0YW5jZSBpbiB0aGlzIHdheSBpcyBmYXN0ZXIgdGhhbiBjYWxsaW5nIGBPYmplY3QuY3JlYXRlKG51bGwpYCBkaXJlY3RseS5cbi8vIElmIGBPYmplY3QuY3JlYXRlKG51bGwpYCBpcyBub3Qgc3VwcG9ydGVkIHdlIHByZWZpeCB0aGUgZXZlbnQgbmFtZXMgd2l0aCBhXG4vLyBjaGFyYWN0ZXIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGJ1aWx0LWluIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBub3Rcbi8vIG92ZXJyaWRkZW4gb3IgdXNlZCBhcyBhbiBhdHRhY2sgdmVjdG9yLlxuLy9cbmlmIChPYmplY3QuY3JlYXRlKSB7XG4gIEV2ZW50cy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vXG4gIC8vIFRoaXMgaGFjayBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgYF9fcHJvdG9fX2AgcHJvcGVydHkgaXMgc3RpbGwgaW5oZXJpdGVkIGluXG4gIC8vIHNvbWUgb2xkIGJyb3dzZXJzIGxpa2UgQW5kcm9pZCA0LCBpUGhvbmUgNS4xLCBPcGVyYSAxMSBhbmQgU2FmYXJpIDUuXG4gIC8vXG4gIGlmICghbmV3IEV2ZW50cygpLl9fcHJvdG9fXykgcHJlZml4ID0gZmFsc2U7XG59XG5cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgZXZlbnQgbGlzdGVuZXIuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29uY2U9ZmFsc2VdIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEVFKGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHRoaXMuZm4gPSBmbjtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5vbmNlID0gb25jZSB8fCBmYWxzZTtcbn1cblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyID0gbmV3IEVFKGZuLCBjb250ZXh0IHx8IGVtaXR0ZXIsIG9uY2UpXG4gICAgLCBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0pIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gbGlzdGVuZXIsIGVtaXR0ZXIuX2V2ZW50c0NvdW50Kys7XG4gIGVsc2UgaWYgKCFlbWl0dGVyLl9ldmVudHNbZXZ0XS5mbikgZW1pdHRlci5fZXZlbnRzW2V2dF0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2UgZW1pdHRlci5fZXZlbnRzW2V2dF0gPSBbZW1pdHRlci5fZXZlbnRzW2V2dF0sIGxpc3RlbmVyXTtcblxuICByZXR1cm4gZW1pdHRlcjtcbn1cblxuLyoqXG4gKiBDbGVhciBldmVudCBieSBuYW1lLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIFJlZmVyZW5jZSB0byB0aGUgYEV2ZW50RW1pdHRlcmAgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZ0IFRoZSBFdmVudCBuYW1lLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJFdmVudChlbWl0dGVyLCBldnQpIHtcbiAgaWYgKC0tZW1pdHRlci5fZXZlbnRzQ291bnQgPT09IDApIGVtaXR0ZXIuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgZWxzZSBkZWxldGUgZW1pdHRlci5fZXZlbnRzW2V2dF07XG59XG5cbi8qKlxuICogTWluaW1hbCBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UgdGhhdCBpcyBtb2xkZWQgYWdhaW5zdCB0aGUgTm9kZS5qc1xuICogYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiBhbiBhcnJheSBsaXN0aW5nIHRoZSBldmVudHMgZm9yIHdoaWNoIHRoZSBlbWl0dGVyIGhhcyByZWdpc3RlcmVkXG4gKiBsaXN0ZW5lcnMuXG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICB2YXIgbmFtZXMgPSBbXVxuICAgICwgZXZlbnRzXG4gICAgLCBuYW1lO1xuXG4gIGlmICh0aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgcmV0dXJuIG5hbWVzO1xuXG4gIGZvciAobmFtZSBpbiAoZXZlbnRzID0gdGhpcy5fZXZlbnRzKSkge1xuICAgIGlmIChoYXMuY2FsbChldmVudHMsIG5hbWUpKSBuYW1lcy5wdXNoKHByZWZpeCA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lKTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgcmV0dXJuIG5hbWVzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGV2ZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIHJlZ2lzdGVyZWQgbGlzdGVuZXJzLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgaGFuZGxlcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAoIWhhbmRsZXJzKSByZXR1cm4gW107XG4gIGlmIChoYW5kbGVycy5mbikgcmV0dXJuIFtoYW5kbGVycy5mbl07XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBoYW5kbGVycy5sZW5ndGgsIGVlID0gbmV3IEFycmF5KGwpOyBpIDwgbDsgaSsrKSB7XG4gICAgZWVbaV0gPSBoYW5kbGVyc1tpXS5mbjtcbiAgfVxuXG4gIHJldHVybiBlZTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBudW1iZXIgb2YgbGlzdGVuZXJzIGxpc3RlbmluZyB0byBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1iZXIgb2YgbGlzdGVuZXJzLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiBsaXN0ZW5lckNvdW50KGV2ZW50KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAoIWxpc3RlbmVycykgcmV0dXJuIDA7XG4gIGlmIChsaXN0ZW5lcnMuZm4pIHJldHVybiAxO1xuICByZXR1cm4gbGlzdGVuZXJzLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQ2FsbHMgZWFjaCBvZiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgZXZlbnQgaGFkIGxpc3RlbmVycywgZWxzZSBgZmFsc2VgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XVxuICAgICwgbGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgYXJnc1xuICAgICwgaTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKGxpc3RlbmVycy5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnMuZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgY2FzZSAxOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQpLCB0cnVlO1xuICAgICAgY2FzZSAyOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExKSwgdHJ1ZTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIpLCB0cnVlO1xuICAgICAgY2FzZSA0OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMpLCB0cnVlO1xuICAgICAgY2FzZSA1OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgNjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCwgYTUpLCB0cnVlO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm4uYXBwbHkobGlzdGVuZXJzLmNvbnRleHQsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoXG4gICAgICAsIGo7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChsaXN0ZW5lcnNbaV0ub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzW2ldLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgICBjYXNlIDE6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMik7IGJyZWFrO1xuICAgICAgICBjYXNlIDQ6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIsIGEzKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKCFhcmdzKSBmb3IgKGogPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgYXJnc1tqIC0gMV0gPSBhcmd1bWVudHNbal07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGlzdGVuZXJzW2ldLmZuLmFwcGx5KGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbihldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIGFkZExpc3RlbmVyKHRoaXMsIGV2ZW50LCBmbiwgY29udGV4dCwgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBvbmUtdGltZSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZShldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIGFkZExpc3RlbmVyKHRoaXMsIGV2ZW50LCBmbiwgY29udGV4dCwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgbGlzdGVuZXJzIG9mIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IG1hdGNoIHRoaXMgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IGhhdmUgdGhpcyBjb250ZXh0LlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIE9ubHkgcmVtb3ZlIG9uZS10aW1lIGxpc3RlbmVycy5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gdGhpcztcbiAgaWYgKCFmbikge1xuICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKFxuICAgICAgbGlzdGVuZXJzLmZuID09PSBmbiAmJlxuICAgICAgKCFvbmNlIHx8IGxpc3RlbmVycy5vbmNlKSAmJlxuICAgICAgKCFjb250ZXh0IHx8IGxpc3RlbmVycy5jb250ZXh0ID09PSBjb250ZXh0KVxuICAgICkge1xuICAgICAgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMCwgZXZlbnRzID0gW10sIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKFxuICAgICAgICBsaXN0ZW5lcnNbaV0uZm4gIT09IGZuIHx8XG4gICAgICAgIChvbmNlICYmICFsaXN0ZW5lcnNbaV0ub25jZSkgfHxcbiAgICAgICAgKGNvbnRleHQgJiYgbGlzdGVuZXJzW2ldLmNvbnRleHQgIT09IGNvbnRleHQpXG4gICAgICApIHtcbiAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIFJlc2V0IHRoZSBhcnJheSwgb3IgcmVtb3ZlIGl0IGNvbXBsZXRlbHkgaWYgd2UgaGF2ZSBubyBtb3JlIGxpc3RlbmVycy5cbiAgICAvL1xuICAgIGlmIChldmVudHMubGVuZ3RoKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGV2ZW50cy5sZW5ndGggPT09IDEgPyBldmVudHNbMF0gOiBldmVudHM7XG4gICAgZWxzZSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBsaXN0ZW5lcnMsIG9yIHRob3NlIG9mIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IFtldmVudF0gVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQ7XG5cbiAgaWYgKGV2ZW50KSB7XG4gICAgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcbiAgICBpZiAodGhpcy5fZXZlbnRzW2V2dF0pIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gQWxpYXMgbWV0aG9kcyBuYW1lcyBiZWNhdXNlIHBlb3BsZSByb2xsIGxpa2UgdGhhdC5cbi8vXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbjtcblxuLy9cbi8vIEV4cG9zZSB0aGUgcHJlZml4LlxuLy9cbkV2ZW50RW1pdHRlci5wcmVmaXhlZCA9IHByZWZpeDtcblxuLy9cbi8vIEFsbG93IGBFdmVudEVtaXR0ZXJgIHRvIGJlIGltcG9ydGVkIGFzIG1vZHVsZSBuYW1lc3BhY2UuXG4vL1xuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG1vZHVsZSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbn1cbiIsImV4cG9ydCBjbGFzcyBOYXZpZ2F0aW9uTm9kZSB7XG4gICAgY29uc3RydWN0b3IoeCwgeSwgeikge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLnogPSB6O1xuICAgICAgICB0aGlzLmNvbm5lY3RlZE5vZGVzID0gW107XG4gICAgICAgIHRoaXMub2NjdXBpZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpc0Nvbm5lY3RlZChvdGhlck5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGVkTm9kZXMuc29tZShub2RlID0+IG5vZGUueCA9PT0gb3RoZXJOb2RlLnhcbiAgICAgICAgICAgICYmIG5vZGUueSA9PT0gb3RoZXJOb2RlLnkgJiYgbm9kZS56ID09PSBvdGhlck5vZGUueik7XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyTm9kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy54ID09PSBvdGhlck5vZGUueCAmJiB0aGlzLnkgPT09IG90aGVyTm9kZS55ICYmIHRoaXMueiA9PT0gb3RoZXJOb2RlLno7XG4gICAgfVxuXG4gICAgZXF1YWxzUG9pbnQoeCwgeSwgeikge1xuICAgICAgICByZXR1cm4gdGhpcy54ID09PSB4ICYmIHRoaXMueSA9PT0geSAmJiB0aGlzLnogPT09IHo7XG4gICAgfVxuXG4gICAgYWRkQ29ubmVjdGVkTm9kZShvdGhlck5vZGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQ29ubmVjdGVkKG90aGVyTm9kZSkpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkTm9kZXMucHVzaChvdGhlck5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkTm9kZShvdGhlck5vZGUpIHtcbiAgICAgICAgY29uc3QgY29ubmVjdGVkTm9kZUluZGV4ID0gdGhpcy5jb25uZWN0ZWROb2Rlcy5maW5kSW5kZXgobm9kZSA9PiBub2RlLmVxdWFscyhvdGhlck5vZGUpKTtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWROb2Rlcy5zcGxpY2UoY29ubmVjdGVkTm9kZUluZGV4LCAxKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgTmF2aWdhdGlvbk5vZGUgfSBmcm9tICcuLi9tb2RlbC9nYW1lTWFwL25hdmlnYXRpb24vTmF2aWdhdGlvbk5vZGUnO1xuaW1wb3J0IHsgR2FtZU1hcFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZU1hcC9HYW1lTWFwUHJveHknO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgQXN0YXIgfSBmcm9tICcuLi9tb2RlbC9nYW1lTWFwL25hdmlnYXRpb24vQXN0YXInO1xuY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2FtZU1hcENvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIC8vIE9uY2UgYSBnYW1lTWFwIHNjZW5lIGlzIGxvYWRlZCwgcGFyc2UgZ2FtZU1hcCBWTywgZ2VuZXJhdGUgbmF2IG1lc2gsIGV0Y1xuICAgIC8vIEdldCBuYXZpZ2F0aW9uIGZsb29yc1xuICAgIGNvbnN0IGFwcCA9IHBjLkFwcGxpY2F0aW9uLmdldEFwcGxpY2F0aW9uKCk7XG4gICAgY29uc3QgZmxvb3JHcmlkID0gY3JlYXRlTWFwRmxvb3IoYXBwKTtcbiAgICBjb25zdCB3YWxscyA9IGNyZWF0ZU1hcFdhbGxzKGFwcCwgZmxvb3JHcmlkKTtcbiAgICBjb25zdCBjb3ZlciA9IGNyZWF0ZU1hcENvdmVyKGFwcCwgZmxvb3JHcmlkKTtcbiAgICBjb25zdCBwb3J0YWxzID0gY3JlYXRlUG9ydGFscyhhcHApO1xuXG4gICAgLy8gd2F5cG9pbnRzXG4gICAgY29uc3Qgd2F5cG9pbnRzTWFwID0gY3JlYXRlV2F5cG9pbnRzTWFwKGZsb29yR3JpZCk7XG5cbiAgICAvLyBSZWdpc3RlciBtZWRpYXRvcnNcblxuICAgIGlmIChmYWNhZGUuaGFzUHJveHkoR2FtZU1hcFByb3h5Lk5BTUUpKSB7XG4gICAgICAgIC8vIHJlbW92ZSBvbGQgbWFwXG4gICAgICAgIGZhY2FkZS5yZW1vdmVQcm94eShHYW1lTWFwUHJveHkuTkFNRSlcbiAgICB9XG5cbiAgICBmYWNhZGUucmVnaXN0ZXJQcm94eShuZXcgR2FtZU1hcFByb3h5KGZsb29yR3JpZCwgd2FsbHMsIGNvdmVyLCBwb3J0YWxzLCB3YXlwb2ludHNNYXApKTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTUFQX0dSSURfQ1JFQVRFRCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1hcEZsb29yKGFwcCkge1xuICAgIGNvbnN0IG5hdmlnYXRpb25GbG9vcnMgPSBhcHAucm9vdC5maW5kQnlUYWcoJ25hdmlnYXRpb25fZmxvb3InKTtcblxuICAgIGxldCBjb21wbGV0ZWRHcmlkID0gW107XG5cbiAgICBjb25zdCBuYXZpZ2F0aW9uQ29tcG9uZW50cyA9IFtdO1xuICAgIC8vIEZpcnN0IHBhcnNlIC0gY3JlYXRlIG5vZGVzIGFuZCBjb25uZWN0aW9ucyBmb3IgaW5kaXZpZHVhbCBcbiAgICAvLyBuYXZpZ2F0aW9uIGNvbXBvbmVudHNcbiAgICBmb3IgKGNvbnN0IGZsb29yRW50aXR5IG9mIG5hdmlnYXRpb25GbG9vcnMpIHtcbiAgICAgICAgY29uc3QgbmF2Q29tcCA9IGZsb29yRW50aXR5LnNjcmlwdFsnTmF2aWdhdGlvbkNvbXBvbmVudCddO1xuICAgICAgICBuYXZpZ2F0aW9uQ29tcG9uZW50cy5wdXNoKG5hdkNvbXApO1xuXG4gICAgICAgIGNvbnN0IGZsb29yR3JpZCA9IGNyZWF0ZVBhcnRpYWxHcmlkRnJvbUZsb29yKGZsb29yRW50aXR5KVxuICAgICAgICBuYXZDb21wLnNldEdyaWQoZmxvb3JHcmlkKTtcbiAgICB9XG5cbiAgICAvLyBTZWNvbmQgcGFyc2UgLSBzdGl0Y2ggdG9nZXRoZXIgYWRqYWNlbnQgbm9kZXMgaW4gXG4gICAgLy8gY29ubmVjdGVkIG5hdmlnYXRpb24gbWVzaGVzXG4gICAgZm9yIChjb25zdCBuYXZpZ2F0aW9uQ29tcCBvZiBuYXZpZ2F0aW9uQ29tcG9uZW50cykge1xuICAgICAgICBmb3IgKGNvbnN0IGNvbm5lY3RlZENvbXBFbnRpdHkgb2YgbmF2aWdhdGlvbkNvbXAuY29ubmVjdGVkQ29tcG9uZW50cykge1xuICAgICAgICAgICAgY29uc3QgY29ubmVjdGVkTmF2Q29tcCA9IGNvbm5lY3RlZENvbXBFbnRpdHkuc2NyaXB0WydOYXZpZ2F0aW9uQ29tcG9uZW50J107XG5cbiAgICAgICAgICAgIGpvaW5Ub0FkamFjZW50R3JpZChuYXZpZ2F0aW9uQ29tcC5nZXRHcmlkKCksIGNvbm5lY3RlZE5hdkNvbXAuZ2V0R3JpZCgpKTtcbiAgICAgICAgICAgIGNvbXBsZXRlZEdyaWQgPSBjb21wbGV0ZWRHcmlkLmNvbmNhdChuYXZpZ2F0aW9uQ29tcC5nZXRHcmlkKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBsZXRlZEdyaWQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1hcFdhbGxzKGFwcCwgZmxvb3JHcmlkKSB7XG4gICAgY29uc3Qgd2FsbHNCb3VuZGluZ0JveGVzID0gW107XG4gICAgY29uc3QgbWFwV2FsbEVudGl0aWVzID0gYXBwLnJvb3QuZmluZEJ5VGFnKCd3YWxsJyk7XG4gICAgZm9yIChjb25zdCBtYXBXYWxsRW50aXR5IG9mIG1hcFdhbGxFbnRpdGllcykge1xuICAgICAgICBjb25zdCBhYWJiID0gY3JlYXRlQm91bmRpbmdCb3hGcm9tRW50aXR5KG1hcFdhbGxFbnRpdHkpO1xuICAgICAgICB3YWxsc0JvdW5kaW5nQm94ZXMucHVzaChhYWJiKTtcbiAgICAgICAgY3JlYXRlRmxvb3JVbmRlcldhbGxzKG1hcFdhbGxFbnRpdHksIGZsb29yR3JpZCk7XG4gICAgICAgIG1hcFdhbGxFbnRpdHkuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIHJldHVybiB3YWxsc0JvdW5kaW5nQm94ZXM7XG5cbn1cblxuZnVuY3Rpb24gY3JlYXRlQm91bmRpbmdCb3hGcm9tRW50aXR5KGJveEVudGl0eSkge1xuICAgIGNvbnN0IHNjYWxlID0gYm94RW50aXR5LmdldExvY2FsU2NhbGUoKTtcbiAgICBjb25zdCBoYWxmRXh0ZW50cyA9IG5ldyBwYy5WZWMzKHNjYWxlLnggLyAyLCBzY2FsZS55IC8gMiwgc2NhbGUueiAvIDIpO1xuICAgIGNvbnN0IGFhYmIgPSBuZXcgcGMuQm91bmRpbmdCb3goYm94RW50aXR5LmdldFBvc2l0aW9uKCksIGhhbGZFeHRlbnRzKTtcbiAgICByZXR1cm4gYWFiYjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmxvb3JVbmRlcldhbGxzKHdhbGwsIGZsb29yR3JpZCkge1xuICAgIGNvbnN0IHdhbGxQb3MgPSB3YWxsLmdldFBvc2l0aW9uKCk7XG4gICAgY29uc3Qgd2FsbFNjYWxlID0gd2FsbC5nZXRMb2NhbFNjYWxlKCk7XG4gICAgY29uc3QgeSA9IE1hdGgucm91bmQod2FsbFBvcy55IC0gKHdhbGxTY2FsZS55ICogMC41KSk7XG5cbiAgICBjb25zdCBjb3JuZXJYID0gTWF0aC5yb3VuZCh3YWxsUG9zLnggLSAod2FsbFNjYWxlLnggKiAwLjUpKTtcbiAgICBjb25zdCBjb3JuZXJaID0gTWF0aC5yb3VuZCh3YWxsUG9zLnogLSAod2FsbFNjYWxlLnogKiAwLjUpKTtcblxuICAgIGZvciAobGV0IHggPSBjb3JuZXJYOyB4IDwgY29ybmVyWCArIHdhbGxTY2FsZS54OyB4KyspIHtcbiAgICAgICAgZm9yIChsZXQgeiA9IGNvcm5lclo7IHogPCBjb3JuZXJaICsgd2FsbFNjYWxlLno7IHorKykge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmdOb2RlSW5kZXggPSBmbG9vckdyaWQuZmluZEluZGV4KChub2RlKSA9PiBub2RlLmVxdWFsc1BvaW50KHgsIHksIHopKTtcbiAgICAgICAgICAgIGlmIChtYXRjaGluZ05vZGVJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlZE5vZGVzID0gZmxvb3JHcmlkLnNwbGljZShtYXRjaGluZ05vZGVJbmRleCwgMSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRlbGV0ZWROb2RlIG9mIGRlbGV0ZWROb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgZGVsZXRlZE5vZGUuY29ubmVjdGVkTm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGlzY29ubmVjdGVkTm9kZShkZWxldGVkTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWxHcmlkRnJvbUZsb29yKGZsb29yRW50aXR5KSB7XG4gICAgLy8gc25hcCB0byBncmlkXG4gICAgY29uc3QgZ3JpZCA9IFtdO1xuXG4gICAgY29uc3QgZmxvb3JQb3NpdGlvbiA9IGZsb29yRW50aXR5LmdldExvY2FsUG9zaXRpb24oKTtcbiAgICBjb25zdCBmbG9vclNpemUgPSBmbG9vckVudGl0eS5nZXRMb2NhbFNjYWxlKCk7XG5cbiAgICBjb25zdCBzbmFwcGVkV2lkdGggPSBNYXRoLnJvdW5kKGZsb29yU2l6ZS54KTtcbiAgICBjb25zdCBzbmFwcGVkQnJlYWR0aCA9IE1hdGgucm91bmQoZmxvb3JTaXplLnopO1xuXG4gICAgY29uc3Qgc25hcHBlZFggPSBNYXRoLnJvdW5kKGZsb29yUG9zaXRpb24ueCAtIChzbmFwcGVkV2lkdGggLyAyKSk7XG4gICAgY29uc3Qgc25hcHBlZFkgPSBmbG9vclBvc2l0aW9uLnk7XG4gICAgY29uc3Qgc25hcHBlZFogPSBNYXRoLnJvdW5kKGZsb29yUG9zaXRpb24ueiAtIChzbmFwcGVkQnJlYWR0aCAvIDIpKTtcblxuICAgIGZvciAobGV0IHogPSBzbmFwcGVkWjsgeiA8IHNuYXBwZWRaICsgc25hcHBlZEJyZWFkdGg7IHorKykge1xuICAgICAgICBmb3IgKGxldCB4ID0gc25hcHBlZFg7IHggPCBzbmFwcGVkWCArIHNuYXBwZWRXaWR0aDsgeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbmV3IE5hdmlnYXRpb25Ob2RlKHgsIHNuYXBwZWRZLCB6KTtcbiAgICAgICAgICAgIGdyaWQucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbm5lY3QgbmVpZ2hib3Vyc1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBncmlkKSB7XG4gICAgICAgIGZvciAoY29uc3Qgb3RoZXJOb2RlIG9mIGdyaWQpIHtcbiAgICAgICAgICAgIGlmIChvdGhlck5vZGUuZXF1YWxzUG9pbnQobm9kZS54IC0gMSwgbm9kZS55LCBub2RlLnopIHx8XG4gICAgICAgICAgICAgICAgb3RoZXJOb2RlLmVxdWFsc1BvaW50KG5vZGUueCArIDEsIG5vZGUueSwgbm9kZS56KSB8fFxuICAgICAgICAgICAgICAgIG90aGVyTm9kZS5lcXVhbHNQb2ludChub2RlLngsIG5vZGUueSwgbm9kZS56IC0gMSkgfHxcbiAgICAgICAgICAgICAgICBvdGhlck5vZGUuZXF1YWxzUG9pbnQobm9kZS54LCBub2RlLnksIG5vZGUueiArIDEpKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5hZGRDb25uZWN0ZWROb2RlKG90aGVyTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ3JpZDtcbn1cblxuZnVuY3Rpb24gam9pblRvQWRqYWNlbnRHcmlkKGdyaWQsIGdyaWRUb0pvaW4pIHtcbiAgICAvLyBDb25uZWN0IG5laWdoYm91cnNcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgZ3JpZCkge1xuICAgICAgICBmb3IgKGNvbnN0IG90aGVyTm9kZSBvZiBncmlkVG9Kb2luKSB7XG4gICAgICAgICAgICBpZiAob3RoZXJOb2RlLmVxdWFsc1BvaW50KG5vZGUueCAtIDEsIG5vZGUueSwgbm9kZS56KSB8fFxuICAgICAgICAgICAgICAgIG90aGVyTm9kZS5lcXVhbHNQb2ludChub2RlLnggKyAxLCBub2RlLnksIG5vZGUueikgfHxcbiAgICAgICAgICAgICAgICBvdGhlck5vZGUuZXF1YWxzUG9pbnQobm9kZS54LCBub2RlLnksIG5vZGUueiAtIDEpIHx8XG4gICAgICAgICAgICAgICAgb3RoZXJOb2RlLmVxdWFsc1BvaW50KG5vZGUueCwgbm9kZS55LCBub2RlLnogKyAxKSkge1xuICAgICAgICAgICAgICAgIG5vZGUuYWRkQ29ubmVjdGVkTm9kZShvdGhlck5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXBDb3ZlcihhcHAsIGZsb29yR3JpZCkge1xuICAgIGxldCBjb3ZlclBvaW50cyA9IFtdO1xuICAgIGNvbnN0IGNvdmVyRW50aXRpZXMgPSBhcHAucm9vdC5maW5kQnlUYWcoJ2NvdmVyJyk7XG4gICAgZm9yIChjb25zdCBjb3ZlckVudGl0eSBvZiBjb3ZlckVudGl0aWVzKSB7XG4gICAgICAgIGNvdmVyUG9pbnRzID0gY292ZXJQb2ludHMuY29uY2F0KGNyZWF0ZUNvdmVyUG9pbnRGcm9tQm94KGNvdmVyRW50aXR5LCBmbG9vckdyaWQpKTtcbiAgICAgICAgY292ZXJFbnRpdHkuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIHJldHVybiBjb3ZlclBvaW50cztcblxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb3ZlclBvaW50RnJvbUJveChib3gsIGZsb29yR3JpZCkge1xuICAgIGNvbnN0IGNvdmVyUG9pbnRzID0gW107XG4gICAgY29uc3QgYm94UG9zID0gYm94LmdldFBvc2l0aW9uKCk7XG4gICAgY29uc3QgYm94U2NhbGUgPSBib3guZ2V0TG9jYWxTY2FsZSgpO1xuICAgIGNvbnN0IHkgPSBNYXRoLnJvdW5kKGJveFBvcy55IC0gKGJveFNjYWxlLnkgKiAwLjUpKTtcblxuICAgIGNvbnN0IGNvcm5lclggPSBNYXRoLnJvdW5kKGJveFBvcy54IC0gKGJveFNjYWxlLnggKiAwLjUpKTtcbiAgICBjb25zdCBjb3JuZXJaID0gTWF0aC5yb3VuZChib3hQb3MueiAtIChib3hTY2FsZS56ICogMC41KSk7XG5cbiAgICBmb3IgKGxldCB4ID0gY29ybmVyWDsgeCA8IGNvcm5lclggKyBib3hTY2FsZS54OyB4KyspIHtcbiAgICAgICAgZm9yIChsZXQgeiA9IGNvcm5lclo7IHogPCBjb3JuZXJaICsgYm94U2NhbGUuejsgeisrKSB7XG4gICAgICAgICAgICBjb25zdCBjb3ZlclBvaW50ID0gbmV3IHBjLlZlYzMoeCwgeSwgeik7XG4gICAgICAgICAgICBjb3ZlclBvaW50cy5wdXNoKGNvdmVyUG9pbnQpO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmdOb2RlSW5kZXggPSBmbG9vckdyaWQuZmluZEluZGV4KChub2RlKSA9PiBub2RlLmVxdWFsc1BvaW50KHgsIHksIHopKTtcbiAgICAgICAgICAgIGlmIChtYXRjaGluZ05vZGVJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlZE5vZGVzID0gZmxvb3JHcmlkLnNwbGljZShtYXRjaGluZ05vZGVJbmRleCwgMSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRlbGV0ZWROb2RlIG9mIGRlbGV0ZWROb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgZGVsZXRlZE5vZGUuY29ubmVjdGVkTm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGlzY29ubmVjdGVkTm9kZShkZWxldGVkTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvdmVyUG9pbnRzO1xuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBvcnRhbHMoYXBwKSB7XG4gICAgY29uc3QgcG9ydGFscyA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBwb3J0YWxFbnRpdGllcyA9IGFwcC5yb290LmZpbmRCeVRhZygncG9ydGFsJyk7XG4gICAgZm9yIChjb25zdCBwb3J0YWxFbnRpdHkgb2YgcG9ydGFsRW50aXRpZXMpIHtcbiAgICAgICAgY29uc3QgcG9ydGFsQ29tcG9uZW50ID0gcG9ydGFsRW50aXR5LnNjcmlwdFsnUG9ydGFsQ29tcG9uZW50J107XG4gICAgICAgIGNvbnN0IHBvcnRhbElkID0gcG9ydGFsQ29tcG9uZW50LnBvcnRhbElkO1xuICAgICAgICBjb25zdCBkZXN0aW5hdGlvblNjZW5lID0gcG9ydGFsQ29tcG9uZW50LmRlc3RpbmF0aW9uU2NlbmU7XG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uUG9ydGFsID0gcG9ydGFsQ29tcG9uZW50LmRlc3RpbmF0aW9uUG9ydGFsO1xuICAgICAgICBjb25zdCBzdGFuZGluZ1BvaW50ID0gcG9ydGFsQ29tcG9uZW50LnN0YW5kaW5nUG9pbnQuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgaGl0Ym94UG9pbnQgPSBwb3J0YWxDb21wb25lbnQuaGl0Ym94LmdldFBvc2l0aW9uKCk7XG5cbiAgICAgICAgY29uc3QgcG9ydGFsID0ge1xuICAgICAgICAgICAgcG9ydGFsSWQ6IHBvcnRhbElkLFxuICAgICAgICAgICAgZGVzdGluYXRpb25TY2VuZTogZGVzdGluYXRpb25TY2VuZSxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uUG9ydGFsOiBkZXN0aW5hdGlvblBvcnRhbCxcbiAgICAgICAgICAgIHN0YW5kaW5nUG9pbnQ6IHN0YW5kaW5nUG9pbnQsXG4gICAgICAgICAgICBoaXRib3hQb2ludDogaGl0Ym94UG9pbnRcbiAgICAgICAgfVxuXG4gICAgICAgIHBvcnRhbHMuc2V0KHBvcnRhbElkLCBwb3J0YWwpO1xuICAgIH1cblxuICAgIHJldHVybiBwb3J0YWxzO1xuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdheXBvaW50c01hcChmbG9vckdyaWQpIHtcbiAgICBjb25zdCB3YXlwb2ludHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGZsb29yTm9kZSBvZiBmbG9vckdyaWQpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgZGlhZ29uYWxzIGludGVyc2VjdCB3YWxsc1xuXG4gICAgICAgIGlmIChpc1dheXBvaW50KGZsb29yTm9kZSwgZmxvb3JHcmlkKSkge1xuICAgICAgICAgICAgd2F5cG9pbnRzLnB1c2gobmV3IE5hdmlnYXRpb25Ob2RlKGZsb29yTm9kZS54LCBmbG9vck5vZGUueSwgZmxvb3JOb2RlLnopKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3Qgd2F5cG9pbnQgb2Ygd2F5cG9pbnRzKSB7XG4gICAgICAgIGZvciAoY29uc3Qgb3RoZXJXYXlwb2ludCBvZiB3YXlwb2ludHMpIHtcbiAgICAgICAgICAgIGlmICghd2F5cG9pbnQuZXF1YWxzKG90aGVyV2F5cG9pbnQpIHx8ICFvdGhlcldheXBvaW50LmlzQ29ubmVjdGVkKHdheXBvaW50KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBBc3Rhci5jYWxjdWxhdGVCcmVzZW5oYW1MaW5lKHdheXBvaW50LngsIHdheXBvaW50LnosIG90aGVyV2F5cG9pbnQueCwgb3RoZXJXYXlwb2ludC56KTtcbiAgICAgICAgICAgICAgICBpZiAoQXN0YXIuY2hlY2tWYWxpZExpbmUobGluZSwgZmxvb3JHcmlkKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXlwb2ludC5hZGRDb25uZWN0ZWROb2RlKG90aGVyV2F5cG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICBvdGhlcldheXBvaW50LmFkZENvbm5lY3RlZE5vZGUod2F5cG9pbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3YXlwb2ludHM7XG59XG5cbmZ1bmN0aW9uIGlzV2F5cG9pbnQoZmxvb3JOb2RlLCBmbG9vck1hcCkge1xuICAgIC8vQ2hlY2sgbndcbiAgICBjb25zdCBub3J0aHdlc3QgPSBuZXcgcGMuVmVjMyhmbG9vck5vZGUueCAtIDEsIGZsb29yTm9kZS55LCBmbG9vck5vZGUueiAtIDEpO1xuICAgIGNvbnN0IG5vcnRoID0gbmV3IHBjLlZlYzMoZmxvb3JOb2RlLngsIGZsb29yTm9kZS55LCBmbG9vck5vZGUueiAtIDEpO1xuICAgIGNvbnN0IG5vcnRoZWFzdCA9IG5ldyBwYy5WZWMzKGZsb29yTm9kZS54ICsgMSwgZmxvb3JOb2RlLnksIGZsb29yTm9kZS56IC0gMSk7XG4gICAgY29uc3QgZWFzdCA9IG5ldyBwYy5WZWMzKGZsb29yTm9kZS54ICsgMSwgZmxvb3JOb2RlLnksIGZsb29yTm9kZS56KTtcbiAgICBjb25zdCBzb3V0aGVhc3QgPSBuZXcgcGMuVmVjMyhmbG9vck5vZGUueCArIDEsIGZsb29yTm9kZS55LCBmbG9vck5vZGUueiArIDEpO1xuICAgIGNvbnN0IHNvdXRoID0gbmV3IHBjLlZlYzMoZmxvb3JOb2RlLngsIGZsb29yTm9kZS55LCBmbG9vck5vZGUueiArIDEpO1xuICAgIGNvbnN0IHNvdXRod2VzdCA9IG5ldyBwYy5WZWMzKGZsb29yTm9kZS54IC0gMSwgZmxvb3JOb2RlLnksIGZsb29yTm9kZS56ICsgMSk7XG4gICAgY29uc3Qgd2VzdCA9IG5ldyBwYy5WZWMzKGZsb29yTm9kZS54IC0gMSwgZmxvb3JOb2RlLnksIGZsb29yTm9kZS56KTtcblxuICAgIC8vIG5vcnRod2VzdFxuICAgIGlmICghZmxvb3JNYXAuc29tZShuID0+IG4uZXF1YWxzKG5vcnRod2VzdCkpKSB7XG4gICAgICAgIGlmIChmbG9vck5vZGUuY29ubmVjdGVkTm9kZXMuc29tZShuID0+IG4uZXF1YWxzKG5vcnRoKSlcbiAgICAgICAgICAgICYmIGZsb29yTm9kZS5jb25uZWN0ZWROb2Rlcy5zb21lKG4gPT4gbi5lcXVhbHMod2VzdCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIG5vcnRoZWFzdFxuICAgIGlmICghZmxvb3JNYXAuc29tZShuID0+IG4uZXF1YWxzKG5vcnRoZWFzdCkpKSB7XG4gICAgICAgIGlmIChmbG9vck5vZGUuY29ubmVjdGVkTm9kZXMuc29tZShuID0+IG4uZXF1YWxzKG5vcnRoKSlcbiAgICAgICAgICAgICYmIGZsb29yTm9kZS5jb25uZWN0ZWROb2Rlcy5zb21lKG4gPT4gbi5lcXVhbHMoZWFzdCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHNvdXRoZWFzdFxuICAgIGlmICghZmxvb3JNYXAuc29tZShuID0+IG4uZXF1YWxzKHNvdXRoZWFzdCkpKSB7XG4gICAgICAgIGlmIChmbG9vck5vZGUuY29ubmVjdGVkTm9kZXMuc29tZShuID0+IG4uZXF1YWxzKHNvdXRoKSlcbiAgICAgICAgICAgICYmIGZsb29yTm9kZS5jb25uZWN0ZWROb2Rlcy5zb21lKG4gPT4gbi5lcXVhbHMoZWFzdCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHNvdXRod2VzdFxuICAgIGlmICghZmxvb3JNYXAuc29tZShuID0+IG4uZXF1YWxzKHNvdXRod2VzdCkpKSB7XG4gICAgICAgIGlmIChmbG9vck5vZGUuY29ubmVjdGVkTm9kZXMuc29tZShuID0+IG4uZXF1YWxzKHNvdXRoKSlcbiAgICAgICAgICAgICYmIGZsb29yTm9kZS5jb25uZWN0ZWROb2Rlcy5zb21lKG4gPT4gbi5lcXVhbHMod2VzdCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn0iLCJjb25zdCB7IFByb3h5IH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cblxuZXhwb3J0IGNsYXNzIFdlYXBvbnNQcm94eSBleHRlbmRzIFByb3h5IHtcbiAgICBnZXQgdm8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGEoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJXZWFwb25zUHJveHlcIiB9O1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcihXZWFwb25zUHJveHkuTkFNRSwgZGF0YSk7XG4gICAgfVxuXG4gICAgZ2V0RGFtYWdlKHdlYXBvbk5hbWUsIGRhbWFnZVRpZXIpIHtcbiAgICAgICAgZm9yIChjb25zdCBjYXRlZ29yeUtleSBpbiB0aGlzLnZvKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodGhpcy52bywgY2F0ZWdvcnlLZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSB0aGlzLnZvW2NhdGVnb3J5S2V5XTtcblxuICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChjYXRlZ29yeSwgd2VhcG9uTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhdGVnb3J5W3dlYXBvbk5hbWVdLmRhbWFnZVtNYXRoLm1pbihkYW1hZ2VUaWVyIC0gMSwgNildO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGZpbmQgd2VhcG9uOjogJHt3ZWFwb25OYW1lfWApO1xuICAgIH1cblxuICAgIGdldFdlYXBvbkNhdGVnb3J5KHdlYXBvbk5hbWUpIHtcbiAgICAgICAgZm9yIChjb25zdCBjYXRlZ29yeUtleSBpbiB0aGlzLnZvKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodGhpcy52bywgY2F0ZWdvcnlLZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSB0aGlzLnZvW2NhdGVnb3J5S2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoY2F0ZWdvcnksIHdlYXBvbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYXRlZ29yeUtleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjYXRlZ29yeSBmb3Igd2VhcG9uOjogJHt3ZWFwb25OYW1lfWApO1xuXG4gICAgfVxufSIsImNvbnN0IHsgUHJveHkgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgU3RvcnlWTyB9ID0gcmVxdWlyZSgnLi9TdG9yeVZPJyk7XG5cblxuZXhwb3J0IGNsYXNzIFN0b3J5UHJveHkgZXh0ZW5kcyBQcm94eSB7XG4gICAgZ2V0IHZvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRhKCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiU3RvcnlQcm94eVwiIH07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc3QgYXBwID0gcGMuQXBwbGljYXRpb24uZ2V0QXBwbGljYXRpb24oKTtcbiAgICAgICAgY29uc3Qgc3RvcnlUcnVuayA9IGFwcC5hc3NldHMuZ2V0KDQwNTI5OTIwKS5yZXNvdXJjZTtcbiAgICAgICAgY29uc3Qgc3RvcnlUcmVlcyA9IHN0b3J5VHJ1bmsudHJlZXM7XG4gICAgICAgIGNvbnN0IHN0b3J5VHJlZU1hcCA9IG5ldyBNYXAoKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHRyZWVLZXkgaW4gc3RvcnlUcmVlcykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHN0b3J5VHJlZXMsIHRyZWVLZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcnlUcmVlQXNzZXRJZCA9IHN0b3J5VHJlZXNbdHJlZUtleV07XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcnlUcmVlID0gYXBwLmFzc2V0cy5nZXQoc3RvcnlUcmVlQXNzZXRJZCkucmVzb3VyY2U7XG5cbiAgICAgICAgICAgICAgICBzdG9yeVRyZWVNYXAuc2V0KHRyZWVLZXksIHN0b3J5VHJlZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlcihTdG9yeVByb3h5Lk5BTUUsIHN0b3J5VHJlZU1hcCk7XG5cbiAgICAgICAgLy8gUHJvcGVydGllc1xuICAgICAgICB0aGlzLmN1cnJlbnRUcmVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmN1cnJlbnROb2RlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwSW5kZXggPSAwO1xuICAgICAgICB0aGlzLmN1cnJlbnRDb25kaXRpb25zID0gW107XG4gICAgfVxuXG4gICAgZ2V0VHJlZSh0cmVlSWQpIHtcbiAgICAgICAgaWYgKHRoaXMudm8uaGFzKHRyZWVJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZvLmdldCh0cmVlSWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldE5vZGUodHJlZSwgbm9kZUlkKSB7XG4gICAgICAgIGNvbnN0IG5vZGVzID0gdHJlZS5ub2RlcztcbiAgICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5vZGVzLCBub2RlSWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZXNbbm9kZUlkXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRTdGVwKG5vZGUsIHN0ZXBJbmRleCkge1xuICAgICAgICBjb25zdCBzdGVwcyA9IG5vZGUuc3RlcHM7XG4gICAgICAgIGlmIChzdGVwSW5kZXggPCBzdGVwcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGVwc1tzdGVwSW5kZXhdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdvVG9Ob2RlKG5vZGVJZCkge1xuICAgICAgICB0aGlzLmN1cnJlbnROb2RlID0gbm9kZUlkO1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwSW5kZXggPSAwO1xuICAgIH1cblxuICAgIHN0YXJ0RGlhbG9ndWVUcmVlKHRyZWVJZCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRUcmVlID0gdHJlZUlkO1xuICAgICAgICB0aGlzLmN1cnJlbnROb2RlID0gXCJlbnRyeVwiO1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwSW5kZXggPSAwO1xuXG4gICAgICAgIGNvbnN0IHRyZWUgPSB0aGlzLmdldFRyZWUodGhpcy5jdXJyZW50VHJlZSk7XG4gICAgICAgIGlmICghdHJlZSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYENhbm5vdCBzdGFydCBkaWFsb2d1ZTogVHJlZSAke3RoaXMuY3VycmVudFRyZWV9IG5vdCBmb3VuZGApO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmdldE5vZGUodHJlZSwgdGhpcy5jdXJyZW50Tm9kZSkpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDYW5ub3Qgc3RhcnQgZGlhbG9ndWU6IG5vIFwiZW50cnlcIiBub2RlIGRlZmluZWQgb24gJHt0cmVlSWR9YCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJlZTtcbiAgICB9XG5cbiAgICBnZXRDdXJyZW50Tm9kZVN0ZXAoKSB7XG4gICAgICAgIGNvbnN0IHRyZWUgPSB0aGlzLmdldFRyZWUodGhpcy5jdXJyZW50VHJlZSk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnROb2RlID0gdGhpcy5nZXROb2RlKHRyZWUsIHRoaXMuY3VycmVudE5vZGUpO1xuICAgICAgICBjb25zdCB2YWxpZFN0ZXAgPSB0aGlzLmdldFZhbGlkU3RlcChjdXJyZW50Tm9kZSwgdGhpcy5jdXJyZW50U3RlcEluZGV4KTtcbiAgICAgICAgaWYgKHZhbGlkU3RlcCAmJiB2YWxpZFN0ZXAub25jZSkge1xuICAgICAgICAgICAgY29uc3Qgb25jZUNvbmRpdGlvbiA9IHRoaXMuZ2V0Q29uZGl0aW9uU3RyaW5nRm9yU3RlcCh0aGlzLmN1cnJlbnRUcmVlLCB0aGlzLmN1cnJlbnROb2RlLCB0aGlzLmN1cnJlbnRTdGVwSW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5hZGRDb25kaXRpb24ob25jZUNvbmRpdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbGlkU3RlcDtcbiAgICB9XG5cblxuICAgIGNvbnRpbnVlQ3VycmVudE5vZGVTdGVwKCkge1xuICAgICAgICBjb25zdCB0cmVlID0gdGhpcy5nZXRUcmVlKHRoaXMuY3VycmVudFRyZWUpO1xuICAgICAgICBjb25zdCBjdXJyZW50Tm9kZSA9IHRoaXMuZ2V0Tm9kZSh0cmVlLCB0aGlzLmN1cnJlbnROb2RlKVxuICAgICAgICAvLyBpbmNyZW1lbnQgc3RlcEluZGV4XG4gICAgICAgIHRoaXMuY3VycmVudFN0ZXBJbmRleCsrO1xuXG4gICAgICAgIGNvbnN0IHZhbGlkU3RlcCA9IHRoaXMuZ2V0VmFsaWRTdGVwKGN1cnJlbnROb2RlLCB0aGlzLmN1cnJlbnRTdGVwSW5kZXgpO1xuICAgICAgICBpZiAodmFsaWRTdGVwICYmIHZhbGlkU3RlcC5vbmNlKSB7XG4gICAgICAgICAgICBjb25zdCBvbmNlQ29uZGl0aW9uID0gdGhpcy5nZXRDb25kaXRpb25TdHJpbmdGb3JTdGVwKHRoaXMuY3VycmVudFRyZWUsIHRoaXMuY3VycmVudE5vZGUsIHRoaXMuY3VycmVudFN0ZXBJbmRleCk7XG4gICAgICAgICAgICB0aGlzLmFkZENvbmRpdGlvbihvbmNlQ29uZGl0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsaWRTdGVwO1xuICAgIH1cblxuICAgIGdldFZhbGlkU3RlcChub2RlLCBzdGVwSW5kZXgpIHtcbiAgICAgICAgbGV0IG5leHRWYWxpZFN0ZXAgPSB0aGlzLmdldFN0ZXAobm9kZSwgc3RlcEluZGV4KTtcblxuXG4gICAgICAgIGlmIChuZXh0VmFsaWRTdGVwKSB7XG4gICAgICAgICAgICBsZXQgdGVzdENvbmRpdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIGlmIChuZXh0VmFsaWRTdGVwLmNvbmRpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0ZXN0Q29uZGl0aW9ucyA9IHRlc3RDb25kaXRpb25zLmNvbmNhdChuZXh0VmFsaWRTdGVwLmNvbmRpdGlvbnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobmV4dFZhbGlkU3RlcC5vbmNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb25jZUNvbmRpdGlvbiA9IHRoaXMuZ2V0SW52ZXJ0ZWRDb25kaXRpb25TdHJpbmdGb3JTdGVwKHRoaXMuY3VycmVudFRyZWUsIHRoaXMuY3VycmVudE5vZGUsIHN0ZXBJbmRleCk7XG4gICAgICAgICAgICAgICAgdGVzdENvbmRpdGlvbnMgPSB0ZXN0Q29uZGl0aW9ucy5jb25jYXQob25jZUNvbmRpdGlvbik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1Rlc3QgdmFsaWQgc3RlcCcpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRlc3RDb25kaXRpb25zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMudGVzdENvbmRpdGlvbnModGVzdENvbmRpdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHRWYWxpZFN0ZXA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFN0ZXBJbmRleCA9IHN0ZXBJbmRleCArIDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsaWRTdGVwKG5vZGUsIHRoaXMuY3VycmVudFN0ZXBJbmRleCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0VmFsaWRTdGVwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q29uZGl0aW9uU3RyaW5nRm9yU3RlcCh0cmVlSWQsIG5vZGVJZCwgc3RlcEluZGV4KSB7XG4gICAgICAgIHJldHVybiBgJHt0cmVlSWR9JHtub2RlSWR9JHtzdGVwSW5kZXh9YDtcbiAgICB9XG5cbiAgICBnZXRJbnZlcnRlZENvbmRpdGlvblN0cmluZ0ZvclN0ZXAodHJlZUlkLCBub2RlSWQsIHN0ZXBJbmRleCkge1xuICAgICAgICByZXR1cm4gYCEke3RyZWVJZH0ke25vZGVJZH0ke3N0ZXBJbmRleH1gO1xuICAgIH1cblxuICAgIHNlbGVjdENob2ljZShjaG9pY2VJbmRleCkge1xuICAgICAgICBjb25zdCBjdXJyZW50Tm9kZSA9IHRoaXMuZ2V0Q3VycmVudE5vZGVTdGVwKCk7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkQ2hvaWNlID0gY3VycmVudE5vZGUuY2hvaWNlc1tjaG9pY2VJbmRleF07XG4gICAgICAgIHJldHVybiBzZWxlY3RlZENob2ljZTtcbiAgICB9XG5cbiAgICBhZGRDb25kaXRpb24oY29uZGl0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRDb25kaXRpb25zLmluZGV4T2YoY29uZGl0aW9uKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENvbmRpdGlvbnMucHVzaChjb25kaXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlQ29uZGl0aW9uKGNvbmRpdGlvbikge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuY3VycmVudENvbmRpdGlvbnMuaW5kZXhPZihjb25kaXRpb24pO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29uZGl0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGVzdENvbmRpdGlvbnMoY29uZGl0aW9ucykge1xuICAgICAgICBsZXQgc3VjY2VzcyA9IHRydWU7XG5cbiAgICAgICAgZm9yIChjb25zdCBjb25kaXRpb24gb2YgY29uZGl0aW9ucykge1xuICAgICAgICAgICAgLy8gY2hlY2sgZm9yIG9wZXJhdG9yc1xuICAgICAgICAgICAgY29uc3Qgb3JEZWxpbWl0ZXJlZCA9IFwifHxcIjtcbiAgICAgICAgICAgIGNvbnN0IG9yQ29uZGl0aW9ucyA9IGNvbmRpdGlvbi5zcGxpdChvckRlbGltaXRlcmVkKTtcblxuICAgICAgICAgICAgaWYgKG9yQ29uZGl0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgLy8gT25seSBvbmUgbmVlZHMgdG8gYmUgdHJ1ZVxuICAgICAgICAgICAgICAgIGxldCBvclN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9wdGlvbmFsQ29uZGl0aW9uIG9mIG9yQ29uZGl0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja0NvbmRpdGlvbihvcHRpb25hbENvbmRpdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yU3VjY2VzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA9IG9yU3VjY2VzcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSB0aGlzLmNoZWNrQ29uZGl0aW9uKGNvbmRpdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XG4gICAgfVxuXG4gICAgY2hlY2tDb25kaXRpb24oY29uZGl0aW9uKSB7XG4gICAgICAgIGxldCBzdWNjZXNzID0gdHJ1ZTtcblxuICAgICAgICAvLyBkZXRlcm1pbmUgaWYgcG9zaXRpdmUgb2YgbmVnYXRpdmVcbiAgICAgICAgaWYgKGNvbmRpdGlvbi5zdGFydHNXaXRoKFwiIVwiKSkge1xuICAgICAgICAgICAgY29uc3Qgc3RyaXBwZWRTdHJpbmcgPSBjb25kaXRpb24uc2xpY2UoMSwgY29uZGl0aW9uLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRDb25kaXRpb25zLmluZGV4T2Yoc3RyaXBwZWRTdHJpbmcpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY29uZGl0aW9uLnN0YXJ0c1dpdGgoXCIrXCIpKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpcHBlZFN0cmluZyA9IGNvbmRpdGlvbi5zbGljZSgxLCBjb25kaXRpb24ubGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMuYWRkQ29uZGl0aW9uKHN0cmlwcGVkU3RyaW5nKTtcbiAgICAgICAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbmRpdGlvbi5zdGFydHNXaXRoKFwiLVwiKSkge1xuICAgICAgICAgICAgY29uc3Qgc3RyaXBwZWRTdHJpbmcgPSBjb25kaXRpb24uc2xpY2UoMSwgY29uZGl0aW9uLmxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNvbmRpdGlvbihzdHJpcHBlZFN0cmluZyk7XG4gICAgICAgICAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRDb25kaXRpb25zLmluZGV4T2YoY29uZGl0aW9uKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3VjY2VzcztcbiAgICB9XG59XG4iLCJjb25zdCB7IFByb3h5IH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5jb25zdCB7IEludmVudG9yeVZPIH0gPSByZXF1aXJlKCcuL0ludmVudG9yeVZPJyk7XG5cblxuZXhwb3J0IGNsYXNzIEludmVudG9yeVByb3h5IGV4dGVuZHMgUHJveHkge1xuICAgIGdldCB2bygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YSgpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkludmVudG9yeVByb3h5XCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihJbnZlbnRvcnlQcm94eS5OQU1FLCBuZXcgSW52ZW50b3J5Vk8oKSk7XG4gICAgfVxuXG4gICAgZ2V0IGludmVudG9yeUl0ZW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5pbnZlbnRvcnlJdGVtcztcbiAgICB9XG5cbiAgICBzZXQgaW52ZW50b3J5SXRlbXModmFsdWUpIHtcbiAgICAgICAgdGhpcy52by5pbnZlbnRvcnlJdGVtcyA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCBlcXVpcG1lbnRTbG90cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uZXF1aXBtZW50U2xvdHM7XG4gICAgfVxuXG5cbiAgICByZW9yZGVySW52ZW50b3J5SXRlbShpdGVtVVVJRCwgc2xvdEluZGV4KSB7XG4gICAgICAgIC8vIERlbGV0ZSB0aGUgaXRlbSBmcm9tIGl0J3MgY3VycmVudCBwb3NpdGlvblxuICAgICAgICBjb25zdCBvcmlnaW5hbEluZGV4ID0gdGhpcy5pbnZlbnRvcnlJdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLnV1aWQgPT09IGl0ZW1VVUlEKTtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxJdGVtID0gdGhpcy5pbnZlbnRvcnlJdGVtcy5zcGxpY2Uob3JpZ2luYWxJbmRleCwgMSk7XG4gICAgICAgIGxldCBydW5uaW5nSW5kZXhUb3RhbCA9IDA7XG4gICAgICAgIGxldCBuZXdJbmRleCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pbnZlbnRvcnlJdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuaW52ZW50b3J5SXRlbXNbaV07XG5cblxuICAgICAgICAgICAgaWYgKHNsb3RJbmRleCA+PSBydW5uaW5nSW5kZXhUb3RhbCAmJiBzbG90SW5kZXggPCBydW5uaW5nSW5kZXhUb3RhbCArIGl0ZW0uc2l6ZSkge1xuICAgICAgICAgICAgICAgIG5ld0luZGV4ID0gaTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcnVubmluZ0luZGV4VG90YWwgKz0gaXRlbS5zaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNsb3RJbmRleCA+PSBydW5uaW5nSW5kZXhUb3RhbCkge1xuICAgICAgICAgICAgbmV3SW5kZXggPSB0aGlzLmludmVudG9yeUl0ZW1zLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSBhIHZhbGlkIGFycmF5IGlzIHByb3ZpZGVkXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcy5pbnZlbnRvcnlJdGVtcykgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBhcnJheScpO1xuICAgICAgICB9XG5cblxuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGVyZSdzIGFuIGl0ZW0gdG8gbW92ZVxuICAgICAgICBpZiAoIW9yaWdpbmFsSXRlbS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlcmUgaXMgbm8gaXRlbSBpbiB0aGUgYXJyYXkgYXQgaW5kZXggJyArIG9yaWdpbmFsSW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTW92ZSB0aGUgaXRlbSB0byBpdHMgbmV3IHBvc2l0aW9uXG4gICAgICAgIHRoaXMuaW52ZW50b3J5SXRlbXMuc3BsaWNlKG5ld0luZGV4LCAwLCBvcmlnaW5hbEl0ZW1bMF0pO1xuICAgIH1cblxuICAgIGF0dGVtcHRUb0VxdWlwSXRlbVRvU2xvdChzbG90S2V5LCBpdGVtRGF0YSkge1xuICAgICAgICAvLyBjaGVjayBlcXVpcCB3ZWFwb25cbiAgICAgICAgaWYgKChzbG90S2V5ID09PSAnMWhhbmQnIHx8IHNsb3RLZXkgPT09ICcyaGFuZCcpICYmIGl0ZW1EYXRhLnR5cGUgPT09IFwid2VhcG9uXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSXRlbSA9IHRoaXMuZXF1aXBtZW50U2xvdHMuZ2V0KHNsb3RLZXkpO1xuXG4gICAgICAgICAgICAvLyBDbGVhciBib3RoIHNsb3RzIGl0IGxhc3QgaXRlbSB3YXMgdHdvLWhhbmRlZFxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nSXRlbSAmJiBleGlzdGluZ0l0ZW0uZXF1aXBTbG90ID09PSAnMmhhbmQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcXVpcG1lbnRTbG90cy5kZWxldGUoJzFoYW5kJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5lcXVpcG1lbnRTbG90cy5kZWxldGUoJzJoYW5kJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpdGVtRGF0YS5lcXVpcFNsb3QgPT09ICcxaGFuZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVxdWlwbWVudFNsb3RzLnNldChzbG90S2V5LCBpdGVtRGF0YSk7XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoaXMgaXNuJ3QgYWxyZWFkeSBlcXVpcHBlZCBpbiB0aGUgb3RoZXIgaGFuZFxuICAgICAgICAgICAgICAgIGlmIChzbG90S2V5ID09PSAnMWhhbmQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG90aGVyU2xvdCA9IHRoaXMuZXF1aXBtZW50U2xvdHMuZ2V0KCcyaGFuZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3RoZXJTbG90ICYmIG90aGVyU2xvdC51dWlkID09PSBpdGVtRGF0YS51dWlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVxdWlwbWVudFNsb3RzLmRlbGV0ZSgnMmhhbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2xvdEtleSA9PT0gJzJoYW5kJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvdGhlclNsb3QgPSB0aGlzLmVxdWlwbWVudFNsb3RzLmdldCgnMWhhbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG90aGVyU2xvdCAmJiBvdGhlclNsb3QudXVpZCA9PT0gaXRlbURhdGEudXVpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lcXVpcG1lbnRTbG90cy5kZWxldGUoJzFoYW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVxdWlwbWVudFNsb3RzLnNldCgnMWhhbmQnLCBpdGVtRGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lcXVpcG1lbnRTbG90cy5zZXQoJzJoYW5kJywgaXRlbURhdGEpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGFkZEludmVudG9yeUl0ZW0oaW52ZW50b3J5SXRlbURhdGEpIHtcbiAgICAgICAgdGhpcy5pbnZlbnRvcnlJdGVtcy5wdXNoKGludmVudG9yeUl0ZW1EYXRhKTtcbiAgICB9XG5cbiAgICBnZXRFcXVpcHBlZEl0ZW0oc2xvdEtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lcXVpcG1lbnRTbG90cy5nZXQoc2xvdEtleSk7XG4gICAgfVxufSIsImNvbnN0IHsgUHJveHkgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuXG5leHBvcnQgY2xhc3MgSXRlbXNQcm94eSBleHRlbmRzIFByb3h5IHtcbiAgICBnZXQgdm8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGEoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJJdGVtc1Byb3h5XCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgc3VwZXIoSXRlbXNQcm94eS5OQU1FLCBkYXRhKTtcbiAgICB9XG5cbiAgICBnZXRJdGVtRGF0YShpdGVtSWQpIHtcbiAgICAgICAgZm9yIChjb25zdCBjYXRlZ29yeUtleSBpbiB0aGlzLnZvKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodGhpcy52bywgY2F0ZWdvcnlLZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSB0aGlzLnZvW2NhdGVnb3J5S2V5XTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjYXRlZ29yeSk7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNhdGVnb3J5LCBpdGVtSWQpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpdGVtSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBjYXRlZ29yeUtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMudm9bY2F0ZWdvcnlLZXldW2l0ZW1JZF1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBmaW5kIGRhdGEgZm9yIGl0ZW06OiAke2l0ZW1JZH1gKTtcblxuICAgIH1cbn0iLCJjb25zdCB7IFByb3h5IH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5jb25zdCB7IEJvdEJlaGF2aW91cnNWTyB9ID0gcmVxdWlyZSgnLi9Cb3RCZWhhdmlvdXJzVk8nKTtcblxuXG5leHBvcnQgY2xhc3MgQm90QmVoYXZpb3VyUHJveHkgZXh0ZW5kcyBQcm94eSB7XG4gICAgZ2V0IHZvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRhKCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiQm90QmVoYXZpb3VyUHJveHlcIiB9O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKEJvdEJlaGF2aW91clByb3h5Lk5BTUUsIG5ldyBCb3RCZWhhdmlvdXJzVk8oKSk7XG4gICAgfVxuXG4gICAgZ2V0VHJlZSh0eXBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmdldFRyZWUodHlwZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgV2VhcG9uc1Byb3h5IH0gZnJvbSAnLi4vbW9kZWwvd2VhcG9ucy9XZWFwb25zUHJveHknO1xuaW1wb3J0IHsgU3RvcnlQcm94eSB9IGZyb20gJy4uL21vZGVsL3N0b3J5UHJveHkvU3RvcnlQcm94eSc7XG5pbXBvcnQgeyBJbnZlbnRvcnlQcm94eSB9IGZyb20gJy4uL21vZGVsL2ludmVudG9yeS9JbnZlbnRvcnlQcm94eSc7XG5pbXBvcnQgeyBJdGVtc1Byb3h5IH0gZnJvbSAnLi4vbW9kZWwvaXRlbXMvSXRlbXNQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBCb3RCZWhhdmlvdXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2JvdEJlaGF2aW91ci9Cb3RCZWhhdmlvdXJQcm94eSc7XG5jb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnR1cENvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAvLyBSZWdpc3RlciBhcHAtbGV2ZWwgbWVkaWF0b3JzL3Byb3hpZXMvY29tbWFuZHMgaGVyZVxuXG4gICAgLy8gQ3JlYXRlIGdhbWUgc3RhdGUgcHJveHlcbiAgICBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpLnJlZ2lzdGVyUHJveHkobmV3IEdhbWVTdGF0ZVByb3h5KCkpO1xuXG4gICAgLy8gTG9hZCB3ZWFwb25zIGRhdGEgYW5kIGNyZWF0ZSBwcm94eVxuICAgIGNvbnN0IGFwcCA9IHBjLkFwcGxpY2F0aW9uLmdldEFwcGxpY2F0aW9uKCk7XG4gICAgaWYgKGFwcCkge1xuICAgICAgICBjb25zdCB3ZWFwb25zRGF0YSA9IGFwcC5hc3NldHMuZ2V0KDQwNDE1NjMxKS5yZXNvdXJjZTtcbiAgICAgICAgRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KS5yZWdpc3RlclByb3h5KG5ldyBXZWFwb25zUHJveHkod2VhcG9uc0RhdGEpKTtcbiAgICAgICAgY29uc3QgaXRlbXNEYXRhID0gYXBwLmFzc2V0cy5nZXQoNDA4MTQwMjcpLnJlc291cmNlO1xuICAgICAgICBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpLnJlZ2lzdGVyUHJveHkobmV3IEl0ZW1zUHJveHkoaXRlbXNEYXRhKSk7XG4gICAgICAgIEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSkucmVnaXN0ZXJQcm94eShuZXcgU3RvcnlQcm94eSgpKTtcbiAgICAgICAgRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KS5yZWdpc3RlclByb3h5KG5ldyBJbnZlbnRvcnlQcm94eSgpKTtcbiAgICAgICAgRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KS5yZWdpc3RlclByb3h5KG5ldyBCb3RCZWhhdmlvdXJQcm94eSgpKTtcblxuICAgICAgICAvLyBBZGQgZGVmYXVsdCBlcXVpcG1lbnRcbiAgICAgICAgRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5BRERfSVRFTV9UT19JTlZFTlRPUlksIFwic3dvcmRcIik7XG4gICAgICAgIEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSkuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQUREX0lURU1fVE9fSU5WRU5UT1JZLCBcInBpc3RvbGV0XCIpO1xuICAgICAgICBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkFERF9JVEVNX1RPX0lOVkVOVE9SWSwgXCJmdXNpbFwiKTtcbiAgICAgICAgRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5BRERfSVRFTV9UT19JTlZFTlRPUlksIFwiY2hhaW5tYWlsXCIpO1xuICAgICAgICBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkVRVUlQX0lURU1fVE9fU0xPVCwgXCJ1bmFybWVkXCIsIFwiMWhhbmRcIik7XG4gICAgICAgIEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSkuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRVFVSVBfSVRFTV9UT19TTE9ULCBcInVuYXJtZWRcIiwgXCIyaGFuZFwiKTtcblxuICAgIH1cbn0iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlU2NlbmVDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgYXBwID0gcGMuQXBwbGljYXRpb24uZ2V0QXBwbGljYXRpb24oKTtcbiAgICBjb25zdCBzY2VuZU5hbWUgPSBhcmdzWzBdO1xuICAgIGNvbnN0IHBvcnRhbElkID0gYXJnc1sxXTtcbiAgICBjb25zb2xlLmxvZyhgQ2hhbmdpbmcgc2NlbmUgJHtzY2VuZU5hbWV9YCk7XG5cbiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHNjZW5lJ3Mgcm9vdCBvYmplY3RcbiAgICBjb25zdCBvbGRIaWVyYXJjaHkgPSBhcHAucm9vdC5maW5kQnlOYW1lKCdSb290Jyk7XG5cbiAgICAvLyBHZXQgdGhlIHBhdGggdG8gdGhlIHNjZW5lXG4gICAgY29uc3Qgc2NlbmUgPSBhcHAuc2NlbmVzLmZpbmQoc2NlbmVOYW1lKTtcblxuICAgIC8vIExvYWQgdGhlIHNjZW5lcyBlbnRpdHkgaGllcmFyY2h5XG4gICAgYXBwLnNjZW5lcy5sb2FkU2NlbmVIaWVyYXJjaHkoc2NlbmUudXJsLCBmdW5jdGlvbiAoZXJyLCBwYXJlbnQpIHtcbiAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgIGlmIChvbGRIaWVyYXJjaHkpIHtcbiAgICAgICAgICAgICAgICBvbGRIaWVyYXJjaHkuZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSkuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FX0NPTVBMRVRFLCBzY2VuZU5hbWUpO1xuICAgICAgICBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlBBUlNFX0dBTUVNQVAsIHNjZW5lTmFtZSk7XG4gICAgICAgIEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSkuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQUREX1BMQVlFUl9DSEFSQUNURVJfVE9fTUFQLCBwb3J0YWxJZCk7XG5cbiAgICB9KTtcbn0iLCJleHBvcnQgZnVuY3Rpb24gc2h1ZmZsZUFycmF5KGFycmF5KSB7XG4gICAgbGV0IGN1cnJlbnRJbmRleCA9IGFycmF5Lmxlbmd0aFxuICAgIGxldCB0ZW1wb3JhcnlWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICBsZXQgcmFuZG9tSW5kZXggPSAtMTtcblxuICAgIC8vIFdoaWxlIHRoZXJlIHJlbWFpbiBlbGVtZW50cyB0byBzaHVmZmxlLi4uXG4gICAgd2hpbGUgKDAgIT09IGN1cnJlbnRJbmRleCkge1xuXG4gICAgICAgIC8vIFBpY2sgYSByZW1haW5pbmcgZWxlbWVudC4uLlxuICAgICAgICByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1cnJlbnRJbmRleCk7XG4gICAgICAgIGN1cnJlbnRJbmRleCAtPSAxO1xuXG4gICAgICAgIC8vIEFuZCBzd2FwIGl0IHdpdGggdGhlIGN1cnJlbnQgZWxlbWVudC5cbiAgICAgICAgdGVtcG9yYXJ5VmFsdWUgPSBhcnJheVtjdXJyZW50SW5kZXhdO1xuICAgICAgICBhcnJheVtjdXJyZW50SW5kZXhdID0gYXJyYXlbcmFuZG9tSW5kZXhdO1xuICAgICAgICBhcnJheVtyYW5kb21JbmRleF0gPSB0ZW1wb3JhcnlWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59XG4iLCJjb25zdCB7IFByb3h5IH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBzaHVmZmxlQXJyYXkgfSBmcm9tICcuLi8uLi91dGlscy9TaHVmZmxlQXJyYXknO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuY29uc3QgeyBDb21iYXRWTyB9ID0gcmVxdWlyZSgnLi9Db21iYXRWTycpO1xuXG5cbmV4cG9ydCBjbGFzcyBDb21iYXRQcm94eSBleHRlbmRzIFByb3h5IHtcbiAgICBnZXQgdm8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGEoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJDb21iYXRQcm94eVwiIH07XG5cbiAgICBjb25zdHJ1Y3RvcihwYXJ0aWNpcGFudHMsIHRlYW1zKSB7XG4gICAgICAgIHN1cGVyKENvbWJhdFByb3h5Lk5BTUUsIG5ldyBDb21iYXRWTyhwYXJ0aWNpcGFudHMsIHRlYW1zKSk7XG4gICAgfVxuXG4gICAgb25SZWdpc3RlcigpIHtcbiAgICAgICAgY29uc3QgcGFydGljaXBhbnRzID0gdGhpcy52by5wYXJ0aWNpcGFudHM7XG4gICAgICAgIHRoaXMucGFydGljaXBhbnRQcm94aWVzID0gbmV3IE1hcCgpO1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnRpY2lwYW50IG9mIHBhcnRpY2lwYW50cykge1xuICAgICAgICAgICAgY29uc3QgcGFydGljaXBhbnRQcm94eSA9IHRoaXMuZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBwYXJ0aWNpcGFudCk7XG4gICAgICAgICAgICB0aGlzLnBhcnRpY2lwYW50UHJveGllcy5zZXQocGFydGljaXBhbnQsIHBhcnRpY2lwYW50UHJveHkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmV4dFR1cm4oKSB7XG4gICAgICAgIGNvbnN0IHJvdW5kSW5pdGlhdGl2ZSA9IHRoaXMudm8ucm91bmRJbml0aWF0aXZlO1xuXG4gICAgICAgIGlmIChyb3VuZEluaXRpYXRpdmUgJiYgcm91bmRJbml0aWF0aXZlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRUdXJuSWQgPSByb3VuZEluaXRpYXRpdmUuc2hpZnQoKTtcbiAgICAgICAgICAgIHRoaXMudm8uYWN0aXZlUGFydGljaXBhbnQgPSBuZXh0VHVybklkO1xuXG4gICAgICAgICAgICBpZiAobmV4dFR1cm5JZCAhPT0gJ2VuZF9yb3VuZCcpIHtcbiAgICAgICAgICAgICAgICAvLyBOZXh0IFR1cm5cbiAgICAgICAgICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIGBUdXJuICR7bmV4dFR1cm5JZH1gKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm94eSA9IHRoaXMucGFydGljaXBhbnRQcm94aWVzLmdldChuZXh0VHVybklkKTtcbiAgICAgICAgICAgICAgICBwcm94eS5yZXNldENvbWJhdFR1cm5TdGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHByb3h5LmlzTlBDKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRFVEVSTUlORV9ORVhUX0VORU1ZX0FDVElPTiwgbmV4dFR1cm5JZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQVdBSVRfUExBWUVSX0NPTUJBVF9JTlBVVCwgbmV4dFR1cm5JZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBFbmQgcm91bmRcbiAgICAgICAgICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIGBFbmQgcm91bmRgKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkVYVF9DT01CQVRfUk9VTkQpO1xuICAgICAgICAgICAgICAgIH0sIDMwMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmV4dFJvdW5kKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnLy8vLy8vLy8vLy8vLy8vLy8nKTtcbiAgICAgICAgY29uc29sZS5sb2coJy8vICBOZXcgcm91bmQgIC8vJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCcvLy8vLy8vLy8vLy8vLy8vLycpO1xuICAgICAgICBjb25zdCBpbml0aWF0aXZlcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IFtjaGFyYWN0ZXJJZCwgcHJveHldIG9mIHRoaXMucGFydGljaXBhbnRQcm94aWVzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgY29uc3Qgdm8gPSBwcm94eS52bztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdm8uaW5pdGlhdGl2ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaW5pdGlhdGl2ZXMucHVzaChjaGFyYWN0ZXJJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5pdGlhdGl2ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBFdmVyeW9uZSBpcyBvdXQgb2YgdGhlIGNvbWJhdCBzb21laG93LCBwcm9iYWJseSBkZWFkXG4gICAgICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5FTkRfQ09NQkFUKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBlbmQgb2Ygcm91bmQgdG9rZW5cbiAgICAgICAgaW5pdGlhdGl2ZXMucHVzaCgnZW5kX3JvdW5kJyk7XG5cbiAgICAgICAgbGV0IHNodWZmbGVkSW5pdGlhdGl2ZSA9IHNodWZmbGVBcnJheShpbml0aWF0aXZlcyk7XG4gICAgICAgIC8vIGVuc3VyZSByb3VuZCBkb2Vzbid0IHN0YXJ0IHdpdGggXCJlbmRfcm91bmRcIlxuICAgICAgICB3aGlsZSAoc2h1ZmZsZWRJbml0aWF0aXZlWzBdID09PSBcImVuZF9yb3VuZFwiKSB7XG4gICAgICAgICAgICBzaHVmZmxlZEluaXRpYXRpdmUgPSBzaHVmZmxlQXJyYXkoc2h1ZmZsZWRJbml0aWF0aXZlKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52by5yb3VuZEluaXRpYXRpdmUgPSBzaHVmZmxlZEluaXRpYXRpdmU7XG4gICAgfVxuXG4gICAgZ2V0IG5leHRUdXJuQ2hhcmFjdGVySWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLm5leHRUdXJuQ2hhcmFjdGVySWQ7XG4gICAgfVxuXG4gICAgZ2V0IGFjdGl2ZVBhcnRpY2lwYW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5hY3RpdmVQYXJ0aWNpcGFudDtcbiAgICB9XG5cbiAgICBzZXQgYWN0aXZlUGFydGljaXBhbnQodmFsdWUpIHtcbiAgICAgICAgdGhpcy52by5hY3RpdmVQYXJ0aWNpcGFudCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCBwYXJ0aWNpcGFudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLnBhcnRpY2lwYW50cztcbiAgICB9XG5cbiAgICBnZXQgdGVhbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLnRlYW1zO1xuICAgIH1cblxuICAgIHJlbW92ZUNoYXJhY3RlckZyb21Db21iYXQoY2hhcmFjdGVySWQpIHtcbiAgICAgICAgLy8gcmVtb3ZlIGZyb20gcGFydGljY2lwYW50c1xuICAgICAgICB0aGlzLnBhcnRpY2lwYW50UHJveGllcy5kZWxldGUoY2hhcmFjdGVySWQpO1xuICAgICAgICAvLyByZW1vdmUgZnJvbSBpbml0aWF0aXZlXG4gICAgICAgIHRoaXMudm8ucm91bmRJbml0aWF0aXZlID0gdGhpcy52by5yb3VuZEluaXRpYXRpdmUuZmlsdGVyKGUgPT4gZSAhPT0gY2hhcmFjdGVySWQpO1xuXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdGVhbV0gb2YgdGhpcy50ZWFtcy5lbnRyaWVzKCkpIHtcblxuICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVySW5kZXggPSB0ZWFtLmluZGV4T2YoY2hhcmFjdGVySWQpO1xuICAgICAgICAgICAgaWYgKGNoYXJhY3RlckluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICB0ZWFtLnNwbGljZShjaGFyYWN0ZXJJbmRleCwgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0ZWFtLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkVORF9DT01CQVQsIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBDb21iYXRQcm94eSB9IGZyb20gJy4uL21vZGVsL2NvbWJhdC9Db21iYXRQcm94eSc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydENvbWJhdENvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBpbnN0aWdhdGluZ0NoYXJhY3RlcklkID0gYXJnc1swXTtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIFwiU3RhcnQgQ29tYmF0XCIpO1xuXG4gICAgY29uc3QgZ2FtZVN0YXRlUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcbiAgICBnYW1lU3RhdGVQcm94eS51cGRhdGVHYW1lU3RhdGVUeXBlKGdhbWVwbGF5TW9kZVR5cGVzLkNPTUJBVCk7XG5cbiAgICBjb25zdCBpbnN0aWdhdGluZ0NoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBpbnN0aWdhdGluZ0NoYXJhY3RlcklkKTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRElTUExBWV9GTE9BVElOR19TVEFUVVMsIFwic3BvdHRlZFwiLCBpbnN0aWdhdGluZ0NoYXJhY3RlclByb3h5KTtcblxuXG4gICAgLy8gU2V0dXAgdGhlIGNvbWJhdFxuICAgIGNvbnN0IHRlYW1zID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IHBsYXllclRlYW0gPSBbJ3BsYXllciddO1xuICAgIHRlYW1zLnNldCgncGxheWVyX3RlYW0nLCBwbGF5ZXJUZWFtKTtcblxuICAgIGNvbnN0IG9wcG9zaW5nVGVhbSA9IFtpbnN0aWdhdGluZ0NoYXJhY3RlcklkXS5jb25jYXQoaW5zdGlnYXRpbmdDaGFyYWN0ZXJQcm94eS5jb21iYXRHcm91cCkuZmlsdGVyKGZ1bmN0aW9uIChpdGVtLCBwb3MsIHNlbGYpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuaW5kZXhPZihpdGVtKSA9PSBwb3M7XG4gICAgfSk7XG4gICAgdGVhbXMuc2V0KCdvcHBvc2luZ190ZWFtJywgb3Bwb3NpbmdUZWFtKTtcblxuICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IHBsYXllclRlYW0uY29uY2F0KG9wcG9zaW5nVGVhbSk7XG5cblxuICAgIGNvbnN0IHBsYXllclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBcInBsYXllclwiKTtcblxuICAgIGZvciAoY29uc3QgcGFydGljaXBhbnQgb2YgcGFydGljaXBhbnRzKSB7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5FTkRfTU9WRU1FTlQgKyBwYXJ0aWNpcGFudCk7XG4gICAgICAgIGlmIChwYXJ0aWNpcGFudCAhPT0gXCJwbGF5ZXJcIikge1xuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkNIQVJBQ1RFUl9MT09LX0FUICsgcGFydGljaXBhbnQsIHBsYXllclByb3h5LmN1cnJlbnROb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5DSEFSQUNURVJfTE9PS19BVCArIHBhcnRpY2lwYW50LCBpbnN0aWdhdGluZ0NoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgY29uc3QgY29tYmF0UHJveHkgPSBuZXcgQ29tYmF0UHJveHkocGFydGljaXBhbnRzLCB0ZWFtcyk7XG4gICAgZmFjYWRlLnJlZ2lzdGVyUHJveHkoY29tYmF0UHJveHkpO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ORVhUX0NPTUJBVF9ST1VORCk7XG4gICAgfSwgMjAwMCk7XG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IEdhbWVTdGF0ZVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVByb3h5JztcbmltcG9ydCB7IGdhbWVwbGF5TW9kZVR5cGVzIH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVZPJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIG5leHRDb21iYXRUdXJuQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG5cbiAgICBjb25zdCBnYW1lU3RhdGUgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcbiAgICBjb25zdCBjb21iYXRQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KENvbWJhdFByb3h5Lk5BTUUpO1xuXG4gICAgaWYgKGdhbWVTdGF0ZS52by5nYW1lcGxheU1vZGUgPT09IGdhbWVwbGF5TW9kZVR5cGVzLkNPTUJBVCkge1xuICAgICAgICBjb21iYXRQcm94eS5uZXh0VHVybigpO1xuICAgIH1cblxufSIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBDb21iYXRQcm94eSB9IGZyb20gJy4uL21vZGVsL2NvbWJhdC9Db21iYXRQcm94eSc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Q29tYmF0Um91bmRDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcblxuICAgIGNvbnN0IGdhbWVTdGF0ZSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVTdGF0ZVByb3h5Lk5BTUUpO1xuICAgIGNvbnN0IGNvbWJhdFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoQ29tYmF0UHJveHkuTkFNRSk7XG5cbiAgICBpZiAoZ2FtZVN0YXRlLnZvLmdhbWVwbGF5TW9kZSA9PT0gZ2FtZXBsYXlNb2RlVHlwZXMuQ09NQkFUKSB7XG4gICAgICAgIGNvbWJhdFByb3h5Lm5leHRSb3VuZCgpO1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkVYVF9DT01CQVRfVFVSTiwgY29tYmF0UHJveHkudm8ubmV4dFR1cm5DaGFyYWN0ZXJJZCk7XG5cbiAgICB9XG5cbn0iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgQ29tYmF0UHJveHkgfSBmcm9tICcuLi9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHknO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5kQ29tYmF0VHVybkNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICAgICAgY29uc3QgY29tYmF0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShDb21iYXRQcm94eS5OQU1FKTtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkhJREVfV0FMS0FCTEVfQVJFQSk7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ORVhUX0NPTUJBVF9UVVJOLCBjb21iYXRQcm94eS5uZXh0VHVybkNoYXJhY3RlcklkKTtcbiAgICB9LCA1MDApO1xufVxuIiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IEdhbWVTdGF0ZVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVByb3h5JztcbmltcG9ydCB7IGdhbWVwbGF5TW9kZVR5cGVzIH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVZPJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVNYXBQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvR2FtZU1hcFByb3h5JztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcbmltcG9ydCB7IEJhc2ljTWVsZWVUcmVlIH0gZnJvbSAnLi4vYmVoYXZpb3VyVHJlZS90cmVlcy9CYXNpY01lbGVlVHJlZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmVteVR1cm5Db21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZW5lbXlJZCA9IGFyZ3NbMF07XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBnYW1lTWFwUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lTWFwUHJveHkuTkFNRSk7XG5cbiAgICBjb25zdCBlbmVteVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBlbmVteUlkKTtcbiAgICBjb25zdCBlbmVteUN1cnJlbnROb2RlID0gZW5lbXlQcm94eS5jdXJyZW50Tm9kZTtcbiAgICAvLyBmaW5kIGRlc2lyZWQgbW92ZSBwb3NpdGlvblxuICAgIGNvbnN0IHBsYXllclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBcInBsYXllclwiKTtcbiAgICBjb25zdCBwbGF5ZXJOb2RlID0gcGxheWVyUHJveHkuY3VycmVudE5vZGU7XG4gICAgY29uc3QgY29ubmVjdGVkTm9kZXMgPSBwbGF5ZXJOb2RlLmNvbm5lY3RlZE5vZGVzO1xuXG4gICAgLy8gQ2hlY2sgaWYgY2hhcmFjdGVyIGlzIGFscmVhZHkgYWRqYWNlbnQgdG8gdGFyZ2V0XG4gICAgY29uc3QgaXNBZGphY2VudCA9IGNvbm5lY3RlZE5vZGVzLnNvbWUobiA9PiBuLmVxdWFscyhlbmVteUN1cnJlbnROb2RlKSk7XG5cbiAgICBjb25zdCBiYXNpY01lbGVlVHJlZSA9IG5ldyBCYXNpY01lbGVlVHJlZSgpO1xuICAgIGJhc2ljTWVsZWVUcmVlLnJ1bkNvbW1hbmRzKGZhY2FkZSwgZW5lbXlJZCk7XG5cbiAgICAvKi8vIHdlJ3JlIGFscmVhZHkgdGhlcmVcbiAgICBpZiAoaXNBZGphY2VudCkge1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuUkVTT0xWRV9BVFRBQ0ssIGVuZW15UHJveHkuaWQsIHBsYXllclByb3h5LmlkKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRU5EX0NPTUJBVF9UVVJOKTtcbiAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBjb25uZWN0ZWROb2Rlcy5maWx0ZXIobm9kZSA9PiAhbm9kZS5vY2N1cGllZCk7XG5cbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gRmluZCBuZWFyZXN0IG5vZGVcbiAgICAgICAgbGV0IG5vZGUgPSByZXN1bHQucmVkdWNlKChhLCBiKSA9PiBkaXN0YW5jZVNxcnQoZW5lbXlDdXJyZW50Tm9kZSwgYSkgPCBkaXN0YW5jZVNxcnQoZW5lbXlDdXJyZW50Tm9kZSwgYikgPyBhIDogYik7XG5cblxuICAgICAgICBjb25zdCBwYXRoID0gQXN0YXIuY2FsY3VsYXRlUGF0aChlbmVteUN1cnJlbnROb2RlLCBub2RlKTtcbiAgICAgICAgaWYgKHBhdGggJiYgcGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyB0cmltIG1vdmVtZW50XG4gICAgICAgICAgICBjb25zdCB2byA9IGVuZW15UHJveHkudm87XG4gICAgICAgICAgICB3aGlsZSAocGF0aC5sZW5ndGggPiB2by5hdmFpbGFibGVNb3ZlbWVudCkge1xuICAgICAgICAgICAgICAgIHBhdGguc2hpZnQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGVuZCBwb2ludCBpbiBhZGphY2VudCB0byB0YXJnZXRcbiAgICAgICAgICAgIGNvbnN0IGVuZFBvaW50ID0gcGF0aFswXTtcbiAgICAgICAgICAgIGNvbnN0IGVuZHBvaW50SXNBZGphY2VudCA9IGNvbm5lY3RlZE5vZGVzLnNvbWUobiA9PiBuLmVxdWFscyhlbmRQb2ludCkpO1xuXG4gICAgICAgICAgICBpZiAoZW5kcG9pbnRJc0FkamFjZW50KSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk1PVkVfQUxPTkdfUEFUSF9BTkRfQVRUQUNLLCBlbmVteUlkLCBcInBsYXllclwiLCBwYXRoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5BVklHQVRFX0FMT05HX1BBVEggKyBlbmVteUlkLCBwYXRoKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBlbmVteVByb3h5LmN1cnJlbnROb2RlID0gbm9kZTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkVORF9DT01CQVRfVFVSTik7XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkVORF9DT01CQVRfVFVSTik7XG4gICAgICAgIH0sIDE1MDApO1xuICAgIH0qL1xufVxuXG5mdW5jdGlvbiBkaXN0YW5jZVNxcnQocDEsIHAyKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHAyLnggLSBwMS54LCAyKSArIE1hdGgucG93KHAyLnkgLSBwMS55LCAyKTtcbn1cbiIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gXCJAa29yZWV6L3B1cmUtbXZjXCI7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gXCIuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHlcIjtcbmltcG9ydCB7IGdhbWVwbGF5TW9kZVR5cGVzIH0gZnJvbSBcIi4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWT1wiO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgQ29tYmF0UHJveHkgfSBmcm9tICcuLi9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHknO1xuaW1wb3J0IHsgR2FtZU1hcFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZU1hcC9HYW1lTWFwUHJveHknO1xuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0ZWROb2RlQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgZ2FtZVN0YXRlUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcbiAgICBjb25zdCBnYW1lTWFwUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lTWFwUHJveHkuTkFNRSk7XG5cblxuICAgIGNvbnN0IG5vZGUgPSBhcmdzWzBdO1xuXG4gICAgaWYgKGdhbWVNYXBQcm94eS5oYXNWYWxpZE5vZGUobm9kZSkpIHtcbiAgICAgICAgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5FWFBMT1JBVElPTikge1xuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX1dBWVBPSU5UICsgXCJwbGF5ZXJcIiwgbm9kZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZ2FtZVN0YXRlUHJveHkuY3VycmVudE1vZGUgPT09IGdhbWVwbGF5TW9kZVR5cGVzLkNPTUJBVCkge1xuICAgICAgICAgICAgY29uc3QgY29tYmF0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShDb21iYXRQcm94eS5OQU1FKTtcbiAgICAgICAgICAgIGlmIChjb21iYXRQcm94eS5hY3RpdmVQYXJ0aWNpcGFudCA9PT0gXCJwbGF5ZXJcIikge1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5DT01CQVRfTkFWSUdBVEVfVE9fTk9ERSwgXCJwbGF5ZXJcIiwgbm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbWJhdE5hdmlnYXRlVG9Ob2RlQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgaWQgPSBhcmdzWzBdO1xuICAgIGNvbnN0IHRhcmdldE5vZGUgPSBhcmdzWzFdO1xuXG4gICAgY29uc3QgZ2FtZUNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBpZCk7XG4gICAgY29uc3Qgdm8gPSBnYW1lQ2hhcmFjdGVyUHJveHkudm87XG4gICAgY29uc3QgbW92ZWFibGVOb2RlcyA9IEFzdGFyLmJyZWFkdGhGaXJzdFNlYXJjaCh2by5jdXJyZW50Tm9kZSwgdm8uYXZhaWxhYmxlTW92ZW1lbnQpO1xuXG4gICAgZm9yIChjb25zdCBub2RlIG9mIG1vdmVhYmxlTm9kZXMpIHtcbiAgICAgICAgaWYgKG5vZGUuZXF1YWxzKHRhcmdldE5vZGUpKSB7XG4gICAgICAgICAgICBoYW5kbGVWYWxpZE1vdmUoZmFjYWRlLCBnYW1lQ2hhcmFjdGVyUHJveHksIHRhcmdldE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVWYWxpZE1vdmUoZmFjYWRlLCBjaGFyYWN0ZXJQcm94eSwgdGFyZ2V0Tm9kZSkge1xuICAgIGNvbnN0IHZvID0gY2hhcmFjdGVyUHJveHkudm87XG4gICAgY29uc3QgcGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgodm8uY3VycmVudE5vZGUsIHRhcmdldE5vZGUpO1xuICAgIGlmIChwYXRoICYmIHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICB2by5hdmFpbGFibGVNb3ZlbWVudCAtPSAocGF0aC5sZW5ndGggLSAxKTsgLy8gRGV0cmFjdCBieSBvbmUuLi4gdGhlIGZpcnN0IHBhdGggbm9kZSBkb2Vzbid0IGNvdW50XG4gICAgICAgIGNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkhJREVfV0FMS0FCTEVfQVJFQSk7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5OQVZJR0FURV9BTE9OR19QQVRIICsgdm8uaWQsIHBhdGgpO1xuICAgIH1cbn0iLCJleHBvcnQgZnVuY3Rpb24gc2hvd1dhbGthYmxlQXJlYUNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCB3YWxrYWJsZU5vZGVzID0gYXJnc1swXTtcbiAgICBjb25zdCBhcHAgPSBwYy5BcHBsaWNhdGlvbi5nZXRBcHBsaWNhdGlvbigpO1xuICAgIGNvbnN0IHdhbGthYmxlVGlsZUFzc2V0ID0gYXBwLmFzc2V0cy5nZXQoNDAyMzU5NjYpO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGFwcC5yb290LmZpbmRCeU5hbWUoXCJXb3JsZE9iamVjdHNcIik7XG5cbiAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygd2Fsa2FibGVOb2Rlcykge1xuICAgICAgICBjb25zdCB0aWxlID0gd2Fsa2FibGVUaWxlQXNzZXQucmVzb3VyY2UuaW5zdGFudGlhdGUoKTtcbiAgICAgICAgdGlsZS5zZXRMb2NhbFBvc2l0aW9uKG5vZGUueCwgbm9kZS55LCBub2RlLnopO1xuICAgICAgICBjb250YWluZXIuYWRkQ2hpbGQodGlsZSk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gaGlkZVdhbGthYmxlQXJlYUNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBhcHAgPSBwYy5BcHBsaWNhdGlvbi5nZXRBcHBsaWNhdGlvbigpO1xuICAgIGNvbnN0IHdhbGthYmxlVGlsZUVudGl0aWVzID0gYXBwLnJvb3QuZmluZEJ5VGFnKCd3YWxrYWJsZV90aWxlJyk7XG4gICAgZm9yIChjb25zdCB3YWxrYWJsZVRpbGVFbnRpdHkgb2Ygd2Fsa2FibGVUaWxlRW50aXRpZXMpIHtcbiAgICAgICAgd2Fsa2FibGVUaWxlRW50aXR5LmRlc3Ryb3koKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuaW1wb3J0IHsgQXN0YXIgfSBmcm9tIFwiLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyXCI7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhd2FpdFBsYXllckNvbWJhdElucHV0Q29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGNoYXJhY3RlcklkID0gYXJnc1swXTtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuXG4gICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGNoYXJhY3RlcklkKTtcbiAgICBjb25zdCB2byA9IGNoYXJhY3RlclByb3h5LnZvO1xuICAgIGNvbnN0IG1vdmVhYmxlTm9kZXMgPSBBc3Rhci5icmVhZHRoRmlyc3RTZWFyY2godm8uY3VycmVudE5vZGUsIHZvLmF2YWlsYWJsZU1vdmVtZW50KTtcblxuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1dBTEtBQkxFX0FSRUEsIG1vdmVhYmxlTm9kZXMpO1xuXG59XG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tIFwiLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVZPXCI7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tIFwiLi9HYW1lQ29tbWFuZHNcIjtcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGVuZE1vdmVtZW50Q29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgaWQgPSBhcmdzWzBdO1xuICAgIGNvbnN0IGVuZE5vZGUgPSBhcmdzWzFdO1xuXG4gICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGlkKTtcbiAgICBjaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IGVuZE5vZGU7XG5cbiAgICBjb25zdCBnYW1lU3RhdGUgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcbiAgICBpZiAoZ2FtZVN0YXRlLmN1cnJlbnRNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5DT01CQVQpIHtcbiAgICAgICAgY29uc3QgY29tYmF0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShDb21iYXRQcm94eS5OQU1FKTtcblxuICAgICAgICBpZiAoY29tYmF0UHJveHkpIHtcbiAgICAgICAgICAgIGlmIChjb21iYXRQcm94eS5hY3RpdmVQYXJ0aWNpcGFudCA9PT0gXCJwbGF5ZXJcIikge1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5BV0FJVF9QTEFZRVJfQ09NQkFUX0lOUFVULCBpZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuREVURVJNSU5FX05FWFRfRU5FTVlfQUNUSU9OLCBpZCk7XG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk8nO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuaW1wb3J0IHsgQXN0YXIgfSBmcm9tICcuLi9tb2RlbC9nYW1lTWFwL25hdmlnYXRpb24vQXN0YXInO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgQ29tYmF0UHJveHkgfSBmcm9tICcuLi9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHknO1xuaW1wb3J0IHsgV2VhcG9uc1Byb3h5IH0gZnJvbSAnLi4vbW9kZWwvd2VhcG9ucy9XZWFwb25zUHJveHknO1xuaW1wb3J0IHsgY2VudGVyUG9pbnRDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL3V0aWxzL0NoYXJhY3RlckNlbnRlclBvaW50JztcbmltcG9ydCB7IEdhbWVNYXBQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvR2FtZU1hcFByb3h5JztcblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdGVkR2FtZUNoYXJhY3RlckNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGNvbnN0IGdhbWVDaGFyYWN0ZXJFbnRpdHkgPSBhcmdzWzBdO1xuICAgIGNvbnN0IGlkID0gZ2FtZUNoYXJhY3RlckVudGl0eS5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5jaGFyYWN0ZXJJZDtcbiAgICBjb25zdCBnYW1lU3RhdGVQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVTdGF0ZVByb3h5Lk5BTUUpO1xuICAgIGNvbnN0IGdhbWVNYXBQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVNYXBQcm94eS5OQU1FKTtcbiAgICBjb25zdCB0YXJnZXRDaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgaWQpO1xuICAgIGNvbnN0IHBsYXllckNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBcInBsYXllclwiKTtcblxuICAgIGNvbnN0IHdlYXBvblByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoV2VhcG9uc1Byb3h5Lk5BTUUpO1xuICAgIGNvbnN0IHdlYXBvbkNhdGVnb3J5ID0gd2VhcG9uUHJveHkuZ2V0V2VhcG9uQ2F0ZWdvcnkocGxheWVyQ2hhcmFjdGVyUHJveHkuZXF1aXBwZWRXZWFwb24pO1xuXG4gICAgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5FWFBMT1JBVElPTikge1xuICAgICAgICBpZiAoZ2FtZVN0YXRlUHJveHkuY3VycmVudEFjdGlvbiA9PT0gJ2F0dGFjaycgJiYgd2VhcG9uQ2F0ZWdvcnkgPT09IFwicmFuZ2VkXCIpIHtcbiAgICAgICAgICAgIGlmIChjYW5TZWVUYXJnZXQoZ2FtZU1hcFByb3h5LCBwbGF5ZXJDaGFyYWN0ZXJQcm94eSwgdGFyZ2V0Q2hhcmFjdGVyUHJveHkpKSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlJFU09MVkVfUkFOR0VEX0FUVEFDSywgXCJwbGF5ZXJcIiwgaWQpO1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TVEFSVF9DT01CQVQsIGlkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNIT1dfVE9BU1RfTUVTU0FHRSwgXCJObyBsaW5lIG9mIHNpZ2h0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRBY3Rpb24gPT09ICdhdHRhY2snKSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX0NIQVJBQ1RFUl9BTkRfQVRUQUNLLCBpZCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX0NIQVJBQ1RFUl9BTkRfVEFMSywgaWQpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5DT01CQVQpIHtcbiAgICAgICAgY29uc3QgY29tYmF0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShDb21iYXRQcm94eS5OQU1FKTtcbiAgICAgICAgaWYgKCFjb21iYXRQcm94eSB8fCBjb21iYXRQcm94eS5hY3RpdmVQYXJ0aWNpcGFudCAhPT0gXCJwbGF5ZXJcIikge1xuICAgICAgICAgICAgLy8gbm90IHlvdXIgdHVyblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBsYXllckNoYXJhY3RlclByb3h5LmF2YWlsYWJsZUFjdGlvbnMgPD0gMCkge1xuICAgICAgICAgICAgLy8gb3V0IG9mIGFjdGlvbnNcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIFwiT3V0IG9mIGFjdGlvbnNcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2VhcG9uQ2F0ZWdvcnkgPT09IFwicmFuZ2VkXCIpIHtcbiAgICAgICAgICAgIGlmIChjYW5TZWVUYXJnZXQoZ2FtZU1hcFByb3h5LCBwbGF5ZXJDaGFyYWN0ZXJQcm94eSwgdGFyZ2V0Q2hhcmFjdGVyUHJveHkpKSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlJFU09MVkVfUkFOR0VEX0FUVEFDSywgXCJwbGF5ZXJcIiwgaWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFLCBcIk5vIGxpbmUgb2Ygc2lnaHRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWlzVGFyZ2V0QWRqYWNlbnQocGxheWVyQ2hhcmFjdGVyUHJveHksIHRhcmdldENoYXJhY3RlclByb3h5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGhUb1RhcmdldCA9IG5hdmlnYXRlVG9DaGFyYWN0ZXIocGxheWVyQ2hhcmFjdGVyUHJveHksIHRhcmdldENoYXJhY3RlclByb3h5KTtcbiAgICAgICAgICAgICAgICAvLyBwYXRoIGxlbmd0aCBpbmNsdWRlcyBjdXJyZW50IG5vZGUsIHNvIGRlZHVjdCBvbiB0byB3b3JrIG91dCBhY3R1YWwgbW92ZWFibGUgZGlzdGFuY2VcbiAgICAgICAgICAgICAgICBpZiAocGF0aFRvVGFyZ2V0ICYmIHBhdGhUb1RhcmdldC5sZW5ndGggLSAxIDw9IHBsYXllckNoYXJhY3RlclByb3h5LnZvLmF2YWlsYWJsZU1vdmVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lU3RhdGVQcm94eS5jdXJyZW50QWN0aW9uID09PSAnYXR0YWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHdlYXBvbiB0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTU9WRV9BTE9OR19QQVRIX0FORF9BVFRBQ0ssIFwicGxheWVyXCIsIHRhcmdldENoYXJhY3RlclByb3h5LmlkLCBwYXRoVG9UYXJnZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ09NQkFUX05BVklHQVRFX1RPX05PREUsIFwicGxheWVyXCIsIHBhdGhUb1RhcmdldC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIFwiQ2Fubm90IHJlYWNoIHRhcmdldFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRBY3Rpb24gPT09ICdhdHRhY2snKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRBY3Rpb24gPT09ICdhdHRhY2snKSB7XG4gICAgICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5SRVNPTFZFX0FUVEFDSywgcGxheWVyQ2hhcmFjdGVyUHJveHkuaWQsIHRhcmdldENoYXJhY3RlclByb3h5LmlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5hdmlnYXRlVG9DaGFyYWN0ZXIocGxheWVyQ2hhcmFjdGVyUHJveHksIHRhcmdldENoYXJhY3RlclByb3h5KSB7XG4gICAgY29uc3QgY29ubmVjdGVkTm9kZXMgPSB0YXJnZXRDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZS5jb25uZWN0ZWROb2RlcztcblxuICAgIGNvbnN0IHVub2NjdXBpZWROb2RlcyA9IGNvbm5lY3RlZE5vZGVzLmZpbHRlcihub2RlID0+ICFub2RlLm9jY3VwaWVkKTtcbiAgICBpZiAodW5vY2N1cGllZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgcGxheWVyTm9kZSA9IHBsYXllckNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlO1xuXG4gICAgICAgIGxldCBzaG9ydGVzdFBhdGggPSBBc3Rhci5jYWxjdWxhdGVQYXRoKHBsYXllck5vZGUsIHVub2NjdXBpZWROb2Rlc1swXSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB1bm9jY3VwaWVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG90aGVyUGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgocGxheWVyTm9kZSwgdW5vY2N1cGllZE5vZGVzW2ldKTtcbiAgICAgICAgICAgIGlmIChvdGhlclBhdGgubGVuZ3RoIDwgc2hvcnRlc3RQYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNob3J0ZXN0UGF0aCA9IG90aGVyUGF0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzaG9ydGVzdFBhdGg7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzVGFyZ2V0QWRqYWNlbnQocGxheWVyQ2hhcmFjdGVyUHJveHksIHRhcmdldENoYXJhY3RlclByb3h5KSB7XG4gICAgY29uc3QgdGFyZ2V0Q3VycnJlbnROb2RlID0gdGFyZ2V0Q2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGU7XG4gICAgY29uc3QgY29ubmVjdGVkTm9kZXMgPSBwbGF5ZXJDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZS5jb25uZWN0ZWROb2RlcztcbiAgICByZXR1cm4gY29ubmVjdGVkTm9kZXMuc29tZShuID0+IG4uZXF1YWxzKHRhcmdldEN1cnJyZW50Tm9kZSkpO1xufVxuXG5mdW5jdGlvbiBjYW5TZWVUYXJnZXQoZ2FtZU1hcFByb3h5LCBwbGF5ZXJDaGFyYWN0ZXJQcm94eSwgdGFyZ2V0Q2hhcmFjdGVyUHJveHkpIHtcbiAgICBjb25zdCBwbGF5ZXJQb2ludCA9IGNlbnRlclBvaW50Q2hhcmFjdGVyUHJveHkocGxheWVyQ2hhcmFjdGVyUHJveHkpO1xuICAgIGNvbnN0IHRhcmdldFBvaW50ID0gY2VudGVyUG9pbnRDaGFyYWN0ZXJQcm94eSh0YXJnZXRDaGFyYWN0ZXJQcm94eSk7XG5cbiAgICByZXR1cm4gIWdhbWVNYXBQcm94eS5yYXlJbnRlcnNlY3RzV2FsbChwbGF5ZXJQb2ludCwgdGFyZ2V0UG9pbnQpO1xufVxuIiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSBcIkBrb3JlZXovcHVyZS1tdmNcIjtcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IFdlYXBvbnNQcm94eSB9IGZyb20gJy4uL21vZGVsL3dlYXBvbnMvV2VhcG9uc1Byb3h5JztcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IFdlYXBvblR5cGVzIH0gZnJvbSAnLi4vZGF0YS9XZWFwb25UeXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQXR0YWNrQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgYXR0YWNrZXJJZCA9IGFyZ3NbMF07XG4gICAgY29uc3QgYXR0YWNrZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgYXR0YWNrZXJJZCk7XG4gICAgY29uc3QgZGVmZW5kZXJJZCA9IGFyZ3NbMV07XG4gICAgY29uc3QgZGVmZW5kZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgZGVmZW5kZXJJZCk7XG5cbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBUkFDVEVSX0xPT0tfQVQgKyBhdHRhY2tlcklkLCBkZWZlbmRlclByb3h5LmN1cnJlbnROb2RlKTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBUkFDVEVSX0xPT0tfQVQgKyBkZWZlbmRlcklkLCBhdHRhY2tlclByb3h5LmN1cnJlbnROb2RlKTtcblxuICAgIGNvbnN0IHdlYXBvbnNQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KFdlYXBvbnNQcm94eS5OQU1FKTtcbiAgICBjb25zdCBhdHRhY2tlcldlYXBvblNraWxsID0gYCR7YXR0YWNrZXJQcm94eS5lcXVpcHBlZFdlYXBvbn1GaWdodGluZ2A7XG4gICAgY29uc3QgZGVmZW5kZXJXZWFwb25Ta2lsbCA9IGAke2RlZmVuZGVyUHJveHkuZXF1aXBwZWRXZWFwb259RmlnaHRpbmdgO1xuXG4gICAgY29uc3QgYXR0YWNrZXJTa2lsbFRvdGFsID0gYXR0YWNrZXJQcm94eS5nZXRTa2lsbFRvdGFsKGF0dGFja2VyV2VhcG9uU2tpbGwpO1xuICAgIGNvbnN0IGRlZmVuZGVyU2tpbGxUb3RhbCA9IGF0dGFja2VyUHJveHkuZ2V0U2tpbGxUb3RhbChkZWZlbmRlcldlYXBvblNraWxsKTtcblxuICAgIGNvbnN0IGF0dGFja2VyUm9sbCA9IHJvbGxBdHRhY2tTa2lsbChhdHRhY2tlclNraWxsVG90YWwpO1xuICAgIGNvbnN0IGRlZmVuZGVyUm9sbCA9IHJvbGxBdHRhY2tTa2lsbChkZWZlbmRlclNraWxsVG90YWwpO1xuXG4gICAgLy8gUmVkdWNlIGFjdGlvbnNcbiAgICBhdHRhY2tlclByb3h5LmF2YWlsYWJsZUFjdGlvbnMgLT0gMTtcblxuICAgIC8vIERldGVybWluZSB3aW5uZXJcbiAgICBpZiAoYXR0YWNrZXJSb2xsID09PSBkZWZlbmRlclJvbGwpIHtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfQVRUQUNLICsgYXR0YWNrZXJJZCk7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ESVNQTEFZX0FUVEFDSyArIGRlZmVuZGVySWQpO1xuXG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIGBBdHRhY2sgdGllZCgke2F0dGFja2VyUm9sbH0vJHtkZWZlbmRlclJvbGx9KWApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChhdHRhY2tlclJvbGwgPiBkZWZlbmRlclJvbGwpIHtcbiAgICAgICAgICAgIC8vIEF0dGFja2VyIHdpbnNcbiAgICAgICAgICAgIGNvbnN0IGRhbWFnZVRpZXIgPSBkZXRlcm1pbmVEYW1hZ2VUaWVyKGF0dGFja2VyUm9sbCwgZGVmZW5kZXJSb2xsKTtcbiAgICAgICAgICAgIGNvbnN0IGRhbWFnZSA9IHdlYXBvbnNQcm94eS5nZXREYW1hZ2UoYXR0YWNrZXJQcm94eS5lcXVpcHBlZFdlYXBvbiwgZGFtYWdlVGllcik7XG4gICAgICAgICAgICBkZWZlbmRlclByb3h5LmFwcGx5RGFtYWdlKGRhbWFnZSk7XG5cbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ESVNQTEFZX0FUVEFDSyArIGF0dGFja2VySWQpO1xuXG4gICAgICAgICAgICBpZiAoZGVmZW5kZXJQcm94eS5pc0RlYWQpIHtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuS0lMTF9HQU1FX0NIQVJBQ1RFUiwgZGVmZW5kZXJJZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ESVNQTEFZX0hJVCArIGRlZmVuZGVySWQpO1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIGAke2F0dGFja2VySWR9IGRhbWFnZXMgJHtkZWZlbmRlcklkfSBmb3IgJHtkYW1hZ2V9YCk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgd2VhcG9uQ2F0ZWdvcnkgPSB3ZWFwb25zUHJveHkuZ2V0V2VhcG9uQ2F0ZWdvcnkoZGVmZW5kZXJQcm94eS5lcXVpcHBlZFdlYXBvbik7XG4gICAgICAgICAgICBjb25zdCBoYXNNZWxlZVdlYXBvbiA9IHdlYXBvbkNhdGVnb3J5ID09PSBcIm1lbGVlXCI7XG5cbiAgICAgICAgICAgIC8vIERlZmVuZGVyIHdpbnNcbiAgICAgICAgICAgIGNvbnN0IGRhbWFnZVRpZXIgPSBkZXRlcm1pbmVEYW1hZ2VUaWVyKGRlZmVuZGVyUm9sbCwgYXR0YWNrZXJSb2xsKTtcbiAgICAgICAgICAgIGNvbnN0IHdlYXBvbiA9IChoYXNNZWxlZVdlYXBvbikgPyBkZWZlbmRlclByb3h5LmVxdWlwcGVkV2VhcG9uIDogV2VhcG9uVHlwZXMuVU5BUk1FRDtcbiAgICAgICAgICAgIGNvbnN0IGRhbWFnZSA9IHdlYXBvbnNQcm94eS5nZXREYW1hZ2Uod2VhcG9uLCBkYW1hZ2VUaWVyKTtcbiAgICAgICAgICAgIGF0dGFja2VyUHJveHkuYXBwbHlEYW1hZ2UoZGFtYWdlKTtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIGAke2RlZmVuZGVySWR9IGRhbWFnZXMgJHthdHRhY2tlcklkfSBmb3IgJHtkYW1hZ2V9YCk7XG5cbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ESVNQTEFZX0FUVEFDSyArIGRlZmVuZGVySWQpO1xuXG4gICAgICAgICAgICBpZiAoYXR0YWNrZXJQcm94eS5pc0RlYWQpIHtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuS0lMTF9HQU1FX0NIQVJBQ1RFUiwgYXR0YWNrZXJJZCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfSElUICsgYXR0YWNrZXJJZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGNvbWJhdFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoQ29tYmF0UHJveHkuTkFNRSk7XG4gICAgaWYgKGNvbWJhdFByb3h5ICYmIGNvbWJhdFByb3h5LmFjdGl2ZVBhcnRpY2lwYW50ICE9PSBcInBsYXllclwiKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRFVEVSTUlORV9ORVhUX0VORU1ZX0FDVElPTiwgYXR0YWNrZXJJZCk7XG5cbiAgICAgICAgfSwgMTUwMCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZXRlcm1pbmVEYW1hZ2VUaWVyKGhpZ2hEYW1hZ2UsIGxvd0RhbWFnZSkge1xuICAgIHJldHVybiBoaWdoRGFtYWdlIC0gbG93RGFtYWdlO1xufVxuXG5mdW5jdGlvbiByb2xsQXR0YWNrU2tpbGwoc2tpbGwpIHtcbiAgICByZXR1cm4gc2tpbGwgKyByb2xsRGljZSgpICsgcm9sbERpY2UoKTtcbn1cblxuZnVuY3Rpb24gcm9sbERpY2UoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDYpO1xufSIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyTWVkaWF0b3IgfSBmcm9tICcuLi92aWV3L2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3Rlck1lZGlhdG9yJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVBbG9uZ1BhdGhBbmRBdHRhY2tDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IGFyZ3NbMF07XG4gICAgY29uc3QgdGFyZ2V0SWQgPSBhcmdzWzFdO1xuICAgIGNvbnN0IHBhdGggPSBhcmdzWzJdO1xuXG4gICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGNoYXJhY3RlcklkKTtcbiAgICBjaGFyYWN0ZXJQcm94eS51c2VNb3ZlbWVudChwYXRoLmxlbmd0aCAtIDEpO1xuICAgIGNvbnN0IGNoYXJhY3Rlck1lZGlhdG9yID0gZmFjYWRlLnJldHJpZXZlTWVkaWF0b3IoR2FtZUNoYXJhY3Rlck1lZGlhdG9yLk5BTUUgKyBjaGFyYWN0ZXJJZCk7XG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkhJREVfV0FMS0FCTEVfQVJFQSk7XG5cbiAgICBjb25zdCBmaW5pc2hNb3ZlUHJvbWlzZSA9IGNoYXJhY3Rlck1lZGlhdG9yLmhhbmRsZU5hdmlnYXRlQWxvbmdQYXRoV2l0aFByb21pc2UocGF0aCk7XG4gICAgZmluaXNoTW92ZVByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5SRVNPTFZFX0FUVEFDSywgY2hhcmFjdGVySWQsIHRhcmdldElkKTtcblxuICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSBcIkBrb3JlZXovcHVyZS1tdmNcIjtcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcblxuXG5leHBvcnQgZnVuY3Rpb24ga2lsbEdhbWVDaGFyYWN0ZXJDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IGFyZ3NbMF07XG4gICAgY29uc29sZS5sb2coYEtpbGwgY2hhcmFjdGVyOjogJHtjaGFyYWN0ZXJJZH1gKTtcbiAgICBjb25zdCBjaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgY2hhcmFjdGVySWQpO1xuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ESVNQTEFZX0ZMT0FUSU5HX1NUQVRVUywgXCJkZWF0aFwiLCBjaGFyYWN0ZXJQcm94eSk7XG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfREVBVEggKyBjaGFyYWN0ZXJJZCk7XG5cblxuICAgIGlmIChjaGFyYWN0ZXJQcm94eSkge1xuICAgICAgICBjaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZS5vY2N1cGllZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbWJhdFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoQ29tYmF0UHJveHkuTkFNRSk7XG4gICAgaWYgKGNvbWJhdFByb3h5KSB7XG4gICAgICAgIGNvbWJhdFByb3h5LnJlbW92ZUNoYXJhY3RlckZyb21Db21iYXQoY2hhcmFjdGVySWQpO1xuICAgIH1cblxufSIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBDb21iYXRQcm94eSB9IGZyb20gJy4uL21vZGVsL2NvbWJhdC9Db21iYXRQcm94eSc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmRDb21iYXRDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgbG9zaW5nVGVhbSA9IGFyZ3NbMF07XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBpZiAoZmFjYWRlLmhhc01lZGlhdG9yKENvbWJhdFByb3h5Lk5BTUUpKSB7XG4gICAgICAgIGZhY2FkZS5yZW1vdmVNZWRpYXRvcihDb21iYXRQcm94eS5OQU1FKTtcbiAgICB9XG5cbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuSElERV9XQUxLQUJMRV9BUkVBKTtcblxuXG4gICAgY29uc3QgZ2FtZVN0YXRlUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcblxuICAgIGlmIChsb3NpbmdUZWFtID09PSAncGxheWVyX3RlYW0nKSB7XG4gICAgICAgIGdhbWVTdGF0ZVByb3h5LnVwZGF0ZUdhbWVTdGF0ZVR5cGUoZ2FtZXBsYXlNb2RlVHlwZXMuR0FNRV9PVkVSKTtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNIT1dfVE9BU1RfTUVTU0FHRSwgYEdhbWUgT3ZlcmApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGdhbWVTdGF0ZVByb3h5LnVwZGF0ZUdhbWVTdGF0ZVR5cGUoZ2FtZXBsYXlNb2RlVHlwZXMuRVhQTE9SQVRJT04pO1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFLCBgVmljdG9yeWApO1xuICAgIH1cbn1cbiIsIlxuaW1wb3J0IHsgQmFzaWNNZWxlZVRyZWUgfSBmcm9tICcuLi9iZWhhdmlvdXJUcmVlL3RyZWVzL0Jhc2ljTWVsZWVUcmVlJztcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuaW1wb3J0IHsgQm90QmVoYXZpb3VyVHlwZXMgfSBmcm9tICcuLi9iZWhhdmlvdXJUcmVlL0JvdEJlaGF2aW91clR5cGVzJztcbmltcG9ydCB7IEJhc2ljUmFuZ2VkVHJlZSB9IGZyb20gJy4uL2JlaGF2aW91clRyZWUvdHJlZXMvQmFzaWNSYW5nZWRUcmVlJztcbmltcG9ydCB7IEJvdEJlaGF2aW91clByb3h5IH0gZnJvbSAnLi4vbW9kZWwvYm90QmVoYXZpb3VyL0JvdEJlaGF2aW91clByb3h5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluZUVuZW15QWN0aW9uQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG5cbiAgICBjb25zdCBlbmVteUlkID0gYXJnc1swXTtcbiAgICBjb25zdCBlbmVteVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBlbmVteUlkKTtcbiAgICBjb25zdCBib3RCZWhhdmlvdXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEJvdEJlaGF2aW91clByb3h5Lk5BTUUpO1xuICAgIGNvbnN0IHRyZWUgPSBib3RCZWhhdmlvdXJQcm94eS5nZXRUcmVlKGVuZW15UHJveHkuYm90QmVoYXZpb3VyKTtcbiAgICBpZiAodHJlZSkge1xuICAgICAgICB0cmVlLnJ1bkNvbW1hbmRzKGZhY2FkZSwgZW5lbXlJZCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSBcIkBrb3JlZXovcHVyZS1tdmNcIjtcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IFdlYXBvbnNQcm94eSB9IGZyb20gJy4uL21vZGVsL3dlYXBvbnMvV2VhcG9uc1Byb3h5JztcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IFByb2plY3RpbGVDcmVhdG9yTWVkaWF0b3IgfSBmcm9tICcuLi92aWV3L3Byb2plY3RpbGVzL1Byb2plY3RpbGVDcmVhdG9yTWVkaWF0b3InO1xuaW1wb3J0IHsgR2FtZU1hcFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZU1hcC9HYW1lTWFwUHJveHknO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVJhbmdlZEF0dGFja0NvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuXG4gICAgLy8gU2NvcmVzIGZvciBjb21wYXJpc3NvblxuICAgIGxldCBhdHRhY2tlclNjb3JlID0gMDtcbiAgICBsZXQgZGVmZW5kZXJTY29yZSA9IDA7XG5cbiAgICBjb25zdCBhdHRhY2tlcklkID0gYXJnc1swXTtcbiAgICBjb25zdCBhdHRhY2tlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBhdHRhY2tlcklkKTtcbiAgICBjb25zdCBhdHRhY2tlck5vZGUgPSBhdHRhY2tlclByb3h5LmN1cnJlbnROb2RlO1xuICAgIGxldCBkZWZlbmRlcklkID0gYXJnc1sxXTtcbiAgICBsZXQgZGVmZW5kZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgZGVmZW5kZXJJZCk7XG4gICAgY29uc3QgZGVmZW5kZXJOb2RlID0gZGVmZW5kZXJQcm94eS5jdXJyZW50Tm9kZTtcblxuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5DSEFSQUNURVJfTE9PS19BVCArIGF0dGFja2VySWQsIGRlZmVuZGVyUHJveHkuY3VycmVudE5vZGUpO1xuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5DSEFSQUNURVJfTE9PS19BVCArIGRlZmVuZGVySWQsIGF0dGFja2VyUHJveHkuY3VycmVudE5vZGUpO1xuXG4gICAgY29uc3QgYXR0YWNrZXJXZWFwb25Ta2lsbCA9IGAke2F0dGFja2VyUHJveHkuZXF1aXBwZWRXZWFwb259RmlnaHRpbmdgO1xuICAgIGNvbnN0IGF0dGFja2VyU2tpbGxUb3RhbCA9IGF0dGFja2VyUHJveHkuZ2V0U2tpbGxUb3RhbChhdHRhY2tlcldlYXBvblNraWxsKTtcblxuICAgIGF0dGFja2VyU2NvcmUgKz0gcm9sbEF0dGFja1NraWxsKGF0dGFja2VyU2tpbGxUb3RhbCk7XG4gICAgZGVmZW5kZXJTY29yZSArPSByb2xsQXR0YWNrU2tpbGwoZGVmZW5kZXJQcm94eS5za2lsbCk7XG5cbiAgICBjb25zdCB3ZWFwb25zUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShXZWFwb25zUHJveHkuTkFNRSk7XG4gICAgY29uc3QgZ2FtZU1hcFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZU1hcFByb3h5Lk5BTUUpO1xuICAgIGNvbnN0IGlzSW5Db3ZlciA9IGdhbWVNYXBQcm94eS5pc0luQ292ZXIoXG4gICAgICAgIG5ldyBwYy5WZWMzKGRlZmVuZGVyTm9kZS54LCBkZWZlbmRlck5vZGUueSwgZGVmZW5kZXJOb2RlLnopLFxuICAgICAgICBuZXcgcGMuVmVjMyhhdHRhY2tlck5vZGUueCwgYXR0YWNrZXJOb2RlLnksIGF0dGFja2VyTm9kZS56KSk7XG5cbiAgICBpZiAoaXNJbkNvdmVyKSB7XG4gICAgICAgIGRlZmVuZGVyU2NvcmUgKz0gMjtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9qZWN0aWxlQ3JlYXRvck1lZGlhdG9yID0gZmFjYWRlLnJldHJpZXZlTWVkaWF0b3IoUHJvamVjdGlsZUNyZWF0b3JNZWRpYXRvci5OQU1FKTtcbiAgICAvLyBUT0RPOiBtYWtlIHRoaXMgbW9yZSBzb3BoaXN0aWNhdGVkXG4gICAgY29uc3QgcHJvamVjdGlsZU9yaWdpbiA9IG5ldyBwYy5WZWMzKGF0dGFja2VyUHJveHkuY3VycmVudE5vZGUueCxcbiAgICAgICAgYXR0YWNrZXJQcm94eS5jdXJyZW50Tm9kZS55ICsgMSwgYXR0YWNrZXJQcm94eS5jdXJyZW50Tm9kZS56KTtcblxuICAgIGNvbnN0IHByb2plY3RpbGVUYXJnZXQgPSBuZXcgcGMuVmVjMyhkZWZlbmRlclByb3h5LmN1cnJlbnROb2RlLngsXG4gICAgICAgIGRlZmVuZGVyUHJveHkuY3VycmVudE5vZGUueSArIDEsIGRlZmVuZGVyUHJveHkuY3VycmVudE5vZGUueik7XG5cbiAgICAvLyBSZWR1Y2UgYWN0aW9uc1xuICAgIGF0dGFja2VyUHJveHkuYXZhaWxhYmxlQWN0aW9ucyAtPSAxO1xuXG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfQVRUQUNLICsgYXR0YWNrZXJJZCk7XG4gICAgcHJvamVjdGlsZUNyZWF0b3JNZWRpYXRvci5jcmVhdGVQcm9qZWN0aWxlKCdjcm9zc2Jvd19ib2x0JywgcHJvamVjdGlsZU9yaWdpbiwgcHJvamVjdGlsZVRhcmdldClcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIG91dGNvbWVcbiAgICAgICAgICAgIGlmIChhdHRhY2tlclNjb3JlID4gZGVmZW5kZXJTY29yZSkge1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGFyZ2V0IGlzIGluIG1lbGVlIGFuZCByb2xsIGZvciBuZXcgdGFyZ2V0XG4gICAgICAgICAgICAgICAgY29uc3QgY29tYmF0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShDb21iYXRQcm94eS5OQU1FKTtcbiAgICAgICAgICAgICAgICBpZiAoY29tYmF0UHJveHkpIHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZWlnaGJvdXJpbmdOb2RlcyA9IGRlZmVuZGVyUHJveHkuY3VycmVudE5vZGUuY29ubmVjdGVkTm9kZXM7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc3NpYmxlVGFyZ2V0cyA9IFtkZWZlbmRlcklkXTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcnRpY2lwYW50IG9mIGNvbWJhdFByb3h5LnBhcnRpY2lwYW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFydGljaXBhbnRQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgcGFydGljaXBhbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJ0aWNpcGFudFByb3h5LmlzRGVhZCAmJiBuZWlnaGJvdXJpbmdOb2Rlcy5zb21lKG4gPT4gbi5lcXVhbHMocGFydGljaXBhbnRQcm94eS5jdXJyZW50Tm9kZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zc2libGVUYXJnZXRzLnB1c2gocGFydGljaXBhbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmZW5kZXJJZCA9IHBvc3NpYmxlVGFyZ2V0c1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZVRhcmdldHMubGVuZ3RoKV07XG4gICAgICAgICAgICAgICAgICAgIGRlZmVuZGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGRlZmVuZGVySWQpO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgLy8gQXR0YWNrZXIgd2luc1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhbWFnZVRpZXIgPSBkZXRlcm1pbmVEYW1hZ2VUaWVyKGF0dGFja2VyU2NvcmUsIGRlZmVuZGVyU2NvcmUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhbWFnZSA9IHdlYXBvbnNQcm94eS5nZXREYW1hZ2UoYXR0YWNrZXJQcm94eS5lcXVpcHBlZFdlYXBvbiwgZGFtYWdlVGllcik7XG4gICAgICAgICAgICAgICAgZGVmZW5kZXJQcm94eS5hcHBseURhbWFnZShkYW1hZ2UpO1xuXG5cbiAgICAgICAgICAgICAgICBpZiAoZGVmZW5kZXJQcm94eS5pc0RlYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLktJTExfR0FNRV9DSEFSQUNURVIsIGRlZmVuZGVySWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ESVNQTEFZX0hJVCArIGRlZmVuZGVySWQpO1xuICAgICAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFLCBgJHthdHRhY2tlcklkfSBkYW1hZ2VzICR7ZGVmZW5kZXJJZH0gZm9yICR7ZGFtYWdlfWApO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIERlZmVuZGVyIHdpbnNcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRElTUExBWV9GTE9BVElOR19TVEFUVVMsIFwiZG9kZ2VcIiwgZGVmZW5kZXJQcm94eSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbWJhdFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoQ29tYmF0UHJveHkuTkFNRSk7XG4gICAgICAgICAgICBpZiAoY29tYmF0UHJveHkgJiYgY29tYmF0UHJveHkuYWN0aXZlUGFydGljaXBhbnQgIT09IFwicGxheWVyXCIpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRFVEVSTUlORV9ORVhUX0VORU1ZX0FDVElPTiwgYXR0YWNrZXJJZCk7XG5cbiAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gZGV0ZXJtaW5lRGFtYWdlVGllcihoaWdoRGFtYWdlLCBsb3dEYW1hZ2UpIHtcbiAgICByZXR1cm4gaGlnaERhbWFnZSAtIGxvd0RhbWFnZTtcbn1cblxuZnVuY3Rpb24gcm9sbEF0dGFja1NraWxsKHNraWxsKSB7XG4gICAgcmV0dXJuIHNraWxsICsgcm9sbERpY2UoKSArIHJvbGxEaWNlKCk7XG59XG5cbmZ1bmN0aW9uIHJvbGxEaWNlKCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA2KTtcbn0iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk8nO1xuaW1wb3J0IHsgQ29tYmF0UHJveHkgfSBmcm9tICcuLi9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHknO1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1aXBXZWFwb25Db21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcblxuICAgIGNvbnN0IGdhbWVTdGF0ZVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZVN0YXRlUHJveHkuTkFNRSk7XG4gICAgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5DT01CQVQpIHtcbiAgICAgICAgY29uc3QgY29tYmF0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShDb21iYXRQcm94eS5OQU1FKTtcbiAgICAgICAgaWYgKGNvbWJhdFByb3h5LmFjdGl2ZVBhcnRpY2lwYW50ICE9PSBcInBsYXllclwiKSB7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFLCBgTXVzdCBjaGFuZ2Ugd2VhcG9uIG9uIHlvdXIgdHVybmApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY2hhcmFjdGVySWQgPSBhcmdzWzBdO1xuICAgIGNvbnN0IHdlYXBvbiA9IGFyZ3NbMV07XG5cbiAgICBjb25zdCBjaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgY2hhcmFjdGVySWQpO1xuXG4gICAgaWYgKGNoYXJhY3RlclByb3h5KSB7XG4gICAgICAgIGNoYXJhY3RlclByb3h5LmVxdWlwcGVkV2VhcG9uID0gd2VhcG9uO1xuXG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIGAke2NoYXJhY3RlcklkfSBlcXVpcHMgJHt3ZWFwb259YCk7XG4gICAgfVxufSIsImltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZU1hcFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZU1hcC9HYW1lTWFwUHJveHknO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3Rlck1lZGlhdG9yIH0gZnJvbSAnLi4vdmlldy9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJNZWRpYXRvcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBuYXZpZ2F0ZVRocm91Z2hQb3J0YWxDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBzdGFuZGluZ1Bvc2l0aW9uID0gYXJnc1swXTtcbiAgICBjb25zdCBkZXN0aW5hdGlvblNjZW5lID0gYXJnc1sxXTtcbiAgICBjb25zdCBkZXN0aW5hdGlvblBvcnRhbCA9IGFyZ3NbMl07XG5cbiAgICBjb25zdCBnYW1lTWFwUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lTWFwUHJveHkuTkFNRSk7XG4gICAgY29uc3Qgc3RhbmRpbmdOb2RlID0gZ2FtZU1hcFByb3h5LmZpbmROZWFyZXN0Tm9kZShzdGFuZGluZ1Bvc2l0aW9uKTtcbiAgICBjb25zdCBwbGF5ZXJNZWRpYXRvciA9IGZhY2FkZS5yZXRyaWV2ZU1lZGlhdG9yKEdhbWVDaGFyYWN0ZXJNZWRpYXRvci5OQU1FICsgXCJwbGF5ZXJcIik7XG5cbiAgICBwbGF5ZXJNZWRpYXRvci5tb3ZlVG9Ob2RlV2l0aFByb21pc2Uoc3RhbmRpbmdOb2RlKVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FLCBkZXN0aW5hdGlvblNjZW5lLCBkZXN0aW5hdGlvblBvcnRhbCk7XG4gICAgICAgIH0pO1xufSIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lTWFwUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lTWFwL0dhbWVNYXBQcm94eSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRQbGF5ZXJDaGFyYWN0ZXJUb01hcENvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuXG4gICAgY29uc3QgcG9ydGFsSWQgPSBhcmdzWzBdO1xuICAgIGNvbnN0IGFwcCA9IHBjLkFwcGxpY2F0aW9uLmdldEFwcGxpY2F0aW9uKCk7XG4gICAgY29uc3QgcGxheWVyQ2hhcmFjdGVyQXNzZXQgPSBhcHAuYXNzZXRzLmdldCg0MDUyMzMzNik7XG4gICAgY29uc3QgY29udGFpbmVyID0gYXBwLnJvb3QuZmluZEJ5TmFtZShcIldvcmxkT2JqZWN0c1wiKTtcbiAgICBjb25zdCBwbGF5ZXJFbnRpdHkgPSBwbGF5ZXJDaGFyYWN0ZXJBc3NldC5yZXNvdXJjZS5pbnN0YW50aWF0ZSgpO1xuICAgIGNvbnRhaW5lci5hZGRDaGlsZChwbGF5ZXJFbnRpdHkpO1xuXG4gICAgY29uc3QgbWFwUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lTWFwUHJveHkuTkFNRSk7XG4gICAgY29uc3QgcG9ydGFsID0gbWFwUHJveHkucmV0cmlldmVQb3J0YWwocG9ydGFsSWQpO1xuICAgIHBsYXllckVudGl0eS5zZXRMb2NhbFBvc2l0aW9uKHBvcnRhbC5zdGFuZGluZ1BvaW50KTtcblxuXG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJNZWRpYXRvciB9IGZyb20gJy4uL3ZpZXcvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyTWVkaWF0b3InO1xuaW1wb3J0IHsgQXN0YXIgfSBmcm9tICcuLi9tb2RlbC9nYW1lTWFwL25hdmlnYXRpb24vQXN0YXInO1xuXG5leHBvcnQgZnVuY3Rpb24gbmF2aWdhdGVUb0NoYXJhY3RlckFuZFRhbGtDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcblxuICAgIGNvbnN0IHRhcmdldENoYXJhY3RlcklkID0gYXJnc1swXTtcblxuICAgIGNvbnN0IHBsYXllckNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBcInBsYXllclwiKTtcbiAgICBjb25zdCB0YXJnZXRDaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgdGFyZ2V0Q2hhcmFjdGVySWQpO1xuXG4gICAgY29uc3QgcGxheWVyQ2hhcmFjdGVyTWVkaWF0b3IgPSBmYWNhZGUucmV0cmlldmVNZWRpYXRvcihHYW1lQ2hhcmFjdGVyTWVkaWF0b3IuTkFNRSArIFwicGxheWVyXCIpO1xuXG5cbiAgICBjb25zdCBwYXRoVG9UYXJnZXQgPSBuYXZpZ2F0ZVRvQ2hhcmFjdGVyKHBsYXllckNoYXJhY3RlclByb3h5LCB0YXJnZXRDaGFyYWN0ZXJQcm94eSk7XG4gICAgaWYgKHBhdGhUb1RhcmdldCkge1xuICAgICAgICBwbGF5ZXJDaGFyYWN0ZXJNZWRpYXRvci5oYW5kbGVOYXZpZ2F0ZUFsb25nUGF0aFdpdGhQcm9taXNlKHBhdGhUb1RhcmdldCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU1RBUlRfRElBTE9HVUUsIHRhcmdldENoYXJhY3RlcklkKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBuYXZpZ2F0ZVRvQ2hhcmFjdGVyKHBsYXllckNoYXJhY3RlclByb3h5LCB0YXJnZXRDaGFyYWN0ZXJQcm94eSkge1xuICAgIGNvbnN0IGNvbm5lY3RlZE5vZGVzID0gdGFyZ2V0Q2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUuY29ubmVjdGVkTm9kZXM7XG4gICAgY29uc3QgcGxheWVyTm9kZSA9IHBsYXllckNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlO1xuXG4gICAgY29uc3QgaXNBZGphY2VudCA9IGNvbm5lY3RlZE5vZGVzLnNvbWUobiA9PiBuLmVxdWFscyhwbGF5ZXJOb2RlKSk7XG5cbiAgICBpZiAoaXNBZGphY2VudCkge1xuICAgICAgICAvLyBBbHJlYWR5IHRoZXJlXG4gICAgICAgIHJldHVybiBbcGxheWVyTm9kZV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdW5vY2N1cGllZE5vZGVzID0gY29ubmVjdGVkTm9kZXMuZmlsdGVyKG5vZGUgPT4gIW5vZGUub2NjdXBpZWQpO1xuICAgICAgICBpZiAodW5vY2N1cGllZE5vZGVzLmxlbmd0aCA+IDApIHtcblxuICAgICAgICAgICAgbGV0IHNob3J0ZXN0UGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgocGxheWVyTm9kZSwgdW5vY2N1cGllZE5vZGVzWzBdKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB1bm9jY3VwaWVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvdGhlclBhdGggPSBBc3Rhci5jYWxjdWxhdGVQYXRoKHBsYXllck5vZGUsIHVub2NjdXBpZWROb2Rlc1tpXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzaG9ydGVzdFBhdGggfHwgKG90aGVyUGF0aCAmJiBvdGhlclBhdGgubGVuZ3RoIDwgc2hvcnRlc3RQYXRoLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRlc3RQYXRoID0gb3RoZXJQYXRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNob3J0ZXN0UGF0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn0iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk8nO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgU3RvcnlQcm94eSB9IGZyb20gJy4uL21vZGVsL3N0b3J5UHJveHkvU3RvcnlQcm94eSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydERpYWxvZ3VlQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgZ2FtZXN0YXRlUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcbiAgICBjb25zdCB0YXJnZXRDaGFyYWN0ZXJJZCA9IGFyZ3NbMF07XG5cbiAgICBjb25zdCBzdG9yeVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoU3RvcnlQcm94eS5OQU1FKTtcblxuICAgIGNvbnN0IHBsYXllckNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBcInBsYXllclwiKVxuICAgIGNvbnN0IHRhcmdldENoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0YXJnZXRDaGFyYWN0ZXJJZCk7XG4gICAgY29uc3QgZGlhbG9ndWVUcmVlID0gdGFyZ2V0Q2hhcmFjdGVyUHJveHkuZGlhbG9ndWVUcmVlO1xuICAgIGNvbnN0IHN0b3J5VHJlZSA9IHN0b3J5UHJveHkuc3RhcnREaWFsb2d1ZVRyZWUoZGlhbG9ndWVUcmVlKTtcblxuICAgIGdhbWVzdGF0ZVByb3h5LnVwZGF0ZUdhbWVTdGF0ZVR5cGUoZ2FtZXBsYXlNb2RlVHlwZXMuRElBTE9HVUUpO1xuXG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkNIQVJBQ1RFUl9MT09LX0FUICsgXCJwbGF5ZXJcIiwgdGFyZ2V0Q2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUpO1xuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5DSEFSQUNURVJfTE9PS19BVCArIHRhcmdldENoYXJhY3RlcklkLCBwbGF5ZXJDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSk7XG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNIT1dfRElBTE9HVUVfUEFORUwpO1xuXG4gICAgY29uc3Qgb3BlbmluZ1N0ZXAgPSBzdG9yeVByb3h5LmdldEN1cnJlbnROb2RlU3RlcCgpO1xuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ESVNQTEFZX0RJQUxPR1VFX1NURVAsIHtcbiAgICAgICAgdHJlZUlkOiBkaWFsb2d1ZVRyZWUsXG4gICAgICAgIHN0ZXA6IG9wZW5pbmdTdGVwXG4gICAgfSk7XG59IiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSAnQGtvcmVlei9wdXJlLW12Yyc7XG5pbXBvcnQgeyBTdG9yeVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvc3RvcnlQcm94eS9TdG9yeVByb3h5JztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRpbnVlRGlhbG9ndWVUZXh0Q29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3Qgc3RvcnlQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KFN0b3J5UHJveHkuTkFNRSk7XG4gICAgY29uc3QgbmV4dFN0ZXAgPSBzdG9yeVByb3h5LmNvbnRpbnVlQ3VycmVudE5vZGVTdGVwKCk7XG4gICAgaWYgKG5leHRTdGVwKSB7XG5cbiAgICAgICAgaWYgKG5leHRTdGVwLmNob2ljZXMpIHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ISURFX0RJQUxPR1VFX0NPTlRJTlVFX0JVVFRPTik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19ESUFMT0dVRV9DT05USU5VRV9CVVRUT04pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHRTdGVwLm5vdGlmaWNhdGlvbnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgbm90aWZpY2F0aW9uIG9mIG5leHRTdGVwLm5vdGlmaWNhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24ubmFtZSwgLi4ubm90aWZpY2F0aW9uLmFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfRElBTE9HVUVfU1RFUCwge1xuICAgICAgICAgICAgdHJlZUlkOiBzdG9yeVByb3h5LmN1cnJlbnRUcmVlLFxuICAgICAgICAgICAgc3RlcDogbmV4dFN0ZXBcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkVORF9ESUFMT0dVRSk7XG4gICAgfVxufSIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgU3RvcnlQcm94eSB9IGZyb20gJy4uL21vZGVsL3N0b3J5UHJveHkvU3RvcnlQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3REaWFsb2d1ZUNob2ljZUNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGNvbnN0IGNob2ljZUluZGV4ID0gYXJnc1swXTtcbiAgICBjb25zdCBzdG9yeVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoU3RvcnlQcm94eS5OQU1FKTtcbiAgICBjb25zdCBzZWxlY3RlZENob2ljZSA9IHN0b3J5UHJveHkuc2VsZWN0Q2hvaWNlKGNob2ljZUluZGV4KTtcblxuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5DTEVBUl9ESUFMT0dVRV9DSE9JQ0VTKTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICB0aXRsZTogXCJZT1VcIixcbiAgICAgICAgdGV4dDogc2VsZWN0ZWRDaG9pY2UudGV4dCxcbiAgICAgICAgdGl0bGVDb2xvdXI6ICcjREI4MzFDJ1xuICAgIH1cblxuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ESVNQTEFZX0RJQUxPR1VFX1NURVAsIHtcbiAgICAgICAgdHJlZUlkOiBzdG9yeVByb3h5LmN1cnJlbnRUcmVlLFxuICAgICAgICBzdGVwOiByZXNwb25zZVxuICAgIH0pO1xuXG4gICAgaWYgKHNlbGVjdGVkQ2hvaWNlLnRlc3QpIHtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlJFU09MVkVfRElBTE9HVUVfU0tJTExfVEVTVCwgc2VsZWN0ZWRDaG9pY2UudGVzdCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2VsZWN0ZWRDaG9pY2UuZ290bykge1xuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkdPX1RPX0RJQUxPR1VFX05PREUsIHNlbGVjdGVkQ2hvaWNlLmdvdG8pO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgU3RvcnlQcm94eSB9IGZyb20gJy4uL21vZGVsL3N0b3J5UHJveHkvU3RvcnlQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnb1RvRGlhbG9ndWVOb2RlQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3Qgc3RvcnlQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KFN0b3J5UHJveHkuTkFNRSk7XG4gICAgY29uc3QgbmV3Tm9kZSA9IGFyZ3NbMF07XG4gICAgc3RvcnlQcm94eS5nb1RvTm9kZShuZXdOb2RlKTtcbiAgICBjb25zdCBjdXJyZW50U3RlcCA9IHN0b3J5UHJveHkuZ2V0Q3VycmVudE5vZGVTdGVwKCk7XG5cbiAgICBpZiAoY3VycmVudFN0ZXApIHtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNIT1dfRElBTE9HVUVfQ09OVElOVUVfQlVUVE9OKTtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfRElBTE9HVUVfU1RFUCwge1xuICAgICAgICAgICAgdHJlZUlkOiBzdG9yeVByb3h5LmN1cnJlbnRUcmVlLFxuICAgICAgICAgICAgc3RlcDogY3VycmVudFN0ZXBcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiKioqKipcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKGN1cnJlbnRTdGVwKTtcblxuICAgICAgICBpZiAoY3VycmVudFN0ZXAubm90aWZpY2F0aW9ucykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBub3RpZmljYXRpb24gb2YgY3VycmVudFN0ZXAubm90aWZpY2F0aW9ucykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBTSE9PVCBDT01NQU5EOiAke25vdGlmaWNhdGlvbi5uYW1lfWApO1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbi5uYW1lLCAuLi5ub3RpZmljYXRpb24uYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRU5EX0RJQUxPR1VFKTtcbiAgICB9XG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVTdGF0ZVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVByb3h5JztcbmltcG9ydCB7IGdhbWVwbGF5TW9kZVR5cGVzIH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVZPJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGVuZERpYWxvZ3VlQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgZ2FtZXN0YXRlUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcbiAgICBnYW1lc3RhdGVQcm94eS51cGRhdGVHYW1lU3RhdGVUeXBlKGdhbWVwbGF5TW9kZVR5cGVzLkVYUExPUkFUSU9OKTtcblxuXG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkhJREVfRElBTE9HVUVfUEFORUwpO1xuXG59XG4iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3Rlck1lZGlhdG9yIH0gZnJvbSAnLi4vdmlldy9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJNZWRpYXRvcic7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBuYXZpZ2F0ZVRvQ2hhcmFjdGVyQW5kQXR0YWNrQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG5cbiAgICBjb25zdCB0YXJnZXRDaGFyYWN0ZXJJZCA9IGFyZ3NbMF07XG5cbiAgICBjb25zdCBwbGF5ZXJDaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgXCJwbGF5ZXJcIik7XG4gICAgY29uc3QgdGFyZ2V0Q2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHRhcmdldENoYXJhY3RlcklkKTtcblxuICAgIGNvbnN0IHBsYXllckNoYXJhY3Rlck1lZGlhdG9yID0gZmFjYWRlLnJldHJpZXZlTWVkaWF0b3IoR2FtZUNoYXJhY3Rlck1lZGlhdG9yLk5BTUUgKyBcInBsYXllclwiKTtcblxuXG4gICAgY29uc3QgcGF0aFRvVGFyZ2V0ID0gbmF2aWdhdGVUb0NoYXJhY3RlcihwbGF5ZXJDaGFyYWN0ZXJQcm94eSwgdGFyZ2V0Q2hhcmFjdGVyUHJveHkpO1xuICAgIGlmIChwYXRoVG9UYXJnZXQpIHtcbiAgICAgICAgcGxheWVyQ2hhcmFjdGVyTWVkaWF0b3IuaGFuZGxlTmF2aWdhdGVBbG9uZ1BhdGhXaXRoUHJvbWlzZShwYXRoVG9UYXJnZXQpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNUQVJUX0NPTUJBVCwgdGFyZ2V0Q2hhcmFjdGVySWQpO1xuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlJFU09MVkVfQVRUQUNLLCBcInBsYXllclwiLCB0YXJnZXRDaGFyYWN0ZXJJZCk7XG5cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBuYXZpZ2F0ZVRvQ2hhcmFjdGVyKHBsYXllckNoYXJhY3RlclByb3h5LCB0YXJnZXRDaGFyYWN0ZXJQcm94eSkge1xuICAgIGNvbnN0IGNvbm5lY3RlZE5vZGVzID0gdGFyZ2V0Q2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUuY29ubmVjdGVkTm9kZXM7XG4gICAgY29uc3QgcGxheWVyTm9kZSA9IHBsYXllckNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlO1xuXG4gICAgY29uc3QgaXNBZGphY2VudCA9IGNvbm5lY3RlZE5vZGVzLnNvbWUobiA9PiBuLmVxdWFscyhwbGF5ZXJOb2RlKSk7XG5cbiAgICBpZiAoaXNBZGphY2VudCkge1xuICAgICAgICAvLyBBbHJlYWR5IHRoZXJlXG4gICAgICAgIHJldHVybiBbcGxheWVyTm9kZV07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdW5vY2N1cGllZE5vZGVzID0gY29ubmVjdGVkTm9kZXMuZmlsdGVyKG5vZGUgPT4gIW5vZGUub2NjdXBpZWQpO1xuICAgICAgICBpZiAodW5vY2N1cGllZE5vZGVzLmxlbmd0aCA+IDApIHtcblxuICAgICAgICAgICAgbGV0IHNob3J0ZXN0UGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgocGxheWVyTm9kZSwgdW5vY2N1cGllZE5vZGVzWzBdKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB1bm9jY3VwaWVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvdGhlclBhdGggPSBBc3Rhci5jYWxjdWxhdGVQYXRoKHBsYXllck5vZGUsIHVub2NjdXBpZWROb2Rlc1tpXSk7XG4gICAgICAgICAgICAgICAgaWYgKG90aGVyUGF0aC5sZW5ndGggPCBzaG9ydGVzdFBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3J0ZXN0UGF0aCA9IG90aGVyUGF0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzaG9ydGVzdFBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVTdGF0ZVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVByb3h5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZUdhbWVwbGF5QWN0aW9uQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgbmV3QWN0aW9uID0gYXJnc1swXTtcbiAgICBjb25zdCBnYW1lU3RhdGVQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVTdGF0ZVByb3h5Lk5BTUUpO1xuICAgIGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRBY3Rpb24gPSBuZXdBY3Rpb247XG5cbn0iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVEaWFsb2d1ZVNraWxsVGVzdENvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGNvbnN0IHRlc3QgPSBhcmdzWzBdO1xuICAgIGNvbnN0IGNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBcInBsYXllclwiKTtcblxuICAgIGNvbnN0IHBsYXllclNraWxsID0gY2hhcmFjdGVyUHJveHkuZ2V0U2tpbGxUb3RhbCh0ZXN0LnNraWxsKVxuXG4gICAgLy8gUm9sbCBkaWNlXG4gICAgY29uc3QgZGllMSA9IHJvbGxEaWNlKCk7XG4gICAgY29uc3QgZGllMiA9IHJvbGxEaWNlKCk7XG5cbiAgICBjb25zdCB0b3RhbFJvbGwgPSBkaWUxICsgZGllMjtcblxuICAgIGNvbnN0IHN1Y2Nlc3MgPSBwbGF5ZXJTa2lsbCA+PSB0b3RhbFJvbGw7XG5cbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRElTUExBWV9ESUFMT0dVRV9TS0lMTF9URVNULCB0ZXN0LnNraWxsLCBwbGF5ZXJTa2lsbCwgZGllMSwgZGllMiwgc3VjY2Vzcyk7XG5cbiAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICBjb25zb2xlLmxvZyhgU3VjY2VlZGVkICR7dGVzdC5za2lsbH0gd2l0aCBhICR7cGxheWVyU2tpbGx9IHZzICR7ZGllMX0rJHtkaWUyfWApO1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuR09fVE9fRElBTE9HVUVfTk9ERSwgdGVzdC5zdWNjZXNzLmdvdG8pO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coYEZhaWxlZCAke3Rlc3Quc2tpbGx9IHdpdGggYSAke3BsYXllclNraWxsfSB2cyAke2RpZTF9KyR7ZGllMn1gKTtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkdPX1RPX0RJQUxPR1VFX05PREUsIHRlc3QuZmFpbHVyZS5nb3RvKTtcblxuICAgIH1cbn1cblxuXG5mdW5jdGlvbiByb2xsRGljZSgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogNik7XG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEludmVudG9yeVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvaW52ZW50b3J5L0ludmVudG9yeVByb3h5JztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNsaWNrSW52ZW50b3J5QnV0dG9uQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgaW52ZW50b3J5UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShJbnZlbnRvcnlQcm94eS5OQU1FKTtcblxuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ESVNQTEFZX0lOVkVOVE9SWV9QQU5FTCwgaW52ZW50b3J5UHJveHkuaW52ZW50b3J5SXRlbXMsIGludmVudG9yeVByb3h5LmVxdWlwbWVudFNsb3RzKTtcbn1cbiIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBJbnZlbnRvcnlQcm94eSB9IGZyb20gJy4uL21vZGVsL2ludmVudG9yeS9JbnZlbnRvcnlQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZW9yZGVySW52ZW50b3J5SXRlbUNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGNvbnN0IGludmVudG9yeVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoSW52ZW50b3J5UHJveHkuTkFNRSk7XG5cbiAgICBjb25zdCBpdGVtVVVJRCA9IGFyZ3NbMF07XG4gICAgY29uc3QgbmV3SW5kZXggPSBhcmdzWzFdO1xuXG4gICAgaW52ZW50b3J5UHJveHkucmVvcmRlckludmVudG9yeUl0ZW0oaXRlbVVVSUQsIG5ld0luZGV4KTtcblxuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ESVNQTEFZX0lOVkVOVE9SWV9QQU5FTCwgaW52ZW50b3J5UHJveHkuaW52ZW50b3J5SXRlbXMsIGludmVudG9yeVByb3h5LmVxdWlwbWVudFNsb3RzKTtcbn1cbiIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gXCJAa29yZWV6L3B1cmUtbXZjXCI7XG5pbXBvcnQgeyBDb21iYXRQcm94eSB9IGZyb20gJy4uL21vZGVsL2NvbWJhdC9Db21iYXRQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBJbnZlbnRvcnlQcm94eSB9IGZyb20gJy4uL21vZGVsL2ludmVudG9yeS9JbnZlbnRvcnlQcm94eSc7XG5pbXBvcnQgeyBJdGVtc1Byb3h5IH0gZnJvbSAnLi4vbW9kZWwvaXRlbXMvSXRlbXNQcm94eSc7XG5pbXBvcnQgeyBJbnZlbnRvcnlJdGVtIH0gZnJvbSBcIi4uL21vZGVsL2ludmVudG9yeS9pdGVtcy9JbnZlbnRvcnlJdGVtXCI7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWlwSXRlbVRvU2xvdENvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGNvbnN0IGludmVudG9yeVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoSW52ZW50b3J5UHJveHkuTkFNRSk7XG4gICAgY29uc3QgaXRlbUlkID0gYXJnc1swXTtcbiAgICBjb25zdCBlcXVpcG1lbnRLZXkgPSBhcmdzWzFdO1xuXG4gICAgY29uc3QgaXRlbUluSW52ZW50b3J5ID0gaW52ZW50b3J5UHJveHkuaW52ZW50b3J5SXRlbXMuZmluZChpdGVtID0+IGl0ZW0uaWQgPT09IGl0ZW1JZCk7XG5cbiAgICBpZiAoaXRlbUluSW52ZW50b3J5KSB7XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3NmdWxseUVxdWlwcGVkID0gaW52ZW50b3J5UHJveHkuYXR0ZW1wdFRvRXF1aXBJdGVtVG9TbG90KGVxdWlwbWVudEtleSwgaXRlbUluSW52ZW50b3J5KTtcblxuICAgICAgICBpZiAoc3VjY2Vzc2Z1bGx5RXF1aXBwZWQpIHtcbiAgICAgICAgICAgIGlmIChpdGVtSW5JbnZlbnRvcnkudHlwZSA9PT0gXCJ3ZWFwb25cIikge1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5FUVVJUF9XRUFQT04sIFwicGxheWVyXCIsIGl0ZW1JbkludmVudG9yeS5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBpdGVtc1Byb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoSXRlbXNQcm94eS5OQU1FKTtcbiAgICAgICAgY29uc3QgaW52ZW50b3J5UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShJbnZlbnRvcnlQcm94eS5OQU1FKTtcbiAgICAgICAgY29uc3QgaW52ZW50b3J5SXRlbSA9IG5ldyBJbnZlbnRvcnlJdGVtKGl0ZW1zUHJveHkuZ2V0SXRlbURhdGEoaXRlbUlkKSk7XG5cbiAgICAgICAgY29uc3Qgc3VjY2Vzc2Z1bGx5RXF1aXBwZWQgPSBpbnZlbnRvcnlQcm94eS5hdHRlbXB0VG9FcXVpcEl0ZW1Ub1Nsb3QoZXF1aXBtZW50S2V5LCBpbnZlbnRvcnlJdGVtKTtcblxuICAgICAgICBpZiAoc3VjY2Vzc2Z1bGx5RXF1aXBwZWQpIHtcbiAgICAgICAgICAgIGlmIChpbnZlbnRvcnlJdGVtLnR5cGUgPT09IFwid2VhcG9uXCIpIHtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRVFVSVBfV0VBUE9OLCBcInBsYXllclwiLCBpbnZlbnRvcnlJdGVtLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBjb25zdCBpdGVtID0gaW52ZW50b3J5UHJveHkuaW52ZW50b3J5SXRlbXNbaXRlbUluZGV4XTtcblxuXG5cbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRElTUExBWV9FUVVJUFBFRF9TTE9ULCBpbnZlbnRvcnlQcm94eS5lcXVpcG1lbnRTbG90cyk7XG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfSU5WRU5UT1JZX1BBTkVMLCBpbnZlbnRvcnlQcm94eS5pbnZlbnRvcnlJdGVtcywgaW52ZW50b3J5UHJveHkuZXF1aXBtZW50U2xvdHMpO1xuXG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVNYXBQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvR2FtZU1hcFByb3h5JztcbmltcG9ydCB7IEl0ZW1zUHJveHkgfSBmcm9tICcuLi9tb2RlbC9pdGVtcy9JdGVtc1Byb3h5JztcbmltcG9ydCB7IEludmVudG9yeVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvaW52ZW50b3J5L0ludmVudG9yeVByb3h5JztcbmltcG9ydCB7IEludmVudG9yeUl0ZW0gfSBmcm9tICcuLi9tb2RlbC9pbnZlbnRvcnkvaXRlbXMvSW52ZW50b3J5SXRlbSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRJdGVtVG9JbnZlbnRvcnlDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgaXRlbUlkID0gYXJnc1swXTtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGNvbnN0IGl0ZW1zUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShJdGVtc1Byb3h5Lk5BTUUpO1xuICAgIGNvbnN0IGludmVudG9yeVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoSW52ZW50b3J5UHJveHkuTkFNRSk7XG4gICAgY29uc3QgaW52ZW50b3J5SXRlbSA9IG5ldyBJbnZlbnRvcnlJdGVtKGl0ZW1zUHJveHkuZ2V0SXRlbURhdGEoaXRlbUlkKSk7XG4gICAgaW52ZW50b3J5UHJveHkuYWRkSW52ZW50b3J5SXRlbShpbnZlbnRvcnlJdGVtKTtcblxufSIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBJbnZlbnRvcnlQcm94eSB9IGZyb20gJy4uL21vZGVsL2ludmVudG9yeS9JbnZlbnRvcnlQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VFcXVpcHBlZEl0ZW1Db21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBpbnZlbnRvcnlQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEludmVudG9yeVByb3h5Lk5BTUUpO1xuICAgIGNvbnN0IGdhbWVTdGF0ZVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZVN0YXRlUHJveHkuTkFNRSk7XG5cbiAgICBjb25zdCBlcXVpcG1lbnRTbG90S2V5ID0gYXJnc1swXTtcbiAgICBjb25zdCBlcXVpcHBlZEl0ZW0gPSBpbnZlbnRvcnlQcm94eS5nZXRFcXVpcHBlZEl0ZW0oZXF1aXBtZW50U2xvdEtleSk7XG5cbiAgICBpZiAoZXF1aXBwZWRJdGVtKSB7XG4gICAgICAgIGlmIChlcXVpcHBlZEl0ZW0udHlwZSA9PT0gXCJ3ZWFwb25cIikge1xuICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRBY3Rpb24gIT09IFwiYXR0YWNrXCIpIHtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRVFVSVBfV0VBUE9OLCBcInBsYXllclwiLCBlcXVpcHBlZEl0ZW0uaWQpO1xuICAgICAgICAgICAgICAgIGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRBY3Rpb24gPSBcImF0dGFja1wiO1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TRVRfVVNFX0lURU1fQlVUVE9OX0hJR0hMSUdIVCwgZXF1aXBtZW50U2xvdEtleSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2FtZVN0YXRlUHJveHkuY3VycmVudEFjdGlvbiA9IFwiaW50ZXJhY3RcIjtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0VUX1VTRV9JVEVNX0JVVFRPTl9ISUdITElHSFQsIGVxdWlwbWVudFNsb3RLZXksIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IHBhcnNlR2FtZU1hcENvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvUGFyc2VHYW1lTWFwQ29tbWFuZCc7XG5pbXBvcnQgeyBzdGFydHVwQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9TdGFydHVwQ29tbWFuZCc7XG5pbXBvcnQgeyBjaGFuZ2VTY2VuZUNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvQ2hhbmdlU2NlbmVDb21tYW5kJztcbmltcG9ydCB7IHN0YXJ0Q29tYmF0Q29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9TdGFydENvbWJhdENvbW1hbmQnO1xuaW1wb3J0IHsgbmV4dENvbWJhdFR1cm5Db21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL05leHRDb21iYXRUdXJuQ29tbWFuZCc7XG5pbXBvcnQgeyBuZXh0Q29tYmF0Um91bmRDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL05leHRDb21iYXRSb3VuZENvbW1hbmQnO1xuaW1wb3J0IHsgZW5kQ29tYmF0VHVybkNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvRW5kQ29tYmF0VHVybkNvbW1hbmQnO1xuaW1wb3J0IHsgZW5lbXlUdXJuQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9FbmVteVR1cm5Db21tYW5kJztcbmltcG9ydCB7IHNlbGVjdGVkTm9kZUNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvU2VsZWN0ZWROb2RlQ29tbWFuZCc7XG5pbXBvcnQgeyBjb21iYXROYXZpZ2F0ZVRvTm9kZUNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvQ29tYmF0TmF2aWdhdGVUb05vZGVDb21tYW5kJztcbmltcG9ydCB7IHNob3dXYWxrYWJsZUFyZWFDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL1Nob3dXYWxrYWJsZUFyZWFDb21tYW5kJztcbmltcG9ydCB7IGhpZGVXYWxrYWJsZUFyZWFDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0hpZGVXYWxrYWJsZUFyZWFDb21tYW5kJztcbmltcG9ydCB7IGF3YWl0UGxheWVyQ29tYmF0SW5wdXRDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0F3YWl0UGxheWVyQ29tYmF0SW5wdXRDb21tYW5kJztcbmltcG9ydCB7IGVuZE1vdmVtZW50Q29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9FbmRNb3ZlbWVudENvbW1hbmQnO1xuaW1wb3J0IHsgc2VsZWN0ZWRHYW1lQ2hhcmFjdGVyQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9TZWxlY3RlZEdhbWVDaGFyYWN0ZXJDb21tYW5kJztcbmltcG9ydCB7IHJlc29sdmVBdHRhY2tDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL1Jlc29sdmVBdHRhY2tDb21tYW5kJztcbmltcG9ydCB7IG1vdmVBbG9uZ1BhdGhBbmRBdHRhY2tDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL01vdmVBbG9uZ1BhdGhBbmRBdHRhY2tDb21tYW5kJztcbmltcG9ydCB7IGtpbGxHYW1lQ2hhcmFjdGVyQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9LaWxsR2FtZUNoYXJhY3RlckNvbW1hbmQnO1xuaW1wb3J0IHsgZW5kQ29tYmF0Q29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9FbmRDb21iYXRDb21tYW5kJztcbmltcG9ydCB7IGRldGVybWluZUVuZW15QWN0aW9uQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9EZXRlcm1pbmVFbmVteUFjdGlvbkNvbW1hbmQnO1xuaW1wb3J0IHsgcmVzb2x2ZVJhbmdlZEF0dGFja0NvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvUmVzb2x2ZVJhbmdlZEF0dGFja0NvbW1hbmQnO1xuaW1wb3J0IHsgZXF1aXBXZWFwb25Db21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0VxdWlwV2VhcG9uQ29tbWFuZCc7XG5pbXBvcnQgeyBuYXZpZ2F0ZVRocm91Z2hQb3J0YWxDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL05hdmlnYXRlVGhyb3VnaFBvcnRhbENvbW1hbmQnO1xuaW1wb3J0IHsgYWRkUGxheWVyQ2hhcmFjdGVyVG9NYXBDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0FkZFBsYXllckNoYXJhY3RlclRvTWFwQ29tbWFuZCc7XG5pbXBvcnQgeyBuYXZpZ2F0ZVRvQ2hhcmFjdGVyQW5kVGFsa0NvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvTmF2aWdhdGVUb0NoYXJhY3RlckFuZFRhbGsnO1xuaW1wb3J0IHsgc3RhcnREaWFsb2d1ZUNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvU3RhcnREaWFsb2d1ZUNvbW1hbmQnO1xuaW1wb3J0IHsgY29udGludWVEaWFsb2d1ZVRleHRDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0NvbnRpbnVlRGlhbG9ndWVUZXh0Q29tbWFuZCc7XG5pbXBvcnQgeyBzZWxlY3REaWFsb2d1ZUNob2ljZUNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvU2VsZWN0RGlhbG9ndWVDaG9pY2VDb21tYW5kJztcbmltcG9ydCB7IGdvVG9EaWFsb2d1ZU5vZGVDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0dvVG9EaWFsb2d1ZU5vZGVDb21tYW5kJztcbmltcG9ydCB7IGVuZERpYWxvZ3VlQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9FbmREaWFsb2d1ZUNvbW1hbmQnO1xuaW1wb3J0IHsgbmF2aWdhdGVUb0NoYXJhY3RlckFuZEF0dGFja0NvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvTmF2aWdhdGVUb0NoYXJhY3RlckFuZEF0dGFja0NvbW1hbmQnO1xuaW1wb3J0IHsgY2hhbmdlR2FtZXBsYXlBY3Rpb25Db21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0NoYW5nZUdhbWVwbGF5QWN0aW9uQ29tbWFuZCc7XG5pbXBvcnQgeyByZXNvbHZlRGlhbG9ndWVTa2lsbFRlc3RDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL1Jlc29sdmVEaWFsb2d1ZVNraWxsVGVzdENvbW1hbmQnO1xuaW1wb3J0IHsgY2xpY2tJbnZlbnRvcnlCdXR0b25Db21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0NsaWNrSW52ZW50b3J5QnV0dG9uQ29tbWFuZCc7XG5pbXBvcnQgeyByZW9yZGVySW52ZW50b3J5SXRlbUNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvUmVvcmRlckludmVudG9yeUl0ZW1Db21tYW5kJztcbmltcG9ydCB7IGVxdWlwSXRlbVRvU2xvdENvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvRXF1aXBJdGVtVG9TbG90Q29tbWFuZCc7XG5pbXBvcnQgeyBhZGRJdGVtVG9JbnZlbnRvcnlDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0FkZEl0ZW10b0ludmVudG9yeUNvbW1hbmQnO1xuaW1wb3J0IHsgdXNlRXF1aXBwZWRJdGVtQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9Vc2VFcXVpcHBlZEl0ZW1Db21tYW5kJztcblxuZXhwb3J0IGNsYXNzIEdhbWVGYWNhZGUgZXh0ZW5kcyBGYWNhZGUge1xuICAgIHN0YXRpYyBnZXRJbnN0YW5jZShrZXkpIHtcbiAgICAgICAgaWYgKCFGYWNhZGUuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgRmFjYWRlLmluc3RhbmNlTWFwW2tleV0gPSBuZXcgR2FtZUZhY2FkZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBGYWNhZGUuaW5zdGFuY2VNYXBba2V5XTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IEtFWSgpIHsgcmV0dXJuIFwiQ2Fjb2dlblwiIH07XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJDYWNvZ2VuRmFjYWRlXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFNUQVJUVVAoKSB7IHJldHVybiBHYW1lRmFjYWRlLk5BTUUgKyBcIlN0YXJ0VXBcIiB9O1xuXG4gICAgc3RhcnR1cChnYW1lKSB7XG4gICAgICAgIHRoaXMuc2VuZE5vdGlmaWNhdGlvbihHYW1lRmFjYWRlLlNUQVJUVVAsIGdhbWUpO1xuICAgIH1cblxuICAgIHNlbmROb3RpZmljYXRpb24obm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgICAgICBzdXBlci5zZW5kTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIGluaXRpYWxpemVDb250cm9sbGVyKCkge1xuICAgICAgICBzdXBlci5pbml0aWFsaXplQ29udHJvbGxlcigpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lRmFjYWRlLlNUQVJUVVAsIHN0YXJ0dXBDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkNIQU5HRV9TQ0VORSwgY2hhbmdlU2NlbmVDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLlBBUlNFX0dBTUVNQVAsIHBhcnNlR2FtZU1hcENvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuU1RBUlRfQ09NQkFULCBzdGFydENvbWJhdENvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuTkVYVF9DT01CQVRfVFVSTiwgbmV4dENvbWJhdFR1cm5Db21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLk5FWFRfQ09NQkFUX1JPVU5ELCBuZXh0Q29tYmF0Um91bmRDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkVORF9DT01CQVRfVFVSTiwgZW5kQ29tYmF0VHVybkNvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuRU5FTVlfVFVSTiwgZW5lbXlUdXJuQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5TRUxFQ1RFRF9OT0RFLCBzZWxlY3RlZE5vZGVDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkNPTUJBVF9OQVZJR0FURV9UT19OT0RFLCBjb21iYXROYXZpZ2F0ZVRvTm9kZUNvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuREVURVJNSU5FX05FWFRfRU5FTVlfQUNUSU9OLCBkZXRlcm1pbmVFbmVteUFjdGlvbkNvbW1hbmQpO1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5TSE9XX1dBTEtBQkxFX0FSRUEsIHNob3dXYWxrYWJsZUFyZWFDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkhJREVfV0FMS0FCTEVfQVJFQSwgaGlkZVdhbGthYmxlQXJlYUNvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuQVdBSVRfUExBWUVSX0NPTUJBVF9JTlBVVCwgYXdhaXRQbGF5ZXJDb21iYXRJbnB1dENvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuRklOSVNIRURfTU9WRSwgZW5kTW92ZW1lbnRDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLlNFTEVDVF9HQU1FX0NIQVJBQ1RFUiwgc2VsZWN0ZWRHYW1lQ2hhcmFjdGVyQ29tbWFuZCk7XG5cbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLlJFU09MVkVfQVRUQUNLLCByZXNvbHZlQXR0YWNrQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5SRVNPTFZFX1JBTkdFRF9BVFRBQ0ssIHJlc29sdmVSYW5nZWRBdHRhY2tDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLk1PVkVfQUxPTkdfUEFUSF9BTkRfQVRUQUNLLCBtb3ZlQWxvbmdQYXRoQW5kQXR0YWNrQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5OQVZJR0FURV9UT19DSEFSQUNURVJfQU5EX0FUVEFDSywgbmF2aWdhdGVUb0NoYXJhY3RlckFuZEF0dGFja0NvbW1hbmQpO1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5LSUxMX0dBTUVfQ0hBUkFDVEVSLCBraWxsR2FtZUNoYXJhY3RlckNvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuRU5EX0NPTUJBVCwgZW5kQ29tYmF0Q29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5FUVVJUF9XRUFQT04sIGVxdWlwV2VhcG9uQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5OQVZJR0FURV9USFJPVUdIX1BPUlRBTCwgbmF2aWdhdGVUaHJvdWdoUG9ydGFsQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5BRERfUExBWUVSX0NIQVJBQ1RFUl9UT19NQVAsIGFkZFBsYXllckNoYXJhY3RlclRvTWFwQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5OQVZJR0FURV9UT19DSEFSQUNURVJfQU5EX1RBTEssIG5hdmlnYXRlVG9DaGFyYWN0ZXJBbmRUYWxrQ29tbWFuZClcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLlNUQVJUX0RJQUxPR1VFLCBzdGFydERpYWxvZ3VlQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5DT05USU5VRV9ESUFMT0dVRV9OT0RFLCBjb250aW51ZURpYWxvZ3VlVGV4dENvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuU0VMRUNUX0RJQUxPR1VFX0NIT0lDRSwgc2VsZWN0RGlhbG9ndWVDaG9pY2VDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkdPX1RPX0RJQUxPR1VFX05PREUsIGdvVG9EaWFsb2d1ZU5vZGVDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkVORF9ESUFMT0dVRSwgZW5kRGlhbG9ndWVDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkdBTUVQTEFZX0FDVElPTl9DSEFOR0VELCBjaGFuZ2VHYW1lcGxheUFjdGlvbkNvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuUkVTT0xWRV9ESUFMT0dVRV9TS0lMTF9URVNULCByZXNvbHZlRGlhbG9ndWVTa2lsbFRlc3RDb21tYW5kKTtcblxuICAgICAgICAvLyBJbnZlbnRvcnkgY29tbWFuZHNcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkNMSUNLX0lOVkVOVE9SWV9CVVRUT04sIGNsaWNrSW52ZW50b3J5QnV0dG9uQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5SRU9SREVSX0lOVkVUT1JZX0lURU0sIHJlb3JkZXJJbnZlbnRvcnlJdGVtQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5FUVVJUF9JVEVNX1RPX1NMT1QsIGVxdWlwSXRlbVRvU2xvdENvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuQUREX0lURU1fVE9fSU5WRU5UT1JZLCBhZGRJdGVtVG9JbnZlbnRvcnlDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLlVTRV9FUVVJUFBFRF9JVEVNLCB1c2VFcXVpcHBlZEl0ZW1Db21tYW5kKTtcbiAgICB9XG5cbn0iLCJleHBvcnQgY2xhc3MgQm90QmVoYXZpb3VyVHlwZXMge1xuICAgIHN0YXRpYyBnZXQgTk9ORSgpIHsgcmV0dXJuIDAgfTtcbiAgICBzdGF0aWMgZ2V0IEJBU0lDX01FTEVFKCkgeyByZXR1cm4gMSB9O1xuICAgIHN0YXRpYyBnZXQgQkFTSUNfUkFOR0VEKCkgeyByZXR1cm4gMiB9O1xuXG59XG5cbmV4cG9ydCBjb25zdCBib3RCZWhhdmlvdXJFbnVtcyA9IFtcbiAgICB7IE5PTkU6IEJvdEJlaGF2aW91clR5cGVzLk5PTkUgfSxcbiAgICB7IEJBU0lDX01FTEVFOiBCb3RCZWhhdmlvdXJUeXBlcy5CQVNJQ19NRUxFRSB9LFxuICAgIHsgQkFTSUNfUkFOR0VEOiBCb3RCZWhhdmlvdXJUeXBlcy5CQVNJQ19SQU5HRUQgfSxcbl0iLCJpbXBvcnQgeyBCYXNlTm9kZSB9IGZyb20gJy4uLy4uL2NvcmUvQmFzZU5vZGUnO1xuaW1wb3J0IHsgQmVoYXZpb3VyU3RhdHVzIH0gZnJvbSAnLi4vLi4vY29yZS9CZWhhdmlvdXJTdGF0dXMnO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuXG5leHBvcnQgY2xhc3MgRW5kQ29tYmF0VHVybiBleHRlbmRzIEJhc2VOb2RlIHtcbiAgICB0aWNrKHRpY2spIHtcbiAgICAgICAgY29uc3QgZmFjYWRlID0gdGljay5ibGFja2JvYXJkLmdldCgnZmFjYWRlJywgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkVORF9DT01CQVRfVFVSTik7XG5cbiAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5TVUNDRVNTO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBCYXNlTm9kZSB9IGZyb20gJy4uLy4uL2NvcmUvQmFzZU5vZGUnO1xuaW1wb3J0IHsgQmVoYXZpb3VyU3RhdHVzIH0gZnJvbSAnLi4vLi4vY29yZS9CZWhhdmlvdXJTdGF0dXMnO1xuXG5leHBvcnQgY2xhc3MgU2V0UGxheWVyQXNUYXJnZXQgZXh0ZW5kcyBCYXNlTm9kZSB7XG4gICAgdGljayh0aWNrKSB7XG4gICAgICAgIHRpY2suYmxhY2tib2FyZC5zZXQoJ3RhcmdldCcsICdwbGF5ZXInLCB0aWNrLnRyZWUuaWQsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5TVUNDRVNTO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VOb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9CYXNlTm9kZSc7XG5pbXBvcnQgeyBCZWhhdmlvdXJTdGF0dXMgfSBmcm9tICcuLi8uLi9jb3JlL0JlaGF2aW91clN0YXR1cyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5cbmV4cG9ydCBjbGFzcyBIYXNBY3Rpb25zUmVtYWluaW5nIGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIHRpY2sodGljaykge1xuICAgICAgICBjb25zdCBmYWNhZGUgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdmYWNhZGUnLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2NoYXJhY3RlcklkJywgdGljay50cmVlLmlkLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBjaGFyYWN0ZXJJZCk7XG5cbiAgICAgICAgaWYgKGNoYXJhY3RlclByb3h5LmF2YWlsYWJsZUFjdGlvbnMgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLlNVQ0NFU1M7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuRkFJTFVSRTtcblxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZU5vZGUgfSBmcm9tICcuLi8uLi9jb3JlL0Jhc2VOb2RlJztcbmltcG9ydCB7IEJlaGF2aW91clN0YXR1cyB9IGZyb20gJy4uLy4uL2NvcmUvQmVoYXZpb3VyU3RhdHVzJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcblxuZXhwb3J0IGNsYXNzIEhhc01vdmVtZW50UmVtYWluaW5nIGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIHRpY2sodGljaykge1xuICAgICAgICBjb25zdCBmYWNhZGUgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdmYWNhZGUnLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2NoYXJhY3RlcklkJywgdGljay50cmVlLmlkLCBmYWxzZSk7XG5cbiAgICAgICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGNoYXJhY3RlcklkKTtcblxuXG4gICAgICAgIGlmIChjaGFyYWN0ZXJQcm94eS5hdmFpbGFibGVNb3ZlbWVudCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuU1VDQ0VTUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuRkFJTFVSRTtcbiAgICAgICAgfVxuXG5cbiAgICB9XG59IiwiaW1wb3J0IHsgQmFzZU5vZGUgfSBmcm9tICcuLi8uLi9jb3JlL0Jhc2VOb2RlJztcbmltcG9ydCB7IEJlaGF2aW91clN0YXR1cyB9IGZyb20gJy4uLy4uL2NvcmUvQmVoYXZpb3VyU3RhdHVzJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcblxuZXhwb3J0IGNsYXNzIElzRGVhZCBleHRlbmRzIEJhc2VOb2RlIHtcbiAgICB0aWNrKHRpY2spIHtcbiAgICAgICAgY29uc3QgZmFjYWRlID0gdGljay5ibGFja2JvYXJkLmdldCgnZmFjYWRlJywgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVySWQgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdjaGFyYWN0ZXJJZCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuXG4gICAgICAgIC8vIGZpbmQgZGVzaXJlZCBtb3ZlIHBvc2l0aW9uXG4gICAgICAgIGNvbnN0IHBsYXllclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBjaGFyYWN0ZXJJZCk7XG5cbiAgICAgICAgaWYgKHBsYXllclByb3h5LmlzRGVhZCkge1xuICAgICAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5TVUNDRVNTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5GQUlMVVJFO1xuICAgICAgICB9XG5cblxuICAgIH1cbn0iLCJpbXBvcnQgeyBCYXNlTm9kZSB9IGZyb20gJy4uLy4uL2NvcmUvQmFzZU5vZGUnO1xuaW1wb3J0IHsgQmVoYXZpb3VyU3RhdHVzIH0gZnJvbSAnLi4vLi4vY29yZS9CZWhhdmlvdXJTdGF0dXMnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuXG5leHBvcnQgY2xhc3MgSXNUYXJnZXREZWFkIGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIHRpY2sodGljaykge1xuICAgICAgICBjb25zdCBmYWNhZGUgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdmYWNhZGUnLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBjb25zdCB0YXJnZXRJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ3RhcmdldCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuXG4gICAgICAgIC8vIGZpbmQgZGVzaXJlZCBtb3ZlIHBvc2l0aW9uXG4gICAgICAgIGNvbnN0IHBsYXllclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0YXJnZXRJZCk7XG5cbiAgICAgICAgaWYgKHBsYXllclByb3h5LmlzRGVhZCkge1xuICAgICAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5TVUNDRVNTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5GQUlMVVJFO1xuICAgICAgICB9XG5cblxuICAgIH1cbn0iLCJpbXBvcnQgeyBCZWhhdmlvdXJTdGF0dXMgfSBmcm9tICcuL0JlaGF2aW91clN0YXR1cyc7XG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAnLi4vLi4vdXRpbHMvR1VJRCc7XG5cbmV4cG9ydCBjbGFzcyBCYXNlTm9kZSB7XG4gICAgY29uc3RydWN0b3IoY2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplKGNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMuaWQgPSBjcmVhdGVVVUlEKCk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbiB8fCBbXTtcbiAgICB9XG5cbiAgICBleGVjdXRlKHRpY2spIHtcbiAgICAgICAgLyogRU5URVIgKi9cbiAgICAgICAgdGhpcy5fZW50ZXIodGljayk7XG5cbiAgICAgICAgLyogT1BFTiAqL1xuICAgICAgICBpZiAoIXRpY2suYmxhY2tib2FyZC5nZXQoJ2lzT3BlbicsIHRpY2sudHJlZS5pZCwgdGhpcy5pZCkpIHtcbiAgICAgICAgICAgIHRoaXMuX29wZW4odGljayk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBUSUNLICovXG4gICAgICAgIGNvbnN0IHN0YXR1cyA9IHRoaXMuX3RpY2sodGljayk7XG5cbiAgICAgICAgLyogQ0xPU0UgKi9cbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gQmVoYXZpb3VyU3RhdHVzLlJVTk5JTkcpIHtcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlKHRpY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogRVhJVCAqL1xuICAgICAgICB0aGlzLl9leGl0KHRpY2spO1xuXG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfVxuXG4gICAgX2VudGVyKHRpY2spIHtcbiAgICAgICAgdGljay5lbnRlck5vZGUodGhpcyk7XG4gICAgICAgIHRoaXMuZW50ZXIodGljayk7XG4gICAgfVxuXG4gICAgX29wZW4odGljaykge1xuICAgICAgICB0aWNrLm9wZW5Ob2RlKHRoaXMpO1xuICAgICAgICB0aWNrLmJsYWNrYm9hcmQuc2V0KCdpc09wZW4nLCB0cnVlLCB0aWNrLnRyZWUuaWQsIHRoaXMuaWQpO1xuICAgICAgICB0aGlzLm9wZW4odGljayk7XG4gICAgfVxuXG4gICAgX3RpY2sodGljaykge1xuICAgICAgICB0aWNrLnRpY2tOb2RlKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcy50aWNrKHRpY2spO1xuICAgIH1cblxuICAgIF9jbG9zZSh0aWNrKSB7XG4gICAgICAgIHRpY2suY2xvc2VOb2RlKHRoaXMpO1xuICAgICAgICB0aWNrLmJsYWNrYm9hcmQuc2V0KCdpc09wZW4nLCBmYWxzZSwgdGljay50cmVlLmlkLCB0aGlzLmlkKTtcbiAgICAgICAgdGhpcy5jbG9zZSh0aWNrKTtcbiAgICB9XG5cbiAgICBfZXhpdCh0aWNrKSB7XG4gICAgICAgIHRpY2suZXhpdE5vZGUodGhpcyk7XG4gICAgICAgIHRoaXMuZXhpdCh0aWNrKTtcbiAgICB9XG5cbiAgICAvLyBPdmVyaWRlIHRoZXNlXG4gICAgZW50ZXIodGljaykgeyB9XG4gICAgb3Blbih0aWNrKSB7IH1cbiAgICB0aWNrKHRpY2spIHsgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5FUlJPUiB9XG4gICAgY2xvc2UodGljaykgeyB9XG4gICAgZXhpdCh0aWNrKSB7IH1cbn0iLCJleHBvcnQgY2xhc3MgQmVoYXZpb3VyU3RhdHVzIHtcbiAgICBzdGF0aWMgZ2V0IFNVQ0NFU1MoKSB7IHJldHVybiAwIH07XG4gICAgc3RhdGljIGdldCBGQUlMVVJFKCkgeyByZXR1cm4gMSB9O1xuICAgIHN0YXRpYyBnZXQgUlVOTklORygpIHsgcmV0dXJuIDIgfTtcbiAgICBzdGF0aWMgZ2V0IEVSUk9SKCkgeyByZXR1cm4gMyB9O1xufSIsImltcG9ydCB7IEJhc2VOb2RlIH0gZnJvbSAnLi9CYXNlTm9kZSc7XG5pbXBvcnQgeyBCZWhhdmlvdXJTdGF0dXMgfSBmcm9tICcuL0JlaGF2aW91clN0YXR1cyc7XG5cbmV4cG9ydCBjbGFzcyBNYXN0ZXJOb2RlIGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIHRpY2sodGljaykge1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkTm9kZSBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBjaGlsZE5vZGUuZXhlY3V0ZSh0aWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuU1VDQ0VTUztcbiAgICB9XG59IiwiaW1wb3J0IHsgQmFzZU5vZGUgfSBmcm9tICcuL0Jhc2VOb2RlJztcbmltcG9ydCB7IEJlaGF2aW91clN0YXR1cyB9IGZyb20gJy4vQmVoYXZpb3VyU3RhdHVzJztcblxuZXhwb3J0IGNsYXNzIE1lbVNlcXVlbmNlIGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIG9wZW4odGljaykge1xuICAgICAgICB0aWNrLmJsYWNrYm9hcmQuc2V0KCdydW5uaW5nQ2hpbGQnLCAwLCB0aWNrLnRyZWUuaWQsIHRoaXMuaWQpO1xuICAgIH1cblxuICAgIHRpY2sodGljaykge1xuICAgICAgICBjb25zdCBjaGlsZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ3J1bm5pbmdDaGlsZCcsIHRpY2sudHJlZS5pZCwgdGhpcy5pZCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IGNoaWxkOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHN0YXR1cyA9IHRoaXMuY2hpbGRyZW5baV0uZXhlY3V0ZSh0aWNrKTtcblxuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gQmVoYXZpb3VyU3RhdHVzLlNVQ0NFU1MpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSBCZWhhdmlvdXJTdGF0dXMuUlVOTklORykge1xuICAgICAgICAgICAgICAgICAgICB0aWNrLmJsYWNrYm9hcmQuc2V0KCdydW5uaW5nQ2hpbGQnLCBpLCB0aWNrLnRyZWUuaWQsIHRoaXMuaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5TVUNDRVNTO1xuICAgIH1cblxufSIsImltcG9ydCB7IEJhc2VOb2RlIH0gZnJvbSAnLi9CYXNlTm9kZSc7XG5pbXBvcnQgeyBCZWhhdmlvdXJTdGF0dXMgfSBmcm9tICcuL0JlaGF2aW91clN0YXR1cyc7XG5cbmV4cG9ydCBjbGFzcyBQcmlvcml0eSBleHRlbmRzIEJhc2VOb2RlIHtcbiAgICB0aWNrKHRpY2spIHtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0dXMgPSBjaGlsZC5leGVjdXRlKHRpY2spO1xuXG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSBCZWhhdmlvdXJTdGF0dXMuRkFJTFVSRSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLkZBSUxVUkU7XG4gICAgfVxuXG59IiwiXG5pbXBvcnQgeyBCYXNlTm9kZSB9IGZyb20gJy4uL0Jhc2VOb2RlJztcbmltcG9ydCB7IEJlaGF2aW91clN0YXR1cyB9IGZyb20gJy4uL0JlaGF2aW91clN0YXR1cyc7XG5leHBvcnQgY2xhc3MgSW52ZXJ0ZXIgZXh0ZW5kcyBCYXNlTm9kZSB7XG4gICAgdGljayh0aWNrKSB7XG5cbiAgICAgICAgLy8gcHJlc3VtZSBpbnZlcnRlciBoYXMgb25lIGNoaWxkXG4gICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5jaGlsZHJlblswXTtcblxuICAgICAgICBpZiAoIWNoaWxkKSB7XG4gICAgICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLkVSUk9SO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN0YXR1cyA9IGNoaWxkLmV4ZWN1dGUodGljayk7XG5cbiAgICAgICAgaWYgKHN0YXR1cyA9PSBCZWhhdmlvdXJTdGF0dXMuU1VDQ0VTUylcbiAgICAgICAgICAgIHN0YXR1cyA9IEJlaGF2aW91clN0YXR1cy5GQUlMVVJFO1xuICAgICAgICBlbHNlIGlmIChzdGF0dXMgPT0gQmVoYXZpb3VyU3RhdHVzLkZBSUxVUkUpXG4gICAgICAgICAgICBzdGF0dXMgPSBCZWhhdmlvdXJTdGF0dXMuU1VDQ0VTUztcblxuICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBCYXNlTm9kZSB9IGZyb20gJy4uLy4uL2NvcmUvQmFzZU5vZGUnO1xuaW1wb3J0IHsgQmVoYXZpb3VyU3RhdHVzIH0gZnJvbSAnLi4vLi4vY29yZS9CZWhhdmlvdXJTdGF0dXMnO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuXG5leHBvcnQgY2xhc3MgTWVsZWVBdHRhY2tUYXJnZXQgZXh0ZW5kcyBCYXNlTm9kZSB7XG4gICAgdGljayh0aWNrKSB7XG4gICAgICAgIGNvbnN0IGZhY2FkZSA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2ZhY2FkZScsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IGF0dGFja2VySWQgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdjaGFyYWN0ZXJJZCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuICAgICAgICBjb25zdCBkZWZlbmRlcklkID0gdGljay5ibGFja2JvYXJkLmdldCgndGFyZ2V0JywgdGljay50cmVlLmlkLCBmYWxzZSk7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5SRVNPTFZFX0FUVEFDSywgYXR0YWNrZXJJZCwgZGVmZW5kZXJJZCk7XG4gICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuU1VDQ0VTUztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlTm9kZSB9IGZyb20gJy4uLy4uL2NvcmUvQmFzZU5vZGUnO1xuaW1wb3J0IHsgQmVoYXZpb3VyU3RhdHVzIH0gZnJvbSAnLi4vLi4vY29yZS9CZWhhdmlvdXJTdGF0dXMnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuXG5leHBvcnQgY2xhc3MgSXNOZXh0VG9QbGF5ZXIgZXh0ZW5kcyBCYXNlTm9kZSB7XG4gICAgdGljayh0aWNrKSB7XG4gICAgICAgIGNvbnN0IGZhY2FkZSA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2ZhY2FkZScsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlcklkID0gdGljay5ibGFja2JvYXJkLmdldCgnY2hhcmFjdGVySWQnLCB0aWNrLnRyZWUuaWQsIGZhbHNlKTtcblxuICAgICAgICBjb25zdCBjaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgY2hhcmFjdGVySWQpO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJDdXJyZW50Tm9kZSA9IGNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlO1xuICAgICAgICAvLyBmaW5kIGRlc2lyZWQgbW92ZSBwb3NpdGlvblxuICAgICAgICBjb25zdCBwbGF5ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgXCJwbGF5ZXJcIik7XG4gICAgICAgIGNvbnN0IHBsYXllck5vZGUgPSBwbGF5ZXJQcm94eS5jdXJyZW50Tm9kZTtcbiAgICAgICAgY29uc3QgY29ubmVjdGVkTm9kZXMgPSBwbGF5ZXJOb2RlLmNvbm5lY3RlZE5vZGVzO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIGNoYXJhY3RlciBpcyBhbHJlYWR5IGFkamFjZW50IHRvIHRhcmdldFxuICAgICAgICBjb25zdCBpc0FkamFjZW50ID0gY29ubmVjdGVkTm9kZXMuc29tZShuID0+IG4uZXF1YWxzKGNoYXJhY3RlckN1cnJlbnROb2RlKSk7XG5cbiAgICAgICAgaWYgKGlzQWRqYWNlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuU1VDQ0VTUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuRkFJTFVSRTtcbiAgICAgICAgfVxuXG5cbiAgICB9XG59IiwiaW1wb3J0IHsgQmFzZU5vZGUgfSBmcm9tICcuLi8uLi9jb3JlL0Jhc2VOb2RlJztcbmltcG9ydCB7IEJlaGF2aW91clN0YXR1cyB9IGZyb20gJy4uLy4uL2NvcmUvQmVoYXZpb3VyU3RhdHVzJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcblxuZXhwb3J0IGNsYXNzIE1vdmVUb3dhcmRzVGFyZ2V0IGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIHRpY2sodGljaykge1xuICAgICAgICBjb25zdCBmYWNhZGUgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdmYWNhZGUnLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2NoYXJhY3RlcklkJywgdGljay50cmVlLmlkLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IHRhcmdldElkID0gdGljay5ibGFja2JvYXJkLmdldCgndGFyZ2V0JywgdGljay50cmVlLmlkLCBmYWxzZSk7XG5cbiAgICAgICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGNoYXJhY3RlcklkKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVyQ3VycmVudE5vZGUgPSBjaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHRhcmdldElkKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0Q3VycmVudE5vZGUgPSB0YXJnZXRQcm94eS5jdXJyZW50Tm9kZTtcbiAgICAgICAgY29uc3QgY29ubmVjdGVkTm9kZXMgPSB0YXJnZXRDdXJyZW50Tm9kZS5jb25uZWN0ZWROb2RlcztcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBjb25uZWN0ZWROb2Rlcy5maWx0ZXIobm9kZSA9PiAhbm9kZS5vY2N1cGllZCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgdGhlcmUgaXMgYSBub2RlIHRvIG1vdmUgdG8gXG4gICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gRmluZCBuZWFyZXN0IG5vZGVcbiAgICAgICAgICAgIGxldCBub2RlID0gcmVzdWx0LnJlZHVjZSgoYSwgYikgPT4gZGlzdGFuY2VTcXJ0KGNoYXJhY3RlckN1cnJlbnROb2RlLCBhKSA8IGRpc3RhbmNlU3FydChjaGFyYWN0ZXJDdXJyZW50Tm9kZSwgYikgPyBhIDogYik7XG5cbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBBc3Rhci5jYWxjdWxhdGVQYXRoKGNoYXJhY3RlckN1cnJlbnROb2RlLCBub2RlKTtcbiAgICAgICAgICAgIGlmIChwYXRoICYmIHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIHRyaW0gbW92ZW1lbnRcbiAgICAgICAgICAgICAgICBjb25zdCB2byA9IGNoYXJhY3RlclByb3h5LnZvO1xuICAgICAgICAgICAgICAgIHdoaWxlIChwYXRoLmxlbmd0aCA+IHZvLmF2YWlsYWJsZU1vdmVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGguc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgZW5kIHBvaW50IGluIGFkamFjZW50IHRvIHRhcmdldFxuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5OQVZJR0FURV9BTE9OR19QQVRIICsgY2hhcmFjdGVySWQsIHBhdGgpO1xuICAgICAgICAgICAgICAgIGNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlID0gbm9kZTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXNlIHVwIG1vdmVtZW50IHBvaW50c1xuICAgICAgICBjaGFyYWN0ZXJQcm94eS5hdmFpbGFibGVNb3ZlbWVudCA9IDA7XG5cbiAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5TVUNDRVNTO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZGlzdGFuY2VTcXJ0KHAxLCBwMikge1xuICAgIHJldHVybiBNYXRoLnBvdyhwMi54IC0gcDEueCwgMikgKyBNYXRoLnBvdyhwMi55IC0gcDEueSwgMik7XG59XG4iLCJpbXBvcnQgeyBCYXNlTm9kZSB9IGZyb20gJy4uLy4uL2NvcmUvQmFzZU5vZGUnO1xuaW1wb3J0IHsgQmVoYXZpb3VyU3RhdHVzIH0gZnJvbSAnLi4vLi4vY29yZS9CZWhhdmlvdXJTdGF0dXMnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuXG5leHBvcnQgY2xhc3MgUmVsaW5xdWlzaE1vdmVtZW50UG9pbnRzIGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIHRpY2sodGljaykge1xuICAgICAgICBjb25zdCBmYWNhZGUgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdmYWNhZGUnLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2NoYXJhY3RlcklkJywgdGljay50cmVlLmlkLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBjaGFyYWN0ZXJJZCk7XG5cbiAgICAgICAgY2hhcmFjdGVyUHJveHkuYXZhaWxhYmxlTW92ZW1lbnQgPSAwO1xuXG4gICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuU1VDQ0VTUztcblxuICAgIH1cbn1cbiIsImltcG9ydCB7IE1hc3Rlck5vZGUgfSBmcm9tICcuLi9jb3JlL01hc3Rlck5vZGUnO1xuaW1wb3J0IHsgQ2hhcmFjdGVyQ29tbWFuZFRyZWUgfSBmcm9tICcuL0NoYXJhY3RlckNvbW1hbmRUcmVlJztcbmltcG9ydCB7IFByaW9yaXR5IH0gZnJvbSAnLi4vY29yZS9Qcmlvcml0eSc7XG5pbXBvcnQgeyBTZXRQbGF5ZXJBc1RhcmdldCB9IGZyb20gJy4uL2JlaGF2aW91cnMvYWN0aW9ucy9TZXRQbGF5ZXJBc1RhcmdldCc7XG5pbXBvcnQgeyBNZWxlZUF0dGFja1RhcmdldCB9IGZyb20gJy4uL2JlaGF2aW91cnMvYWN0aW9ucy9NZWxlZUF0dGFja1RhcmdldCc7XG5pbXBvcnQgeyBFbmRDb21iYXRUdXJuIH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9hY3Rpb25zL0VuZENvbWJhdFR1cm4nO1xuaW1wb3J0IHsgSGFzTW92ZW1lbnRSZW1haW5pbmcgfSBmcm9tICcuLi9iZWhhdmlvdXJzL2NvbmRpdGlvbnMvSGFzTW92ZW1lbnRSZW1haW5pbmcnO1xuaW1wb3J0IHsgSXNOZXh0VG9QbGF5ZXIgfSBmcm9tICcuLi9iZWhhdmlvdXJzL2NvbmRpdGlvbnMvSXNOZXh0VG9QbGF5ZXInO1xuaW1wb3J0IHsgTWVtU2VxdWVuY2UgfSBmcm9tICcuLi9jb3JlL01lbVNlcXVlbmNlJztcbmltcG9ydCB7IEludmVydGVyIH0gZnJvbSAnLi4vY29yZS9kZWNvcmF0b3JzL0ludmVydGVyJztcbmltcG9ydCB7IElzVGFyZ2V0RGVhZCB9IGZyb20gJy4uL2JlaGF2aW91cnMvY29uZGl0aW9ucy9Jc1RhcmdldERlYWQnO1xuaW1wb3J0IHsgTW92ZVRvd2FyZHNUYXJnZXQgfSBmcm9tICcuLi9iZWhhdmlvdXJzL2FjdGlvbnMvTW92ZVRvd2FyZHNUYXJnZXQnO1xuaW1wb3J0IHsgSXNEZWFkIH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9jb25kaXRpb25zL0lzRGVhZCc7XG5pbXBvcnQgeyBIYXNBY3Rpb25zUmVtYWluaW5nIH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9jb25kaXRpb25zL0hhc0FjdGlvbnNSZW1haW5pbmcnO1xuaW1wb3J0IHsgUmVsaW5xdWlzaE1vdmVtZW50UG9pbnRzIH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9hY3Rpb25zL1JlbGlucXVpc2hNb3ZlbWVudFBvaW50cyc7XG5cbmV4cG9ydCBjbGFzcyBCYXNpY01lbGVlVHJlZSBleHRlbmRzIENoYXJhY3RlckNvbW1hbmRUcmVlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignYmFzaWNNZWxlZVRyZWUnKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXNlKCkge1xuICAgICAgICB0aGlzLnRyZWUucm9vdCA9IG5ldyBNYXN0ZXJOb2RlKFtcbiAgICAgICAgICAgIG5ldyBQcmlvcml0eShcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIG5ldyBNZW1TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgU2V0UGxheWVyQXNUYXJnZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBJbnZlcnRlcihbbmV3IElzRGVhZCgpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgSW52ZXJ0ZXIoW25ldyBJc1RhcmdldERlYWQoKV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFByaW9yaXR5KFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWVtU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgSXNOZXh0VG9QbGF5ZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEhhc0FjdGlvbnNSZW1haW5pbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFNldFBsYXllckFzVGFyZ2V0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNZWxlZUF0dGFja1RhcmdldCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUmVsaW5xdWlzaE1vdmVtZW50UG9pbnRzKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1lbVNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEhhc01vdmVtZW50UmVtYWluaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTZXRQbGF5ZXJBc1RhcmdldCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTW92ZVRvd2FyZHNUYXJnZXQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG5cbiAgICAgICAgICAgICAgICAgICAgbmV3IEVuZENvbWJhdFR1cm4oKVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICApXG4gICAgICAgIF0pO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBCYXNlTm9kZSB9IGZyb20gJy4uLy4uL2NvcmUvQmFzZU5vZGUnO1xuaW1wb3J0IHsgQmVoYXZpb3VyU3RhdHVzIH0gZnJvbSAnLi4vLi4vY29yZS9CZWhhdmlvdXJTdGF0dXMnO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuXG5leHBvcnQgY2xhc3MgUmFuZ2VBdHRhY2tUYXJnZXQgZXh0ZW5kcyBCYXNlTm9kZSB7XG4gICAgdGljayh0aWNrKSB7XG4gICAgICAgIGNvbnN0IGZhY2FkZSA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2ZhY2FkZScsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IGF0dGFja2VySWQgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdjaGFyYWN0ZXJJZCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuICAgICAgICBjb25zdCBkZWZlbmRlcklkID0gdGljay5ibGFja2JvYXJkLmdldCgndGFyZ2V0JywgdGljay50cmVlLmlkLCBmYWxzZSk7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5SRVNPTFZFX1JBTkdFRF9BVFRBQ0ssIGF0dGFja2VySWQsIGRlZmVuZGVySWQpO1xuICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLlNVQ0NFU1M7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZU5vZGUgfSBmcm9tICcuLi8uLi9jb3JlL0Jhc2VOb2RlJztcbmltcG9ydCB7IEJlaGF2aW91clN0YXR1cyB9IGZyb20gJy4uLy4uL2NvcmUvQmVoYXZpb3VyU3RhdHVzJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcblxuZXhwb3J0IGNsYXNzIE1haW50YWluRGlzdGFuY2VGcm9tVGFyZ2V0IGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIGNvbnN0cnVjdG9yKG1pbkRpc3RhbmNlLCBtYXhEaXN0YW5jZSkge1xuICAgICAgICBzdXBlcihbXSk7XG4gICAgICAgIHRoaXMubWluRGlzdGFuY2UgPSBtaW5EaXN0YW5jZTtcbiAgICAgICAgdGhpcy5tYXhEaXN0YW5jZSA9IG1heERpc3RhbmNlO1xuICAgIH1cblxuICAgIHRpY2sodGljaykge1xuICAgICAgICBjb25zdCBmYWNhZGUgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdmYWNhZGUnLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2NoYXJhY3RlcklkJywgdGljay50cmVlLmlkLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IHRhcmdldElkID0gdGljay5ibGFja2JvYXJkLmdldCgndGFyZ2V0JywgdGljay50cmVlLmlkLCBmYWxzZSk7XG5cbiAgICAgICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGNoYXJhY3RlcklkKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVyQ3VycmVudE5vZGUgPSBjaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHRhcmdldElkKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0Q3VycmVudE5vZGUgPSB0YXJnZXRQcm94eS5jdXJyZW50Tm9kZTtcblxuICAgICAgICBjb25zdCBtaW5EaXN0YW5jZVNxcnQgPSBNYXRoLnBvdyh0aGlzLm1pbkRpc3RhbmNlLCAyKTtcbiAgICAgICAgY29uc3QgbWF4RGlzdGFuY2VTcXJ0ID0gTWF0aC5wb3codGhpcy5tYXhEaXN0YW5jZSwgMik7XG5cbiAgICAgICAgY29uc3QgbW92ZVBvaW50c0F2YWlsYWJsZSA9IGNoYXJhY3RlclByb3h5LmF2YWlsYWJsZU1vdmVtZW50O1xuICAgICAgICBjaGFyYWN0ZXJQcm94eS5hdmFpbGFibGVNb3ZlbWVudCA9IDA7XG5cbiAgICAgICAgLy8gdXNlIHVwIG1vdmVtZW50IHBvaW50c1xuICAgICAgICBjb25zdCBkaXN0YW5jZVRvVGFyZ2V0ID0gZGlzdGFuY2VTcXJ0KHRhcmdldEN1cnJlbnROb2RlLCBjaGFyYWN0ZXJDdXJyZW50Tm9kZSk7XG4gICAgICAgIGlmIChkaXN0YW5jZVRvVGFyZ2V0ID49IG1pbkRpc3RhbmNlU3FydCAmJiBkaXN0YW5jZVRvVGFyZ2V0IDw9IG1heERpc3RhbmNlU3FydCkge1xuICAgICAgICAgICAgLy8gYWxyZWFkeSB3aXRoaW4gcmFuZ2UsIGdldCBvbiB3aXRoIGl0XG4gICAgICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLkZBSUxVUkU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBtb3ZlYWJsZU5vZGVzID0gQXN0YXIuYnJlYWR0aEZpcnN0U2VhcmNoKGNoYXJhY3RlckN1cnJlbnROb2RlLCBtb3ZlUG9pbnRzQXZhaWxhYmxlKTtcbiAgICAgICAgICAgIGlmIChtb3ZlYWJsZU5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2VUb1RhcmdldCA8IG1pbkRpc3RhbmNlU3FydCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUb28gY2xvc2VcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGUgPSBtb3ZlYWJsZU5vZGVzLnJlZHVjZSgoYSwgYikgPT4gZGlzdGFuY2VTcXJ0KHRhcmdldEN1cnJlbnROb2RlLCBhKSA+IGRpc3RhbmNlU3FydCh0YXJnZXRDdXJyZW50Tm9kZSwgYikgPyBhIDogYik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSBBc3Rhci5jYWxjdWxhdGVQYXRoKGNoYXJhY3RlckN1cnJlbnROb2RlLCBub2RlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocGF0aCAmJiBwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBlbmQgcG9pbnQgaW4gYWRqYWNlbnQgdG8gdGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkFWSUdBVEVfQUxPTkdfUEFUSCArIGNoYXJhY3RlcklkLCBwYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRvbyBmYXIgYXdheVxuICAgICAgICAgICAgICAgICAgICBsZXQgbm9kZSA9IG1vdmVhYmxlTm9kZXMucmVkdWNlKChhLCBiKSA9PiBkaXN0YW5jZVNxcnQodGFyZ2V0Q3VycmVudE5vZGUsIGEpIDwgZGlzdGFuY2VTcXJ0KHRhcmdldEN1cnJlbnROb2RlLCBiKSA/IGEgOiBiKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgoY2hhcmFjdGVyQ3VycmVudE5vZGUsIG5vZGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXRoICYmIHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGVuZCBwb2ludCBpbiBhZGphY2VudCB0byB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5OQVZJR0FURV9BTE9OR19QQVRIICsgY2hhcmFjdGVySWQsIHBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5TVUNDRVNTO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuRkFJTFVSRTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkaXN0YW5jZVNxcnQocDEsIHAyKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHAyLnggLSBwMS54LCAyKSArIE1hdGgucG93KHAyLnkgLSBwMS55LCAyKSArIE1hdGgucG93KHAyLnogLSBwMS56LCAyKTtcbn1cbiIsImltcG9ydCB7IEJhc2VOb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9CYXNlTm9kZSc7XG5pbXBvcnQgeyBCZWhhdmlvdXJTdGF0dXMgfSBmcm9tICcuLi8uLi9jb3JlL0JlaGF2aW91clN0YXR1cyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5cbmV4cG9ydCBjbGFzcyBQaWNrTmV4dEFjdGlvbiBleHRlbmRzIEJhc2VOb2RlIHtcbiAgICB0aWNrKHRpY2spIHtcbiAgICAgICAgY29uc3QgZmFjYWRlID0gdGljay5ibGFja2JvYXJkLmdldCgnZmFjYWRlJywgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVySWQgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdjaGFyYWN0ZXJJZCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRFVEVSTUlORV9ORVhUX0VORU1ZX0FDVElPTiwgY2hhcmFjdGVySWQpO1xuICAgICAgICB9LCA1MDApO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VOb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9CYXNlTm9kZSc7XG5pbXBvcnQgeyBCZWhhdmlvdXJTdGF0dXMgfSBmcm9tICcuLi8uLi9jb3JlL0JlaGF2aW91clN0YXR1cyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5pbXBvcnQgeyBHYW1lTWFwUHJveHkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lTWFwL0dhbWVNYXBQcm94eSc7XG5pbXBvcnQgeyBjZW50ZXJQb2ludENoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvQ2hhcmFjdGVyQ2VudGVyUG9pbnQnO1xuXG5leHBvcnQgY2xhc3MgQ2FuU2VlVGFyZ2V0IGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIHRpY2sodGljaykge1xuICAgICAgICBjb25zdCBmYWNhZGUgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdmYWNhZGUnLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2NoYXJhY3RlcklkJywgdGljay50cmVlLmlkLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IHRhcmdldElkID0gdGljay5ibGFja2JvYXJkLmdldCgndGFyZ2V0JywgdGljay50cmVlLmlkLCBmYWxzZSk7XG5cbiAgICAgICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGNoYXJhY3RlcklkKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVyQ3VycmVudE5vZGUgPSBjaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZTtcbiAgICAgICAgLy8gZmluZCBkZXNpcmVkIG1vdmUgcG9zaXRpb25cbiAgICAgICAgY29uc3QgdGFyZ2V0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHRhcmdldElkKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRhcmdldFByb3h5LmN1cnJlbnROb2RlO1xuXG4gICAgICAgIGNvbnN0IGdhbWVNYXBQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVNYXBQcm94eS5OQU1FKTtcblxuICAgICAgICAvLyBMb29rIHRvIHRoZSBjZW50ZXIgb2YgZWFjaCBjaGFyYWN0ZXJcbiAgICAgICAgY29uc3QgZnJvbVBvcyA9IGNlbnRlclBvaW50Q2hhcmFjdGVyUHJveHkoY2hhcmFjdGVyUHJveHkpO1xuICAgICAgICBjb25zdCB0b1BvcyA9IGNlbnRlclBvaW50Q2hhcmFjdGVyUHJveHkodGFyZ2V0UHJveHkpO1xuXG4gICAgICAgIGNvbnN0IGNhblNlZVRhcmdldCA9ICFnYW1lTWFwUHJveHkucmF5SW50ZXJzZWN0c1dhbGwoZnJvbVBvcywgdG9Qb3MpO1xuICAgICAgICBpZiAoY2FuU2VlVGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLlNVQ0NFU1M7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLkZBSUxVUkU7XG5cbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBCYXNlTm9kZSB9IGZyb20gJy4uLy4uL2NvcmUvQmFzZU5vZGUnO1xuaW1wb3J0IHsgQmVoYXZpb3VyU3RhdHVzIH0gZnJvbSAnLi4vLi4vY29yZS9CZWhhdmlvdXJTdGF0dXMnO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuaW1wb3J0IHsgQXN0YXIgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lTWFwL25hdmlnYXRpb24vQXN0YXInO1xuaW1wb3J0IHsgR2FtZU1hcFByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZU1hcC9HYW1lTWFwUHJveHknO1xuaW1wb3J0IHsgY2VudGVyUG9pbnRDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL0NoYXJhY3RlckNlbnRlclBvaW50JztcblxuZXhwb3J0IGNsYXNzIE1vdmVUb3dhcmRzVGFyZ2V0VW50aWxWaXNpYmxlIGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIHRpY2sodGljaykge1xuICAgICAgICBjb25zdCBmYWNhZGUgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdmYWNhZGUnLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2NoYXJhY3RlcklkJywgdGljay50cmVlLmlkLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IHRhcmdldElkID0gdGljay5ibGFja2JvYXJkLmdldCgndGFyZ2V0JywgdGljay50cmVlLmlkLCBmYWxzZSk7XG5cbiAgICAgICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGNoYXJhY3RlcklkKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVyQ3VycmVudE5vZGUgPSBjaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHRhcmdldElkKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRhcmdldFByb3h5LmN1cnJlbnROb2RlO1xuICAgICAgICBjb25zdCBjb25uZWN0ZWROb2RlcyA9IHRhcmdldE5vZGUuY29ubmVjdGVkTm9kZXM7XG5cblxuICAgICAgICBjb25zdCBnYW1lTWFwUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lTWFwUHJveHkuTkFNRSk7XG5cblxuICAgICAgICBjb25zdCByZXN1bHQgPSBjb25uZWN0ZWROb2Rlcy5maWx0ZXIobm9kZSA9PiAhbm9kZS5vY2N1cGllZCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgdGhlcmUgaXMgYSBub2RlIHRvIG1vdmUgdG8gXG4gICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gRmluZCBuZWFyZXN0IG5vZGVcbiAgICAgICAgICAgIGxldCBub2RlID0gcmVzdWx0LnJlZHVjZSgoYSwgYikgPT4gZGlzdGFuY2VTcXJ0KGNoYXJhY3RlckN1cnJlbnROb2RlLCBhKSA8IGRpc3RhbmNlU3FydChjaGFyYWN0ZXJDdXJyZW50Tm9kZSwgYikgPyBhIDogYik7XG5cbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBBc3Rhci5jYWxjdWxhdGVQYXRoKGNoYXJhY3RlckN1cnJlbnROb2RlLCBub2RlKTtcbiAgICAgICAgICAgIGlmIChwYXRoICYmIHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIHRyaW0gbW92ZW1lbnRcbiAgICAgICAgICAgICAgICBjb25zdCB2byA9IGNoYXJhY3RlclByb3h5LnZvO1xuICAgICAgICAgICAgICAgIHdoaWxlIChwYXRoLmxlbmd0aCA+IHZvLmF2YWlsYWJsZU1vdmVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGguc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0b1BvcyA9IGNlbnRlclBvaW50Q2hhcmFjdGVyUHJveHkodGFyZ2V0UHJveHkpO1xuXG4gICAgICAgICAgICAgICAgLy8gRm9sbG93IHBhdGggdG8gc2VlIGlmIHRhcmdldCBpcyB2aXNpYmxlIGZyb20gYW55IHBvaW50XG4gICAgICAgICAgICAgICAgbGV0IGRlbGV0ZUNvdW50ID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRoTm9kZSA9IHBhdGhbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJvbVBvcyA9IG5ldyBwYy5WZWMzKHBhdGhOb2RlLngsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoTm9kZS55ICsgY2hhcmFjdGVyUHJveHkuaGVpZ2h0ICogMC41LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aE5vZGUueik7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FuU2VlVGFyZ2V0ID0gIWdhbWVNYXBQcm94eS5yYXlJbnRlcnNlY3RzV2FsbChmcm9tUG9zLCB0b1Bvcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5TZWVUYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUNvdW50ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVHJpbSB0byBwb2ludCBvZiB2aXNpYmlsaXR5XG4gICAgICAgICAgICAgICAgcGF0aC5zcGxpY2UoMCwgZGVsZXRlQ291bnQpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGVuZCBwb2ludCBpbiBhZGphY2VudCB0byB0YXJnZXRcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkFWSUdBVEVfQUxPTkdfUEFUSCArIGNoYXJhY3RlcklkLCBwYXRoKTtcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IG5vZGU7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVzZSB1cCBtb3ZlbWVudCBwb2ludHNcbiAgICAgICAgY2hhcmFjdGVyUHJveHkuYXZhaWxhYmxlTW92ZW1lbnQgPSAwO1xuXG4gICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuU1VDQ0VTUztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpc3RhbmNlU3FydChwMSwgcDIpIHtcbiAgICByZXR1cm4gTWF0aC5wb3cocDIueCAtIHAxLngsIDIpICsgTWF0aC5wb3cocDIueSAtIHAxLnksIDIpO1xufVxuIiwiaW1wb3J0IHsgTWFzdGVyTm9kZSB9IGZyb20gJy4uL2NvcmUvTWFzdGVyTm9kZSc7XG5pbXBvcnQgeyBDaGFyYWN0ZXJDb21tYW5kVHJlZSB9IGZyb20gJy4vQ2hhcmFjdGVyQ29tbWFuZFRyZWUnO1xuaW1wb3J0IHsgUHJpb3JpdHkgfSBmcm9tICcuLi9jb3JlL1ByaW9yaXR5JztcbmltcG9ydCB7IFNldFBsYXllckFzVGFyZ2V0IH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9hY3Rpb25zL1NldFBsYXllckFzVGFyZ2V0JztcbmltcG9ydCB7IEVuZENvbWJhdFR1cm4gfSBmcm9tICcuLi9iZWhhdmlvdXJzL2FjdGlvbnMvRW5kQ29tYmF0VHVybic7XG5pbXBvcnQgeyBNZW1TZXF1ZW5jZSB9IGZyb20gJy4uL2NvcmUvTWVtU2VxdWVuY2UnO1xuaW1wb3J0IHsgSW52ZXJ0ZXIgfSBmcm9tICcuLi9jb3JlL2RlY29yYXRvcnMvSW52ZXJ0ZXInO1xuaW1wb3J0IHsgSXNUYXJnZXREZWFkIH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9jb25kaXRpb25zL0lzVGFyZ2V0RGVhZCc7XG5pbXBvcnQgeyBJc0RlYWQgfSBmcm9tICcuLi9iZWhhdmlvdXJzL2NvbmRpdGlvbnMvSXNEZWFkJztcbmltcG9ydCB7IEhhc01vdmVtZW50UmVtYWluaW5nIH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9jb25kaXRpb25zL0hhc01vdmVtZW50UmVtYWluaW5nJztcbmltcG9ydCB7IEhhc0FjdGlvbnNSZW1haW5pbmcgfSBmcm9tICcuLi9iZWhhdmlvdXJzL2NvbmRpdGlvbnMvSGFzQWN0aW9uc1JlbWFpbmluZyc7XG5pbXBvcnQgeyBSYW5nZUF0dGFja1RhcmdldCB9IGZyb20gJy4uL2JlaGF2aW91cnMvYWN0aW9ucy9SYW5nZUF0dGFja1RhcmdldCc7XG5pbXBvcnQgeyBNYWludGFpbkRpc3RhbmNlRnJvbVRhcmdldCB9IGZyb20gJy4uL2JlaGF2aW91cnMvYWN0aW9ucy9NYWludGFpbkRpc3RhbmNlRnJvbVRhcmdldCc7XG5pbXBvcnQgeyBQaWNrTmV4dEFjdGlvbiB9IGZyb20gJy4uL2JlaGF2aW91cnMvYWN0aW9ucy9QaWNrTmV4dEFjdGlvbic7XG5pbXBvcnQgeyBDYW5TZWVUYXJnZXQgfSBmcm9tICcuLi9iZWhhdmlvdXJzL2NvbmRpdGlvbnMvQ2FuU2VlVGFyZ2V0JztcbmltcG9ydCB7IE1vdmVUb3dhcmRzVGFyZ2V0VW50aWxWaXNpYmxlIH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9hY3Rpb25zL01vdmVUb3dhcmRzVGFyZ2V0VW50aWxWaXNpYmxlJztcblxuZXhwb3J0IGNsYXNzIEJhc2ljUmFuZ2VkVHJlZSBleHRlbmRzIENoYXJhY3RlckNvbW1hbmRUcmVlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignYmFzaWNSYW5nZWRUcmVlJyk7XG4gICAgfVxuXG4gICAgaW5pdGlhbGlzZSgpIHtcbiAgICAgICAgdGhpcy50cmVlLnJvb3QgPSBuZXcgTWFzdGVyTm9kZShbXG4gICAgICAgICAgICBuZXcgUHJpb3JpdHkoXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICBuZXcgTWVtU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFNldFBsYXllckFzVGFyZ2V0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgSW52ZXJ0ZXIoW25ldyBJc0RlYWQoKV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEludmVydGVyKFtuZXcgSXNUYXJnZXREZWFkKCldKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQcmlvcml0eShbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1lbVNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEhhc01vdmVtZW50UmVtYWluaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBJbnZlcnRlcihbbmV3IENhblNlZVRhcmdldCgpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNb3ZlVG93YXJkc1RhcmdldFVudGlsVmlzaWJsZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1lbVNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEhhc01vdmVtZW50UmVtYWluaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQcmlvcml0eShbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWFpbnRhaW5EaXN0YW5jZUZyb21UYXJnZXQoOSwgMTIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBpY2tOZXh0QWN0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWVtU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgSGFzQWN0aW9uc1JlbWFpbmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ2FuU2VlVGFyZ2V0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSYW5nZUF0dGFja1RhcmdldCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBuZXcgRW5kQ29tYmF0VHVybigpXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIClcbiAgICAgICAgXSk7XG4gICAgfVxufSIsImV4cG9ydCBjbGFzcyBCbGFja2JvYXJkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXNlKCk7XG4gICAgfVxuXG4gICAgaW5pdGlhbGlzZSgpIHtcbiAgICAgICAgdGhpcy5iYXNlTWVtb3J5ID0ge307IC8vIHVzZWQgdG8gc3RvcmUgZ2xvYmFsIGluZm9ybWF0aW9uXG4gICAgICAgIHRoaXMudHJlZU1lbW9yeSA9IHt9OyAvLyB1c2VkIHRvIHN0b3JlIHRyZWUgYW5kIG5vZGUgaW5mb3JtYXRpb25cbiAgICB9XG5cbiAgICBnZXRUcmVlTWVtb3J5KHRyZWVTY29wZSkge1xuICAgICAgICBpZiAoIXRoaXMudHJlZU1lbW9yeVt0cmVlU2NvcGVdKSB7XG4gICAgICAgICAgICB0aGlzLnRyZWVNZW1vcnlbdHJlZVNjb3BlXSA9IHtcbiAgICAgICAgICAgICAgICBub2RlTWVtb3J5OiB7fSxcbiAgICAgICAgICAgICAgICBvcGVuTm9kZXM6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRyZWVNZW1vcnlbdHJlZVNjb3BlXTtcbiAgICB9XG5cbiAgICBnZXROb2RlTWVtb3J5KHRyZWVNZW1vcnksIG5vZGVTY29wZSkge1xuICAgICAgICBjb25zdCBtZW1vcnkgPSB0cmVlTWVtb3J5Wydub2RlTWVtb3J5J107XG4gICAgICAgIGlmICghbWVtb3J5Lmhhc093blByb3BlcnR5KG5vZGVTY29wZSkpIHtcbiAgICAgICAgICAgIG1lbW9yeVtub2RlU2NvcGVdID0ge307XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWVtb3J5W25vZGVTY29wZV07XG4gICAgfVxuXG4gICAgZ2V0TWVtb3J5KHRyZWVTY29wZSwgbm9kZVNjb3BlKSB7XG4gICAgICAgIHZhciBtZW1vcnkgPSB0aGlzLmJhc2VNZW1vcnk7XG5cbiAgICAgICAgaWYgKHRyZWVTY29wZSkge1xuICAgICAgICAgICAgbWVtb3J5ID0gdGhpcy5nZXRUcmVlTWVtb3J5KHRyZWVTY29wZSk7XG5cbiAgICAgICAgICAgIGlmIChub2RlU2NvcGUpIHtcbiAgICAgICAgICAgICAgICBtZW1vcnkgPSB0aGlzLmdldE5vZGVNZW1vcnkobWVtb3J5LCBub2RlU2NvcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lbW9yeTtcbiAgICB9O1xuXG4gICAgc2V0KGtleSwgdmFsdWUsIHRyZWVTY29wZSwgbm9kZVNjb3BlKSB7XG4gICAgICAgIGNvbnN0IG1lbW9yeSA9IHRoaXMuZ2V0TWVtb3J5KHRyZWVTY29wZSwgbm9kZVNjb3BlKTtcbiAgICAgICAgbWVtb3J5W2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuXG4gICAgZ2V0KGtleSwgdHJlZVNjb3BlLCBub2RlU2NvcGUpIHtcbiAgICAgICAgY29uc3QgbWVtb3J5ID0gdGhpcy5nZXRNZW1vcnkodHJlZVNjb3BlLCBub2RlU2NvcGUpO1xuICAgICAgICByZXR1cm4gbWVtb3J5W2tleV07XG4gICAgfVxufSIsImV4cG9ydCBjbGFzcyBUaWNrIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXNlKCk7XG4gICAgfVxuXG4gICAgaW5pdGlhbGlzZSgpIHtcbiAgICAgICAgdGhpcy50cmVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm9wZW5Ob2RlcyA9IFtdO1xuICAgICAgICB0aGlzLm5vZGVDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuZGVidWcgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJsYWNrYm9hcmQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZW50ZXJOb2RlKG5vZGUpIHtcbiAgICAgICAgdGhpcy5ub2RlQ291bnQrKztcbiAgICAgICAgdGhpcy5vcGVuTm9kZXMucHVzaChub2RlKTtcbiAgICB9XG5cbiAgICBvcGVuTm9kZShub2RlKSB7XG5cbiAgICB9XG5cbiAgICB0aWNrTm9kZShub2RlKSB7XG5cbiAgICB9XG5cbiAgICBjbG9zZU5vZGUobm9kZSkge1xuICAgICAgICB0aGlzLm9wZW5Ob2Rlcy5wb3AoKTtcbiAgICB9XG5cbiAgICBleGl0Tm9kZShub2RlKSB7XG5cbiAgICB9XG59IiwiaW1wb3J0IHsgVGljayB9IGZyb20gXCIuL1RpY2tcIjtcblxuZXhwb3J0IGNsYXNzIEJlaGF2aW91clRyZWUge1xuICAgIGNvbnN0cnVjdG9yKGlkKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbGlzZShpZCk7XG4gICAgfVxuXG4gICAgaW5pdGlhbGlzZShpZCkge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucm9vdCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB0aWNrKHRhcmdldCwgYmxhY2tib2FyZCkge1xuICAgICAgICAvKiBDUkVBVEUgQSBUSUNLIE9CSkVDVCAqL1xuICAgICAgICBjb25zdCB0aWNrID0gbmV3IFRpY2soKTtcbiAgICAgICAgdGljay50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRpY2suYmxhY2tib2FyZCA9IGJsYWNrYm9hcmQ7XG4gICAgICAgIHRpY2sudHJlZSA9IHRoaXM7XG5cbiAgICAgICAgLyogVElDSyBOT0RFICovXG4gICAgICAgIHRoaXMucm9vdC5leGVjdXRlKHRpY2spO1xuXG4gICAgICAgIC8qIENMT1NFIE5PREVTIEZST00gTEFTVCBUSUNLLCBJRiBORUVERUQgKi9cbiAgICAgICAgY29uc3QgbGFzdE9wZW5Ob2RlcyA9IGJsYWNrYm9hcmQuZ2V0KCdvcGVuTm9kZXMnLCB0aGlzLmlkKSB8fCBbXTtcbiAgICAgICAgY29uc3QgY3Vyck9wZW5Ob2RlcyA9IHRpY2sub3Blbk5vZGVzLnNsaWNlKDApO1xuXG4gICAgICAgIC8vIGRvZXMgbm90IGNsb3NlIGlmIGl0IGlzIHN0aWxsIG9wZW4gaW4gdGhpcyB0aWNrXG4gICAgICAgIGxldCBzdGFydCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5taW4obGFzdE9wZW5Ob2Rlcy5sZW5ndGgsIGN1cnJPcGVuTm9kZXMubGVuZ3RoKTsgaSsrKSB7XG4gICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgaWYgKGxhc3RPcGVuTm9kZXNbaV0gIT09IGN1cnJPcGVuTm9kZXNbaV0pIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsb3NlIHRoZSBub2Rlc1xuICAgICAgICBmb3IgKGxldCBpID0gbGFzdE9wZW5Ob2Rlcy5sZW5ndGggLSAxOyBpID49IHN0YXJ0OyBpLS0pIHtcbiAgICAgICAgICAgIGxhc3RPcGVuTm9kZXNbaV0uY2xvc2UodGljayk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBQT1BVTEFURSBCTEFDS0JPQVJEICovXG4gICAgICAgIGJsYWNrYm9hcmQuc2V0KCdvcGVuTm9kZXMnLCBjdXJyT3Blbk5vZGVzLCB0aGlzLmlkKTtcbiAgICAgICAgYmxhY2tib2FyZC5zZXQoJ25vZGVDb3VudCcsIHRpY2subm9kZUNvdW50LCB0aGlzLmlkKTtcblxuICAgIH1cbn0iLCJpbXBvcnQgeyBCbGFja2JvYXJkIH0gZnJvbSAnLi4vY29yZS9CbGFja2JvYXJkJztcbmltcG9ydCB7IEJlaGF2aW91clRyZWUgfSBmcm9tICcuLi9jb3JlL0JlaGF2aW91clRyZWUnO1xuXG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyQ29tbWFuZFRyZWUge1xuICAgIGNvbnN0cnVjdG9yKGlkKSB7XG4gICAgICAgIHRoaXMuaWQgPSAnYmFzaWNNZWxlZVRyZWUnO1xuICAgICAgICB0aGlzLmJsYWNrYm9hcmQgPSBuZXcgQmxhY2tib2FyZCgpO1xuICAgICAgICB0aGlzLnRyZWUgPSBuZXcgQmVoYXZpb3VyVHJlZShpZCk7XG5cbiAgICAgICAgdGhpcy5pbml0aWFsaXNlKCk7XG4gICAgfVxuXG4gICAgaW5pdGlhbGlzZSgpIHtcbiAgICAgICAgLy8gT3ZlcnJpZGUgdG8gc2V0IHRyZWVcbiAgICB9XG5cbiAgICBydW5Db21tYW5kcyhmYWNhZGUsIGNoYXJhY3RlcklkKSB7XG4gICAgICAgIHRoaXMuYmxhY2tib2FyZC5zZXQoXCJmYWNhZGVcIiwgZmFjYWRlLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLmJsYWNrYm9hcmQuc2V0KFwiY2hhcmFjdGVySWRcIiwgY2hhcmFjdGVySWQsIHRoaXMudHJlZS5pZCwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMudHJlZS50aWNrKHRoaXMsIHRoaXMuYmxhY2tib2FyZCk7XG4gICAgfVxuXG59IiwiZXhwb3J0IGNsYXNzIEdhbWVDb21tYW5kcyB7XG4gICAgc3RhdGljIGdldCBDSEFOR0VfU0NFTkUoKSB7IHJldHVybiBcIkNIQU5HRV9TQ0VORVwiIH07XG4gICAgc3RhdGljIGdldCBDSEFOR0VfU0NFTkVfQ09NUExFVEUoKSB7IHJldHVybiBcIkNIQU5HRV9TQ0VORV9DT01QTEVURVwiIH07XG4gICAgc3RhdGljIGdldCBBUFBfSU5JVElBTElTRUQoKSB7IHJldHVybiBcIkFQUF9JTklUSUFMSVNFRFwiIH07XG4gICAgc3RhdGljIGdldCBQQVJTRV9HQU1FTUFQKCkgeyByZXR1cm4gXCJQQVJTRV9HQU1FTUFQXCIgfTtcbiAgICBzdGF0aWMgZ2V0IE1BUF9HUklEX0NSRUFURUQoKSB7IHJldHVybiBcIk1BUF9HUklEX0NSRUFURURcIiB9O1xuXG4gICAgc3RhdGljIGdldCBOQVZJR0FURV9UT19OT0RFKCkgeyByZXR1cm4gXCJOQVZJR0FURV9UT19OT0RFXCIgfTtcbiAgICBzdGF0aWMgZ2V0IE5BVklHQVRFX1RPX1dBWVBPSU5UKCkgeyByZXR1cm4gXCJOQVZJR0FURV9UT19XQVlQT0lOVFwiIH07XG4gICAgc3RhdGljIGdldCBOQVZJR0FURV9USFJPVUdIX1BPUlRBTCgpIHsgcmV0dXJuIFwiTkFWSUdBVEVfVEhST1VHSF9QT1JUQUxcIiB9O1xuICAgIHN0YXRpYyBnZXQgQ09NQkFUX05BVklHQVRFX1RPX05PREUoKSB7IHJldHVybiBcIkNPTUJBVF9OQVZJR0FURV9UT19OT0RFXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFNFVF9DQU1FUkFfVEFSR0VUKCkgeyByZXR1cm4gXCJTRVRfQ0FNRVJBX1RBUkdFVFwiIH07XG4gICAgc3RhdGljIGdldCBJTlBVVF9EUkFHX01PVVNFKCkgeyByZXR1cm4gXCJJTlBVVF9EUkFHX01PVVNFXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgTU9WRURfVE9fTk9ERSgpIHsgcmV0dXJuIFwiTU9WRURfVE9fTk9ERVwiIH07XG4gICAgc3RhdGljIGdldCBGSU5JU0hFRF9NT1ZFKCkgeyByZXR1cm4gXCJGSU5JU0hFRF9NT1ZFXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFNUQVJUX0NPTUJBVCgpIHsgcmV0dXJuIFwiU1RBUlRfQ09NQkFUXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFNIT1dfVE9BU1RfTUVTU0FHRSgpIHsgcmV0dXJuIFwiU0hPV19UT0FTVF9NRVNTQUdFXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgTkVYVF9DT01CQVRfVFVSTigpIHsgcmV0dXJuIFwiTkVYVF9DT01CQVRfVFVSTlwiIH07XG4gICAgc3RhdGljIGdldCBORVhUX0NPTUJBVF9ST1VORCgpIHsgcmV0dXJuIFwiTkVYVF9DT01CQVRfUk9VTkRcIiB9O1xuXG4gICAgc3RhdGljIGdldCBFTkRfQ09NQkFUKCkgeyByZXR1cm4gXCJFTkRfQ09NQkFUXCIgfTtcbiAgICBzdGF0aWMgZ2V0IEVORF9DT01CQVRfVFVSTigpIHsgcmV0dXJuIFwiRU5EX0NPTUJBVF9UVVJOXCIgfTtcbiAgICBzdGF0aWMgZ2V0IEVORU1ZX1RVUk4oKSB7IHJldHVybiBcIkVORU1ZX1RVUk5cIiB9O1xuICAgIHN0YXRpYyBnZXQgU0VMRUNURURfTk9ERSgpIHsgcmV0dXJuIFwiU0VMRUNURURfTk9ERVwiIH07XG4gICAgc3RhdGljIGdldCBERVRFUk1JTkVfTkVYVF9FTkVNWV9BQ1RJT04oKSB7IHJldHVybiBcIkRFVEVSTUlORV9ORVhUX0VORU1ZX0FDVElPTlwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IE5BVklHQVRFX0FMT05HX1BBVEgoKSB7IHJldHVybiBcIk5BVklHQVRFX0FMT05HX1BBVEhcIiB9O1xuXG4gICAgc3RhdGljIGdldCBTSE9XX1dBTEtBQkxFX0FSRUEoKSB7IHJldHVybiBcIlNIT1dfV0FMS0FCTEVfQVJFQVwiIH07XG4gICAgc3RhdGljIGdldCBISURFX1dBTEtBQkxFX0FSRUEoKSB7IHJldHVybiBcIkhJREVfV0FMS0FCTEVfQVJFQVwiIH07XG5cblxuICAgIHN0YXRpYyBnZXQgRU5EX01PVkVNRU5UKCkgeyByZXR1cm4gXCJFTkRfTU9WRU1FTlRcIiB9O1xuICAgIHN0YXRpYyBnZXQgQVdBSVRfUExBWUVSX0NPTUJBVF9JTlBVVCgpIHsgcmV0dXJuIFwiQVdBSVRfUExBWUVSX0NPTUJBVF9JTlBVVFwiIH07XG4gICAgc3RhdGljIGdldCBTRVRfQ0hBUkFDVEVSX1RPX05PREUoKSB7IHJldHVybiBcIlNFVF9DSEFSQUNURVJfVE9fTk9ERVwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IFNFTEVDVF9HQU1FX0NIQVJBQ1RFUigpIHsgcmV0dXJuIFwiU0VMRUNUX0dBTUVfQ0hBUkFDVEVSXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgVE9HR0xFX0JVVFRPTigpIHsgcmV0dXJuIFwiVE9HR0xFX0JVVFRPTlwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IFVTRV9QTEFZRVJfQUNUSU9OKCkgeyByZXR1cm4gXCJVU0VfUExBWUVSX0FDVElPTlwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IFJFU09MVkVfQVRUQUNLKCkgeyByZXR1cm4gXCJSRVNPTFZFX0FUVEFDS1wiIH07XG4gICAgc3RhdGljIGdldCBSRVNPTFZFX1JBTkdFRF9BVFRBQ0soKSB7IHJldHVybiBcIlJFU09MVkVfUkFOR0VEX0FUVEFDS1wiIH07XG4gICAgc3RhdGljIGdldCBNT1ZFX0FMT05HX1BBVEhfQU5EX0FUVEFDSygpIHsgcmV0dXJuIFwiTU9WRV9BTE9OR19QQVRIX0FORF9BVFRBQ0tcIiB9O1xuXG4gICAgc3RhdGljIGdldCBVUERBVEVfU1RBTUlOQSgpIHsgcmV0dXJuIFwiVVBEQVRFX1NUQU1JTkFcIiB9O1xuICAgIHN0YXRpYyBnZXQgRElTUExBWV9ERUFUSCgpIHsgcmV0dXJuIFwiRElTUExBWV9ERUFUSFwiIH07XG4gICAgc3RhdGljIGdldCBESVNQTEFZX0FUVEFDSygpIHsgcmV0dXJuIFwiRElTUExBWV9BVFRBQ0tcIiB9O1xuICAgIHN0YXRpYyBnZXQgRElTUExBWV9ISVQoKSB7IHJldHVybiBcIkRJU1BMQVlfSElUXCIgfTtcbiAgICBzdGF0aWMgZ2V0IEtJTExfR0FNRV9DSEFSQUNURVIoKSB7IHJldHVybiBcIktJTExfR0FNRV9DSEFSQUNURVJcIiB9O1xuXG4gICAgc3RhdGljIGdldCBDSEFSQUNURVJfTE9PS19BVCgpIHsgcmV0dXJuIFwiQ0hBUkFDVEVSX0xPT0tfQVRcIiB9O1xuICAgIHN0YXRpYyBnZXQgQ0hBTkdFX1NUQU1JTkEoKSB7IHJldHVybiBcIkNIQU5HRV9TVEFNSU5BXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgRVFVSVBfV0VBUE9OKCkgeyByZXR1cm4gXCJFUVVJUF9XRUFQT05cIiB9O1xuICAgIHN0YXRpYyBnZXQgVVNFX0FDVElPTigpIHsgcmV0dXJuIFwiVVNFX0FDVElPTlwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IERJU1BMQVlfRkxPQVRJTkdfU1RBVFVTKCkgeyByZXR1cm4gXCJESVNQTEFZX0ZMT0FUSU5HX1NUQVRVU1wiIH07XG4gICAgc3RhdGljIGdldCBBRERfUExBWUVSX0NIQVJBQ1RFUl9UT19NQVAoKSB7IHJldHVybiBcIkFERF9QTEFZRVJfQ0hBUkFDVEVSX1RPX01BUFwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IE5BVklHQVRFX1RPX0NIQVJBQ1RFUl9BTkRfVEFMSygpIHsgcmV0dXJuIFwiTkFWSUdBVEVfVE9fQ0hBUkFDVEVSX0FORF9UQUxLXCIgfTtcbiAgICBzdGF0aWMgZ2V0IE5BVklHQVRFX1RPX0NIQVJBQ1RFUl9BTkRfQVRUQUNLKCkgeyByZXR1cm4gXCJOQVZJR0FURV9UT19DSEFSQUNURVJfQU5EX0FUVEFDS1wiIH07XG4gICAgc3RhdGljIGdldCBTSE9XX0RJQUxPR1VFX1BBTkVMKCkgeyByZXR1cm4gXCJTSE9XX0RJQUxPR1VFX1BBTkVMXCIgfTtcbiAgICBzdGF0aWMgZ2V0IEhJREVfRElBTE9HVUVfUEFORUwoKSB7IHJldHVybiBcIkhJREVfRElBTE9HVUVfUEFORUxcIiB9O1xuXG4gICAgc3RhdGljIGdldCBTSE9XX0RJQUxPR1VFX0NPTlRJTlVFX0JVVFRPTigpIHsgcmV0dXJuIFwiU0hPV19ESUFMT0dVRV9DT05USU5VRV9CVVRUT05cIiB9O1xuICAgIHN0YXRpYyBnZXQgSElERV9ESUFMT0dVRV9DT05USU5VRV9CVVRUT04oKSB7IHJldHVybiBcIkhJREVfRElBTE9HVUVfQ09OVElOVUVfQlVUVE9OXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgRElTUExBWV9ESUFMT0dVRV9TVEVQKCkgeyByZXR1cm4gXCJESVNQTEFZX0RJQUxPR1VFX1NURVBcIiB9O1xuICAgIHN0YXRpYyBnZXQgRElTUExBWV9ESUFMT0dVRV9TS0lMTF9URVNUKCkgeyByZXR1cm4gXCJESVNQTEFZX0RJQUxPR1VFX1NLSUxMX1RFU1RcIiB9O1xuXG4gICAgc3RhdGljIGdldCBDT05USU5VRV9ESUFMT0dVRV9OT0RFKCkgeyByZXR1cm4gXCJDT05USU5VRV9ESUFMT0dVRV9OT0RFXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFNFTEVDVF9ESUFMT0dVRV9DSE9JQ0UoKSB7IHJldHVybiBcIlNFTEVDVF9ESUFMT0dVRV9DSE9JQ0VcIiB9O1xuICAgIHN0YXRpYyBnZXQgUkVTT0xWRV9ESUFMT0dVRV9TS0lMTF9URVNUKCkgeyByZXR1cm4gXCJSRVNPTFZFX0RJQUxPR1VFX1NLSUxMX1RFU1RcIiB9O1xuICAgIHN0YXRpYyBnZXQgQ0xFQVJfRElBTE9HVUVfQ0hPSUNFUygpIHsgcmV0dXJuIFwiQ0xFQVJfRElBTE9HVUVfQ0hPSUNFU1wiIH07XG4gICAgc3RhdGljIGdldCBHT19UT19ESUFMT0dVRV9OT0RFKCkgeyByZXR1cm4gXCJHT19UT19ESUFMT0dVRV9OT0RFXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgU1RBUlRfRElBTE9HVUUoKSB7IHJldHVybiBcIlNUQVJUX0RJQUxPR1VFXCIgfTtcbiAgICBzdGF0aWMgZ2V0IEVORF9ESUFMT0dVRSgpIHsgcmV0dXJuIFwiRU5EX0RJQUxPR1VFXCIgfTtcblxuXG4gICAgc3RhdGljIGdldCBHQU1FUExBWV9BQ1RJT05fQ0hBTkdFRCgpIHsgcmV0dXJuIFwiR0FNRVBMQVlfQUNUSU9OX0NIQU5HRURcIiB9O1xuXG4gICAgLy8gSW52ZW50b3J5IENvbW1hbmRzXG4gICAgc3RhdGljIGdldCBDTElDS19JTlZFTlRPUllfQlVUVE9OKCkgeyByZXR1cm4gXCJDTElDS19JTlZFTlRPUllfQlVUVE9OXCIgfTtcbiAgICBzdGF0aWMgZ2V0IERJU1BMQVlfSU5WRU5UT1JZX1BBTkVMKCkgeyByZXR1cm4gXCJESVNQTEFZX0lOVkVOVE9SWV9QQU5FTFwiIH07XG4gICAgc3RhdGljIGdldCBSRU9SREVSX0lOVkVUT1JZX0lURU0oKSB7IHJldHVybiBcIlJFT1JERVJfSU5WRVRPUllfSVRFTVwiIH07XG4gICAgc3RhdGljIGdldCBFUVVJUF9JVEVNX1RPX1NMT1QoKSB7IHJldHVybiBcIkVRVUlQX0lURU1fVE9fU0xPVFwiIH07XG4gICAgc3RhdGljIGdldCBBRERfSVRFTV9UT19JTlZFTlRPUlkoKSB7IHJldHVybiBcIkFERF9JVEVNX1RPX0lOVkVOVE9SWVwiIH07XG4gICAgc3RhdGljIGdldCBESVNQTEFZX0VRVUlQUEVEX1NMT1QoKSB7IHJldHVybiBcIkRJU1BMQVlfRVFVSVBQRURfU0xPVFwiIH07XG4gICAgc3RhdGljIGdldCBVU0VfRVFVSVBQRURfSVRFTSgpIHsgcmV0dXJuIFwiVVNFX0VRVUlQUEVEX0lURU1cIiB9O1xuXG4gICAgc3RhdGljIGdldCBTRVRfVVNFX0lURU1fQlVUVE9OX0hJR0hMSUdIVCgpIHsgcmV0dXJuIFwiU0VUX1VTRV9JVEVNX0JVVFRPTl9ISUdITElHSFRcIiB9O1xuXG59XG4iLCJleHBvcnQgY2xhc3MgV2VhcG9uVHlwZXMge1xuICAgIC8vIE1FTEVFXG4gICAgc3RhdGljIGdldCBTV09SRCgpIHsgcmV0dXJuIFwic3dvcmRcIiB9O1xuICAgIHN0YXRpYyBnZXQgQVhFKCkgeyByZXR1cm4gXCJheGVcIiB9O1xuICAgIHN0YXRpYyBnZXQgS05JRkUoKSB7IHJldHVybiBcImtuaWZlXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFNUQUZGKCkgeyByZXR1cm4gXCJzdGFmZlwiIH07XG4gICAgc3RhdGljIGdldCBIQU1NRVIoKSB7IHJldHVybiBcImhhbW1lclwiIH07XG4gICAgc3RhdGljIGdldCBTUEVBUigpIHsgcmV0dXJuIFwic3BlYXJcIiB9O1xuICAgIHN0YXRpYyBnZXQgTUFDRSgpIHsgcmV0dXJuIFwibWFjZVwiIH07XG4gICAgc3RhdGljIGdldCBQT0xFQVJNKCkgeyByZXR1cm4gXCJwb2xlYXJtXCIgfTtcbiAgICBzdGF0aWMgZ2V0IE1BVUwoKSB7IHJldHVybiBcIm1hdWxcIiB9O1xuICAgIHN0YXRpYyBnZXQgR1JFQVRTV09SRCgpIHsgcmV0dXJuIFwiZ3JlYXRzd29yZFwiIH07XG4gICAgc3RhdGljIGdldCBDTFVCKCkgeyByZXR1cm4gXCJjbHViXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFVOQVJNRUQoKSB7IHJldHVybiBcInVuYXJtZWRcIiB9O1xuICAgIHN0YXRpYyBnZXQgU0hJRUxEKCkgeyByZXR1cm4gXCJzaGllbGRcIiB9O1xuXG4gICAgLy8gUkFOR0VEXG4gICAgc3RhdGljIGdldCBGVVNJTCgpIHsgcmV0dXJuIFwiZnVzaWxcIiB9O1xuICAgIHN0YXRpYyBnZXQgQk9XKCkgeyByZXR1cm4gXCJib3dcIiB9O1xuICAgIHN0YXRpYyBnZXQgQ1JPU1NCT1coKSB7IHJldHVybiBcImNyb3NzYm93XCIgfTtcbiAgICBzdGF0aWMgZ2V0IFBJU1RPTEVUKCkgeyByZXR1cm4gXCJwaXN0b2xldFwiIH07XG59XG5cbmV4cG9ydCBjb25zdCB3ZWFwb25FbnVtcyA9IE9iamVjdC5lbnRyaWVzKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKFdlYXBvblR5cGVzKSlcbiAgICAuZmlsdGVyKChba2V5LCBkZXNjcmlwdG9yXSkgPT4gdHlwZW9mIGRlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nKVxuICAgIC5tYXAoKFtrZXldKSA9PiB7XG4gICAgICAgIHJldHVybiB7IFtrZXldOiBXZWFwb25UeXBlc1trZXldIH07XG4gICAgfSk7IiwiaW1wb3J0IHsgQm90QmVoYXZpb3VyVHlwZXMgfSBmcm9tIFwiLi4vLi4vYmVoYXZpb3VyVHJlZS9Cb3RCZWhhdmlvdXJUeXBlc1wiO1xuaW1wb3J0IHsgQmFzaWNNZWxlZVRyZWUgfSBmcm9tIFwiLi4vLi4vYmVoYXZpb3VyVHJlZS90cmVlcy9CYXNpY01lbGVlVHJlZVwiO1xuaW1wb3J0IHsgQmFzaWNSYW5nZWRUcmVlIH0gZnJvbSAnLi4vLi4vYmVoYXZpb3VyVHJlZS90cmVlcy9CYXNpY1JhbmdlZFRyZWUnO1xuXG5leHBvcnQgY2xhc3MgQm90QmVoYXZpb3Vyc1ZPIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJ0aWNpcGFudHMsIHRlYW1zKSB7XG4gICAgICAgIHRoaXMuYmVoYXZpb3VyVHJlZXMgPSBuZXcgTWFwKCk7XG5cbiAgICAgICAgdGhpcy5iZWhhdmlvdXJUcmVlcy5zZXQoQm90QmVoYXZpb3VyVHlwZXMuQkFTSUNfTUVMRUUsIG5ldyBCYXNpY01lbGVlVHJlZSgpKTtcbiAgICAgICAgdGhpcy5iZWhhdmlvdXJUcmVlcy5zZXQoQm90QmVoYXZpb3VyVHlwZXMuQkFTSUNfUkFOR0VELCBuZXcgQmFzaWNSYW5nZWRUcmVlKCkpO1xuICAgIH1cblxuICAgIGdldFRyZWUodHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5iZWhhdmlvdXJUcmVlcy5nZXQodHlwZSk7XG4gICAgfVxufSIsImV4cG9ydCBjbGFzcyBDb21iYXRWTyB7XG4gICAgY29uc3RydWN0b3IocGFydGljaXBhbnRzLCB0ZWFtcykge1xuICAgICAgICB0aGlzLnBhcnRpY2lwYW50cyA9IHBhcnRpY2lwYW50cztcbiAgICAgICAgdGhpcy5yb3VuZEluaXRpYXRpdmUgPSBbXTtcbiAgICAgICAgdGhpcy5hY3RpdmVQYXJ0aWNpcGFudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50ZWFtcyA9IHRlYW1zO1xuICAgIH1cblxuICAgIGdldCBuZXh0VHVybkNoYXJhY3RlcklkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb3VuZEluaXRpYXRpdmVbMF07XG4gICAgfVxufSIsImNvbnN0IHsgUHJveHkgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgR2FtZUNoYXJhY3RlclZPIH0gPSByZXF1aXJlKCcuL0dhbWVDaGFyYWN0ZXJWTycpO1xuXG5cbmV4cG9ydCBjbGFzcyBHYW1lQ2hhcmFjdGVyUHJveHkgZXh0ZW5kcyBQcm94eSB7XG4gICAgZ2V0IHZvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRhKCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiR2FtZUNoYXJhY3RlclByb3h5X1wiIH07XG5cbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgc3VwZXIoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBwYXJhbXMuaWQsIG5ldyBHYW1lQ2hhcmFjdGVyVk8ocGFyYW1zKSk7XG4gICAgfVxuXG4gICAgcmVzZXRDb21iYXRUdXJuU3RhdGUoKSB7XG4gICAgICAgIHRoaXMudm8uYXZhaWxhYmxlTW92ZW1lbnQgPSB0aGlzLnZvLm1heE1vdmVtZW50O1xuICAgICAgICB0aGlzLnZvLmF2YWlsYWJsZUFjdGlvbnMgPSB0aGlzLnZvLm1heEFjdGlvbnNQZXJUdXJuO1xuICAgIH1cblxuICAgIHVzZU1vdmVtZW50KGNvc3QpIHtcbiAgICAgICAgdGhpcy52by5hdmFpbGFibGVNb3ZlbWVudCAtPSBjb3N0O1xuICAgIH1cblxuICAgIGFwcGx5RGFtYWdlKGRhbWFuZ2UpIHtcbiAgICAgICAgdGhpcy52by5jdXJyZW50U3RhbWluYSAtPSBkYW1hbmdlO1xuICAgICAgICB0aGlzLnZvLmN1cnJlbnRTdGFtaW5hID0gTWF0aC5tYXgoMCwgdGhpcy52by5jdXJyZW50U3RhbWluYSk7XG5cbiAgICAgICAgaWYgKHRoaXMudm8uY3VycmVudFN0YW1pbmEgPiAwKSB7XG4gICAgICAgICAgICAvLyBBbGl2ZVxuICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuVVBEQVRFX1NUQU1JTkEgKyB0aGlzLmlkLFxuICAgICAgICAgICAgICAgIHRoaXMudm8uY3VycmVudFN0YW1pbmEsIHRoaXMudm8ubWF4aW11bVN0YW1pbmEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRGVhZFxuICAgICAgICAgICAgY29uc29sZS5sb2coYCR7dGhpcy5pZH0gZGllZGApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBTkdFX1NUQU1JTkEgKyB0aGlzLmlkLCB0aGlzLnZvLmN1cnJlbnRTdGFtaW5hLCB0aGlzLnZvLm1heFN0YW1pbmEpO1xuICAgIH1cblxuICAgIGdldFNraWxsVG90YWwoc2tpbGxLZXkpIHtcbiAgICAgICAgaWYgKHRoaXMudm8uYWR2YW5jZWRTa2lsbHMuaGFzKHNraWxsS2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2tpbGwgKyB0aGlzLnZvLmFkdmFuY2VkU2tpbGxzLmdldChza2lsbEtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5za2lsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uaWQ7XG4gICAgfVxuXG4gICAgZ2V0IGRpYWxvZ3VlVHJlZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uZGlhbG9ndWVUcmVlO1xuICAgIH1cblxuICAgIGdldCBjdXJyZW50Tm9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uY3VycmVudE5vZGU7XG4gICAgfVxuXG4gICAgc2V0IGN1cnJlbnROb2RlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnZvLmN1cnJlbnROb2RlKSB7XG4gICAgICAgICAgICB0aGlzLnZvLmN1cnJlbnROb2RlLm9jY3VwaWVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnZvLmN1cnJlbnROb2RlID0gdmFsdWU7XG4gICAgICAgIHRoaXMudm8uY3VycmVudE5vZGUub2NjdXBpZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGdldCBjb21iYXRHcm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uY29tYmF0R3JvdXA7XG4gICAgfVxuXG4gICAgZ2V0IGlzTlBDKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5pc05QQztcbiAgICB9XG5cbiAgICBnZXQgYXZhaWxhYmxlTW92ZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmF2YWlsYWJsZU1vdmVtZW50O1xuICAgIH1cblxuICAgIHNldCBhdmFpbGFibGVNb3ZlbWVudCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZvLmF2YWlsYWJsZU1vdmVtZW50ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IGF2YWlsYWJsZUFjdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmF2YWlsYWJsZUFjdGlvbnM7XG4gICAgfVxuXG4gICAgc2V0IGF2YWlsYWJsZUFjdGlvbnModmFsdWUpIHtcbiAgICAgICAgdGhpcy52by5hdmFpbGFibGVBY3Rpb25zID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlVTRV9BQ1RJT04gKyB0aGlzLmlkLFxuICAgICAgICAgICAgdGhpcy5hdmFpbGFibGVBY3Rpb25zLCB0aGlzLm1heEFjdGlvbnNQZXJUdXJuKTtcbiAgICB9XG5cbiAgICBnZXQgbWF4QWN0aW9uc1BlclR1cm4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLm1heEFjdGlvbnNQZXJUdXJuO1xuICAgIH1cblxuICAgIGdldCBza2lsbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uc2tpbGw7XG4gICAgfVxuXG4gICAgZ2V0IGN1cnJlbnRTdGFtaW5hKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5jdXJyZW50U3RhbWluYTtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudEx1Y2soKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmN1cnJlbnRTdGFtaW5hO1xuICAgIH1cblxuICAgIGdldCBpc0RlYWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmN1cnJlbnRTdGFtaW5hIDw9IDA7XG4gICAgfVxuXG4gICAgZ2V0IGJvdEJlaGF2aW91cigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uYm90QmVoYXZpb3VyO1xuICAgIH1cblxuICAgIGdldCBlcXVpcHBlZFdlYXBvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uZXF1aXBwZWRXZWFwb247XG4gICAgfVxuXG4gICAgc2V0IGVxdWlwcGVkV2VhcG9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudm8uZXF1aXBwZWRXZWFwb24gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5oZWlnaHQ7XG4gICAgfVxuXG59XG4iLCJleHBvcnQgY2xhc3MgR2FtZUNoYXJhY3RlclZPIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5pZCA9IHBhcmFtcy5pZDtcbiAgICAgICAgdGhpcy5pc05QQyA9IHBhcmFtcy5pc05QQztcbiAgICAgICAgdGhpcy5jb21iYXRHcm91cCA9IHBhcmFtcy5jb21iYXRHcm91cCB8fCBbXTtcbiAgICAgICAgdGhpcy5kaWFsb2d1ZVRyZWUgPSBwYXJhbXMuZGlhbG9ndWVUcmVlIHx8IHRoaXMuaWQ7XG4gICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gVHJvaWthIHN0YXRzXG4gICAgICAgIHRoaXMuaW5pdGlhdGl2ZSA9IHBhcmFtcy5pbml0aWF0aXZlIHx8IDI7XG4gICAgICAgIHRoaXMubWF4TW92ZW1lbnQgPSBwYXJhbXMubWF4TW92ZW1lbnQgfHwgNjtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBwYXJhbXMuaGVpZ2h0IHx8IDEuODtcbiAgICAgICAgdGhpcy5tYXhBY3Rpb25zUGVyVHVybiA9IDE7XG4gICAgICAgIHRoaXMuYXZhaWxhYmxlQWN0aW9ucyA9IHRoaXMubWF4QWN0aW9uc1BlclR1cm47XG4gICAgICAgIHRoaXMuYXZhaWxhYmxlTW92ZW1lbnQgPSB0aGlzLm1heE1vdmVtZW50O1xuXG4gICAgICAgIHRoaXMuc2tpbGwgPSBwYXJhbXMuc2tpbGwgfHwgMTtcblxuICAgICAgICB0aGlzLm1heFN0YW1pbmEgPSBwYXJhbXMubWF4U3RhbWluYSB8fCAxO1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGFtaW5hID0gdGhpcy5tYXhTdGFtaW5hO1xuXG4gICAgICAgIHRoaXMubWF4THVjayA9IHBhcmFtcy5tYXhMdWNrIHx8IDE7XG4gICAgICAgIHRoaXMuY3VycmVudEx1Y2sgPSB0aGlzLm1heEx1Y2s7XG5cbiAgICAgICAgdGhpcy5hZHZhbmNlZFNraWxscyA9IHBhcmFtcy5hZHZhbmNlZFNraWxscyB8fCBuZXcgTWFwKCk7XG5cbiAgICAgICAgdGhpcy5ib3RCZWhhdmlvdXIgPSBwYXJhbXMuYm90QmVoYXZpb3VyIHx8IDA7XG5cbiAgICAgICAgdGhpcy5lcXVpcHBlZFdlYXBvbiA9IHBhcmFtcy5lcXVpcHBlZFdlYXBvbiB8fCBcInVuYXJtZWRcIjtcblxuICAgIH1cbn0iLCJjb25zdCB7IFByb3h5IH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4vbmF2aWdhdGlvbi9Bc3Rhcic7XG5pbXBvcnQgeyBnZXRBZGphY2VudFBvaW50cyB9IGZyb20gJy4uLy4uL3V0aWxzL0FkamFjZW50UG9pbnRzJztcbmNvbnN0IHsgR2FtZU1hcFZPIH0gPSByZXF1aXJlKCcuL0dhbWVNYXBWTycpO1xuXG5leHBvcnQgY2xhc3MgR2FtZU1hcFByb3h5IGV4dGVuZHMgUHJveHkge1xuICAgIGdldCB2bygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YSgpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkdhbWVNYXBQcm94eVwiIH07XG5cbiAgICBjb25zdHJ1Y3RvcihtYXBHcmlkLCB3YWxsQm91bmRpbmdCb3hlcywgY292ZXIsIHBvcnRhbHMsIG5hdkdyaWQpIHtcbiAgICAgICAgc3VwZXIoR2FtZU1hcFByb3h5Lk5BTUUpO1xuXG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XG4gICAgICAgICAgICBtYXBHcmlkOiBtYXBHcmlkLFxuICAgICAgICAgICAgd2FsbEJvdW5kaW5nQm94ZXM6IHdhbGxCb3VuZGluZ0JveGVzLFxuICAgICAgICAgICAgY292ZXI6IGNvdmVyLFxuICAgICAgICAgICAgcG9ydGFsczogcG9ydGFscyxcbiAgICAgICAgICAgIG5hdmlnYXRpb25HcmlkOiBuYXZHcmlkXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uUmVnaXN0ZXIoKSB7XG5cbiAgICB9XG5cbiAgICBmaW5kTmVhcmVzdE5vZGUodGFyZ2V0UG9pbnQpIHtcbiAgICAgICAgY29uc3QgbWFwR3JpZCA9IHRoaXMudm8ubWFwR3JpZDtcblxuICAgICAgICBsZXQgbmVhcmVzdE5vZGUgPSBtYXBHcmlkWzBdO1xuICAgICAgICBsZXQgZGlzdFNxcnRUb05lYXJlc3ROb2RlID0gQXN0YXIuZ2V0RGlzdFNxdWFyZWQobmVhcmVzdE5vZGUsIHRhcmdldFBvaW50KTtcbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIG1hcEdyaWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpc3RUb05vZGUgPSBBc3Rhci5nZXREaXN0U3F1YXJlZChub2RlLCB0YXJnZXRQb2ludCk7XG5cbiAgICAgICAgICAgIGlmIChkaXN0VG9Ob2RlIDwgZGlzdFNxcnRUb05lYXJlc3ROb2RlKSB7XG4gICAgICAgICAgICAgICAgZGlzdFNxcnRUb05lYXJlc3ROb2RlID0gZGlzdFRvTm9kZTtcbiAgICAgICAgICAgICAgICBuZWFyZXN0Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmVhcmVzdE5vZGU7XG4gICAgfVxuXG4gICAgZmluZE5lYXJlc3RXYXlwb2ludCh0YXJnZXRQb2ludCkge1xuICAgICAgICBjb25zdCBuYXZHcmlkID0gdGhpcy52by5uYXZpZ2F0aW9uR3JpZDtcblxuICAgICAgICBsZXQgbmVhcmVzdE5vZGUgPSBuYXZHcmlkWzBdO1xuICAgICAgICBsZXQgZGlzdFNxcnRUb05lYXJlc3ROb2RlID0gQXN0YXIuZ2V0RGlzdFNxdWFyZWQobmVhcmVzdE5vZGUsIHRhcmdldFBvaW50KTtcbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIG5hdkdyaWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpc3RUb05vZGUgPSBBc3Rhci5nZXREaXN0U3F1YXJlZChub2RlLCB0YXJnZXRQb2ludCk7XG5cbiAgICAgICAgICAgIGlmIChkaXN0VG9Ob2RlIDwgZGlzdFNxcnRUb05lYXJlc3ROb2RlKSB7XG4gICAgICAgICAgICAgICAgZGlzdFNxcnRUb05lYXJlc3ROb2RlID0gZGlzdFRvTm9kZTtcbiAgICAgICAgICAgICAgICBuZWFyZXN0Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmVhcmVzdE5vZGU7XG4gICAgfVxuXG4gICAgcmF5SW50ZXJzZWN0c1dhbGwoZnJvbSwgdG8pIHtcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBmcm9tLmRpc3RhbmNlKHRvKTtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gdG8uY2xvbmUoKS5zdWIoZnJvbS5jbG9uZSgpKS5ub3JtYWxpemUoKTtcbiAgICAgICAgY29uc3QgcmF5ID0gbmV3IHBjLlJheShmcm9tLCBkaXJlY3Rpb24pO1xuXG4gICAgICAgIGNvbnN0IG1hcFdhbGxzID0gdGhpcy52by53YWxsQm91bmRpbmdCb3hlcztcbiAgICAgICAgZm9yIChjb25zdCB3YWxsIG9mIG1hcFdhbGxzKSB7XG4gICAgICAgICAgICBjb25zdCBoaXRQb3NpdGlvbiA9IG5ldyBwYy5WZWMzKCk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB3YWxsLmludGVyc2VjdHNSYXkocmF5LCBoaXRQb3NpdGlvbik7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlzdGFuY2VUb0hpdCA9IGhpdFBvc2l0aW9uLmRpc3RhbmNlKGZyb20pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlVG9IaXQgPCBkaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0IGNvdmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5jb3ZlcjtcbiAgICB9XG5cblxuICAgIGlzSW5Db3Zlcih0YXJnZXRQb2ludCwgYXR0YWNraW5nRnJvbSkge1xuICAgICAgICBjb25zdCBhZGphY2VudENvdmVyUG9pbnRzID0gW107XG4gICAgICAgIGNvbnN0IGFkamFjZW50UG9pbnRzID0gZ2V0QWRqYWNlbnRQb2ludHModGFyZ2V0UG9pbnQpO1xuXG4gICAgICAgIGZvciAoY29uc3QgYWRqYWNlbnRQb2ludCBvZiBhZGphY2VudFBvaW50cykge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmdOb2RlID0gdGhpcy5jb3Zlci5maW5kKChjb3ZlclBvaW50KSA9PiBhZGphY2VudFBvaW50LmVxdWFscyhjb3ZlclBvaW50KSk7XG4gICAgICAgICAgICBpZiAobWF0Y2hpbmdOb2RlKSB7XG4gICAgICAgICAgICAgICAgYWRqYWNlbnRDb3ZlclBvaW50cy5wdXNoKGFkamFjZW50UG9pbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFkamFjZW50Q292ZXJQb2ludHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2VUb1RhcmdldCA9IHRhcmdldFBvaW50LmRpc3RhbmNlKGF0dGFja2luZ0Zyb20pO1xuICAgICAgICAgICAgZm9yIChjb25zdCBhZGphY2VudENvdmVyUG9pbnQgb2YgYWRqYWNlbnRDb3ZlclBvaW50cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlVG9Db3ZlciA9IGFkamFjZW50Q292ZXJQb2ludC5kaXN0YW5jZShhdHRhY2tpbmdGcm9tKTtcbiAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2VUb0NvdmVyIDwgZGlzdGFuY2VUb1RhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXRyaWV2ZVBvcnRhbChwb3J0YWxJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5wb3J0YWxzLmdldChwb3J0YWxJZCk7XG4gICAgfVxuXG4gICAgaGFzVmFsaWRMaW5lKG5vZGVBLCBub2RlQikge1xuICAgICAgICBjb25zdCBsaW5lID0gQXN0YXIuY2FsY3VsYXRlQnJlc2VuaGFtTGluZShub2RlQS54LCBub2RlQS56LCBub2RlQi54LCBub2RlQi56KTtcbiAgICAgICAgcmV0dXJuIEFzdGFyLmNoZWNrVmFsaWRMaW5lKGxpbmUsIHRoaXMudm8ubWFwR3JpZCk7XG4gICAgfVxuXG4gICAgaGFzVmFsaWROb2RlKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8ubWFwR3JpZC5zb21lKG4gPT4gbi5lcXVhbHMobm9kZSkpO1xuXG4gICAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGdldEFkamFjZW50UG9pbnRzKHBvaW50KSB7XG4gICAgY29uc3QgcG9pbnRzID0gW11cbiAgICAvL05vcnRoXG4gICAgcG9pbnRzLnB1c2gobmV3IHBjLlZlYzMocG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiAtIDEpKTtcbiAgICAvL0Vhc3RcbiAgICBwb2ludHMucHVzaChuZXcgcGMuVmVjMyhwb2ludC54ICsgMSwgcG9pbnQueSwgcG9pbnQueikpO1xuICAgIC8vV2VzdFxuICAgIHBvaW50cy5wdXNoKG5ldyBwYy5WZWMzKHBvaW50LnggLSAxLCBwb2ludC55LCBwb2ludC56KSk7XG4gICAgLy9Tb3V0aFxuICAgIHBvaW50cy5wdXNoKG5ldyBwYy5WZWMzKHBvaW50LngsIHBvaW50LnksIHBvaW50LnogKyAxKSk7XG5cbiAgICByZXR1cm4gcG9pbnRzO1xufSIsImV4cG9ydCBjbGFzcyBHYW1lTWFwVk8ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1hcEdyaWQgPSBbXTtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIFByaW9yaXR5UXVldWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB9XG5cbiAgICBwdXNoKHZhbHVlLCBwcmlvcml0eSA9IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIHByaW9yaXR5OiBwcmlvcml0eVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwb3AoKSB7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGxldCBtaW4gPSBJbmZpbml0eTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwcmlvcml0eSA9IHRoaXMuZGF0YVtpXS5wcmlvcml0eTtcbiAgICAgICAgICAgIGlmIChNYXRoLm1pbihtaW4sIHByaW9yaXR5KSA9PT0gcHJpb3JpdHkpIHtcbiAgICAgICAgICAgICAgICBtaW4gPSBwcmlvcml0eTtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5zcGxpY2UoaW5kZXgsIDEpWzBdLnZhbHVlO1xuICAgIH1cblxuICAgIHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXG4gICAgfVxuXG4gICAgZW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoID09PSAwO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBQcmlvcml0eVF1ZXVlIH0gZnJvbSAnLi9Qcmlvcml0eVF1ZXVlJztcblxuZXhwb3J0IGNsYXNzIEFzdGFyIHtcbiAgICBzdGF0aWMgYnJlYWR0aEZpcnN0U2VhcmNoKHN0YXJ0LCByYW5nZUxpbWl0KSB7XG4gICAgICAgIGxldCBmcm9udGllciA9IFtdO1xuICAgICAgICBjb25zdCBzZWFyY2hlZEFyZWEgPSBbXTtcbiAgICAgICAgZnJvbnRpZXIucHVzaChzdGFydCk7XG5cbiAgICAgICAgY29uc3QgY2FtZUZyb20gPSBuZXcgTWFwKCk7XG4gICAgICAgIGNhbWVGcm9tLnNldChzdGFydCwgc3RhcnQpO1xuXG4gICAgICAgIGxldCByYW5nZSA9IDA7XG5cbiAgICAgICAgd2hpbGUgKGZyb250aWVyLmxlbmd0aCA+IDAgJiYgcmFuZ2UgPCByYW5nZUxpbWl0KSB7XG4gICAgICAgICAgICBjb25zdCBuZXdGcm9udGllciA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjdXJyZW50IG9mIGZyb250aWVyKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50LmNvbm5lY3RlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBjdXJyZW50LmNvbm5lY3RlZE5vZGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBkaXN0VmFsdWUgPSB0aGlzLmdldERpc3RTcXVhcmVkKG5leHQsIGN1cnJlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV4dC5vY2N1cGllZCAmJiAoIWNhbWVGcm9tLmhhcyhuZXh0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Zyb250aWVyLnB1c2gobmV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hlZEFyZWEucHVzaChuZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbWVGcm9tLnNldChuZXh0LCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnJvbnRpZXIgPSBuZXdGcm9udGllcjtcblxuICAgICAgICAgICAgcmFuZ2UrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWFyY2hlZEFyZWE7XG4gICAgfVxuXG5cbiAgICBzdGF0aWMgY2FsY3VsYXRlUGF0aChzdGFydCwgZ29hbCkge1xuICAgICAgICBjb25zdCBmcm9udGllciA9IG5ldyBQcmlvcml0eVF1ZXVlKCk7XG4gICAgICAgIGZyb250aWVyLnB1c2goc3RhcnQsIDApO1xuXG4gICAgICAgIGNvbnN0IGNhbWVGcm9tID0gbmV3IE1hcCgpO1xuICAgICAgICBjb25zdCBjb3N0U29GYXIgPSBuZXcgTWFwKCk7XG5cbiAgICAgICAgY2FtZUZyb20uc2V0KHN0YXJ0LCBzdGFydCk7XG4gICAgICAgIGNvc3RTb0Zhci5zZXQoc3RhcnQsIDApO1xuXG4gICAgICAgIHdoaWxlICghZnJvbnRpZXIuZW1wdHkoKSkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IGZyb250aWVyLnBvcCgpO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudC5lcXVhbHMoZ29hbCkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50LmNvbm5lY3RlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IGN1cnJlbnQuY29ubmVjdGVkTm9kZXNbaV07XG4gICAgICAgICAgICAgICAgLy8gY29uc3QgZGlzdFZhbHVlID0gdGhpcy5nZXREaXN0U3F1YXJlZChuZXh0LCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdDb3N0ID0gY29zdFNvRmFyLmdldChjdXJyZW50KSArIDE7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW5leHQub2NjdXBpZWQgJiYgKCFjb3N0U29GYXIuaGFzKG5leHQpIHx8IG5ld0Nvc3QgPCBjb3N0U29GYXIuZ2V0KG5leHQpKSkge1xuICAgICAgICAgICAgICAgICAgICBjb3N0U29GYXIuc2V0KG5leHQsIG5ld0Nvc3QpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcHJpb3JpdHkgPSBuZXdDb3N0ICsgdGhpcy5oZXVyaXN0aWMobmV4dCwgZ29hbCk7XG4gICAgICAgICAgICAgICAgICAgIGZyb250aWVyLnB1c2gobmV4dCwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgICAgICBjYW1lRnJvbS5zZXQobmV4dCwgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3VycmVudCA9IGdvYWw7XG4gICAgICAgIGxldCBwYXRoSXNCcm9rZW4gPSBmYWxzZTtcbiAgICAgICAgY29uc3QgcGF0aCA9IFtdO1xuICAgICAgICBwYXRoLnB1c2goY3VycmVudCk7XG5cbiAgICAgICAgd2hpbGUgKCFjdXJyZW50LmVxdWFscyhzdGFydCkgJiYgIXBhdGhJc0Jyb2tlbikge1xuICAgICAgICAgICAgaWYgKGNhbWVGcm9tLmhhcyhjdXJyZW50KSB8fCAhY3VycmVudC5lcXVhbHMoZ29hbCkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY2FtZUZyb20uZ2V0KGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIHBhdGgucHVzaChjdXJyZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGF0aElzQnJva2VuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXRoSXNCcm9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL3BhdGgucHVzaChzdGFydCk7XG4gICAgICAgICAgICAvLyBwYXRoLnJldmVyc2UoKTtcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGNhbGN1bGF0ZVdheXBvaW50c1BhdGgoc3RhcnQsIGdvYWwpIHtcbiAgICAgICAgY29uc3QgZnJvbnRpZXIgPSBuZXcgUHJpb3JpdHlRdWV1ZSgpO1xuICAgICAgICBmcm9udGllci5wdXNoKHN0YXJ0LCAwKTtcblxuICAgICAgICBjb25zdCBjYW1lRnJvbSA9IG5ldyBNYXAoKTtcbiAgICAgICAgY29uc3QgY29zdFNvRmFyID0gbmV3IE1hcCgpO1xuXG4gICAgICAgIGNhbWVGcm9tLnNldChzdGFydCwgc3RhcnQpO1xuICAgICAgICBjb3N0U29GYXIuc2V0KHN0YXJ0LCAwKTtcblxuICAgICAgICB3aGlsZSAoIWZyb250aWVyLmVtcHR5KCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBmcm9udGllci5wb3AoKTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnQuZXF1YWxzKGdvYWwpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudC5jb25uZWN0ZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBjdXJyZW50LmNvbm5lY3RlZE5vZGVzW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RWYWx1ZSA9IHRoaXMuZ2V0RGlzdFNxdWFyZWQobmV4dCwgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3Q29zdCA9IGNvc3RTb0Zhci5nZXQoY3VycmVudCkgKyBkaXN0VmFsdWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW5leHQub2NjdXBpZWQgJiYgKCFjb3N0U29GYXIuaGFzKG5leHQpIHx8IG5ld0Nvc3QgPCBjb3N0U29GYXIuZ2V0KG5leHQpKSkge1xuICAgICAgICAgICAgICAgICAgICBjb3N0U29GYXIuc2V0KG5leHQsIG5ld0Nvc3QpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcHJpb3JpdHkgPSBuZXdDb3N0ICsgdGhpcy5oZXVyaXN0aWMobmV4dCwgZ29hbCk7XG4gICAgICAgICAgICAgICAgICAgIGZyb250aWVyLnB1c2gobmV4dCwgcHJpb3JpdHkpO1xuICAgICAgICAgICAgICAgICAgICBjYW1lRnJvbS5zZXQobmV4dCwgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3VycmVudCA9IGdvYWw7XG4gICAgICAgIGxldCBwYXRoSXNCcm9rZW4gPSBmYWxzZTtcbiAgICAgICAgY29uc3QgcGF0aCA9IFtdO1xuICAgICAgICBwYXRoLnB1c2goY3VycmVudCk7XG5cbiAgICAgICAgd2hpbGUgKCFjdXJyZW50LmVxdWFscyhzdGFydCkgJiYgIXBhdGhJc0Jyb2tlbikge1xuICAgICAgICAgICAgaWYgKGNhbWVGcm9tLmhhcyhjdXJyZW50KSB8fCAhY3VycmVudC5lcXVhbHMoZ29hbCkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY2FtZUZyb20uZ2V0KGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIHBhdGgucHVzaChjdXJyZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGF0aElzQnJva2VuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXRoSXNCcm9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL3BhdGgucHVzaChzdGFydCk7XG4gICAgICAgICAgICAvLyBwYXRoLnJldmVyc2UoKTtcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldERpc3RTcXVhcmVkKHB0MSwgcHQyKSB7XG4gICAgICAgIHJldHVybiAoKHB0MS54IC0gcHQyLngpICogKHB0MS54IC0gcHQyLngpXG4gICAgICAgICAgICArIChwdDEueSAtIHB0Mi55KSAqIChwdDEueSAtIHB0Mi55KVxuICAgICAgICAgICAgKyAocHQxLnogLSBwdDIueikgKiAocHQxLnogLSBwdDIueikpO1xuICAgIH1cblxuICAgIHN0YXRpYyBoZXVyaXN0aWMoYSwgYikge1xuICAgICAgICByZXR1cm4gTWF0aC5hYnMoYS54IC0gYi54KSArIE1hdGguYWJzKGEueSAtIGIueSkgKyBNYXRoLmFicyhhLnogLSBiLnopO1xuICAgIH1cblxuICAgIHN0YXRpYyBjYWxjdWxhdGVCcmVzZW5oYW1MaW5lKHgwLCB6MCwgeDEsIHoxKSB7XG4gICAgICAgIGxldCBkeCA9IHgxIC0geDA7XG4gICAgICAgIGxldCBkeSA9IHoxIC0gejA7XG4gICAgICAgIGxldCBueCA9IE1hdGguYWJzKGR4KTtcbiAgICAgICAgbGV0IG55ID0gTWF0aC5hYnMoZHkpO1xuXG4gICAgICAgIGNvbnN0IHNpZ25feCA9IGR4ID4gMCA/IDEgOiAtMTtcbiAgICAgICAgY29uc3Qgc2lnbl95ID0gZHkgPiAwID8gMSA6IC0xO1xuXG5cbiAgICAgICAgY29uc3QgcCA9IHsgeDogeDAsIHk6IDAsIHo6IHowIH07XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGl4ID0gMCwgaXkgPSAwOyBpeCA8IG54IHx8IGl5IDwgbnk7KSB7XG4gICAgICAgICAgICBpZiAoKDAuNSArIGl4KSAvIG54IDwgKDAuNSArIGl5KSAvIG55KSB7XG4gICAgICAgICAgICAgICAgLy8gbmV4dCBzdGVwIGlzIGhvcml6b250YWxcbiAgICAgICAgICAgICAgICBwLnggKz0gc2lnbl94O1xuICAgICAgICAgICAgICAgIGl4Kys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5leHQgc3RlcCBpcyB2ZXJ0aWNhbFxuICAgICAgICAgICAgICAgIHAueiArPSBzaWduX3k7XG4gICAgICAgICAgICAgICAgaXkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHsgeDogcC54LCB5OiAwLCB6OiBwLnogfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9pbnRzO1xuXG4gICAgfVxuXG4gICAgc3RhdGljIGNoZWNrVmFsaWRMaW5lKGxpbmUsIG1hcCkge1xuICAgICAgICBsZXQgaXNWYWxpZExpbmUgPSB0cnVlO1xuICAgICAgICBmb3IgKGNvbnN0IHBvaW50IG9mIGxpbmUpIHtcbiAgICAgICAgICAgIGlmICghbWFwLnNvbWUobiA9PiBuLmVxdWFscyhwb2ludCkpKSB7XG4gICAgICAgICAgICAgICAgaXNWYWxpZExpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpc1ZhbGlkTGluZTtcbiAgICB9XG59IiwiY29uc3QgeyBQcm94eSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuY29uc3QgeyBHYW1lU3RhdGVWTyB9ID0gcmVxdWlyZSgnLi9HYW1lU3RhdGVWTycpO1xuXG5cbmV4cG9ydCBjbGFzcyBHYW1lU3RhdGVQcm94eSBleHRlbmRzIFByb3h5IHtcbiAgICBnZXQgdm8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGEoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJHYW1lU3RhdGVQcm94eVwiIH07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoR2FtZVN0YXRlUHJveHkuTkFNRSwgbmV3IEdhbWVTdGF0ZVZPKCkpO1xuICAgIH1cblxuICAgIHVwZGF0ZUdhbWVTdGF0ZVR5cGUobmV3U3RhdGVUeXBlKSB7XG4gICAgICAgIHRoaXMudm8uZ2FtZXBsYXlNb2RlID0gbmV3U3RhdGVUeXBlO1xuICAgIH1cblxuICAgIGdldCBjdXJyZW50TW9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uZ2FtZXBsYXlNb2RlO1xuICAgIH1cblxuICAgIGdldCBjdXJyZW50QWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5zZWxlY3RlZEFjdGlvbjtcbiAgICB9XG5cbiAgICBzZXQgY3VycmVudEFjdGlvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLnZvLnNlbGVjdGVkQWN0aW9uID0gdmFsdWU7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IGdhbWVwbGF5TW9kZVR5cGVzID0ge1xuICAgIEVYUExPUkFUSU9OOiAnRVhQTE9SQVRJT04nLFxuICAgIENPTUJBVDogJ0NPTUJBVCcsXG4gICAgRElBTE9HVUU6ICdESUFMT0dVRScsXG4gICAgR0FNRV9PVkVSOiAnR0FNRV9PVkVSJyxcblxufVxuXG5leHBvcnQgY2xhc3MgR2FtZVN0YXRlVk8ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmdhbWVwbGF5TW9kZSA9IGdhbWVwbGF5TW9kZVR5cGVzLkVYUExPUkFUSU9OO1xuICAgICAgICB0aGlzLnNlbGVjdGVkQWN0aW9uID0gXCJub25lXCI7XG4gICAgfVxufSIsImltcG9ydCB7IEludmVudG9yeUl0ZW0gfSBmcm9tIFwiLi9pdGVtcy9JbnZlbnRvcnlJdGVtXCI7XG5cbmV4cG9ydCBjbGFzcyBJbnZlbnRvcnlWTyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaW52ZW50b3J5SXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5lcXVpcG1lbnRTbG90cyA9IG5ldyBNYXAoKTtcblxuICAgIH1cblxuICAgIGFkZEl0ZW0oaXRlbURhdGEpIHtcbiAgICAgICAgdGhpcy5pbnZlbnRvcnlJdGVtcy5wdXNoKFxuICAgICAgICAgICAgbmV3IEludmVudG9yeUl0ZW0oaXRlbURhdGEpXG4gICAgICAgICk7XG4gICAgfVxufSIsImltcG9ydCB7IGNyZWF0ZVVVSUQgfSBmcm9tICcuLi8uLi8uLi91dGlscy9HVUlEJztcblxuZXhwb3J0IGNsYXNzIEludmVudG9yeUl0ZW0ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgdGhpcy51dWlkID0gY3JlYXRlVVVJRCgpO1xuICAgICAgICB0aGlzLmlkID0gZGF0YS5pZDtcbiAgICAgICAgdGhpcy5pY29uID0gZGF0YS5pY29uO1xuICAgICAgICB0aGlzLm5hbWUgPSBkYXRhLm5hbWU7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkYXRhLmRlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLnR5cGUgPSBkYXRhLnR5cGU7XG4gICAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZSA/PyAxO1xuICAgICAgICB0aGlzLmVxdWlwU2xvdCA9IGRhdGEuZXF1aXBTbG90ID8/IFwibm9uZVwiO1xuICAgIH1cbn0iLCJcbmV4cG9ydCBjbGFzcyBTdG9yeVZPIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIH1cbn0iLCJleHBvcnQgZnVuY3Rpb24gY2VudGVyUG9pbnRDaGFyYWN0ZXJQcm94eShjaGFyYWN0ZXJQcm94eSkge1xuICAgIGNvbnN0IGN1cnJlbnROb2RlID0gY2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGU7XG4gICAgcmV0dXJuIG5ldyBwYy5WZWMzKGN1cnJlbnROb2RlLngsXG4gICAgICAgIGN1cnJlbnROb2RlLnkgKyBjaGFyYWN0ZXJQcm94eS5oZWlnaHQgKiAwLjUsXG4gICAgICAgIGN1cnJlbnROb2RlLnopO1xufSIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVVUlEKCkge1xuICAgIHZhciBzID0gW107XG4gICAgdmFyIGhleERpZ2l0cyA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzY7IGkrKykge1xuICAgICAgICBzW2ldID0gaGV4RGlnaXRzLnN1YnN0cihNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweDEwKSwgMSk7XG4gICAgfVxuICAgIC8vIGJpdHMgMTItMTUgb2YgdGhlIHRpbWVfaGlfYW5kX3ZlcnNpb24gZmllbGQgdG8gMDAxMFxuICAgIHNbMTRdID0gXCI0XCI7XG5cbiAgICAvLyBiaXRzIDYtNyBvZiB0aGUgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZCB0byAwMVxuICAgIHNbMTldID0gaGV4RGlnaXRzLnN1YnN0cigoc1sxOV0gJiAweDMpIHwgMHg4LCAxKTtcblxuICAgIHNbOF0gPSBzWzEzXSA9IHNbMThdID0gc1syM10gPSBcIi1cIjtcblxuICAgIHZhciB1dWlkID0gcy5qb2luKFwiXCIpO1xuICAgIHJldHVybiB1dWlkO1xuXG59XG4iLCJcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVNYXBQcm94eSB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVNYXAvR2FtZU1hcFByb3h5JztcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIEdhbWVDaGFyYWN0ZXJNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkdhbWVDaGFyYWN0ZXJNZWRpYXRvcl9cIiB9O1xuXG4gICAgY29uc3RydWN0b3IoaWQsIHZpZXdDb21wb25lbnQsIHByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zKSB7XG4gICAgICAgIHN1cGVyKEdhbWVDaGFyYWN0ZXJNZWRpYXRvci5OQU1FICsgaWQpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG5cbiAgICAgICAgbGV0IG5vdGlmaWNhdGlvbnMgPSBbXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FX0NPTVBMRVRFLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX05PREUgKyB0aGlzLmlkLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX1dBWVBPSU5UICsgdGhpcy5pZCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5OQVZJR0FURV9BTE9OR19QQVRIICsgdGhpcy5pZCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5TRVRfQ0hBUkFDVEVSX1RPX05PREUgKyB0aGlzLmlkLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkRJU1BMQVlfREVBVEggKyB0aGlzLmlkLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkRJU1BMQVlfQVRUQUNLICsgdGhpcy5pZCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5ESVNQTEFZX0hJVCArIHRoaXMuaWQsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuQ0hBUkFDVEVSX0xPT0tfQVQgKyB0aGlzLmlkLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLlNUQVJUX0NPTUJBVCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5NQVBfR1JJRF9DUkVBVEVEXG5cbiAgICAgICAgXTtcblxuICAgICAgICBub3RpZmljYXRpb25zID0gbm90aWZpY2F0aW9ucy5jb25jYXQocHJlcmVnaXN0ZXJlZE5vdGlmaWNhdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbnMpO1xuXG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vbigndXBkYXRlQ3VycmVudE5vZGUnLCB0aGlzLnVwZGF0ZUN1cnJlbnROb2RlLCB0aGlzKTtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdmaW5pc2hlZE1vdmUnLCB0aGlzLmhhbmRsZUZpbmlzaGVkTW9kZSwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9mZigndXBkYXRlQ3VycmVudE5vZGUnLCB0aGlzLnVwZGF0ZUN1cnJlbnROb2RlLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vZmYoJ2ZpbmlzaGVkTW92ZScsIHRoaXMuaGFuZGxlRmluaXNoZWRNb2RlLCB0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLnZpZXdDb21wb25lbnQpIHtcbiAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5maXJlKG5vdGlmaWNhdGlvbk5hbWUsIHRoaXMuaWQsIC4uLmFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBzY3JpcHRLZXkgaW4gdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdCkge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHQsIHNjcmlwdEtleSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY3JpcHRDb21wb25lbnQgPSB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0W3NjcmlwdEtleV07XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNjcmlwdENvbXBvbmVudC5oYW5kbGVOb3RpZmljYXRpb24gPT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgICAgICAgICAgICAgICBzY3JpcHRDb21wb25lbnQuaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIHRoaXMuaWQsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuU1RBUlRfQ09NQkFUOlxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlU3RhcnRDb21iYXQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLk1BUF9HUklEX0NSRUFURUQ6XG4gICAgICAgICAgICAgICAgY29uc3QgZ2FtZU1hcFByb3h5ID0gdGhpcy5mYWNhZGUucmV0cmlldmVQcm94eShHYW1lTWFwUHJveHkuTkFNRSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2FtZUNoYXJhY3RlclByb3h5ID0gdGhpcy5mYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHRoaXMuaWQpO1xuICAgICAgICAgICAgICAgIGdhbWVDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IGdhbWVNYXBQcm94eS5maW5kTmVhcmVzdE5vZGUodGhpcy52aWV3Q29tcG9uZW50LmdldExvY2FsUG9zaXRpb24oKSk7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX05PREUgKyB0aGlzLmlkOlxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlTmF2aWdhdGVUb05vZGUoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5OQVZJR0FURV9UT19XQVlQT0lOVCArIHRoaXMuaWQ6XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVOYXZpZ2F0ZVRvV2F5cG9pbnQoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5OQVZJR0FURV9BTE9OR19QQVRIICsgdGhpcy5pZDpcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU5hdmlnYXRlQWxvbmdQYXRoKGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuU0VUX0NIQVJBQ1RFUl9UT19OT0RFICsgdGhpcy5pZDpcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVNldENoYXJhY3RlclRvTm9kZShhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkNIQVJBQ1RFUl9MT09LX0FUICsgdGhpcy5pZDpcbiAgICAgICAgICAgICAgICBjb25zdCBsb29rUG9pbnQgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5sb29rQXRQb2ludChsb29rUG9pbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuRElTUExBWV9ERUFUSCArIHRoaXMuaWQ6XG4gICAgICAgICAgICAgICAgY29uc3QgaGl0Ym94ID0gdGhpcy52aWV3Q29tcG9uZW50LmZpbmRCeU5hbWUoXCJIaXRib3hcIik7XG4gICAgICAgICAgICAgICAgaWYgKGhpdGJveCkge1xuICAgICAgICAgICAgICAgICAgICBoaXRib3guZmlyZSgnc3RvcExpc3RlbmluZycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uYW5pbWF0ZURlYXRoKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5ESVNQTEFZX0FUVEFDSyArIHRoaXMuaWQ6XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLmFuaW1hdGVBdHRhY2soKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkRJU1BMQVlfSElUICsgdGhpcy5pZDpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uYW5pbWF0ZUhpdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlTmF2aWdhdGVUb05vZGUodGFyZ2V0Tm9kZSkge1xuICAgICAgICBjb25zdCBnYW1lTWFwUHJveHkgPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVNYXBQcm94eS5OQU1FKTtcbiAgICAgICAgY29uc3QgZ2FtZUNoYXJhY3RlclByb3h5ID0gdGhpcy5mYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHRoaXMuaWQpO1xuXG4gICAgICAgIGdhbWVDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IGdhbWVNYXBQcm94eS5maW5kTmVhcmVzdE5vZGUodGhpcy52aWV3Q29tcG9uZW50LmdldExvY2FsUG9zaXRpb24oKSk7XG5cbiAgICAgICAgY29uc3QgcGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgoZ2FtZUNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlLCB0YXJnZXROb2RlKTtcbiAgICAgICAgaWYgKHBhdGggJiYgcGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uc2V0UGF0aChwYXRoKTtcbiAgICAgICAgICAgIGdhbWVDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IHRhcmdldE5vZGU7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGhhbmRsZU5hdmlnYXRlVG9XYXlwb2ludCh0YXJnZXROb2RlKSB7XG4gICAgICAgIGNvbnN0IGdhbWVNYXBQcm94eSA9IHRoaXMuZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZU1hcFByb3h5Lk5BTUUpO1xuICAgICAgICBjb25zdCBnYW1lQ2hhcmFjdGVyUHJveHkgPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgdGhpcy5pZCk7XG5cbiAgICAgICAgZ2FtZUNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlID0gZ2FtZU1hcFByb3h5LmZpbmROZWFyZXN0Tm9kZSh0aGlzLnZpZXdDb21wb25lbnQuZ2V0TG9jYWxQb3NpdGlvbigpKTtcbiAgICAgICAgY29uc3QgY3VycmVudE5vZGUgPSBnYW1lQ2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGU7XG5cbiAgICAgICAgY29uc3QgbmVhcmVzdFdheXBvaW50ID0gZ2FtZU1hcFByb3h5LmZpbmROZWFyZXN0V2F5cG9pbnQodGhpcy52aWV3Q29tcG9uZW50LmdldExvY2FsUG9zaXRpb24oKSk7XG4gICAgICAgIGNvbnN0IG5lYXJlc3RUYXJnZXRXYXlwb2ludCA9IGdhbWVNYXBQcm94eS5maW5kTmVhcmVzdFdheXBvaW50KHRhcmdldE5vZGUpO1xuXG4gICAgICAgIC8qY29uc3QgcGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVdheXBvaW50c1BhdGgobmVhcmVzdFdheXBvaW50LCBuZWFyZXN0VGFyZ2V0V2F5cG9pbnQpO1xuICAgICAgICBpZiAocGF0aCAmJiBwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBoYXNMaW5lVG9Qb2ludCA9IHRydWU7XG4gICAgICAgICAgICB3aGlsZSAocGF0aC5sZW5ndGggPiAwICYmIGhhc0xpbmVUb1BvaW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGdhbWVNYXBQcm94eS5oYXNWYWxpZExpbmUocGF0aFtwYXRoLmxlbmd0aCAtIDFdLCBjdXJyZW50Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBoYXNMaW5lVG9Qb2ludCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIC8vIFNlZSBpZiBlbmQgb2YgcGF0aCBjYW4gYmUgdHJpbW1lZFxuICAgICAgICAgICAgICAgIGlmIChnYW1lTWFwUHJveHkuaGFzVmFsaWRMaW5lKHBhdGhbMV0sIHRhcmdldE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGguc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhdGgudW5zaGlmdCh0YXJnZXROb2RlKTtcblxuICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnNldFBhdGgocGF0aCk7XG4gICAgICAgICAgICBnYW1lQ2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUgPSB0YXJnZXROb2RlO1xuICAgICAgICB9Ki9cblxuICAgICAgICAvLyBJcyBzdHJhaWdodCBsaW5lP1xuICAgICAgICBpZiAoZ2FtZU1hcFByb3h5Lmhhc1ZhbGlkTGluZShjdXJyZW50Tm9kZSwgdGFyZ2V0Tm9kZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBbdGFyZ2V0Tm9kZSwgY3VycmVudE5vZGVdO1xuICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnNldFBhdGgocGF0aCk7XG4gICAgICAgICAgICBnYW1lQ2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUgPSB0YXJnZXROb2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVdheXBvaW50c1BhdGgobmVhcmVzdFdheXBvaW50LCBuZWFyZXN0VGFyZ2V0V2F5cG9pbnQpO1xuICAgICAgICAgICAgaWYgKHBhdGggJiYgcGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTZWUgaWYgZW5kIG9mIHBhdGggY2FuIGJlIHRyaW1tZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdhbWVNYXBQcm94eS5oYXNWYWxpZExpbmUocGF0aFsxXSwgdGFyZ2V0Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBoYXNMaW5lVG9Qb2ludCA9IHRydWU7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHBhdGgubGVuZ3RoID4gMSAmJiBoYXNMaW5lVG9Qb2ludCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZU1hcFByb3h5Lmhhc1ZhbGlkTGluZShwYXRoW3BhdGgubGVuZ3RoIC0gMl0sIGN1cnJlbnROb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0xpbmVUb1BvaW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIHBhdGgudW5zaGlmdCh0YXJnZXROb2RlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5zZXRQYXRoKHBhdGgpO1xuICAgICAgICAgICAgICAgIGdhbWVDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IHRhcmdldE5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVOYXZpZ2F0ZUFsb25nUGF0aChwYXRoKSB7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5zZXRQYXRoKHBhdGgpO1xuICAgIH1cblxuICAgIG1vdmVUb05vZGVXaXRoUHJvbWlzZSh0YXJnZXROb2RlKSB7XG4gICAgICAgIGNvbnN0IGdhbWVNYXBQcm94eSA9IHRoaXMuZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZU1hcFByb3h5Lk5BTUUpO1xuXG4gICAgICAgIGNvbnN0IGdhbWVDaGFyYWN0ZXJQcm94eSA9IHRoaXMuZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0aGlzLmlkKTtcblxuICAgICAgICBpZiAoIWdhbWVDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSkge1xuICAgICAgICB9XG4gICAgICAgIGdhbWVDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IGdhbWVNYXBQcm94eS5maW5kTmVhcmVzdE5vZGUodGhpcy52aWV3Q29tcG9uZW50LmdldExvY2FsUG9zaXRpb24oKSk7XG5cblxuICAgICAgICBjb25zdCBwYXRoID0gQXN0YXIuY2FsY3VsYXRlUGF0aChnYW1lQ2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUsIHRhcmdldE5vZGUpO1xuICAgICAgICBpZiAocGF0aCAmJiBwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5zZXRQYXRoKHBhdGgpO1xuICAgICAgICAgICAgZ2FtZUNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQub24oJ2ZpbmlzaGVkTW92ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdjYW5jZWxNb3ZlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGhhbmRsZU5hdmlnYXRlQWxvbmdQYXRoV2l0aFByb21pc2UocGF0aCkge1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uc2V0UGF0aChwYXRoKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdmaW5pc2hlZE1vdmUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vbignY2FuY2VsTW92ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVDdXJyZW50Tm9kZShuZXdOb2RlKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk1PVkVEX1RPX05PREUgKyB0aGlzLmlkLCBuZXdOb2RlKTtcblxuICAgIH1cblxuICAgIGhhbmRsZUZpbmlzaGVkTW9kZShuZXdOb2RlKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkZJTklTSEVEX01PVkUsIHRoaXMuaWQsIG5ld05vZGUpO1xuICAgIH1cblxuICAgIGxvb2tGb3JDaGFyYWN0ZXIoaWQsIG5vZGUpIHtcbiAgICAgICAgZm9yIChjb25zdCBzZWFyY2hOb2RlIG9mIHRoaXMuc2VhcmNoQXJlYSkge1xuICAgICAgICAgICAgaWYgKHNlYXJjaE5vZGUuZXF1YWxzKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLmxvb2tBdFBvaW50KG5vZGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNUQVJUX0NPTUJBVCwgdGhpcy52aWV3Q29tcG9uZW50LCBbaWRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZVN0YXJ0Q29tYmF0KCkge1xuICAgICAgICBjb25zdCBnYW1lQ2hhcmFjdGVyVk8gPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgdGhpcy5pZCkudm87XG5cbiAgICAgICAgLy8gdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnN0b3BNb3ZlbWVudChnYW1lQ2hhcmFjdGVyVk8uY3VycmVudE5vZGUpO1xuICAgIH1cblxuICAgIGhhbmRsZVNldENoYXJhY3RlclRvTm9kZShub2RlKSB7XG4gICAgICAgIGNvbnN0IGdhbWVDaGFyYWN0ZXJQcm94eSA9IHRoaXMuZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0aGlzLmlkKTtcbiAgICAgICAgZ2FtZUNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlID0gbm9kZTtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnN0b3BNb3ZlbWVudChub2RlKTtcbiAgICB9XG59XG4iLCJcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIFByb2plY3RpbGVDcmVhdG9yTWVkaWF0b3IgZXh0ZW5kcyBNZWRpYXRvciB7XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJQcm9qZWN0aWxlQ3JlYXRvck1lZGlhdG9yXCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKHZpZXdDb21wb25lbnQpIHtcbiAgICAgICAgc3VwZXIoUHJvamVjdGlsZUNyZWF0b3JNZWRpYXRvci5OQU1FKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24oW1xuXG4gICAgICAgIF0pO1xuXG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVQcm9qZWN0aWxlKHR5cGUsIG9yaWdpblBvaW50LCB0YXJnZXRQb2ludCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnUHJvamVjdGlsZUNyZWF0b3JDb21wb25lbnQnXS5jcmVhdGVQcm9qZWN0aWxlKHR5cGUsIG9yaWdpblBvaW50LCB0YXJnZXRQb2ludCk7XG4gICAgfVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5jb25zdCB7IEdhbWVGYWNhZGUgfSA9IHJlcXVpcmUoJy4uL0dhbWVGYWNhZGUnKTtcblxuZXhwb3J0IGNvbnN0IENhY29nZW5HYW1lID0gcGMuY3JlYXRlU2NyaXB0KCdDYWNvZ2VuR2FtZScpO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuQ2Fjb2dlbkdhbWUucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkFQUF9JTklUSUFMSVNFRCk7XG4gICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FLCBcIlBvcnQgVGFyaW5nb1wiLCBcImVudHJhbmNlXCIpO1xufTtcblxuLy8gdXBkYXRlIGNvZGUgY2FsbGVkIGV2ZXJ5IGZyYW1lXG5DYWNvZ2VuR2FtZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGR0KSB7XG5cbn07IiwiaW1wb3J0IHsgTmF2aWdhdGlvbk5vZGUgfSBmcm9tIFwiLi4vLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL05hdmlnYXRpb25Ob2RlXCI7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhcic7XG5cbmV4cG9ydCBjb25zdCBOYXZpZ2F0aW9uQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdOYXZpZ2F0aW9uQ29tcG9uZW50Jyk7XG5cbk5hdmlnYXRpb25Db21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJjb25uZWN0ZWRDb21wb25lbnRzXCIsIHtcbiAgICB0eXBlOiBcImVudGl0eVwiLFxuICAgIGFycmF5OiB0cnVlLFxuICAgIHRpdGxlOiBcIkNvbm5lY3RlZCBDb21wb25lbnRzXCJcbn0pO1xuXG5OYXZpZ2F0aW9uQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxTY2FsZSgpO1xuICAgIGNvbnN0IGhhbGZFeHRlbnRzID0gbmV3IHBjLlZlYzMoc2NhbGUueCAvIDIsIDAuMDUsIHNjYWxlLnogLyAyKTtcbiAgICB0aGlzLmFhYmIgPSBuZXcgcGMuQm91bmRpbmdCb3godGhpcy5lbnRpdHkuZ2V0UG9zaXRpb24oKSwgaGFsZkV4dGVudHMpO1xuICAgIHRoaXMuYXBwLm9uKCdwaWNrZXI6cmF5Y2FzdCcsIHRoaXMuaGFuZGxlUmF5Q2FzdCwgdGhpcyk7XG5cbiAgICB0aGlzLmVudGl0eS5maW5kQnlOYW1lKCdQbGFuZScpLmVuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmVudGl0eS5vbmNlKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgICB0aGlzLmFwcC5vZmYoJ3BpY2tlcjpyYXljYXN0JywgdGhpcy5oYW5kbGVSYXlDYXN0LCB0aGlzKTtcbiAgICB9KTtcbn1cblxuTmF2aWdhdGlvbkNvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlUmF5Q2FzdCA9IGZ1bmN0aW9uIChyYXksIHNjcmVlblBvcykge1xuICAgIGNvbnN0IGhpdFBvc2l0aW9uID0gbmV3IHBjLlZlYzMoKTtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLmFhYmIuaW50ZXJzZWN0c1JheShyYXksIGhpdFBvc2l0aW9uKTtcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIHRoaXMuYXBwLmZpcmUoJ3BpY2tlcjpyZXN1bHQnLCB0aGlzLmVudGl0eSwgaGl0UG9zaXRpb24sIHNjcmVlblBvcyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8TmF2aWdhdGlvbk5vZGU+fSBub2RlR3JpZCAtIEFycmF5IG9mIG5vZGVzIHJlcHJlc2VudGluZyBwb2ludHMgb24gdGhlIGdyaWQuXG4gKi9cbk5hdmlnYXRpb25Db21wb25lbnQucHJvdG90eXBlLnNldEdyaWQgPSBmdW5jdGlvbiAobm9kZUdyaWQpIHtcbiAgICB0aGlzLm5vZGVHcmlkID0gbm9kZUdyaWQ7XG59XG5cbk5hdmlnYXRpb25Db21wb25lbnQucHJvdG90eXBlLmdldEdyaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZUdyaWQ7XG59XG5cbk5hdmlnYXRpb25Db21wb25lbnQucHJvdG90eXBlLmdldE5lYXJlc3ROb2RlID0gZnVuY3Rpb24gKHRhcmdldFBvaW50KSB7XG4gICAgbGV0IG5lYXJlc3ROb2RlID0gdGhpcy5ub2RlR3JpZFswXTtcbiAgICBsZXQgZGlzdFNxcnRUb05lYXJlc3ROb2RlID0gQXN0YXIuZ2V0RGlzdFNxdWFyZWQobmVhcmVzdE5vZGUsIHRhcmdldFBvaW50KTtcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcy5ub2RlR3JpZCkge1xuICAgICAgICBjb25zdCBkaXN0VG9Ob2RlID0gQXN0YXIuZ2V0RGlzdFNxdWFyZWQobm9kZSwgdGFyZ2V0UG9pbnQpO1xuXG4gICAgICAgIGlmIChkaXN0VG9Ob2RlIDwgZGlzdFNxcnRUb05lYXJlc3ROb2RlKSB7XG4gICAgICAgICAgICBkaXN0U3FydFRvTmVhcmVzdE5vZGUgPSBkaXN0VG9Ob2RlO1xuICAgICAgICAgICAgbmVhcmVzdE5vZGUgPSBub2RlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZWFyZXN0Tm9kZTtcbn1cbiIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gXCJAa29yZWV6L3B1cmUtbXZjXCI7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi4vLi4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tIFwiLi4vLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHlcIjtcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJNZWRpYXRvciB9IGZyb20gJy4vR2FtZUNoYXJhY3Rlck1lZGlhdG9yJztcbmltcG9ydCB7IGJvdEJlaGF2aW91ckVudW1zIH0gZnJvbSAnLi4vLi4vYmVoYXZpb3VyVHJlZS9Cb3RCZWhhdmlvdXJUeXBlcyc7XG5pbXBvcnQgeyB3ZWFwb25FbnVtcyB9IGZyb20gXCIuLi8uLi9kYXRhL1dlYXBvblR5cGVzXCI7XG5pbXBvcnQgeyBHYW1lTWFwUHJveHkgfSBmcm9tICcuLi8uLi9tb2RlbC9nYW1lTWFwL0dhbWVNYXBQcm94eSc7XG5cbmV4cG9ydCBjb25zdCBHYW1lQ2hhcmFjdGVyQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdHYW1lQ2hhcmFjdGVyQ29tcG9uZW50Jyk7XG5cbmNvbnN0IHN0YXRzU2NoZW1hID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogJ3NraWxsJyxcbiAgICAgICAgdGl0bGU6ICdTa2lsbCcsXG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICBkZWZhdWx0OiAxXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdtYXhTdGFtaW5hJyxcbiAgICAgICAgdGl0bGU6ICdTdGFtaW5hJyxcbiAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgIGRlZmF1bHQ6IDFcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdtYXhMdWNrJyxcbiAgICAgICAgdGl0bGU6ICdMdWNrJyxcbiAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgIGRlZmF1bHQ6IDFcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdpbml0aWF0aXZlJyxcbiAgICAgICAgdGl0bGU6ICdJbml0aWF0aXZlJyxcbiAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgIGRlZmF1bHQ6IDJcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdtYXhNb3ZlbWVudCcsXG4gICAgICAgIHRpdGxlOiAnTW92ZW1lbnQnLFxuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgZGVmYXVsdDogNlxuICAgIH1cbl07XG5cbmNvbnN0IGFkdmFuY2VkU2tpbGxzU2NoZW1hID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogJ3NraWxsTmFtZScsXG4gICAgICAgIHRpdGxlOiAnU2tpbGwgTmFtZScsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdza2lsbFZhbHVlJyxcbiAgICAgICAgdGl0bGU6ICdTa2lsbCBWYWx1ZScsXG4gICAgICAgIHR5cGU6ICdudW1iZXInXG4gICAgfVxuXTtcblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImNoYXJhY3RlcklkXCIsIHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIHRpdGxlOiBcIkNoYXJhY3RlciBJZFwiXG59KTtcblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImNoYXJhY3RlclNwZWVkXCIsIHtcbiAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIHRpdGxlOiBcIkNoYXJhY3RlciBTcGVlZFwiLFxuICAgIGRlZmF1bHQ6IDRcbn0pO1xuXG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJjaGFyYWN0ZXJIZWlnaHRcIiwge1xuICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgdGl0bGU6IFwiQ2hhcmFjdGVyIEhlaWdodFwiLFxuICAgIGRlZmF1bHQ6IDEuOFxufSk7XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJpc05QQ1wiLCB7XG4gICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgdGl0bGU6IFwiaXMgTlBDXCIsXG4gICAgZGVmYXVsdDogdHJ1ZVxufSk7XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJzdGF0c092ZXJyaWRlc1wiLCB7XG4gICAgdHlwZTogXCJqc29uXCIsXG4gICAgdGl0bGU6IFwiU3RhdHMgT3ZlcnJpZGVzXCIsXG4gICAgc2NoZW1hOiBzdGF0c1NjaGVtYVxufSk7XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJhZHZhbmNlZFNraWxsc1wiLCB7XG4gICAgdHlwZTogXCJqc29uXCIsXG4gICAgdGl0bGU6IFwiQWR2YW5jZWQgU2tpbGxzXCIsXG4gICAgc2NoZW1hOiBhZHZhbmNlZFNraWxsc1NjaGVtYSxcbiAgICBhcnJheTogdHJ1ZVxufSk7XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJjb21iYXRHcm91cE5hbWVcIiwge1xuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgdGl0bGU6IFwiQ29tYmF0IEdyb3VwIE5hbWVcIlxufSk7XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJkaWFsb2d1ZVRyZWVOYW1lXCIsIHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIHRpdGxlOiBcIkRpYWxvZ3VlIFRyZWUgTmFtZVwiXG59KTtcblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImJvdEJlaGF2aW91clwiLCB7XG4gICAgdHlwZTogXCJudW1iZXJcIixcbiAgICB0aXRsZTogXCJCb3QgQmVoYXZpb3VyXCIsXG4gICAgZW51bTogYm90QmVoYXZpb3VyRW51bXMsXG4gICAgZGVmYXVsdDogMFxufSk7XG5cblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImVxdWlwcGVkV2VhcG9uXCIsIHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIHRpdGxlOiBcIkVxdWlwcGVkIFdlYXBvblwiLFxuICAgIGVudW06IHdlYXBvbkVudW1zLFxuICAgIGRlZmF1bHQ6IFwidW5hcm1lZFwiXG59KTtcblxuXG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLnByZXJlZ2lzdGVyTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xuICAgIGlmICghdGhpcy5wcmVyZWdpc3RlcmVkTm90aWZpY2F0aW9ucykge1xuICAgICAgICB0aGlzLnByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zID0gW107XG4gICAgfVxuXG4gICAgdGhpcy5wcmVyZWdpc3RlcmVkTm90aWZpY2F0aW9ucy5wdXNoKG5vdGlmaWNhdGlvbik7XG59XG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5wb3N0SW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLm1vdmVtZW50UGF0aCA9IFtdO1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcblxuXG4gICAgaWYgKCF0aGlzLnByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zKSB7XG4gICAgICAgIHRoaXMucHJlcmVnaXN0ZXJlZE5vdGlmaWNhdGlvbnMgPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0c092ZXJyaWRlcyA9IHRoaXMuc3RhdHNPdmVycmlkZXM7XG4gICAgY29uc3QgcHJveHlQYXJhbXMgPSB7XG4gICAgICAgIGlkOiB0aGlzLmNoYXJhY3RlcklkLFxuICAgICAgICBpc05QQzogdGhpcy5pc05QQyxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmNoYXJhY3RlckhlaWdodCxcbiAgICAgICAgYWR2YW5jZWRTa2lsbHM6IGFkdmFuY2VkU2tpbGxzU2NoZW1hVG9NYXAodGhpcy5hZHZhbmNlZFNraWxscyksXG4gICAgICAgIGVxdWlwcGVkV2VhcG9uOiB0aGlzLmVxdWlwcGVkV2VhcG9uLFxuICAgICAgICAuLi5zdGF0c092ZXJyaWRlcyxcbiAgICAgICAgYm90QmVoYXZpb3VyOiB0aGlzLmJvdEJlaGF2aW91cixcbiAgICAgICAgZGlhbG9ndWVUcmVlOiB0aGlzLmRpYWxvZ3VlVHJlZU5hbWVcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuY29tYmF0R3JvdXBOYW1lICYmIHRoaXMuY29tYmF0R3JvdXBOYW1lICE9PSBcIlwiKSB7XG4gICAgICAgIGNvbnN0IGNvbXJhZGVFbnRpdGllcyA9IHRoaXMuYXBwLnJvb3QuZmluZEJ5VGFnKGBjb21iYXRHcm91cDoke3RoaXMuY29tYmF0R3JvdXBOYW1lfWApO1xuXG4gICAgICAgIGNvbnN0IGNvbWJhdEdyb3VwID0gW107XG4gICAgICAgIGZvciAoY29uc3QgY29tcmFkZUVudGl0eSBvZiBjb21yYWRlRW50aXRpZXMpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZSBkaXNhYmxlZCBlbnRpdGllc1xuICAgICAgICAgICAgaWYgKGNvbXJhZGVFbnRpdHkuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXJhZGVJZCA9IGNvbXJhZGVFbnRpdHkuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uY2hhcmFjdGVySWQ7XG4gICAgICAgICAgICAgICAgY29tYmF0R3JvdXAucHVzaChjb21yYWRlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb3h5UGFyYW1zLmNvbWJhdEdyb3VwID0gY29tYmF0R3JvdXA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKEdhbWVDaGFyYWN0ZXJNZWRpYXRvci5OQU1FICsgdGhpcy5jaGFyYWN0ZXJJZCkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoR2FtZUNoYXJhY3Rlck1lZGlhdG9yLk5BTUUgKyB0aGlzLmNoYXJhY3RlcklkKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0aGlzLmNoYXJhY3RlcklkKSkge1xuICAgICAgICAvLyB0aGlzLmZhY2FkZS5yZW1vdmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHRoaXMuY2hhcmFjdGVySWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlclByb3h5ID0gbmV3IEdhbWVDaGFyYWN0ZXJQcm94eShwcm94eVBhcmFtcyk7XG4gICAgICAgIC8vIFNldCBjdXJyZW50IG5vZGUgaWYgZ2FtZSBjaGFyYWN0ZXIgd2FzIGNyZWF0ZWQgYWZ0ZXIgdGhlIG1hcFxuICAgICAgICBjb25zdCBnYW1lTWFwUHJveHkgPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVNYXBQcm94eS5OQU1FKTtcbiAgICAgICAgaWYgKGdhbWVNYXBQcm94eSkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudE5vZGUgPSBnYW1lTWFwUHJveHkuZmluZE5lYXJlc3ROb2RlKHRoaXMuZW50aXR5LmdldFBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgY2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyUHJveHkoY2hhcmFjdGVyUHJveHkpO1xuICAgIH1cblxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgR2FtZUNoYXJhY3Rlck1lZGlhdG9yKHRoaXMuY2hhcmFjdGVySWQsIHRoaXMuZW50aXR5LCB0aGlzLnByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zKSk7XG5cbiAgICB0aGlzLnZlaGljbGUgPSB0aGlzLmVudGl0eS5zY3JpcHRbJ1ZlaGljbGVDb21wb25lbnQnXTtcbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ucGxheSgnaWRsZS5nbGInLCAwLjEpO1xuXG59O1xuXG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLnNldFBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xuICAgIGlmICh0aGlzLm1vdmVtZW50UGF0aCAmJiB0aGlzLm1vdmVtZW50UGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuZW50aXR5LmZpcmUoJ2NhbmNlbE1vdmUnKTtcbiAgICB9XG4gICAgdGhpcy5tb3ZlbWVudFBhdGggPSBwYXRoO1xuXG4gICAgdGhpcy5lbnRpdHkuYW5pbWF0aW9uLmxvb3AgPSB0cnVlO1xuICAgIHRoaXMuZW50aXR5LmFuaW1hdGlvbi5wbGF5KCd3YWxrLmdsYicsIDAuMSk7XG59O1xuXG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5zdG9wTW92ZW1lbnQgPSBmdW5jdGlvbiAoY3VycmVudE5vZGUpIHtcbiAgICB0aGlzLm1vdmVtZW50UGF0aCA9IFtdO1xuICAgIHRoaXMuZW50aXR5LnNldExvY2FsUG9zaXRpb24oY3VycmVudE5vZGUueCwgY3VycmVudE5vZGUueSwgY3VycmVudE5vZGUueik7XG5cbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ubG9vcCA9IHRydWU7XG4gICAgdGhpcy5lbnRpdHkuYW5pbWF0aW9uLnBsYXkoJ2lkbGUuZ2xiJywgMC4xKTtcbn07XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkdCkge1xuICAgIHRoaXMubW92ZUFsb25nUGF0aChkdCk7XG59XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLm1vdmVBbG9uZ1BhdGggPSBmdW5jdGlvbiAoZHQpIHtcblxuICAgIGlmICh0aGlzLm1vdmVtZW50UGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG5leHRQYXRoUG9pbnQgPSB0aGlzLm1vdmVtZW50UGF0aFt0aGlzLm1vdmVtZW50UGF0aC5sZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3QgbG9jYWxQb3MgPSB0aGlzLmVudGl0eS5nZXRMb2NhbFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IG5vZGVQb2ludCA9IG5ldyBwYy5WZWMzKG5leHRQYXRoUG9pbnQueCwgbmV4dFBhdGhQb2ludC55LCBuZXh0UGF0aFBvaW50LnopO1xuXG5cbiAgICAgICAgY29uc3QgZGlzdGFuY2VUb05leHRQYXRoID0gbG9jYWxQb3MuZGlzdGFuY2Uobm9kZVBvaW50KTtcbiAgICAgICAgaWYgKGRpc3RhbmNlVG9OZXh0UGF0aCA8PSAoZHQgKiB0aGlzLmNoYXJhY3RlclNwZWVkKSkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudE5vZGUgPSB0aGlzLm1vdmVtZW50UGF0aC5wb3AoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMubW92ZW1lbnRQYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW50aXR5LmZpcmUoJ2ZpbmlzaGVkTW92ZScsIGN1cnJlbnROb2RlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ubG9vcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5lbnRpdHkuYW5pbWF0aW9uLnBsYXkoJ2lkbGUuZ2xiJywgMC4xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW50aXR5LmZpcmUoJ3VwZGF0ZUN1cnJlbnROb2RlJywgY3VycmVudE5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMubW92ZW1lbnRQYXRoLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZlaGljbGUuc2Vlayhub2RlUG9pbnQsIGR0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy52ZWhpY2xlLmFycml2ZShub2RlUG9pbnQsIGR0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudmVoaWNsZS5wcm9jZXNzVmVsb2NpdHkoZHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5sb29rQXRQb2ludCA9IGZ1bmN0aW9uIChwb2ludCkge1xuICAgIGNvbnN0IGxvY2FsUG9zID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpO1xuXG4gICAgY29uc3QgZHggPSBwb2ludC54IC0gbG9jYWxQb3MueDtcbiAgICBjb25zdCBkeiA9IHBvaW50LnogLSBsb2NhbFBvcy56O1xuICAgIGNvbnN0IGFuZ2xlVG9EZXN0ID0gTWF0aC5hdGFuMihkeCwgZHopICogMTgwIC8gTWF0aC5QSTtcbiAgICB0aGlzLmVudGl0eS5zZXRFdWxlckFuZ2xlcygwLCBhbmdsZVRvRGVzdCwgMCk7XG59XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLmFuaW1hdGVEZWF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ubG9vcCA9IGZhbHNlO1xuICAgIHRoaXMuZW50aXR5LmFuaW1hdGlvbi5wbGF5KCdkaWUuZ2xiJywgMC4xKTtcbn1cblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5wcm90b3R5cGUuYW5pbWF0ZUhpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ubG9vcCA9IGZhbHNlO1xuICAgIHRoaXMuZW50aXR5LmFuaW1hdGlvbi5wbGF5KCdoaXQuZ2xiJywgMC4xKTtcbn1cblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5wcm90b3R5cGUuYW5pbWF0ZUF0dGFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ubG9vcCA9IGZhbHNlO1xuICAgIHRoaXMuZW50aXR5LmFuaW1hdGlvbi5wbGF5KCdhdHRhY2suZ2xiJywgMC4xKTtcbn1cblxuZnVuY3Rpb24gYWR2YW5jZWRTa2lsbHNTY2hlbWFUb01hcChhZHZhbmNlZFNraWxsc1NjaGVtYSkge1xuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcblxuICAgIGZvciAoY29uc3Qgc2tpbGxPYmplY3Qgb2YgYWR2YW5jZWRTa2lsbHNTY2hlbWEpIHtcbiAgICAgICAgbWFwLnNldChza2lsbE9iamVjdC5za2lsbE5hbWUsIHNraWxsT2JqZWN0LnNraWxsVmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBtYXA7XG59IiwiZXhwb3J0IGNvbnN0IEFncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdBZ3JvR2FtZUNoYXJhY3RlckNvbXBvbmVudCcpO1xuaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSAnQGtvcmVlei9wdXJlLW12Yyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi4vLi4vLi4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5pbXBvcnQgeyBHYW1lTWFwUHJveHkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lTWFwL0dhbWVNYXBQcm94eSc7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhcic7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5cbkFncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKFwic2lnaHRSYW5nZVwiLCB7XG4gICAgdHlwZTogXCJudW1iZXJcIixcbiAgICB0aXRsZTogXCJTaWdodCBSYW5nZVwiLFxuICAgIGRlZmF1bHQ6IDVcbn0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbnRpdHkuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10ucHJlcmVnaXN0ZXJOb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk1BUF9HUklEX0NSRUFURUQpO1xuICAgIHRoaXMuZW50aXR5LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnByZXJlZ2lzdGVyTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5NT1ZFRF9UT19OT0RFICsgXCJwbGF5ZXJcIik7XG5cbiAgICB0aGlzLmVudGl0eS5vbihHYW1lQ29tbWFuZHMuTUFQX0dSSURfQ1JFQVRFRCwgdGhpcy5oYW5kbGVNYXBHcmlkQ3JlYXRlZCwgdGhpcyk7XG4gICAgdGhpcy5lbnRpdHkub24oR2FtZUNvbW1hbmRzLk1PVkVEX1RPX05PREUgKyBcInBsYXllclwiLCB0aGlzLmhhbmRsZU1vdmVkVG9Ob2RlLCB0aGlzKTtcbiAgICBjb25zb2xlLmxvZygnV2FpdCBmb3IgaW5pdGlhbCcpO1xufTtcblxuQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZU1hcEdyaWRDcmVhdGVkID0gZnVuY3Rpb24gKGlkLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICB0aGlzLmNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBpZCk7XG59XG5cbkFncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVNb3ZlZFRvTm9kZSA9IGZ1bmN0aW9uIChpZCwgdGFyZ2V0Tm9kZSkge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgY29uc3QgZ2FtZVN0YXRlID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZVN0YXRlUHJveHkuTkFNRSkudm87XG5cbiAgICAvLyBJZ25vcmUgaWYgdGhlIHBsYXllciBpc24ndCBleHBsb3JpbmdcbiAgICBpZiAoZ2FtZVN0YXRlLmdhbWVwbGF5TW9kZSAhPT0gZ2FtZXBsYXlNb2RlVHlwZXMuRVhQTE9SQVRJT04gfHwgdGhpcy5jaGFyYWN0ZXJQcm94eS5pc0RlYWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnJlbnROb2RlID0gdGhpcy5jaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZTtcbiAgICBjb25zdCBjaGFyYWN0ZXJQb2ludCA9IG5ldyBwYy5WZWMzKGN1cnJlbnROb2RlLngsIGN1cnJlbnROb2RlLnksIGN1cnJlbnROb2RlLnopO1xuICAgIGNvbnN0IHRhcmdldFBvaW50ID0gbmV3IHBjLlZlYzModGFyZ2V0Tm9kZS54LCB0YXJnZXROb2RlLnksIHRhcmdldE5vZGUueik7XG5cbiAgICBpZiAoY2hhcmFjdGVyUG9pbnQuZGlzdGFuY2UodGFyZ2V0UG9pbnQpIDw9IHRoaXMuc2lnaHRSYW5nZSkge1xuICAgICAgICAvLyBNaWdodCBiZSBzZWVuIC0gY2hlY2sgZm9yIHdhbGxzXG4gICAgICAgIGNvbnN0IGdhbWVNYXBQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVNYXBQcm94eS5OQU1FKTtcbiAgICAgICAgY2hhcmFjdGVyUG9pbnQueSArPSB0aGlzLmNoYXJhY3RlclByb3h5LmhlaWdodDtcblxuICAgICAgICBpZiAoIWdhbWVNYXBQcm94eS5yYXlJbnRlcnNlY3RzV2FsbChjaGFyYWN0ZXJQb2ludCwgdGFyZ2V0UG9pbnQpKSB7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0VUX0NIQVJBQ1RFUl9UT19OT0RFICsgXCJwbGF5ZXJcIiwgdGFyZ2V0Tm9kZSk7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU1RBUlRfQ09NQkFULCBpZCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIFRvYXN0TWVzc2FnZU1lZGlhdG9yIGV4dGVuZHMgTWVkaWF0b3Ige1xuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiVG9hc3RNZXNzYWdlTWVkaWF0b3JcIiB9O1xuXG4gICAgY29uc3RydWN0b3Iodmlld0NvbXBvbmVudCkge1xuICAgICAgICBzdXBlcihUb2FzdE1lc3NhZ2VNZWRpYXRvci5OQU1FKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24oW1xuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLlNIT1dfVE9BU1RfTUVTU0FHRVxuICAgICAgICBdKTtcblxuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50O1xuICAgIH1cblxuICAgIG9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKSB7XG4gICAgICAgIHN1cGVyLm9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKTtcbiAgICB9XG5cbiAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgICAgICBzd2l0Y2ggKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLlNIT1dfVE9BU1RfTUVTU0FHRTpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydUb2FzdE1lc3NhZ2VDb21wb25lbnQnXS5hZGRNZXNzYWdlKGFyZ3NbMF0pO1xuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gXCIuLi8uLi9HYW1lRmFjYWRlXCI7XG5pbXBvcnQgeyBUb2FzdE1lc3NhZ2VNZWRpYXRvciB9IGZyb20gXCIuL1RvYXN0TWVzc2FnZU1lZGlhdG9yXCI7XG5cbmV4cG9ydCBjb25zdCBUb2FzdE1lc3NhZ2VDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ1RvYXN0TWVzc2FnZUNvbXBvbmVudCcpO1xuXG5Ub2FzdE1lc3NhZ2VDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2xhYmVsRW50aXR5JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdMYWJlbCBFbnRpdHknIH0pO1xuVG9hc3RNZXNzYWdlQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdtZXNzYWdlVGltZScsIHsgdHlwZTogJ251bWJlcicsIGRlZmF1bHQ6IDUsIHRpdGxlOiAnTWVzc2FnZSBUaW1lJyB9KTtcblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcblRvYXN0TWVzc2FnZUNvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKFRvYXN0TWVzc2FnZU1lZGlhdG9yLk5BTUUpKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnJlbW92ZU1lZGlhdG9yKFRvYXN0TWVzc2FnZU1lZGlhdG9yLk5BTUUpO1xuICAgIH1cblxuICAgIHRoaXMubWVzc2FnZVF1ZXVlID0gW107XG4gICAgdGhpcy5jdXJyZW50VGltZW91dCA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyTWVkaWF0b3IobmV3IFRvYXN0TWVzc2FnZU1lZGlhdG9yKHRoaXMuZW50aXR5KSk7XG59O1xuXG5Ub2FzdE1lc3NhZ2VDb21wb25lbnQucHJvdG90eXBlLmFkZE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLm1lc3NhZ2VRdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlUXVldWUucHVzaChtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5zaG93TmV4dE1lc3NhZ2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1lc3NhZ2VRdWV1ZS5wdXNoKG1lc3NhZ2UpO1xuICAgIH1cbn1cblxuXG5Ub2FzdE1lc3NhZ2VDb21wb25lbnQucHJvdG90eXBlLnNob3dOZXh0TWVzc2FnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5tZXNzYWdlUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBuZXh0TWVzc2FnZSA9IHRoaXMubWVzc2FnZVF1ZXVlWzBdO1xuXG4gICAgICAgIHRoaXMubGFiZWxFbnRpdHkuZWxlbWVudC50ZXh0ID0gbmV4dE1lc3NhZ2U7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VRdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgdGhpcy5zaG93TmV4dE1lc3NhZ2UoKTtcbiAgICAgICAgfSwgdGhpcy5tZXNzYWdlVGltZSAqIDEwMDApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGFiZWxFbnRpdHkuZWxlbWVudC50ZXh0ID0gXCJcIjtcblxuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgU2V0Q2FtZXJhVGFyZ2V0Q29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdTZXRDYW1lcmFUYXJnZXRDb21wb25lbnQnKTtcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4uLy4uLy4uL0dhbWVGYWNhZGUnO1xuXG4vLyBwb3N0SW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcblNldENhbWVyYVRhcmdldENvbXBvbmVudC5wcm90b3R5cGUucG9zdEluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0VUX0NBTUVSQV9UQVJHRVQsIHRoaXMuZW50aXR5KTtcbn07XG4iLCJcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIElucHV0TGF5ZXJNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIklucHV0TGF5ZXJNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKElucHV0TGF5ZXJNZWRpYXRvci5OQU1FKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24oW1xuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkNIQU5HRV9TQ0VORV9DT01QTEVURVxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50ID0gdmlld0NvbXBvbmVudDtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdwaWNrZXI6Z2FtZUNoYXJhY3RlcicsIHRoaXMuaGFuZGxlUGlja2VyR2FtZUNoYXJhY3RlciwgdGhpcyk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vbigncGlja2VyOm5hdmlnYXRpb24nLCB0aGlzLmhhbmRsZVBpY2tlck5hdmlnYXRpb24sIHRoaXMpO1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQub24oJ3Njcm9sbGluZycsIHRoaXMuaGFuZGxlU2Nyb2xsaW5nLCB0aGlzKTtcblxuICAgIH1cblxuICAgIG9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKSB7XG4gICAgICAgIHN1cGVyLm9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKTtcbiAgICB9XG5cbiAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgICAgICBzd2l0Y2ggKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkNIQU5HRV9TQ0VORV9DT01QTEVURTpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZVBpY2tlckdhbWVDaGFyYWN0ZXIoY2hhcmFjdGVyRW50aXR5KSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNFTEVDVF9HQU1FX0NIQVJBQ1RFUiwgY2hhcmFjdGVyRW50aXR5KTtcbiAgICB9XG5cbiAgICBoYW5kbGVQaWNrZXJOYXZpZ2F0aW9uKG5vZGUpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0VMRUNURURfTk9ERSwgbm9kZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlU2Nyb2xsaW5nKGRpcmVjdGlvbikge1xuICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5JTlBVVF9EUkFHX01PVVNFLCBkaXJlY3Rpb24pO1xuXG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IEdhbWVDYW1lcmEgPSBwYy5jcmVhdGVTY3JpcHQoJ0dhbWVDYW1lcmEnKTtcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4uLy4uL0dhbWVGYWNhZGUnO1xuaW1wb3J0IHsgR2FtZUNhbWVyYU1lZGlhdG9yIH0gZnJvbSAnLi9HYW1lQ2FtZXJhTWVkaWF0b3InO1xuXG5HYW1lQ2FtZXJhLmF0dHJpYnV0ZXMuYWRkKCdkaXN0YW5jZScsIHsgdHlwZTogJ251bWJlcicsIGRlZmF1bHQ6IDEwMCwgdGl0bGU6ICdEaXN0YW5jZScgfSk7XG5HYW1lQ2FtZXJhLmF0dHJpYnV0ZXMuYWRkKCdkcmFnTXVsdGlwbGllclgnLCB7IHR5cGU6ICdudW1iZXInLCBkZWZhdWx0OiAwLjUsIHRpdGxlOiAnRHJhZyBNdWx0aXBsaWVyJyB9KTtcbkdhbWVDYW1lcmEuYXR0cmlidXRlcy5hZGQoJ2RyYWdNdWx0aXBsaWVyWScsIHsgdHlwZTogJ251bWJlcicsIGRlZmF1bHQ6IDAuNSwgdGl0bGU6ICdEcmFnIE11bHRpcGxpZXInIH0pO1xuXG5HYW1lQ2FtZXJhLmF0dHJpYnV0ZXMuYWRkKCd2ZXJ0aWNhbFNjcm9sbCcsIHsgdHlwZTogJ2Jvb2xlYW4nLCBkZWZhdWx0OiBmYWxzZSwgdGl0bGU6ICdWZXJ0aWNhbCBTY3JvbGwnIH0pO1xuR2FtZUNhbWVyYS5hdHRyaWJ1dGVzLmFkZCgnbWluQ2FtZXJhSGVpZ2h0JywgeyB0eXBlOiAnbnVtYmVyJywgZGVmYXVsdDogNSwgdGl0bGU6ICdNaW4gQ2FtZXJhIEhlaWdodCcgfSk7XG5HYW1lQ2FtZXJhLmF0dHJpYnV0ZXMuYWRkKCdtYXhDYW1lcmFIZWlnaHQnLCB7IHR5cGU6ICdudW1iZXInLCBkZWZhdWx0OiAxMDAsIHRpdGxlOiAnTWF4IENhbWVyYSBIZWlnaHQnIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuR2FtZUNhbWVyYS5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKEdhbWVDYW1lcmFNZWRpYXRvci5OQU1FKSkge1xuICAgICAgICB0aGlzLmZhY2FkZS5yZW1vdmVNZWRpYXRvcihHYW1lQ2FtZXJhTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgR2FtZUNhbWVyYU1lZGlhdG9yKHRoaXMuZW50aXR5KSk7XG5cbn07XG5cbkdhbWVDYW1lcmEucHJvdG90eXBlLnNldENhbWVyYVRhcmdldCA9IGZ1bmN0aW9uIChjYW1lcmFUYXJnZXQpIHtcbiAgICB0aGlzLmNhbWVyYVRhcmdldCA9IGNhbWVyYVRhcmdldDtcbiAgICB0aGlzLnJvdGF0aW9uID0gdGhpcy5lbnRpdHkuZ2V0RXVsZXJBbmdsZXMoKS55O1xuICAgIHRoaXMuY2FtZXJhSGVpZ2h0ID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpLnk7XG59XG5cbkdhbWVDYW1lcmEucHJvdG90eXBlLmhhbmRsZURyYWcgPSBmdW5jdGlvbiAoZGlyZWN0aW9uKSB7XG4gICAgdGhpcy5yb3RhdGlvbiArPSBkaXJlY3Rpb24ueCAqIHRoaXMuZHJhZ011bHRpcGxpZXJYO1xuXG4gICAgaWYgKHRoaXMudmVydGljYWxTY3JvbGwpIHtcbiAgICAgICAgbGV0IG5ld0NhbWVyYUhlaWdodCA9IHRoaXMuY2FtZXJhSGVpZ2h0IC0gKGRpcmVjdGlvbi55ICogdGhpcy5kcmFnTXVsdGlwbGllclkpO1xuICAgICAgICBuZXdDYW1lcmFIZWlnaHQgPSBwYy5tYXRoLmNsYW1wKG5ld0NhbWVyYUhlaWdodCwgdGhpcy5taW5DYW1lcmFIZWlnaHQsIHRoaXMubWF4Q2FtZXJhSGVpZ2h0KTtcbiAgICAgICAgdGhpcy5jYW1lcmFIZWlnaHQgPSBuZXdDYW1lcmFIZWlnaHQ7XG4gICAgfVxufVxuXG5HYW1lQ2FtZXJhLnByb3RvdHlwZS5nZXRUYXJnZXRDYW1lcmFQb3NpdGlvbiA9IGZ1bmN0aW9uIChmb2N1c1BvaW50KSB7XG4gICAgY29uc3QgY2FtZXJhUG9zaXRpb24gPSB0aGlzLmVudGl0eS5nZXRMb2NhbFBvc2l0aW9uKClcblxuICAgIGNvbnN0IHRhcmdldFggPSBNYXRoLnNpbigodGhpcy5yb3RhdGlvbikgKiBNYXRoLlBJIC8gMTgwKSAqIHRoaXMuZGlzdGFuY2U7XG4gICAgY29uc3QgdGFyZ2V0WiA9IE1hdGguY29zKCh0aGlzLnJvdGF0aW9uKSAqIE1hdGguUEkgLyAxODApICogdGhpcy5kaXN0YW5jZTtcblxuICAgIHJldHVybiBuZXcgcGMuVmVjMyhmb2N1c1BvaW50LnggKyB0YXJnZXRYLCBjYW1lcmFQb3NpdGlvbi55LCBmb2N1c1BvaW50LnogKyB0YXJnZXRaKTtcbn1cblxuLy8gdXBkYXRlIGNvZGUgY2FsbGVkIGV2ZXJ5IGZyYW1lXG5HYW1lQ2FtZXJhLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICBpZiAodGhpcy5jYW1lcmFUYXJnZXQpIHtcbiAgICAgICAgY29uc3QgY2FtZXJhVGFyZ2V0UG9zaXRpb24gPSB0aGlzLmNhbWVyYVRhcmdldC5nZXRMb2NhbFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IHRhcmdldFBvc2l0aW9uID0gdGhpcy5nZXRUYXJnZXRDYW1lcmFQb3NpdGlvbihjYW1lcmFUYXJnZXRQb3NpdGlvbik7XG5cbiAgICAgICAgY29uc3QgY3VycmVudFBvcyA9IHRoaXMuZW50aXR5LmdldExvY2FsUG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgdHdlZW5YID0gKHRhcmdldFBvc2l0aW9uLnggKyBjdXJyZW50UG9zLnggKiA5KSAvIDEwO1xuICAgICAgICBjb25zdCB0d2VlblkgPSAodGhpcy5jYW1lcmFIZWlnaHQgKyBjdXJyZW50UG9zLnkgKiA5KSAvIDEwO1xuICAgICAgICBjb25zdCB0d2VlblogPSAodGFyZ2V0UG9zaXRpb24ueiArIGN1cnJlbnRQb3MueiAqIDkpIC8gMTA7XG5cbiAgICAgICAgdGhpcy5lbnRpdHkuc2V0TG9jYWxQb3NpdGlvbih0d2VlblgsIHR3ZWVuWSwgdHdlZW5aKTtcblxuICAgICAgICB0aGlzLmVudGl0eS5sb29rQXQoY2FtZXJhVGFyZ2V0UG9zaXRpb24pO1xuICAgIH1cblxufTtcbiIsIlxuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUNhbWVyYSB9IGZyb20gJy4vR2FtZUNhbWVyYSc7XG5jb25zdCB7IE1lZGlhdG9yIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBjbGFzcyBHYW1lQ2FtZXJhTWVkaWF0b3IgZXh0ZW5kcyBNZWRpYXRvciB7XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJHYW1lQ2FtZXJhTWVkaWF0b3JcIiB9O1xuXG4gICAgY29uc3RydWN0b3Iodmlld0NvbXBvbmVudCkge1xuICAgICAgICBzdXBlcihHYW1lQ2FtZXJhTWVkaWF0b3IuTkFNRSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKFtcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkVfQ09NUExFVEUsIEdhbWVDb21tYW5kcy5JTlBVVF9EUkFHX01PVVNFLCBHYW1lQ29tbWFuZHMuU0VUX0NBTUVSQV9UQVJHRVRcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG5cbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5TRVRfQ0FNRVJBX1RBUkdFVDpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2FtZXJhJ10uc2V0Q2FtZXJhVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuSU5QVVRfRFJBR19NT1VTRTpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2FtZXJhJ10uaGFuZGxlRHJhZyhhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gXCJAa29yZWV6L3B1cmUtbXZjXCI7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi4vLi4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBJbnB1dExheWVyTWVkaWF0b3IgfSBmcm9tICcuL0lucHV0TGF5ZXJNZWRpYXRvcic7XG5pbXBvcnQgeyBHYW1lQ2FtZXJhTWVkaWF0b3IgfSBmcm9tICcuLi9nYW1lQ2FtZXJhL0dhbWVDYW1lcmFNZWRpYXRvcic7XG5cbmV4cG9ydCBjb25zdCBJbnB1dExheWVyQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdJbnB1dExheWVyQ29tcG9uZW50Jyk7XG5cbklucHV0TGF5ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJjYW1lcmFFbnRpdHlcIiwge1xuICAgIHR5cGU6IFwiZW50aXR5XCIsXG4gICAgdGl0bGU6IFwiQ2FtZXJhIEVudGl0eVwiXG59KTtcblxuSW5wdXRMYXllckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImRyYWdUaW1lXCIsIHtcbiAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIHRpdGxlOiBcIkRyYWcgVGltZVwiLFxuICAgIGRlZmF1bHQ6IDAuNFxufSk7XG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIGlmICh0aGlzLmZhY2FkZS5oYXNNZWRpYXRvcihJbnB1dExheWVyTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoSW5wdXRMYXllck1lZGlhdG9yLk5BTUUpO1xuICAgIH1cblxuICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyTWVkaWF0b3IobmV3IElucHV0TGF5ZXJNZWRpYXRvcih0aGlzLmVudGl0eSkpO1xuICAgIHRoaXMucmF5ID0gbmV3IHBjLlJheSgpO1xuICAgIHRoaXMuaW5wdXRRdWV1ZSA9IFtdO1xuXG4gICAgLy8gRHJhZyBwcm9wZXJ0aWVzXG4gICAgdGhpcy5hcHAubW91c2UuZGlzYWJsZUNvbnRleHRNZW51KCk7XG4gICAgdGhpcy5jbGlja0Rvd25TdGFydCA9IDA7XG4gICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG5cbiAgICB0aGlzLmFwcC5vbigncGlja2VyOnJlc3VsdCcsIHRoaXMuaGFuZGxlUGlja2VyUmVzdWx0LCB0aGlzKTtcblxuICAgIGlmICh0aGlzLmFwcC5tb3VzZSkge1xuICAgICAgICB0aGlzLmFwcC5tb3VzZS5vbihwYy5FVkVOVF9NT1VTRU1PVkUsIHRoaXMub25Nb3VzZU1vdmUsIHRoaXMpO1xuICAgICAgICB0aGlzLmVudGl0eS5lbGVtZW50Lm9uKHBjLkVWRU5UX01PVVNFRE9XTiwgdGhpcy5vbk1vdXNlRG93biwgdGhpcyk7XG4gICAgICAgIHRoaXMuYXBwLm1vdXNlLm9uKHBjLkVWRU5UX01PVVNFVVAsIHRoaXMub25Nb3VzZVVwLCB0aGlzKTtcblxuICAgICAgICB0aGlzLmVudGl0eS5vbmNlKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcHAubW91c2Uub2ZmKHBjLkVWRU5UX01PVVNFTU9WRSwgdGhpcy5vbk1vdXNlTW92ZSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmFwcC5tb3VzZS5vZmYocGMuRVZFTlRfTU9VU0VVUCwgdGhpcy5vbk1vdXNlVXAsIHRoaXMpO1xuXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFwcC50b3VjaCkge1xuICAgICAgICB0aGlzLmFwcC50b3VjaC5vbihwYy5FVkVOVF9UT1VDSE1PVkUsICh0b3VjaEV2dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbk1vdXNlTW92ZSh0b3VjaEV2dC50b3VjaGVzWzBdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lbnRpdHkuZWxlbWVudC5vbihwYy5FVkVOVF9UT1VDSFNUQVJULCAodG91Y2hFdnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25Nb3VzZURvd24odG91Y2hFdnQudG91Y2hlc1swXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24ocGMuRVZFTlRfVE9VQ0hFTkQsICh0b3VjaEV2dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbk1vdXNlVXAoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG59XG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLm9uTW91c2VEb3duID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XG4gICAgdGhpcy5jbGlja0Rvd25TdGFydCA9IERhdGUubm93KCk7XG4gICAgdGhpcy5jbGlja1N0YXJ0UG9pbnQgPSB7IHg6IGV2dC54LCB5OiBldnQueSB9O1xufVxuXG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLm9uTW91c2VNb3ZlID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIGlmICh0aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gbmV3IHBjLlZlYzIodGhpcy5jbGlja1N0YXJ0UG9pbnQueCAtIGV2dC54LCB0aGlzLmNsaWNrU3RhcnRQb2ludC55IC0gZXZ0LnkpO1xuICAgICAgICB0aGlzLmVudGl0eS5maXJlKCdzY3JvbGxpbmcnLCBkaXJlY3Rpb24pO1xuICAgICAgICB0aGlzLmNsaWNrU3RhcnRQb2ludCA9IHsgeDogZXZ0LngsIHk6IGV2dC55IH07XG4gICAgfVxufVxuXG5JbnB1dExheWVyQ29tcG9uZW50LnByb3RvdHlwZS5vbk1vdXNlVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG5cbiAgICBpZiAoRGF0ZS5ub3coKSAtIHRoaXMuY2xpY2tEb3duU3RhcnQgPCAodGhpcy5kcmFnVGltZSAqIDEwMDApKSB7XG4gICAgICAgIGlmICh0aGlzLmNsaWNrU3RhcnRQb2ludCkge1xuICAgICAgICAgICAgLy8gdGhpcy5lbnRpdHkuZmlyZSgndmFsaWRDbGljaycsIHRoaXMuY2xpY2tTdGFydFBvaW50KTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUmF5Y2FzdENvbGxpc2lvbnModGhpcy5jbGlja1N0YXJ0UG9pbnQueCwgdGhpcy5jbGlja1N0YXJ0UG9pbnQueSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZVJheWNhc3RDb2xsaXNpb25zID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICBjb25zdCBjYW1lcmFFbnRpdHkgPSB0aGlzLmNhbWVyYUVudGl0eTtcbiAgICBjb25zdCBjYW1lcmFDb21wb25lbnQgPSB0aGlzLmNhbWVyYUVudGl0eS5jYW1lcmE7XG4gICAgY2FtZXJhQ29tcG9uZW50LnNjcmVlblRvV29ybGQoeCwgeSwgY2FtZXJhQ29tcG9uZW50LmZhckNsaXAsIHRoaXMucmF5LmRpcmVjdGlvbik7XG4gICAgdGhpcy5yYXkub3JpZ2luLmNvcHkoY2FtZXJhRW50aXR5LmdldFBvc2l0aW9uKCkpO1xuICAgIHRoaXMucmF5LmRpcmVjdGlvbi5zdWIodGhpcy5yYXkub3JpZ2luKS5ub3JtYWxpemUoKTtcblxuICAgIHRoaXMuYXBwLmZpcmUoJ3BpY2tlcjpyYXljYXN0JywgdGhpcy5yYXksIHsgeCwgeSB9KTtcbn1cblxuSW5wdXRMYXllckNvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlUGlja2VyUmVzdWx0ID0gZnVuY3Rpb24gKHBpY2tlZEVudGl0eSwgaGl0UG9zaXRpb24sIHNjcmVlblBvcykge1xuICAgIHRoaXMuaW5wdXRRdWV1ZS5wdXNoKHtcbiAgICAgICAgZW50aXR5OiBwaWNrZWRFbnRpdHksXG4gICAgICAgIGhpdFBvc2l0aW9uOiBoaXRQb3NpdGlvbixcbiAgICAgICAgc2NyZWVuUG9zaXRpb246IHNjcmVlblBvc1xuICAgIH0pO1xufVxuXG5JbnB1dExheWVyQ29tcG9uZW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICB0aGlzLnByb2Nlc3NJbnB1dFF1ZXVlKCk7XG59XG5cblxuSW5wdXRMYXllckNvbXBvbmVudC5wcm90b3R5cGUucHJvY2Vzc0lucHV0UXVldWUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICBpZiAodGhpcy5pbnB1dFF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IGhpZ2hlc3RQcmlvcml0eVBpY2sgPSB0aGlzLmlucHV0UXVldWVbMF07XG4gICAgICAgIGxldCBoaWdoZXN0UHJpb3JpdHkgPSAtMTtcbiAgICAgICAgLy8gRmluZCBoaWdoZXN0IHByaW9yaXR5XG4gICAgICAgIGZvciAoY29uc3QgcGljayBvZiB0aGlzLmlucHV0UXVldWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHBpY2tQcmlvcml0eSA9IGdldFByaW9yaXR5KHBpY2suZW50aXR5KVxuICAgICAgICAgICAgaWYgKHBpY2tQcmlvcml0eSA+IGhpZ2hlc3RQcmlvcml0eSkge1xuICAgICAgICAgICAgICAgIGhpZ2hlc3RQcmlvcml0eVBpY2sgPSBwaWNrO1xuICAgICAgICAgICAgICAgIGhpZ2hlc3RQcmlvcml0eSA9IHBpY2tQcmlvcml0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW5wdXRRdWV1ZSA9IFtdO1xuXG4gICAgICAgIGlmIChoaWdoZXN0UHJpb3JpdHlQaWNrLmVudGl0eS50YWdzLmhhcygnZ2FtZUNoYXJhY3RlcicpKSB7XG4gICAgICAgICAgICB0aGlzLnBpY2tlZEdhbWVDaGFyYWN0ZXIoaGlnaGVzdFByaW9yaXR5UGljay5lbnRpdHksIGhpZ2hlc3RQcmlvcml0eVBpY2suaGl0UG9zaXRpb24pXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGlnaGVzdFByaW9yaXR5UGljay5lbnRpdHkudGFncy5oYXMoJ25hdmlnYXRpb24nKSkge1xuICAgICAgICAgICAgdGhpcy5waWNrZWROYXZpZ2F0aW9uKGhpZ2hlc3RQcmlvcml0eVBpY2suZW50aXR5LCBoaWdoZXN0UHJpb3JpdHlQaWNrLmhpdFBvc2l0aW9uKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhpZ2hlc3RQcmlvcml0eVBpY2suZW50aXR5LnRhZ3MuaGFzKCdwb3J0YWwnKSkge1xuICAgICAgICAgICAgdGhpcy5waWNrZWRQb3J0YWwoaGlnaGVzdFByaW9yaXR5UGljay5lbnRpdHksIGhpZ2hlc3RQcmlvcml0eVBpY2suaGl0UG9zaXRpb24pXG4gICAgICAgIH1cblxuICAgIH1cbn1cblxuSW5wdXRMYXllckNvbXBvbmVudC5wcm90b3R5cGUucGlja2VkR2FtZUNoYXJhY3RlciA9IGZ1bmN0aW9uIChwaWNrZWRFbnRpdHksIGhpdFBvc2l0aW9uKSB7XG4gICAgdGhpcy5lbnRpdHkuZmlyZSgncGlja2VyOmdhbWVDaGFyYWN0ZXInLCBwaWNrZWRFbnRpdHkpO1xufVxuXG5JbnB1dExheWVyQ29tcG9uZW50LnByb3RvdHlwZS5waWNrZWROYXZpZ2F0aW9uID0gZnVuY3Rpb24gKHBpY2tlZEVudGl0eSwgaGl0UG9zaXRpb24pIHtcbiAgICBjb25zdCBuYXZDb21wID0gcGlja2VkRW50aXR5LnNjcmlwdFsnTmF2aWdhdGlvbkNvbXBvbmVudCddO1xuICAgIGNvbnN0IG5lYXJlc3ROb2RlID0gbmF2Q29tcC5nZXROZWFyZXN0Tm9kZShoaXRQb3NpdGlvbik7XG4gICAgdGhpcy5lbnRpdHkuZmlyZSgncGlja2VyOm5hdmlnYXRpb24nLCBuZWFyZXN0Tm9kZSk7XG59XG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLnBpY2tlZFBvcnRhbCA9IGZ1bmN0aW9uIChwaWNrZWRFbnRpdHksIGhpdFBvc2l0aW9uKSB7XG4gICAgcGlja2VkRW50aXR5LmZpcmUoJ3BpY2tlcjpwb3J0YWwnKTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJpb3JpdHkoZW50aXR5KSB7XG4gICAgaWYgKGVudGl0eS50YWdzLmhhcygnZ2FtZUNoYXJhY3RlcicpKSB7XG4gICAgICAgIHJldHVybiAzO1xuICAgIH1cblxuICAgIGlmIChlbnRpdHkudGFncy5oYXMoJ3BvcnRhbCcpKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgIH1cblxuICAgIGlmIChlbnRpdHkudGFncy5oYXMoJ25hdmlnYXRpb24nKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG59IiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBQbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudCB9IGZyb20gJy4vUGxheWVyQ29tYmF0UGFuZWxDb21wb25lbnQnO1xuaW1wb3J0IHsgSW5wdXRMYXllckNvbXBvbmVudCB9IGZyb20gJy4uL2lucHV0TGF5ZXIvSW5wdXRMYXllckNvbXBvbmVudCc7XG5jb25zdCB7IE1lZGlhdG9yIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBjbGFzcyBQbGF5ZXJDb21iYXRQYW5lbE1lZGlhdG9yIGV4dGVuZHMgTWVkaWF0b3Ige1xuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiUGxheWVyQ29tYmF0UGFuZWxNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKFBsYXllckNvbWJhdFBhbmVsTWVkaWF0b3IuTkFNRSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKFtcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkVfQ09NUExFVEUsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuQVdBSVRfUExBWUVSX0NPTUJBVF9JTlBVVCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5FTkRfQ09NQkFUX1RVUk4sXG4gICAgICAgIF0pO1xuXG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG5cbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdjbGljazplbmRUdXJuJywgdGhpcy5oYW5kbGVFbmRUdXJuLCB0aGlzKTtcbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkVfQ09NUExFVEU6XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkFXQUlUX1BMQVlFUl9DT01CQVRfSU5QVVQ6XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuRU5EX0NPTUJBVF9UVVJOOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVFbmRUdXJuKGV2dCkge1xuICAgICAgICB0aGlzLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkVORF9DT01CQVRfVFVSTik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSBcIkBrb3JlZXovcHVyZS1tdmNcIjtcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tIFwiLi4vLi4vR2FtZUZhY2FkZVwiO1xuaW1wb3J0IHsgUGxheWVyQ29tYmF0UGFuZWxNZWRpYXRvciB9IGZyb20gXCIuL1BsYXllckNvbWJhdFBhbmVsTWVkaWF0b3JcIjtcblxuZXhwb3J0IGNvbnN0IFBsYXllckNvbWJhdFBhbmVsQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdQbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudCcpO1xuXG5QbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnZW5kVHVybkJ1dHRvbicsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnRW5kIFR1cm4gYnV0dG9uJyB9KTtcblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcblBsYXllckNvbWJhdFBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG5QbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoUGxheWVyQ29tYmF0UGFuZWxNZWRpYXRvci5OQU1FKSkge1xuICAgICAgICB0aGlzLmZhY2FkZS5yZW1vdmVNZWRpYXRvcihQbGF5ZXJDb21iYXRQYW5lbE1lZGlhdG9yLk5BTUUpO1xuICAgIH1cblxuICAgIHRoaXMubWVzc2FnZVF1ZXVlID0gW107XG4gICAgdGhpcy5jdXJyZW50VGltZW91dCA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyTWVkaWF0b3IobmV3IFBsYXllckNvbWJhdFBhbmVsTWVkaWF0b3IodGhpcy5lbnRpdHkpKTtcblxuICAgIHRoaXMuZW5kVHVybkJ1dHRvbi5lbGVtZW50Lm9uKCdjbGljaycsIHRoaXMuY2xpY2tFbmRUdXJuLCB0aGlzKTtcbn07XG5cblBsYXllckNvbWJhdFBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5jbGlja0VuZFR1cm4gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgdGhpcy5lbnRpdHkuZmlyZSgnY2xpY2s6ZW5kVHVybicpO1xufVxuIiwiZXhwb3J0IGNvbnN0IEhpdGJveENvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnSGl0Ym94Q29tcG9uZW50Jyk7XG5cblxuSGl0Ym94Q29tcG9uZW50LnByb3RvdHlwZS5wb3N0SW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBzY2FsZSA9IHRoaXMuZW50aXR5LmdldExvY2FsU2NhbGUoKTtcbiAgICBjb25zdCBoYWxmRXh0ZW50cyA9IG5ldyBwYy5WZWMzKHNjYWxlLnggLyAyLCBzY2FsZS55IC8gMiwgc2NhbGUueiAvIDIpO1xuICAgIHRoaXMuYWFiYiA9IG5ldyBwYy5Cb3VuZGluZ0JveCh0aGlzLmVudGl0eS5nZXRQb3NpdGlvbigpLCBoYWxmRXh0ZW50cyk7XG4gICAgdGhpcy5hcHAub24oJ3BpY2tlcjpyYXljYXN0JywgdGhpcy5oYW5kbGVSYXlDYXN0LCB0aGlzKTtcblxuICAgIHRoaXMuZW50aXR5Lm9uKCdzdG9wTGlzdGVuaW5nJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmFwcC5vZmYoJ3BpY2tlcjpyYXljYXN0JywgdGhpcy5oYW5kbGVSYXlDYXN0LCB0aGlzKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZW50aXR5Lm9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgICB0aGlzLmFwcC5vZmYoJ3BpY2tlcjpyYXljYXN0JywgdGhpcy5oYW5kbGVSYXlDYXN0LCB0aGlzKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZW50aXR5Lm1vZGVsLmVuYWJsZWQgPSBmYWxzZTtcblxufVxuXG5IaXRib3hDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZVJheUNhc3QgPSBmdW5jdGlvbiAocmF5LCBzY3JlZW5Qb3MpIHtcbiAgICBjb25zdCBoaXRQb3NpdGlvbiA9IG5ldyBwYy5WZWMzKCk7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5hYWJiLmludGVyc2VjdHNSYXkocmF5LCBoaXRQb3NpdGlvbik7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgICB0aGlzLmFwcC5maXJlKCdwaWNrZXI6cmVzdWx0JywgdGhpcy5lbnRpdHkucGFyZW50LCBoaXRQb3NpdGlvbiwgc2NyZWVuUG9zKTtcbiAgICB9XG59XG5cbkhpdGJveENvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGR0KSB7XG4gICAgdGhpcy5hYWJiLmNlbnRlci5jb3B5KHRoaXMuZW50aXR5LmdldFBvc2l0aW9uKCkpO1xufVxuIiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5jb25zdCB7IE1lZGlhdG9yIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBjbGFzcyBBY3Rpb25QYW5lbE1lZGlhdG9yIGV4dGVuZHMgTWVkaWF0b3Ige1xuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiQWN0aW9uUGFuZWxNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKEFjdGlvblBhbmVsTWVkaWF0b3IuTkFNRSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKFtcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5TRVRfUExBWUVSX0FDVElPTiwgR2FtZUNvbW1hbmRzLlRPR0dMRV9CVVRUT04sXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuVVNFX1BMQVlFUl9BQ1RJT05cbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG5cbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdjbGljazpmaXJlQ29tbWFuZCcsIHRoaXMuaGFuZGxlRmlyZUNvbW1hbmQsIHRoaXMpO1xuXG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuVE9HR0xFX0JVVFRPTjpcbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb25OYW1lID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydBY3Rpb25QYW5lbENvbXBvbmVudCddLnNlbGVjdEFjdGlvbihhY3Rpb25OYW1lKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLlVTRV9QTEFZRVJfQUNUSU9OOlxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVGaXJlQ29tbWFuZChjb21tYW5kTmFtZSwgLi4uYXJncykge1xuICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKGNvbW1hbmROYW1lLCAuLi5hcmdzKTtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgQWN0aW9uQnV0dG9uQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdBY3Rpb25CdXR0b25Db21wb25lbnQnKTtcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuXG5jb25zdCBjb21tYW5kU2NoZW1hID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogJ2NvbW1hbmROYW1lJyxcbiAgICAgICAgdGl0bGU6ICdDb21tYW5kIG5hbWUnLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJ1xuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnY29tbWFuZEFyZ3MnLFxuICAgICAgICB0aXRsZTogJ0NvbW1hbmQgYXJndW1lbnRzJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsIGFycmF5OiB0cnVlXG4gICAgfVxuXTtcblxuQWN0aW9uQnV0dG9uQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdoaWdobGlnaHRFbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0hpZ2hsaWdodCBFbnRpdHknIH0pO1xuQWN0aW9uQnV0dG9uQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdpY29uRW50aXR5JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdJY29uIEVudGl0eScgfSk7XG5BY3Rpb25CdXR0b25Db21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2NvbW1hbmRzJywgeyB0eXBlOiAnanNvbicsIHNjaGVtYTogY29tbWFuZFNjaGVtYSwgdGl0bGU6ICdDb21tYW5kIG5hbWUnLCBhcnJheTogdHJ1ZSB9KTs7XG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5BY3Rpb25CdXR0b25Db21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5oaWdobGlnaHRFbnRpdHkuZW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuZW50aXR5Lm9uKCdzZWxlY3Q6YWN0aW9uJywgdGhpcy5oYW5kbGVDaGFuZ2VBY3Rpb24sIHRoaXMpO1xuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24oJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljaywgdGhpcyk7XG59O1xuXG5BY3Rpb25CdXR0b25Db21wb25lbnQucHJvdG90eXBlLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIGZvciAoY29uc3QgY29tbWFuZCBvZiB0aGlzLmNvbW1hbmRzKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmROYW1lID0gY29tbWFuZC5jb21tYW5kTmFtZTtcbiAgICAgICAgY29uc3QgY29tbWFuZEFyZ3MgPSBjb21tYW5kLmNvbW1hbmRBcmdzO1xuICAgICAgICB0aGlzLmVudGl0eS5wYXJlbnQuZmlyZSgnY2xpY2s6ZmlyZUNvbW1hbmQnLCBjb21tYW5kTmFtZSwgLi4uY29tbWFuZEFyZ3MpO1xuXG4gICAgfVxufVxuXG5BY3Rpb25CdXR0b25Db21wb25lbnQucHJvdG90eXBlLmhhbmRsZUNoYW5nZUFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICBpZiAodGhpcy5lbnRpdHkubmFtZSA9PT0gYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0RW50aXR5LmVuYWJsZWQgPSAhdGhpcy5oaWdobGlnaHRFbnRpdHkuZW5hYmxlZDtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0RW50aXR5LmVuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG59IiwiZXhwb3J0IGNvbnN0IEFjdGlvblBhbmVsQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdBY3Rpb25QYW5lbENvbXBvbmVudCcpO1xuaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSAnQGtvcmVlei9wdXJlLW12Yyc7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi4vLi4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBBY3Rpb25QYW5lbE1lZGlhdG9yIH0gZnJvbSAnLi9BY3Rpb25QYW5lbE1lZGlhdG9yJztcbmltcG9ydCB7IEFjdGlvbkJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vQWN0aW9uQnV0dG9uQ29tcG9uZW50JztcblxuQWN0aW9uUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2FjdGlvbkJ1dHRvbnMnLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0FjdGlvbiBCdXR0b25zJywgYXJyYXk6IHRydWUgfSk7XG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5BY3Rpb25QYW5lbENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKEFjdGlvblBhbmVsTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoQWN0aW9uUGFuZWxNZWRpYXRvci5OQU1FKTtcbiAgICB9XG5cbiAgICB0aGlzLmZhY2FkZS5yZWdpc3Rlck1lZGlhdG9yKG5ldyBBY3Rpb25QYW5lbE1lZGlhdG9yKHRoaXMuZW50aXR5KSk7XG59XG5cbkFjdGlvblBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5zZWxlY3RBY3Rpb24gPSBmdW5jdGlvbiAoYWN0aW9uTmFtZSkge1xuICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRoaXMuYWN0aW9uQnV0dG9ucykge1xuICAgICAgICBidXR0b24uZmlyZSgnc2VsZWN0OmFjdGlvbicsIGFjdGlvbk5hbWUpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBVSVN0b3BQcm9wYWdhdGlvbiA9IHBjLmNyZWF0ZVNjcmlwdCgnVUlTdG9wUHJvcGFnYXRpb24nKTtcblxuVUlTdG9wUHJvcGFnYXRpb24ucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbnRpdHkuZWxlbWVudC5vbihwYy5FVkVOVF9NT1VTRURPV04sIChldnQpID0+IHtcbiAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5lbnRpdHkuZWxlbWVudC5vbihwYy5FVkVOVF9NT1VTRURPV04sIChldnQpID0+IHtcbiAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5lbnRpdHkuZWxlbWVudC5vbihwYy5FVkVOVF9UT1VDSFNUQVJULCAoZXZ0KSA9PiB7XG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24ocGMuRVZFTlRfVE9VQ0hNT1ZFLCAoZXZ0KSA9PiB7XG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24ocGMuRVZFTlRfVE9VQ0hFTkQsIChldnQpID0+IHtcbiAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0pO1xufVxuXG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gXCIuLi8uLi9HYW1lRmFjYWRlXCI7XG5pbXBvcnQgeyBQcm9qZWN0aWxlQ3JlYXRvck1lZGlhdG9yIH0gZnJvbSBcIi4vUHJvamVjdGlsZUNyZWF0b3JNZWRpYXRvclwiO1xuXG5leHBvcnQgY29uc3QgUHJvamVjdGlsZUNyZWF0b3JDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ1Byb2plY3RpbGVDcmVhdG9yQ29tcG9uZW50Jyk7XG5cbmNvbnN0IHByb2plY3RpbGVTY2hlbWEgPSBbXG4gICAge1xuICAgICAgICBuYW1lOiAncHJvamVjdGlsZU5hbWUnLFxuICAgICAgICB0aXRsZTogJ1Byb2plY3RpbGUgTmFtZScsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdwcm9qZWN0aWxlVGVtcGxhdGUnLFxuICAgICAgICB0aXRsZTogJ1Byb2plY3RpbGUgVGVtcGxhdGUnLFxuICAgICAgICB0eXBlOiAnYXNzZXQnXG4gICAgfVxuXTtcblxuUHJvamVjdGlsZUNyZWF0b3JDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJwcm9qZWN0aWxlVHlwZXNcIiwge1xuICAgIHR5cGU6IFwianNvblwiLFxuICAgIHRpdGxlOiBcIlByb2plY3RpbGUgVHlwZXNcIixcbiAgICBzY2hlbWE6IHByb2plY3RpbGVTY2hlbWEsXG4gICAgYXJyYXk6IHRydWVcbn0pO1xuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcblByb2plY3RpbGVDcmVhdG9yQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoUHJvamVjdGlsZUNyZWF0b3JNZWRpYXRvci5OQU1FKSkge1xuICAgICAgICB0aGlzLmZhY2FkZS5yZW1vdmVNZWRpYXRvcihQcm9qZWN0aWxlQ3JlYXRvck1lZGlhdG9yLk5BTUUpO1xuICAgIH1cbiAgICB0aGlzLmZhY2FkZS5yZWdpc3Rlck1lZGlhdG9yKG5ldyBQcm9qZWN0aWxlQ3JlYXRvck1lZGlhdG9yKHRoaXMuZW50aXR5KSk7XG59O1xuXG5cblByb2plY3RpbGVDcmVhdG9yQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVQcm9qZWN0aWxlID0gZnVuY3Rpb24gKHByb2plY3RpbGVOYW1lLCBvcmlnaW5Qb2ludCwgdGFyZ2V0UG9pbnQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHByb2plY3RpbGVTY2hlbWUgPSB0aGlzLnByb2plY3RpbGVUeXBlcy5maW5kKHNjaGVtZSA9PiBzY2hlbWUucHJvamVjdGlsZU5hbWUgPT09IHByb2plY3RpbGVOYW1lKTtcbiAgICAgICAgaWYgKHByb2plY3RpbGVTY2hlbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Byb2plY3RpbGUgPSBwcm9qZWN0aWxlU2NoZW1lLnByb2plY3RpbGVUZW1wbGF0ZS5yZXNvdXJjZS5pbnN0YW50aWF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5lbnRpdHkuYWRkQ2hpbGQobmV3UHJvamVjdGlsZSk7XG4gICAgICAgICAgICBuZXdQcm9qZWN0aWxlLm9uY2UoJ3Byb2plY3RpbGVBcnJpdmVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbmV3UHJvamVjdGlsZS5zY3JpcHRbJ1Byb2plY3RpbGVDb21wb25lbnQnXS5zZXRUYXJnZXQob3JpZ2luUG9pbnQsIHRhcmdldFBvaW50KTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBjcmVhdGUgcHJvamVjdGlsZSBcIiR7cHJvamVjdGlsZU5hbWV9XCJgKTtcbiAgICAgICAgfVxuICAgIH0pO1xufSIsIlxuXG5leHBvcnQgY29uc3QgUHJvamVjdGlsZUNvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnUHJvamVjdGlsZUNvbXBvbmVudCcpO1xuXG5Qcm9qZWN0aWxlQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKFwicHJvamVjdGlsZVNwZWVkXCIsIHtcbiAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIHRpdGxlOiBcIlByb2plY3RpbGUgU3BlZWRcIixcbiAgICBkZWZhdWx0OiA4XG59KTtcblxuXG5Qcm9qZWN0aWxlQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXG59XG5cblByb2plY3RpbGVDb21wb25lbnQucHJvdG90eXBlLnNldFRhcmdldCA9IGZ1bmN0aW9uIChvcmlnaW5Qb2ludCwgdGFyZ2V0UG9pbnQpIHtcbiAgICB0aGlzLmVudGl0eS5zZXRMb2NhbFBvc2l0aW9uKG9yaWdpblBvaW50LngsIG9yaWdpblBvaW50LnksIG9yaWdpblBvaW50LnopO1xuICAgIHRoaXMudGFyZ2V0UG9pbnQgPSB0YXJnZXRQb2ludDtcbiAgICB0aGlzLmxvb2tBdFBvaW50KHRoaXMudGFyZ2V0UG9pbnQpO1xuXG59XG5cblByb2plY3RpbGVDb21wb25lbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkdCkge1xuICAgIGlmICh0aGlzLnRhcmdldFBvaW50KSB7XG4gICAgICAgIGNvbnN0IGxvY2FsUG9zID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpO1xuICAgICAgICBjb25zdCBuZXdQb3NpdGlvbiA9IG5ldyBwYy5WZWMzKCk7XG4gICAgICAgIGNvbnN0IHNwZWVkID0gbmV3IHBjLlZlYzMoZHQgKiB0aGlzLnByb2plY3RpbGVTcGVlZCwgZHQgKiB0aGlzLnByb2plY3RpbGVTcGVlZCwgZHQgKiB0aGlzLnByb2plY3RpbGVTcGVlZCk7XG4gICAgICAgIG5ld1Bvc2l0aW9uLnN1YjIodGhpcy50YXJnZXRQb2ludC5jbG9uZSgpLCBsb2NhbFBvcyk7XG4gICAgICAgIG5ld1Bvc2l0aW9uLm5vcm1hbGl6ZSgpO1xuICAgICAgICBuZXdQb3NpdGlvbi5tdWwoc3BlZWQpO1xuICAgICAgICBuZXdQb3NpdGlvbi5hZGQobG9jYWxQb3MpO1xuXG4gICAgICAgIHRoaXMuZW50aXR5LnNldExvY2FsUG9zaXRpb24obmV3UG9zaXRpb24pO1xuXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlVG9OZXh0UGF0aCA9IG5ld1Bvc2l0aW9uLmRpc3RhbmNlKHRoaXMudGFyZ2V0UG9pbnQpO1xuICAgICAgICBpZiAoZGlzdGFuY2VUb05leHRQYXRoIDw9IChkdCAqIHRoaXMucHJvamVjdGlsZVNwZWVkKSkge1xuICAgICAgICAgICAgdGhpcy5lbnRpdHkuZmlyZSgncHJvamVjdGlsZUFycml2ZWQnKTtcbiAgICAgICAgICAgIHRoaXMuZW50aXR5LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5Qcm9qZWN0aWxlQ29tcG9uZW50LnByb3RvdHlwZS5sb29rQXRQb2ludCA9IGZ1bmN0aW9uIChwb2ludCkge1xuICAgIGNvbnN0IGxvY2FsUG9zID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpO1xuXG4gICAgY29uc3QgZHggPSBwb2ludC54IC0gbG9jYWxQb3MueDtcbiAgICBjb25zdCBkeiA9IHBvaW50LnogLSBsb2NhbFBvcy56O1xuICAgIGNvbnN0IGFuZ2xlVG9EZXN0ID0gTWF0aC5hdGFuMihkeCwgZHopICogMTgwIC8gTWF0aC5QSTtcbiAgICB0aGlzLmVudGl0eS5zZXRFdWxlckFuZ2xlcygwLCBhbmdsZVRvRGVzdCwgMCk7XG59IiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBTdGFtaW5hQmFyQ29tcG9uZW50IH0gZnJvbSAnLi9TdGFtaW5hQmFyQ29tcG9uZW50JztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIFN0YW1pbmFCYXJNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIlN0YW1pbmFCYXJNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKFN0YW1pbmFCYXJNZWRpYXRvci5OQU1FKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24oW1xuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkNIQU5HRV9TVEFNSU5BICsgXCJwbGF5ZXJcIlxuICAgICAgICBdKTtcblxuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50O1xuICAgIH1cblxuICAgIG9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKSB7XG4gICAgICAgIHN1cGVyLm9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKTtcbiAgICB9XG5cbiAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgICAgICBzd2l0Y2ggKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkNIQU5HRV9TVEFNSU5BICsgXCJwbGF5ZXJcIjpcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdTdGFtaW5hID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXhTdGFtaW5hID0gYXJnc1sxXTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0W1wiU3RhbWluYUJhckNvbXBvbmVudFwiXS51cGRhdGVTdGFtaW5hKG5ld1N0YW1pbmEsIG1heFN0YW1pbmEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxufVxuIiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSBcIkBrb3JlZXovcHVyZS1tdmNcIjtcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tIFwiLi4vLi4vR2FtZUZhY2FkZVwiO1xuaW1wb3J0IHsgU3RhbWluYUJhck1lZGlhdG9yIH0gZnJvbSBcIi4vU3RhbWluYUJhck1lZGlhdG9yXCI7XG5cbmV4cG9ydCBjb25zdCBTdGFtaW5hQmFyQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdTdGFtaW5hQmFyQ29tcG9uZW50Jyk7XG5cblN0YW1pbmFCYXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJiYXJFbnRpdHlcIiwge1xuICAgIHR5cGU6IFwiZW50aXR5XCIsXG4gICAgdGl0bGU6IFwiQmFyIEVudGl0eVwiXG59KTtcblxuU3RhbWluYUJhckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcInN0YW1pbmFMYWJlbFwiLCB7XG4gICAgdHlwZTogXCJlbnRpdHlcIixcbiAgICB0aXRsZTogXCJTdGFtaW5hIExhYmVsXCJcbn0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuU3RhbWluYUJhckNvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKFN0YW1pbmFCYXJNZWRpYXRvci5OQU1FKSkge1xuICAgICAgICB0aGlzLmZhY2FkZS5yZW1vdmVNZWRpYXRvcihTdGFtaW5hQmFyTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyTWVkaWF0b3IobmV3IFN0YW1pbmFCYXJNZWRpYXRvcih0aGlzLmVudGl0eSkpO1xuXG4gICAgdGhpcy5iYXJFbnRpdHlNYXhXaWR0aCA9IHRoaXMuYmFyRW50aXR5LmVsZW1lbnQud2lkdGg7XG59O1xuXG5cblN0YW1pbmFCYXJDb21wb25lbnQucHJvdG90eXBlLnVwZGF0ZVN0YW1pbmEgPSBmdW5jdGlvbiAoY3VycmVudFN0YW1pbmEsIG1heFN0YW1pbmEpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHBjLm1hdGguY2xhbXAoY3VycmVudFN0YW1pbmEgLyBtYXhTdGFtaW5hLCAwLCAxKTtcbiAgICBjb25zdCB3aWR0aCA9IHBjLm1hdGgubGVycCgwLCB0aGlzLmJhckVudGl0eU1heFdpZHRoLCB2YWx1ZSk7XG4gICAgLy8gc2V0IHRoZSB3aWR0aCBvZiB0aGUgZmlsbCBpbWFnZSBlbGVtZW50XG4gICAgdGhpcy5iYXJFbnRpdHkuZWxlbWVudC53aWR0aCA9IHdpZHRoO1xuXG4gICAgLy8gU2V0IHRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudCdzIHJlY3QgKHJlY3QueikgdG8gYmUgdGhlIHNhbWVcbiAgICAvLyB2YWx1ZSBhcyBvdXIgMC0xIHByb2dyZXNzLlxuICAgIC8vIFRoaXMgaXMgc28gdGhhdCB0aGUgZmlsbCBpbWFnZSB3aWxsIG9ubHkgc2hvdyB0aGUgcG9ydGlvblxuICAgIC8vIG9mIHRoZSB0ZXh0dXJlIHRoYXQgaXMgdmlzaWJsZVxuICAgIHRoaXMuYmFyRW50aXR5LmVsZW1lbnQucmVjdC56ID0gdmFsdWU7XG4gICAgLy8gZm9yY2UgcmVjdCB1cGRhdGVcbiAgICB0aGlzLmJhckVudGl0eS5lbGVtZW50LnJlY3QgPSB0aGlzLmJhckVudGl0eS5lbGVtZW50LnJlY3Q7XG5cbiAgICB0aGlzLnN0YW1pbmFMYWJlbC5lbGVtZW50LnRleHQgPSBgJHtjdXJyZW50U3RhbWluYX0vJHttYXhTdGFtaW5hfWA7XG59IiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi8uLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5jb25zdCB7IE1lZGlhdG9yIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBjbGFzcyBBY3Rpb25zUmVtYWluaW5nUGFuZWxNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkFjdGlvbnNSZW1haW5pbmdQYW5lbE1lZGlhdG9yXCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKHZpZXdDb21wb25lbnQpIHtcbiAgICAgICAgc3VwZXIoQWN0aW9uc1JlbWFpbmluZ1BhbmVsTWVkaWF0b3IuTkFNRSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKFtcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkVfQ09NUExFVEUsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuQVdBSVRfUExBWUVSX0NPTUJBVF9JTlBVVCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5FTkRfQ09NQkFUX1RVUk4sXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuVVNFX0FDVElPTiArIFwicGxheWVyXCJcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FX0NPTVBMRVRFOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5BV0FJVF9QTEFZRVJfQ09NQkFUX0lOUFVUOlxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYXllclByb3h5ID0gdGhpcy5mYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIFwicGxheWVyXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF2YWlsYWJsZUFjdGlvbnMgPSBwbGF5ZXJQcm94eS5hdmFpbGFibGVBY3Rpb25zO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1heEFjdGlvbnMgPSBwbGF5ZXJQcm94eS5tYXhBY3Rpb25zUGVyVHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydBY3Rpb25zUmVtYWluaW5nUGFuZWxDb21wb25lbnQnXS5zaG93QXZhaWxhYmxlQWN0aW9uKGF2YWlsYWJsZUFjdGlvbnMsIG1heEFjdGlvbnMpO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLlVTRV9BQ1RJT04gKyBcInBsYXllclwiOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0FjdGlvbnNSZW1haW5pbmdQYW5lbENvbXBvbmVudCddLnNob3dBdmFpbGFibGVBY3Rpb24oYXJnc1swXSwgYXJnc1sxXSk7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkVORF9DT01CQVRfVFVSTjpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IEFjdGlvbnNSZW1haW5pbmdQYW5lbENvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnQWN0aW9uc1JlbWFpbmluZ1BhbmVsQ29tcG9uZW50Jyk7XG5pbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tICcuLi8uLi9HYW1lRmFjYWRlJztcbmltcG9ydCB7IEFjdGlvbnNSZW1haW5pbmdQYW5lbE1lZGlhdG9yIH0gZnJvbSAnLi9BY3Rpb25zUmVtYWluaW5nUGFuZWxNZWRpYXRvcic7XG5cbkFjdGlvbnNSZW1haW5pbmdQYW5lbENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgncGlwVGVtcGxhdGUnLCB7IHR5cGU6ICdhc3NldCcsIHRpdGxlOiAnUGlwIFRlbXBsYXRlJyB9KTtcblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcbkFjdGlvbnNSZW1haW5pbmdQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKEFjdGlvbnNSZW1haW5pbmdQYW5lbE1lZGlhdG9yLk5BTUUpKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnJlbW92ZU1lZGlhdG9yKEFjdGlvbnNSZW1haW5pbmdQYW5lbE1lZGlhdG9yLk5BTUUpO1xuICAgIH1cblxuICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyTWVkaWF0b3IobmV3IEFjdGlvbnNSZW1haW5pbmdQYW5lbE1lZGlhdG9yKHRoaXMuZW50aXR5KSk7XG5cbiAgICB0aGlzLnBpcHMgPSBbXTtcbn1cblxuQWN0aW9uc1JlbWFpbmluZ1BhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5zaG93QXZhaWxhYmxlQWN0aW9uID0gZnVuY3Rpb24gKGF2YWlsYWJsZUFjdGlvbnMsIG1heEFjdGlvbnMpIHtcbiAgICB3aGlsZSAodGhpcy5waXBzLmxlbmd0aCA8IG1heEFjdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVQaXAoKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGlwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSA8IGF2YWlsYWJsZUFjdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMucGlwc1tpXS5maXJlKCd0b2dnbGVQaXAnLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGlwc1tpXS5maXJlKCd0b2dnbGVQaXAnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuQWN0aW9uc1JlbWFpbmluZ1BhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVQaXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgbmV3UGlwID0gdGhpcy5waXBUZW1wbGF0ZS5yZXNvdXJjZS5pbnN0YW50aWF0ZSgpO1xuICAgIHRoaXMuZW50aXR5LmFkZENoaWxkKG5ld1BpcCk7XG4gICAgdGhpcy5waXBzLnB1c2gobmV3UGlwKTtcbn1cbiIsImV4cG9ydCBjb25zdCBBY3Rpb25zUmVtYWluaW5nUGlwQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdBY3Rpb25zUmVtYWluaW5nUGlwQ29tcG9uZW50Jyk7XG5cbkFjdGlvbnNSZW1haW5pbmdQaXBDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3BpcEZyb250JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdQaXAgZnJvbnQnIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuQWN0aW9uc1JlbWFpbmluZ1BpcENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVudGl0eS5vbigndG9nZ2xlUGlwJywgKHNob3cpID0+IHtcbiAgICAgICAgdGhpcy5waXBGcm9udC5lbmFibGVkID0gc2hvdztcbiAgICB9KTtcbn1cbiIsIlxuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuY29uc3QgeyBNZWRpYXRvciB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuXG5leHBvcnQgY2xhc3MgRmxvYXRpbmdTdGF0dXNDcmVhdG9yTWVkaWF0b3IgZXh0ZW5kcyBNZWRpYXRvciB7XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJGbG9hdGluZ1N0YXR1c0NyZWF0b3JNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKEZsb2F0aW5nU3RhdHVzQ3JlYXRvck1lZGlhdG9yLk5BTUUpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZU5vdGlmaWNhdGlvbihbXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuRElTUExBWV9GTE9BVElOR19TVEFUVVNcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG5cbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5ESVNQTEFZX0ZMT0FUSU5HX1NUQVRVUzpcbiAgICAgICAgICAgICAgICBjb25zdCBzY3JpcHRDb21wID0gdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnRmxvYXRpbmdTdGF0dXNDcmVhdG9yQ29tcG9uZW50J107XG4gICAgICAgICAgICAgICAgY29uc3QgZmxvYXRlck5hbWUgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFByb3h5ID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIHNjcmlwdENvbXAuZGlzcGxheVN0YXR1cyhmbG9hdGVyTmFtZSwgdGFyZ2V0UHJveHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IFRlbXBvcmFyeUZsb2F0aW5nU3RhdHVzQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdUZW1wb3JhcnlGbG9hdGluZ1N0YXR1c0NvbXBvbmVudCcpO1xuXG4vLyBUZW1wb3JhcnlGbG9hdGluZ1N0YXR1c0NvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnbWF4Q2FtZXJhSGVpZ2h0JywgeyB0eXBlOiAnbnVtYmVyJywgZGVmYXVsdDogMTAwLCB0aXRsZTogJ01heCBDYW1lcmEgSGVpZ2h0JyB9KTtcblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcblRlbXBvcmFyeUZsb2F0aW5nU3RhdHVzQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkgeyB9O1xuXG5UZW1wb3JhcnlGbG9hdGluZ1N0YXR1c0NvbXBvbmVudC5wcm90b3R5cGUuc2V0V29ybGRQb3NpdGlvbiA9IGZ1bmN0aW9uICh3b3JsZFBvc2l0aW9uLCBjYW1lcmEsIHNjcmVlbikge1xuICAgIHRoaXMuZW50aXR5LmVuYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMud29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb247XG4gICAgdGhpcy5kZXZpY2UgPSB0aGlzLmFwcC5ncmFwaGljc0RldmljZTtcbiAgICB0aGlzLmNhbWVyYUVudGl0eSA9IGNhbWVyYTtcbiAgICB0aGlzLnNjcmVlbkVudGl0eSA9IHNjcmVlbjtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmVudGl0eS5kZXN0cm95KCk7XG4gICAgfSwgMTAwMCk7XG59XG5cbi8vIHVwZGF0ZSBjb2RlIGNhbGxlZCBldmVyeSBmcmFtZVxuVGVtcG9yYXJ5RmxvYXRpbmdTdGF0dXNDb21wb25lbnQucHJvdG90eXBlLnBvc3RVcGRhdGUgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMud29ybGRTcGFjZVRvU2NyZWVuU3BhY2UodGhpcy53b3JsZFBvc2l0aW9uLmNsb25lKCkpO1xuICAgIGlmIChwb3NpdGlvbikge1xuICAgICAgICB0aGlzLmVudGl0eS5zZXRMb2NhbFBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICB9XG59O1xuXG5UZW1wb3JhcnlGbG9hdGluZ1N0YXR1c0NvbXBvbmVudC5wcm90b3R5cGUud29ybGRTcGFjZVRvU2NyZWVuU3BhY2UgPSBmdW5jdGlvbiAocG9zKSB7XG4gICAgaWYgKHRoaXMuZGV2aWNlICYmIHRoaXMuY2FtZXJhRW50aXR5ICYmIHRoaXMuc2NyZWVuRW50aXR5KSB7XG4gICAgICAgIGNvbnN0IHdvcmxkUG9zID0gcG9zLmNsb25lKCk7XG4gICAgICAgIGNvbnN0IHNjcmVlblBvcyA9IG5ldyBwYy5WZWMzKCk7XG4gICAgICAgIC8vIGdldCBzY3JlZW4gc3BhY2UgY28tb3JkXG4gICAgICAgIHRoaXMuY2FtZXJhRW50aXR5LmNhbWVyYS53b3JsZFRvU2NyZWVuKHdvcmxkUG9zLCBzY3JlZW5Qb3MpO1xuICAgICAgICBjb25zdCBwaXhlbFJhdGlvID0gdGhpcy5hcHAuZ3JhcGhpY3NEZXZpY2UubWF4UGl4ZWxSYXRpbztcbiAgICAgICAgc2NyZWVuUG9zLnggKj0gcGl4ZWxSYXRpbztcbiAgICAgICAgc2NyZWVuUG9zLnkgKj0gcGl4ZWxSYXRpbztcblxuICAgICAgICBjb25zdCBzY3JlZW5Db21wID0gdGhpcy5zY3JlZW5FbnRpdHkuc2NyZWVuO1xuXG4gICAgICAgIGNvbnN0IHJhdGlvU2NhbGUgPSBzY3JlZW5Db21wLnNjYWxlO1xuICAgICAgICBjb25zdCB4ID0gKHNjcmVlblBvcy54IC8gcmF0aW9TY2FsZSk7XG4gICAgICAgIGNvbnN0IHkgPSAodGhpcy5kZXZpY2UuaGVpZ2h0IC0gc2NyZWVuUG9zLnkpIC8gcmF0aW9TY2FsZTtcblxuICAgICAgICByZXR1cm4gbmV3IHBjLlZlYzMoeCwgeSwgMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcblxufSIsImV4cG9ydCBjb25zdCBGbG9hdGluZ1N0YXR1c0NyZWF0b3JDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ0Zsb2F0aW5nU3RhdHVzQ3JlYXRvckNvbXBvbmVudCcpO1xuaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSAnQGtvcmVlei9wdXJlLW12Yyc7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi4vLi4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBGbG9hdGluZ1N0YXR1c0NyZWF0b3JNZWRpYXRvciB9IGZyb20gJy4vRmxvYXRpbmdTdGF0dXNDcmVhdG9yTWVkaWF0b3InO1xuaW1wb3J0IHsgVGVtcG9yYXJ5RmxvYXRpbmdTdGF0dXNDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvVGVtcG9yYXJ5RmxvYXRpbmdTdGF0dXNDb21wb25lbnQnO1xuXG5jb25zdCBmbG9hdGluZ1N0YXR1c1NjaGVtYSA9IFtcbiAgICB7XG4gICAgICAgIG5hbWU6ICduYW1lJyxcbiAgICAgICAgdGl0bGU6ICdOYW1lJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZydcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ3RlbXBsYXRlJyxcbiAgICAgICAgdGl0bGU6ICdUZW1wbGF0ZScsXG4gICAgICAgIHR5cGU6ICdhc3NldCdcbiAgICB9XG5dO1xuXG5GbG9hdGluZ1N0YXR1c0NyZWF0b3JDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3NjcmVlbkVudGl0eScsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnU2NyZWVuIEVudGl0eScgfSk7XG5GbG9hdGluZ1N0YXR1c0NyZWF0b3JDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2NhbWVyYUVudGl0eScsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnQ2FtZXJhIEVudGl0eScgfSk7XG5GbG9hdGluZ1N0YXR1c0NyZWF0b3JDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2Zsb2F0aW5nU3RhdHVzZXMnLCB7IHR5cGU6ICdqc29uJywgc2NoZW1hOiBmbG9hdGluZ1N0YXR1c1NjaGVtYSwgdGl0bGU6ICdGbG9hdGluZyBTdGF0dXNlcycsIGFycmF5OiB0cnVlIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuRmxvYXRpbmdTdGF0dXNDcmVhdG9yQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoRmxvYXRpbmdTdGF0dXNDcmVhdG9yTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoRmxvYXRpbmdTdGF0dXNDcmVhdG9yTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgRmxvYXRpbmdTdGF0dXNDcmVhdG9yTWVkaWF0b3IodGhpcy5lbnRpdHkpKTtcblxufTtcblxuRmxvYXRpbmdTdGF0dXNDcmVhdG9yQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwbGF5U3RhdHVzID0gZnVuY3Rpb24gKG5hbWUsIHRhcmdldFByb3h5LCAuLi5hcmdzKSB7XG4gICAgY29uc3Qgc2NoZW1lID0gdGhpcy5mbG9hdGluZ1N0YXR1c2VzLmZpbmQoKG90aGVyU2NoZW1lKSA9PiBvdGhlclNjaGVtZS5uYW1lID09PSBuYW1lKTtcbiAgICBpZiAoc2NoZW1lKSB7XG4gICAgICAgIC8vIFxuICAgICAgICBjb25zdCB0YXJnZXROb2RlID0gdGFyZ2V0UHJveHkuY3VycmVudE5vZGU7XG4gICAgICAgIGNvbnN0IHRhcmdldFBvcyA9IG5ldyBwYy5WZWMzKHRhcmdldE5vZGUueCwgdGFyZ2V0Tm9kZS55ICsgdGFyZ2V0UHJveHkuaGVpZ2h0LCB0YXJnZXROb2RlLnopO1xuICAgICAgICBjb25zdCBuZXdTdGF0dXMgPSBzY2hlbWUudGVtcGxhdGUucmVzb3VyY2UuaW5zdGFudGlhdGUoKTtcbiAgICAgICAgbmV3U3RhdHVzLnNjcmlwdFsnVGVtcG9yYXJ5RmxvYXRpbmdTdGF0dXNDb21wb25lbnQnXS5zZXRXb3JsZFBvc2l0aW9uKHRhcmdldFBvcyxcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhRW50aXR5LCB0aGlzLnNjcmVlbkVudGl0eSk7XG4gICAgICAgIHRoaXMuZW50aXR5LnBhcmVudC5hZGRDaGlsZChuZXdTdGF0dXMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY3JlYXRlIGZsb2F0aW5nIHN0YXR1czogJHtuYW1lfWApO1xuICAgIH1cblxufVxuIiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5jb25zdCB7IE1lZGlhdG9yIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBjbGFzcyBQb3J0YWxNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIlBvcnRhbE1lZGlhdG9yXCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKHZpZXdDb21wb25lbnQpIHtcbiAgICAgICAgc3VwZXIoUG9ydGFsTWVkaWF0b3IuTkFNRSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKFtcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkVfQ09NUExFVEUsXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50O1xuXG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vbigncGlja2VyOnBvcnRhbCcsIHRoaXMuc2VsZWN0ZWRQb3J0YWwsIHRoaXMpO1xuXG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuU0VUX0NBTUVSQV9UQVJHRVQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxlY3RlZFBvcnRhbCgpIHtcbiAgICAgICAgY29uc3QgZ2FtZVN0YXRlUHJveHkgPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVTdGF0ZVByb3h5Lk5BTUUpO1xuICAgICAgICBjb25zdCBwb3J0YWxDb21wb25lbnQgPSB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydQb3J0YWxDb21wb25lbnQnXTtcbiAgICAgICAgY29uc3QgZGVzdGluYXRpb25TY2VuZSA9IHBvcnRhbENvbXBvbmVudC5kZXN0aW5hdGlvblNjZW5lO1xuICAgICAgICBjb25zdCBkZXN0aW5hdGlvblBvcnRhbCA9IHBvcnRhbENvbXBvbmVudC5kZXN0aW5hdGlvblBvcnRhbDtcbiAgICAgICAgY29uc3Qgc3RhbmRpbmdQb3NpdGlvbiA9IHBvcnRhbENvbXBvbmVudC5zdGFuZGluZ1BvaW50LmdldFBvc2l0aW9uKCk7XG5cbiAgICAgICAgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5FWFBMT1JBVElPTikge1xuICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkFWSUdBVEVfVEhST1VHSF9QT1JUQUwsXG4gICAgICAgICAgICAgICAgc3RhbmRpbmdQb3NpdGlvbiwgZGVzdGluYXRpb25TY2VuZSwgZGVzdGluYXRpb25Qb3J0YWwpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IFBvcnRhbENvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnUG9ydGFsQ29tcG9uZW50Jyk7XG5pbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tICcuLi8uLi9HYW1lRmFjYWRlJztcbmltcG9ydCB7IFBvcnRhbE1lZGlhdG9yIH0gZnJvbSAnLi9Qb3J0YWxNZWRpYXRvcic7XG5cblBvcnRhbENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgncG9ydGFsSWQnLCB7IHR5cGU6ICdzdHJpbmcnLCB0aXRsZTogJ1BvcnRhbCBJZCcgfSk7XG5Qb3J0YWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2Rlc3RpbmF0aW9uU2NlbmUnLCB7IHR5cGU6ICdzdHJpbmcnLCB0aXRsZTogJ0Rlc3RpbmF0aW9uIFNjZW5lJyB9KTtcblBvcnRhbENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnZGVzdGluYXRpb25Qb3J0YWwnLCB7IHR5cGU6ICdzdHJpbmcnLCB0aXRsZTogJ0Rlc3RpbmF0aW9uIFBvcnRhbCcgfSk7XG5Qb3J0YWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2hpdGJveCcsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnSGl0Ym94JyB9KTtcblBvcnRhbENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnc3RhbmRpbmdQb2ludCcsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnU3RhbmRpbmcgUG9pbnQnIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuUG9ydGFsQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoUG9ydGFsTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoUG9ydGFsTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgUG9ydGFsTWVkaWF0b3IodGhpcy5lbnRpdHkpKTtcblxuICAgIHRoaXMuc3RhbmRpbmdQb2ludC5tb2RlbC5lbmFibGVkID0gZmFsc2U7XG5cbn07XG4iLCJcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIERpYWxvZ3VlUGFuZWxNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkRpYWxvZ3VlUGFuZWxNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKERpYWxvZ3VlUGFuZWxNZWRpYXRvci5OQU1FKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24oW1xuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLlNIT1dfRElBTE9HVUVfUEFORUwsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuSElERV9ESUFMT0dVRV9QQU5FTCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5ESVNQTEFZX0RJQUxPR1VFX1NURVAsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuRElTUExBWV9ESUFMT0dVRV9TS0lMTF9URVNULFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkNMRUFSX0RJQUxPR1VFX0NIT0lDRVMsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuU0hPV19ESUFMT0dVRV9DT05USU5VRV9CVVRUT04sXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuSElERV9ESUFMT0dVRV9DT05USU5VRV9CVVRUT05cbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG5cbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdjbGlja2VkOmNvbnRpbnVlJywgdGhpcy5oYW5kbGVDbGlja0NvbnRpbnVlLCB0aGlzKTtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdjbGlja2VkOmNob2ljZScsIHRoaXMuaGFuZGxlQ2xpY2tDaG9pY2UsIHRoaXMpO1xuXG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuU0hPV19ESUFMT0dVRV9QQU5FTDpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5ISURFX0RJQUxPR1VFX1BBTkVMOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0RpYWxvZ3VlUGFuZWxDb21wb25lbnQnXS5jbGVhclBhbmVsKCk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkRJU1BMQVlfRElBTE9HVUVfU1RFUDpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydEaWFsb2d1ZVBhbmVsQ29tcG9uZW50J10uY3JlYXRlU3RlcChhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkRJU1BMQVlfRElBTE9HVUVfU0tJTExfVEVTVDpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydEaWFsb2d1ZVBhbmVsQ29tcG9uZW50J10uY3JlYXRlU2tpbGxUZXN0KC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuQ0xFQVJfRElBTE9HVUVfQ0hPSUNFUzpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydEaWFsb2d1ZVBhbmVsQ29tcG9uZW50J10uY2xlYXJEaWFsb2d1ZUNob2ljZXMoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLlNIT1dfRElBTE9HVUVfQ09OVElOVUVfQlVUVE9OOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0RpYWxvZ3VlUGFuZWxDb21wb25lbnQnXS5zZXRDb250aW51ZUJ1dHRvbih0cnVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkhJREVfRElBTE9HVUVfQ09OVElOVUVfQlVUVE9OOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0RpYWxvZ3VlUGFuZWxDb21wb25lbnQnXS5zZXRDb250aW51ZUJ1dHRvbihmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUNsaWNrQ29udGludWUoKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkNPTlRJTlVFX0RJQUxPR1VFX05PREUpO1xuICAgIH1cblxuICAgIGhhbmRsZUNsaWNrQ2hvaWNlKGluZGV4KSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNFTEVDVF9ESUFMT0dVRV9DSE9JQ0UsIGluZGV4KTtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgRGlhbG9ndWVQYW5lbENvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnRGlhbG9ndWVQYW5lbENvbXBvbmVudCcpO1xuaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSAnQGtvcmVlei9wdXJlLW12Yyc7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi4vLi4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBEaWFsb2d1ZVBhbmVsTWVkaWF0b3IgfSBmcm9tICcuL0RpYWxvZ3VlUGFuZWxNZWRpYXRvcic7XG5cbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3Njcm9sbGJhclZpZXdFbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ1Njcm9sbGJhciBWaWV3JyB9KTtcbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2NvbnRlbnRFbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0NvbnRlbnQgRW50aXR5JyB9KTtcbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2ZlZWRFbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0ZlZWQgRW50aXR5JyB9KTtcbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2NvbnRlbnRIZWlnaHQnLCB7IHR5cGU6ICdudW1iZXInLCB0aXRsZTogJ0NvbnRlbnQgSGVpZ2h0JywgZGVmYXVsdDogNTIwIH0pO1xuXG5EaWFsb2d1ZVBhbmVsQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCd0ZXh0RW50cnlUZW1wbGF0ZScsIHsgdHlwZTogJ2Fzc2V0JywgdGl0bGU6ICdUZXh0IEVudHJ5IEFzc2V0JyB9KTtcbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2Nob2ljZUVudHJ5VGVtcGxhdGUnLCB7IHR5cGU6ICdhc3NldCcsIHRpdGxlOiAnQ2hvaWNlIEVudHJ5IEFzc2V0JyB9KTtcbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3NraWxsVGVzdEVudHJ5VGVtcGxhdGUnLCB7IHR5cGU6ICdhc3NldCcsIHRpdGxlOiAnU2tpbGwgVGVzdCBFbnRyeSBBc3NldCcgfSk7XG5cbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2NvbnRpbnVlQnV0dG9uRW50aXR5JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdDb250aW51ZSBCdXR0b24nIH0pO1xuXG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5EaWFsb2d1ZVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoRGlhbG9ndWVQYW5lbE1lZGlhdG9yLk5BTUUpKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnJlbW92ZU1lZGlhdG9yKERpYWxvZ3VlUGFuZWxNZWRpYXRvci5OQU1FKTtcbiAgICB9XG5cbiAgICB0aGlzLmZhY2FkZS5yZWdpc3Rlck1lZGlhdG9yKG5ldyBEaWFsb2d1ZVBhbmVsTWVkaWF0b3IodGhpcy5lbnRpdHkpKTtcblxuICAgIHRoaXMuZW50aXR5LmVuYWJsZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuY2hvaWNlcyA9IFtdO1xuXG4gICAgdGhpcy5jb250aW51ZUJ1dHRvbkVudGl0eS5lbGVtZW50Lm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5lbnRpdHkuZmlyZSgnY2xpY2tlZDpjb250aW51ZScpO1xuICAgIH0sIHRoaXMpO1xuXG59O1xuXG5EaWFsb2d1ZVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVTdGVwID0gZnVuY3Rpb24gKHN0ZXBEYXRhKSB7XG4gICAgdGhpcy5jcmVhdGVUZXh0KHN0ZXBEYXRhLnN0ZXApO1xuXG4gICAgaWYgKHN0ZXBEYXRhLnN0ZXAuY2hvaWNlcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ZXBEYXRhLnN0ZXAuY2hvaWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2hvaWNlID0gc3RlcERhdGEuc3RlcC5jaG9pY2VzW2ldO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVDaG9pY2UoaSwgY2hvaWNlLnRleHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5EaWFsb2d1ZVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gZnVuY3Rpb24gKHN0ZXBEYXRhKSB7XG4gICAgY29uc3QgbmV3VGV4dCA9IHRoaXMudGV4dEVudHJ5VGVtcGxhdGUucmVzb3VyY2UuaW5zdGFudGlhdGUoKTtcbiAgICBuZXdUZXh0LnNjcmlwdFtcIkRpYWxvZ3VlVGV4dENvbXBvbmVudFwiXS5zZXR1cChzdGVwRGF0YSk7XG4gICAgdGhpcy5mZWVkRW50aXR5LmFkZENoaWxkKG5ld1RleHQpO1xuICAgIHRoaXMucmVzaXplVG9Db250ZW50cygpO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyVmlld0VudGl0eS5zY3JvbGxiYXIudmFsdWUgPSAxO1xuICAgIH0sIDUwKTtcbn1cblxuRGlhbG9ndWVQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlQ2hvaWNlID0gZnVuY3Rpb24gKGluZGV4LCB0ZXh0KSB7XG4gICAgY29uc3QgbmV3Q2hvaWNlID0gdGhpcy5jaG9pY2VFbnRyeVRlbXBsYXRlLnJlc291cmNlLmluc3RhbnRpYXRlKCk7XG4gICAgbmV3Q2hvaWNlLnNjcmlwdFtcIkRpYWxvZ3VlQ2hvaWNlQ29tcG9uZW50XCJdLnNldHVwKGluZGV4LCB0ZXh0KTtcbiAgICBuZXdDaG9pY2UuZWxlbWVudC50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLmZlZWRFbnRpdHkuYWRkQ2hpbGQobmV3Q2hvaWNlKTtcbiAgICB0aGlzLmNob2ljZXMucHVzaChuZXdDaG9pY2UpO1xuXG4gICAgbmV3Q2hvaWNlLm9uKCdjbGljaycsIHRoaXMuaGFuZGxlU2VsZWN0Q2hvaWNlLCB0aGlzKTtcblxuICAgIHRoaXMucmVzaXplVG9Db250ZW50cygpO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyVmlld0VudGl0eS5zY3JvbGxiYXIudmFsdWUgPSAxO1xuICAgIH0sIDUwKTtcbn1cblxuRGlhbG9ndWVQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlU2tpbGxUZXN0ID0gZnVuY3Rpb24gKHNraWxsTmFtZSwgc2tpbGxWYWx1ZSwgZGllMSwgZGllMiwgd2FzU3VjY2Vzcykge1xuICAgIGNvbnN0IG5ld1NraWxsVGVzdCA9IHRoaXMuc2tpbGxUZXN0RW50cnlUZW1wbGF0ZS5yZXNvdXJjZS5pbnN0YW50aWF0ZSgpO1xuICAgIG5ld1NraWxsVGVzdC5zY3JpcHRbXCJEaWFsb2d1ZVNraWxsVGVzdENvbXBvbmVudFwiXS5zZXR1cChza2lsbE5hbWUsIHNraWxsVmFsdWUsIGRpZTEsIGRpZTIsIHdhc1N1Y2Nlc3MpO1xuICAgIHRoaXMuZmVlZEVudGl0eS5hZGRDaGlsZChuZXdTa2lsbFRlc3QpO1xuXG4gICAgdGhpcy5yZXNpemVUb0NvbnRlbnRzKCk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5zY3JvbGxiYXJWaWV3RW50aXR5LnNjcm9sbGJhci52YWx1ZSA9IDE7XG4gICAgfSwgNTApO1xufVxuXG5EaWFsb2d1ZVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5jbGVhckRpYWxvZ3VlQ2hvaWNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKGNvbnN0IGNob2ljZSBvZiB0aGlzLmNob2ljZXMpIHtcbiAgICAgICAgY2hvaWNlLm9mZignY2xpY2snLCB0aGlzLmhhbmRsZVNlbGVjdENob2ljZSwgdGhpcyk7XG4gICAgICAgIGNob2ljZS5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgdGhpcy5jaG9pY2VzID0gW107XG59XG5cbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQucHJvdG90eXBlLmNsZWFyUGFuZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgd2hpbGUgKHRoaXMuZmVlZEVudGl0eS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuZmVlZEVudGl0eS5jaGlsZHJlblswXS5kZXN0cm95KCk7XG4gICAgfVxufVxuXG5EaWFsb2d1ZVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVTZWxlY3RDaG9pY2UgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICB0aGlzLmVudGl0eS5maXJlKCdjbGlja2VkOmNob2ljZScsIGluZGV4KTtcbn1cblxuRGlhbG9ndWVQYW5lbENvbXBvbmVudC5wcm90b3R5cGUucmVzaXplVG9Db250ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgc3BhY2luZ1ZlcnRpY2FsID0gdGhpcy5mZWVkRW50aXR5LmxheW91dGdyb3VwLnNwYWNpbmcueTtcbiAgICBsZXQgaGVpZ2h0ID0gMDtcblxuICAgIGZvciAoY29uc3QgZmVlZENoaWxkIG9mIHRoaXMuZmVlZEVudGl0eS5jaGlsZHJlbikge1xuICAgICAgICBoZWlnaHQgKz0gZmVlZENoaWxkLmVsZW1lbnQuaGVpZ2h0O1xuICAgICAgICBoZWlnaHQgKz0gc3BhY2luZ1ZlcnRpY2FsO1xuICAgIH1cblxuICAgIHRoaXMuY29udGVudEVudGl0eS5lbGVtZW50LmhlaWdodCA9IE1hdGgubWF4KHRoaXMuY29udGVudEhlaWdodCwgaGVpZ2h0KTtcbn1cblxuRGlhbG9ndWVQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuc2V0Q29udGludWVCdXR0b24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLmNvbnRpbnVlQnV0dG9uRW50aXR5LmVuYWJsZWQgPSB2YWx1ZTtcbn1cbiIsImV4cG9ydCBjb25zdCBEaWFsb2d1ZUNob2ljZUNvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnRGlhbG9ndWVDaG9pY2VDb21wb25lbnQnKTtcblxuRGlhbG9ndWVDaG9pY2VDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2luZGV4RW50aXR5JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdJbmRleCBFbnRpdHknIH0pO1xuRGlhbG9ndWVDaG9pY2VDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2xhYmVsRW50aXR5JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdMYWJlbCBFbnRpdHknIH0pO1xuXG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5EaWFsb2d1ZUNob2ljZUNvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblxufVxuXG5EaWFsb2d1ZUNob2ljZUNvbXBvbmVudC5wcm90b3R5cGUuc2V0dXAgPSBmdW5jdGlvbiAoaW5kZXgsIGxhYmVsKSB7XG4gICAgdGhpcy5pbmRleEVudGl0eS5lbGVtZW50LnRleHQgPSAoaW5kZXggKyAxKSArIFwiLlwiO1xuICAgIHRoaXMubGFiZWxFbnRpdHkuZWxlbWVudC50ZXh0ID0gbGFiZWw7XG5cbiAgICB0aGlzLmVudGl0eS5lbGVtZW50LmhlaWdodCA9IHRoaXMubGFiZWxFbnRpdHkuZWxlbWVudC5oZWlnaHQ7XG5cbiAgICB0aGlzLmVudGl0eS5lbGVtZW50Lm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5lbnRpdHkuZmlyZSgnY2xpY2snLCBpbmRleClcbiAgICB9KTtcbn1cblxuRGlhbG9ndWVDaG9pY2VDb21wb25lbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkdCkge1xuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQuaGVpZ2h0ID0gdGhpcy5sYWJlbEVudGl0eS5lbGVtZW50LmhlaWdodDtcblxufVxuIiwiZXhwb3J0IGNvbnN0IERlZmF1bHRBbmltYXRpb25Db21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ0RlZmF1bHRBbmltYXRpb25Db21wb25lbnQnKTtcblxuRGVmYXVsdEFuaW1hdGlvbkNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImFuaW1hdGlvbk5hbWVcIiwge1xuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgdGl0bGU6IFwiQW5pbWF0aW9uIE5hbWVcIlxufSk7XG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5EZWZhdWx0QW5pbWF0aW9uQ29tcG9uZW50LnByb3RvdHlwZS5wb3N0SW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ubG9vcCA9IHRydWU7XG4gICAgdGhpcy5lbnRpdHkuYW5pbWF0aW9uLnBsYXkodGhpcy5hbmltYXRpb25OYW1lLCAwLjEpO1xufSIsImV4cG9ydCBjb25zdCBEaWFsb2d1ZVRleHRDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ0RpYWxvZ3VlVGV4dENvbXBvbmVudCcpO1xuXG5EaWFsb2d1ZVRleHRDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3dpdGhJbWFnZVdpZHRoJywgeyB0eXBlOiAnbnVtYmVyJywgdGl0bGU6ICdXaXRoIEltYWdlIFdpZHRoJywgZGVmYXVsdDogMzQwIH0pO1xuRGlhbG9ndWVUZXh0Q29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCd3aXRob3V0SW1hZ2VXaWR0aCcsIHsgdHlwZTogJ251bWJlcicsIHRpdGxlOiAnV2l0aCBJbWFnZSBXaWR0aCcsIGRlZmF1bHQ6IDM2MCB9KTtcblxuRGlhbG9ndWVUZXh0Q29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCd0ZXh0Q29udGFpbmVyJywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdUZXh0IENvbnRhaW5lcicgfSk7XG5EaWFsb2d1ZVRleHRDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3RpdGxlRW50aXR5JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdUaXRsZSBFbnRpdHknIH0pO1xuRGlhbG9ndWVUZXh0Q29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdib2R5RW50aXR5JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdCb2R5IEVudGl0eScgfSk7XG5cbkRpYWxvZ3VlVGV4dENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgndGh1bWJuYWlsQ29udGFpbmVyJywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdUaHVtYm5haWwgQ29udGFpbmVyJyB9KTtcbkRpYWxvZ3VlVGV4dENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgndGh1bWJuYWlsSW1hZ2UnLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ1RodW1ibmFpbCBJbWFnZScgfSk7XG5cblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcbkRpYWxvZ3VlVGV4dENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblxufVxuXG5EaWFsb2d1ZVRleHRDb21wb25lbnQucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24gKHN0ZXBEYXRhKSB7XG4gICAgaWYgKHN0ZXBEYXRhLnRpdGxlKSB7XG4gICAgICAgIHRoaXMudGl0bGVFbnRpdHkuZWxlbWVudC50ZXh0ID0gc3RlcERhdGEudGl0bGU7XG5cbiAgICAgICAgaWYgKHN0ZXBEYXRhLnRpdGxlQ29sb3VyKSB7XG4gICAgICAgICAgICB0aGlzLnRpdGxlRW50aXR5LmVsZW1lbnQuY29sb3IuZnJvbVN0cmluZyhzdGVwRGF0YS50aXRsZUNvbG91cik7XG5cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGl0bGVFbnRpdHkuZW5hYmxlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzdGVwRGF0YS50aHVtYm5haWwpIHtcbiAgICAgICAgdGhpcy50ZXh0Q29udGFpbmVyLmVsZW1lbnQud2lkdGggPSB0aGlzLndpdGhJbWFnZVdpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGV4dENvbnRhaW5lci5lbGVtZW50LndpZHRoID0gdGhpcy53aXRob3V0SW1hZ2VXaWR0aDtcbiAgICAgICAgdGhpcy50aHVtYm5haWxDb250YWluZXIuZW5hYmxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5ib2R5RW50aXR5LmVsZW1lbnQudGV4dCA9IHN0ZXBEYXRhLnRleHQ7XG4gICAgLy8gdGhpcy5lbnRpdHkuZWxlbWVudC5oZWlnaHQgPSB0aGlzLmxhYmVsRW50aXR5LmVsZW1lbnQuaGVpZ2h0O1xufVxuXG5EaWFsb2d1ZVRleHRDb21wb25lbnQucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBtaW5IZWlnaHQgPSAodGhpcy50aHVtYm5haWxDb250YWluZXIuZW5hYmxlKSA/IHRoaXMudGh1bWJuYWlsQ29udGFpbmVyLmVsZW1lbnQuaGVpZ2h0IDogMDtcbiAgICBsZXQgaGVpZ2h0ID0gMDtcbiAgICBsZXQgc3BhY2luZyA9IHRoaXMudGV4dENvbnRhaW5lci5sYXlvdXRncm91cC5zcGFjaW5nLnk7XG4gICAgZm9yIChjb25zdCB0ZXh0Q2hpbGQgb2YgdGhpcy50ZXh0Q29udGFpbmVyLmNoaWxkcmVuKSB7XG4gICAgICAgIGhlaWdodCArPSB0ZXh0Q2hpbGQuZWxlbWVudC5oZWlnaHQgKyBzcGFjaW5nO1xuICAgIH1cblxuXG4gICAgaWYgKCF0aGlzLnRpdGxlRW50aXR5LmVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5ib2R5RW50aXR5LmVsZW1lbnQud2lkdGggPSB0aGlzLndpdGhJbWFnZVdpZHRoO1xuXG4gICAgfVxuXG4gICAgdGhpcy5lbnRpdHkuZWxlbWVudC5oZWlnaHQgPSBNYXRoLm1heChtaW5IZWlnaHQsIGhlaWdodCk7XG5cbn1cblxuRGlhbG9ndWVUZXh0Q29tcG9uZW50LnByb3RvdHlwZS5wb3N0SW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNldEhlaWdodCgpO1xuXG59XG5cbkRpYWxvZ3VlVGV4dENvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGR0KSB7XG4gICAgLy90aGlzLmVudGl0eS5lbGVtZW50LmhlaWdodCA9IHRoaXMubGFiZWxFbnRpdHkuZWxlbWVudC5oZWlnaHQ7XG5cbn1cbiIsIlxuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuY29uc3QgeyBNZWRpYXRvciB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuXG5leHBvcnQgY2xhc3MgQXR0YWNrQnV0dG9uTWVkaWF0b3IgZXh0ZW5kcyBNZWRpYXRvciB7XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJBdHRhY2tCdXR0b25NZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKEF0dGFja0J1dHRvbk1lZGlhdG9yLk5BTUUpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZU5vdGlmaWNhdGlvbihbXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuR0FNRVBMQVlfQUNUSU9OX0NIQU5HRURcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG5cbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdjbGljazp0b2dnbGVBdHRhY2snLCB0aGlzLmhhbmRsZVRvZ2dsZUF0dGFjaywgdGhpcyk7XG5cbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5HQU1FUExBWV9BQ1RJT05fQ0hBTkdFRDpcbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb25OYW1lID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uTmFtZSA9PT0gXCJhdHRhY2tcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydBdHRhY2tCdXR0b25Db21wb25lbnQnXS50b2dnbGVIaWdobGlnaHQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnQXR0YWNrQnV0dG9uQ29tcG9uZW50J10udG9nZ2xlSGlnaGxpZ2h0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVUb2dnbGVBdHRhY2soYXR0YWNrRW5hYmxlZCkge1xuICAgICAgICBpZiAoYXR0YWNrRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuR0FNRVBMQVlfQUNUSU9OX0NIQU5HRUQsIFwiYXR0YWNrXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuR0FNRVBMQVlfQUNUSU9OX0NIQU5HRUQsIFwiaW50ZXJhY3RcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgQXR0YWNrQnV0dG9uQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdBdHRhY2tCdXR0b25Db21wb25lbnQnKTtcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4uLy4uLy4uL0dhbWVGYWNhZGUnO1xuaW1wb3J0IHsgQXR0YWNrQnV0dG9uTWVkaWF0b3IgfSBmcm9tICcuL0F0dGFja0J1dHRvbk1lZGlhdG9yJztcblxuQXR0YWNrQnV0dG9uQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdoaWdobGlnaHRFbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0hpZ2hsaWdodCBFbnRpdHknIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuQXR0YWNrQnV0dG9uQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoQXR0YWNrQnV0dG9uTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoQXR0YWNrQnV0dG9uTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgQXR0YWNrQnV0dG9uTWVkaWF0b3IodGhpcy5lbnRpdHkpKTtcblxuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24oJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljaywgdGhpcyk7XG59O1xuXG5BdHRhY2tCdXR0b25Db21wb25lbnQucHJvdG90eXBlLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIHRoaXMuZW50aXR5LmZpcmUoJ2NsaWNrOnRvZ2dsZUF0dGFjaycsICF0aGlzLmhpZ2hsaWdodEVudGl0eS5lbmFibGVkKTtcbn1cblxuQXR0YWNrQnV0dG9uQ29tcG9uZW50LnByb3RvdHlwZS50b2dnbGVIaWdobGlnaHQgPSBmdW5jdGlvbiAoaXNFbmFibGVkKSB7XG4gICAgdGhpcy5oaWdobGlnaHRFbnRpdHkuZW5hYmxlZCA9IGlzRW5hYmxlZDtcbn0iLCJcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIFVzZUl0ZW1CdXR0b25NZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIlVzZUl0ZW1CdXR0b25NZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50LCBlcXVpcG1lbnRTbG90S2V5KSB7XG4gICAgICAgIHN1cGVyKFVzZUl0ZW1CdXR0b25NZWRpYXRvci5OQU1FICsgZXF1aXBtZW50U2xvdEtleSk7XG4gICAgICAgIHRoaXMuZXF1aXBtZW50U2xvdEtleSA9IGVxdWlwbWVudFNsb3RLZXk7XG5cbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24oW1xuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkdBTUVQTEFZX0FDVElPTl9DSEFOR0VELCBHYW1lQ29tbWFuZHMuRElTUExBWV9FUVVJUFBFRF9TTE9ULFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLlNFVF9VU0VfSVRFTV9CVVRUT05fSElHSExJR0hUXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50O1xuXG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vbignY2xpY2s6dXNlSXRlbScsIHRoaXMuaGFuZGxlVXNlSXRlbSwgdGhpcyk7XG5cbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5HQU1FUExBWV9BQ1RJT05fQ0hBTkdFRDpcbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb25OYW1lID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uTmFtZSA9PT0gXCJhdHRhY2tcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydVc2VJdGVtQnV0dG9uQ29tcG9uZW50J10udG9nZ2xlSGlnaGxpZ2h0KHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ1VzZUl0ZW1CdXR0b25Db21wb25lbnQnXS50b2dnbGVIaWdobGlnaHQoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkRJU1BMQVlfRVFVSVBQRURfU0xPVDpcbiAgICAgICAgICAgICAgICBjb25zdCBlcXVpcG1lbnRTbG90cyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgZXF1aXBwZWREYXRhID0gZXF1aXBtZW50U2xvdHMuZ2V0KHRoaXMuZXF1aXBtZW50U2xvdEtleSk7XG4gICAgICAgICAgICAgICAgaWYgKGVxdWlwcGVkRGF0YSAmJiBlcXVpcHBlZERhdGEuaWNvbikge1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbXCJVc2VJdGVtQnV0dG9uQ29tcG9uZW50XCJdLnNldEljb24oZXF1aXBwZWREYXRhLmljb24pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbXCJVc2VJdGVtQnV0dG9uQ29tcG9uZW50XCJdLnNldERlZmF1bHRJY29uKCk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5TRVRfVVNFX0lURU1fQlVUVE9OX0hJR0hMSUdIVDpcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRTbG90ID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgSGlnaGxpZ2h0OiAke3RhcmdldFNsb3R9IHZzICR7dGhpcy5lcXVpcG1lbnRTbG90S2V5fWApO1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRTbG90ID09PSB0aGlzLmVxdWlwbWVudFNsb3RLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNIaWdobGlnaHRlZCA9IGFyZ3NbMV07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbXCJVc2VJdGVtQnV0dG9uQ29tcG9uZW50XCJdLnRvZ2dsZUhpZ2hsaWdodChpc0hpZ2hsaWdodGVkKTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZVVzZUl0ZW0oKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlVTRV9FUVVJUFBFRF9JVEVNLCB0aGlzLmVxdWlwbWVudFNsb3RLZXkpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBVc2VJdGVtQnV0dG9uQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdVc2VJdGVtQnV0dG9uQ29tcG9uZW50Jyk7XG5pbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tICcuLi8uLi8uLi9HYW1lRmFjYWRlJztcbmltcG9ydCB7IFVzZUl0ZW1CdXR0b25NZWRpYXRvciB9IGZyb20gJy4vVXNlSXRlbUJ1dHRvbk1lZGlhdG9yJztcblxuVXNlSXRlbUJ1dHRvbkNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnZXF1aXBtZW50U2xvdEtleScsIHsgdHlwZTogJ3N0cmluZycsIHRpdGxlOiAnRXF1aXBtZW50IFNsb3QgS2V5JyB9KTtcblVzZUl0ZW1CdXR0b25Db21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2ljb25FbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0ljb24gRW50aXR5JyB9KTtcblVzZUl0ZW1CdXR0b25Db21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2hpZ2hsaWdodEVudGl0eScsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnSGlnaGxpZ2h0IEVudGl0eScgfSk7XG5Vc2VJdGVtQnV0dG9uQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdkZWZhdWx0SWNvbicsIHsgdHlwZTogJ2Fzc2V0JywgdGl0bGU6ICdEZWZhdWx0IEljb24nIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuVXNlSXRlbUJ1dHRvbkNvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKFVzZUl0ZW1CdXR0b25NZWRpYXRvci5OQU1FICsgdGhpcy5lcXVpcG1lbnRTbG90S2V5KSkge1xuICAgICAgICB0aGlzLmZhY2FkZS5yZW1vdmVNZWRpYXRvcihVc2VJdGVtQnV0dG9uTWVkaWF0b3IuTkFNRSArIHRoaXMuZXF1aXBtZW50U2xvdEtleSk7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgVXNlSXRlbUJ1dHRvbk1lZGlhdG9yKHRoaXMuZW50aXR5LCB0aGlzLmVxdWlwbWVudFNsb3RLZXkpKTtcblxuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24oJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljaywgdGhpcyk7XG59O1xuXG5Vc2VJdGVtQnV0dG9uQ29tcG9uZW50LnByb3RvdHlwZS5zZXRJY29uID0gZnVuY3Rpb24gKGFzc2V0SWQpIHtcbiAgICBjb25zdCBpY29uQXNzZXQgPSB0aGlzLmFwcC5hc3NldHMuZ2V0KGFzc2V0SWQpO1xuICAgIHRoaXMuaWNvbkVudGl0eS5lbGVtZW50LnNwcml0ZUFzc2V0ID0gaWNvbkFzc2V0O1xufVxuXG5Vc2VJdGVtQnV0dG9uQ29tcG9uZW50LnByb3RvdHlwZS5zZXREZWZhdWx0SWNvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmljb25FbnRpdHkuZWxlbWVudC5zcHJpdGVBc3NldCA9IHRoaXMuZGVmYXVsdEljb247XG59XG5cblVzZUl0ZW1CdXR0b25Db21wb25lbnQucHJvdG90eXBlLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIHRoaXMuZW50aXR5LmZpcmUoJ2NsaWNrOnVzZUl0ZW0nKTtcbn1cblxuVXNlSXRlbUJ1dHRvbkNvbXBvbmVudC5wcm90b3R5cGUudG9nZ2xlSGlnaGxpZ2h0ID0gZnVuY3Rpb24gKGlzRW5hYmxlZCkge1xuICAgIHRoaXMuaGlnaGxpZ2h0RW50aXR5LmVuYWJsZWQgPSBpc0VuYWJsZWQ7XG59IiwiZXhwb3J0IGNvbnN0IFZlaGljbGVDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ1ZlaGljbGVDb21wb25lbnQnKTtcblxuVmVoaWNsZUNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcIm1hc3NcIiwge1xuICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgdGl0bGU6IFwiTWFzc1wiLFxuICAgIGRlZmF1bHQ6IDNcbn0pO1xuXG5WZWhpY2xlQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKFwibWF4U3BlZWRcIiwge1xuICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgdGl0bGU6IFwiTWF4IFNwZWVkXCIsXG4gICAgZGVmYXVsdDogNVxufSk7XG5cblZlaGljbGVDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJtYXhGb3JjZVwiLCB7XG4gICAgdHlwZTogXCJudW1iZXJcIixcbiAgICB0aXRsZTogXCJNYXggRm9yY2VcIixcbiAgICBkZWZhdWx0OiAwLjVcbn0pO1xuXG5WZWhpY2xlQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKFwiYXJyaXZlVGhyZXNob2xkXCIsIHtcbiAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIHRpdGxlOiBcIkFycml2YWwgVGhyZXNob2xkXCIsXG4gICAgZGVmYXVsdDogMVxufSk7XG5cblZlaGljbGVDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy52ZWxvY2l0eSA9IG5ldyBwYy5WZWMzKCk7XG4gICAgdGhpcy5zdGVlcmluZ0ZvcmNlID0gbmV3IHBjLlZlYzMoKTtcbn1cblxuXG5WZWhpY2xlQ29tcG9uZW50LnByb3RvdHlwZS5wcm9jZXNzVmVsb2NpdHkgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZW50aXR5LmdldFBvc2l0aW9uKCk7XG5cbiAgICB0aGlzLnN0ZWVyaW5nRm9yY2UgPSBjbGFtcFZlYzModGhpcy5zdGVlcmluZ0ZvcmNlLCAodGhpcy5tYXhGb3JjZSkpO1xuICAgIHRoaXMuc3RlZXJpbmdGb3JjZSA9IHRoaXMuc3RlZXJpbmdGb3JjZS5zY2FsZSgxIC8gKHRoaXMubWFzcykpO1xuICAgIHRoaXMudmVsb2NpdHkgPSB0aGlzLnZlbG9jaXR5LmFkZCh0aGlzLnN0ZWVyaW5nRm9yY2UpO1xuICAgIHRoaXMudmVsb2NpdHkgPSBjbGFtcFZlYzModGhpcy52ZWxvY2l0eSwgKHRoaXMubWF4U3BlZWQgKiBkdCkpO1xuXG4gICAgdGhpcy5zdGVlcmluZ0ZvcmNlID0gbmV3IHBjLlZlYzMoKTtcblxuICAgIHRoaXMuZW50aXR5LnNldExvY2FsUG9zaXRpb24ocG9zaXRpb24uYWRkKHRoaXMudmVsb2NpdHkpKTtcblxuICAgIGNvbnN0IHlSb3RhdGlvbiA9IGdldEFuZ2xlKHRoaXMudmVsb2NpdHkpICogMTgwIC8gTWF0aC5QSTtcbiAgICB0aGlzLmVudGl0eS5zZXRFdWxlckFuZ2xlcygwLCB5Um90YXRpb24sIDApO1xufVxuXG5cblZlaGljbGVDb21wb25lbnQucHJvdG90eXBlLnNlZWsgPSBmdW5jdGlvbiAodGFyZ2V0LCBkdCkge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpO1xuICAgIGxldCBkZXNpcmVkVmVsb2NpdHkgPSB0YXJnZXQuY2xvbmUoKS5zdWIocG9zaXRpb24pO1xuICAgIGRlc2lyZWRWZWxvY2l0eSA9IGRlc2lyZWRWZWxvY2l0eS5ub3JtYWxpemUoKVxuICAgIGRlc2lyZWRWZWxvY2l0eS5zY2FsZSh0aGlzLm1heFNwZWVkICogZHQpO1xuICAgIGNvbnN0IGZvcmNlID0gZGVzaXJlZFZlbG9jaXR5LnN1Yih0aGlzLnZlbG9jaXR5KTtcbiAgICB0aGlzLnN0ZWVyaW5nRm9yY2UgPSB0aGlzLnN0ZWVyaW5nRm9yY2UuYWRkKGZvcmNlKTtcbn1cblxuVmVoaWNsZUNvbXBvbmVudC5wcm90b3R5cGUuYXJyaXZlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5lbnRpdHkuZ2V0UG9zaXRpb24oKTtcbiAgICBsZXQgZGVzaXJlZFZlbG9jaXR5ID0gdGFyZ2V0LmNsb25lKCkuc3ViKHBvc2l0aW9uKS5ub3JtYWxpemUoKS5zY2FsZSh0aGlzLm1heFNwZWVkKTtcbiAgICBjb25zdCBkaXN0YW5jZVRvVGFyZ2V0ID0gcG9zaXRpb24uZGlzdGFuY2UodGFyZ2V0KTtcblxuICAgIGlmIChkaXN0YW5jZVRvVGFyZ2V0ID4gdGhpcy5hcnJpdmFsVGhyZXNob2xkKSB7XG4gICAgICAgIGRlc2lyZWRWZWxvY2l0eSA9IGRlc2lyZWRWZWxvY2l0eS5zY2FsZSh0aGlzLm1heFNwZWVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkZXNpcmVkVmVsb2NpdHkgPSBkZXNpcmVkVmVsb2NpdHkuc2NhbGUoKHRoaXMubWF4U3BlZWQgKiBkaXN0YW5jZVRvVGFyZ2V0IC8gdGhpcy5hcnJpdmVUaHJlc2hvbGQpKTtcblxuICAgIH1cbiAgICBjb25zdCBmb3JjZSA9IGRlc2lyZWRWZWxvY2l0eS5zdWIodGhpcy52ZWxvY2l0eSk7XG4gICAgdGhpcy5zdGVlcmluZ0ZvcmNlID0gdGhpcy5zdGVlcmluZ0ZvcmNlLmFkZChmb3JjZSk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wVmVjMyh2ZWMzLCBtYXhWYWx1ZSkge1xuICAgIGlmICh2ZWMzLmxlbmd0aCgpIDwgbWF4VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZlYzM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZlYzMubm9ybWFsaXplKCkuc2NhbGUobWF4VmFsdWUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0QW5nbGUodmVjMykge1xuICAgIHJldHVybiBNYXRoLmF0YW4yKHZlYzMueCwgdmVjMy56KTtcbn0iLCJleHBvcnQgY29uc3QgU2NyZWVuUmVzaXplQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdTY3JlZW5SZXNpemVDb21wb25lbnQnKTtcblxuU2NyZWVuUmVzaXplQ29tcG9uZW50LnByb3RvdHlwZS53aW5kb3cgPSB3aW5kb3c7XG5cblNjcmVlblJlc2l6ZUNvbXBvbmVudC5wcm90b3R5cGUucG9zdEluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5vblJlc2l6ZSgpO1xuXG4gICAgdGhpcy53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpLCBmYWxzZSk7XG59XG5cblxuU2NyZWVuUmVzaXplQ29tcG9uZW50LnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBncmFwaGljc0RldmljZSA9IHRoaXMuYXBwLmdyYXBoaWNzRGV2aWNlO1xuICAgIC8vIEZsaXAgYmxlbmRcbiAgICBpZiAoZ3JhcGhpY3NEZXZpY2Uud2lkdGggPCBncmFwaGljc0RldmljZS5oZWlnaHQpIHtcbiAgICAgICAgdGhpcy5lbnRpdHkuc2NyZWVuLnNjYWxlQmxlbmQgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZW50aXR5LnNjcmVlbi5zY2FsZUJsZW5kID0gMDtcbiAgICB9XG5cbiAgICB0aGlzLmVudGl0eS5zY3JlZW4ucmVmZXJlbmNlUmVzb2x1dGlvbiA9IG5ldyBwYy5WZWMyKGdyYXBoaWNzRGV2aWNlLndpZHRoLCBncmFwaGljc0RldmljZS5oZWlnaHQpO1xuXG59IiwiZXhwb3J0IGNvbnN0IERpYWxvZ3VlU2tpbGxUZXN0Q29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdEaWFsb2d1ZVNraWxsVGVzdENvbXBvbmVudCcpO1xuXG5EaWFsb2d1ZVNraWxsVGVzdENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnc2tpbGxOYW1lTGFiZWwnLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ1NraWxsIE5hbWUgTGFiZWwnIH0pO1xuRGlhbG9ndWVTa2lsbFRlc3RDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3NraWxsVmFsdWVMYWJlbCcsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnU2tpbGwgVmFsdWUgTGFiZWwnIH0pO1xuRGlhbG9ndWVTa2lsbFRlc3RDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2RpZTFMYWJlbCcsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnRGllIDEgTGFiZWwnIH0pO1xuRGlhbG9ndWVTa2lsbFRlc3RDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2RpZTJMYWJlbCcsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnRGllIDIgTGFiZWwnIH0pO1xuRGlhbG9ndWVTa2lsbFRlc3RDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3N1Y2Nlc3NMYWJlbCcsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnU3VjY2VzcyBMYWJlbCcgfSk7XG5EaWFsb2d1ZVNraWxsVGVzdENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnZmFpbHVyZUxhYmVsJywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdGYWlsdXJlIExhYmVsJyB9KTtcblxuXG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5EaWFsb2d1ZVNraWxsVGVzdENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblxufVxuXG5EaWFsb2d1ZVNraWxsVGVzdENvbXBvbmVudC5wcm90b3R5cGUuc2V0dXAgPSBmdW5jdGlvbiAoc2tpbGxOYW1lLCBza2lsbFZhbHVlLCBkaWUxLCBkaWUyLCB3YXNTdWNjZXNzKSB7XG4gICAgdGhpcy5za2lsbE5hbWVMYWJlbC5lbGVtZW50LnRleHQgPSBza2lsbE5hbWU7XG4gICAgdGhpcy5za2lsbFZhbHVlTGFiZWwuZWxlbWVudC50ZXh0ID0gc2tpbGxWYWx1ZTtcbiAgICB0aGlzLmRpZTFMYWJlbC5lbGVtZW50LnRleHQgPSBkaWUxO1xuICAgIHRoaXMuZGllMkxhYmVsLmVsZW1lbnQudGV4dCA9IGRpZTI7XG4gICAgdGhpcy5zdWNjZXNzTGFiZWwuZW5hYmxlZCA9IHdhc1N1Y2Nlc3M7XG4gICAgdGhpcy5mYWlsdXJlTGFiZWwuZW5hYmxlZCA9ICF3YXNTdWNjZXNzO1xufVxuIiwiZXhwb3J0IGNvbnN0IEludmVudG9yeUl0ZW1Db21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ0ludmVudG9yeUl0ZW1Db21wb25lbnQnKTtcblxuSW52ZW50b3J5SXRlbUNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnaWNvbkVudGl0eScsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnSWNvbiBFbnRpdHknIH0pO1xuSW52ZW50b3J5SXRlbUNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnbGFiZWxFbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0xhYmVsIEVudGl0eScgfSk7XG5JbnZlbnRvcnlJdGVtQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdzbG90SGVpZ2h0JywgeyB0eXBlOiAnbnVtYmVyJywgdGl0bGU6ICdTbG90IEhlaWdodCcsIGRlZmF1bHQ6IDQ0IH0pO1xuXG5JbnZlbnRvcnlJdGVtQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdleHBhbmRlZEVudGl0eScsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnRXhwYW5kZWQgRW50aXR5JyB9KTtcblxuLy8gRGlzcGxheSBNZXRob2RzXG5JbnZlbnRvcnlJdGVtQ29tcG9uZW50LnByb3RvdHlwZS5zZXR1cCA9IGZ1bmN0aW9uIChpdGVtRGF0YSkge1xuICAgIHRoaXMuaWNvbiA9IGl0ZW1EYXRhLmljb247XG4gICAgY29uc3QgaWNvbkFzc2V0ID0gdGhpcy5hcHAuYXNzZXRzLmdldCh0aGlzLmljb24pO1xuICAgIHRoaXMuaWNvbkVudGl0eS5lbGVtZW50LnNwcml0ZUFzc2V0ID0gaWNvbkFzc2V0O1xuICAgIHRoaXMuc2l6ZSA9IGl0ZW1EYXRhLnNpemU7XG4gICAgdGhpcy5sYWJlbEVudGl0eS5lbGVtZW50LnRleHQgPSBpdGVtRGF0YS5uYW1lO1xuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQuaGVpZ2h0ID0gdGhpcy5zbG90SGVpZ2h0ICogdGhpcy5zaXplO1xuICAgIHRoaXMuZXhwYW5kZWRFbnRpdHkuZWxlbWVudC5oZWlnaHQgPSB0aGlzLnNsb3RIZWlnaHQgKiB0aGlzLnNpemU7XG5cbiAgICB0aGlzLml0ZW1EYXRhID0gaXRlbURhdGE7XG59XG5cbkludmVudG9yeUl0ZW1Db21wb25lbnQucHJvdG90eXBlLmNvbGxhcHNlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZXhwYW5kZWRFbnRpdHkuZW5hYmxlZCA9IGZhbHNlO1xufVxuXG5JbnZlbnRvcnlJdGVtQ29tcG9uZW50LnByb3RvdHlwZS5leHBhbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5leHBhbmRlZEVudGl0eS5lbmFibGVkID0gdHJ1ZTtcbn1cblxuLy8gRHJhZyBtZXRob2RzXG5JbnZlbnRvcnlJdGVtQ29tcG9uZW50LnByb3RvdHlwZS5wb3N0SW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIGNvbnN0IGRyYWdIZWxwZXIgPSBuZXcgcGMuRWxlbWVudERyYWdIZWxwZXIodGhpcy5lbnRpdHkuZWxlbWVudCwgbnVsbCk7XG4gICAgZHJhZ0hlbHBlci5vbignZHJhZzpzdGFydCcsIHRoaXMub25EcmFnU3RhcnQsIHRoaXMpO1xufTtcblxuSW52ZW50b3J5SXRlbUNvbXBvbmVudC5wcm90b3R5cGUub25EcmFnU3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbnRpdHkucGFyZW50LmZpcmUoJ2RyYWc6c3RhcnQnLCB0aGlzLmVudGl0eSwgdGhpcy5zaXplKTtcbn1cbiIsIlxuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4uLy4uL0dhbWVGYWNhZGUnO1xuY29uc3QgeyBNZWRpYXRvciB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuXG5leHBvcnQgY2xhc3MgSW52ZW50b3J5UGFuZWxNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkludmVudG9yeVBhbmVsTWVkaWF0b3JcIiB9O1xuXG4gICAgY29uc3RydWN0b3Iodmlld0NvbXBvbmVudCkge1xuICAgICAgICBzdXBlcihJbnZlbnRvcnlQYW5lbE1lZGlhdG9yLk5BTUUpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZU5vdGlmaWNhdGlvbihbXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuRElTUExBWV9JTlZFTlRPUllfUEFORUxcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vbigncmVvcmRlckl0ZW0nLCB0aGlzLmhhbmRlUmVvcmRlckl0ZW0sIHRoaXMpO1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQub24oJ2VxdWlwSXRlbScsIHRoaXMuaGFuZGxlRXF1aXBJdGVtLCB0aGlzKTtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LmVuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5ESVNQTEFZX0lOVkVOVE9SWV9QQU5FTDpcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtcyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgZXF1aXBwZWRNYXAgPSBhcmdzWzFdO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbXCJJbnZlbnRvcnlQYW5lbENvbXBvbmVudFwiXS5kaXNwbGF5SXRlbXMoaXRlbXMsIGVxdWlwcGVkTWFwKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kZVJlb3JkZXJJdGVtKGl0ZW1VVUlELCBuZXdJbmRleCkge1xuICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5SRU9SREVSX0lOVkVUT1JZX0lURU0sIGl0ZW1VVUlELCBuZXdJbmRleCk7XG4gICAgfVxuXG4gICAgaGFuZGxlRXF1aXBJdGVtKGl0ZW1JZCwgc2xvdEtleSkge1xuICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5FUVVJUF9JVEVNX1RPX1NMT1QsIGl0ZW1JZCwgc2xvdEtleSk7XG4gICAgfVxufVxuIiwiXG5jb25zdCBlcXVpcG1lbnRTbG90U2NoZW1hID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogJ2tleScsXG4gICAgICAgIHRpdGxlOiAnRXF1aXBtZW50IFNsb3QgS2V5JyxcbiAgICAgICAgdHlwZTogJ3N0cmluZydcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ2VudGl0eScsXG4gICAgICAgIHRpdGxlOiAnRXF1aXBtZW50IFNsb3QgRW50aXR5JyxcbiAgICAgICAgdHlwZTogJ2VudGl0eSdcbiAgICB9XG5dO1xuXG5leHBvcnQgY29uc3QgSW52ZW50b3J5UGFuZWxDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ0ludmVudG9yeVBhbmVsQ29tcG9uZW50Jyk7XG5pbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tICcuLi8uLi9HYW1lRmFjYWRlJztcbmltcG9ydCB7IEludmVudG9yeVBhbmVsTWVkaWF0b3IgfSBmcm9tICcuL0ludmVudG9yeVBhbmVsTWVkaWF0b3InO1xuXG5JbnZlbnRvcnlQYW5lbENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnc2xvdENvbnRhaW5lcicsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnU2xvdCBDb250YWluZXInIH0pO1xuSW52ZW50b3J5UGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3RvcFNsb3RQb3NpdGlvbicsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnVG9wIFNsb3QgUG9zaXRpb24nIH0pO1xuSW52ZW50b3J5UGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2Nsb3NlQnV0dG9uJywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdDbG9zZSBCdXR0b24nIH0pO1xuSW52ZW50b3J5UGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2l0ZW1Bc3NldCcsIHsgdHlwZTogJ2Fzc2V0JywgdGl0bGU6ICdJdGVtIEFzc2V0JyB9KTtcblxuSW52ZW50b3J5UGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2RyYWdJY29uJywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdEcmFnIEljb24nIH0pO1xuSW52ZW50b3J5UGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3Nsb3RXaWR0aCcsIHsgdHlwZTogJ251bWJlcicsIHRpdGxlOiAnU2xvdCBXaWR0aCcsIGRlZmF1bHQ6IDMyMCB9KTtcbkludmVudG9yeVBhbmVsQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdzbG90SGVpZ2h0JywgeyB0eXBlOiAnbnVtYmVyJywgdGl0bGU6ICdTbG90IEhlaWdodCcsIGRlZmF1bHQ6IDQ0IH0pO1xuSW52ZW50b3J5UGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ21heFNsb3RzJywgeyB0eXBlOiAnbnVtYmVyJywgdGl0bGU6ICdNYXggU2xvdHMnLCBkZWZhdWx0OiAxMiB9KTtcblxuSW52ZW50b3J5UGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2VxdWlwbWVudFNsb3RzJywgeyB0eXBlOiAnanNvbicsIHNjaGVtYTogZXF1aXBtZW50U2xvdFNjaGVtYSwgYXJyYXk6IHRydWUsIHRpdGxlOiAnRXF1aXBtZW50IFNsb3RzJyB9KTtcblxuSW52ZW50b3J5UGFuZWxDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIGlmICh0aGlzLmZhY2FkZS5oYXNNZWRpYXRvcihJbnZlbnRvcnlQYW5lbE1lZGlhdG9yLk5BTUUpKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnJlbW92ZU1lZGlhdG9yKEludmVudG9yeVBhbmVsTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgSW52ZW50b3J5UGFuZWxNZWRpYXRvcih0aGlzLmVudGl0eSkpO1xuICAgIHRoaXMuZW50aXR5Lm9uKCdkcmFnOnN0YXJ0JywgdGhpcy5oYW5kbGVEcmFnU3RhcnQsIHRoaXMpO1xuICAgIHRoaXMuY2xvc2VCdXR0b24uZWxlbWVudC5vbignY2xpY2snLCB0aGlzLmhhbmRsZUNsb3NlLCB0aGlzKTtcblxuICAgIHRoaXMuaW52ZW50b3J5SXRlbUVudGl0aWVzID0gW107XG59XG5cbkludmVudG9yeVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVEcmFnU3RhcnQgPSBmdW5jdGlvbiAoZHJhZ0VudGl0eSwgc2l6ZSkge1xuICAgIGRyYWdFbnRpdHkucmVwYXJlbnQodGhpcy5lbnRpdHkpO1xuICAgIHRoaXMuZHJhZ0ljb24ucmVwYXJlbnQodGhpcy5lbnRpdHkpO1xuXG4gICAgaWYgKHRoaXMuYXBwLnRvdWNoKSB7XG4gICAgICAgIHRoaXMuYXBwLnRvdWNoLm9uKHBjLkVWRU5UX1RPVUNITU9WRSwgKGV2dCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2dC50b3VjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU1vdXNlTW92ZShkcmFnRW50aXR5LCBzaXplLCBldnQudG91Y2hlc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgIHRoaXMuYXBwLnRvdWNoLm9uKHBjLkVWRU5UX1RPVUNIRU5ELCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZ0LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU1vdXNlVXAoZHJhZ0VudGl0eSwgc2l6ZSwgZXZ0LmNoYW5nZWRUb3VjaGVzWzBdKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVudGl0eS5lbGVtZW50Lm9uKHBjLkVWRU5UX01PVVNFTU9WRSwgKGV2dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVNb3VzZU1vdmUoZHJhZ0VudGl0eSwgc2l6ZSwgZXZ0KTtcbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy5lbnRpdHkuZWxlbWVudC5vbihwYy5FVkVOVF9NT1VTRVVQLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZU1vdXNlVXAoZHJhZ0VudGl0eSwgc2l6ZSwgZXZ0KTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgfVxufVxuXG5JbnZlbnRvcnlQYW5lbENvbXBvbmVudC5wcm90b3R5cGUubG9jYWxQb3NpdGlvbkZyb21Nb3VzZUV2ZW50ID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIGNvbnN0IHNjcmVlblBvcyA9IG5ldyBwYy5WZWMzKGV2dC54LCBldnQueSwgMCk7XG4gICAgY29uc3QgcGl4ZWxSYXRpbyA9IHRoaXMuYXBwLmdyYXBoaWNzRGV2aWNlLm1heFBpeGVsUmF0aW87XG4gICAgc2NyZWVuUG9zLnggKj0gcGl4ZWxSYXRpbztcbiAgICBzY3JlZW5Qb3MueSAqPSBwaXhlbFJhdGlvO1xuXG4gICAgY29uc3Qgc2NyZWVuQ29tcCA9IHRoaXMuZW50aXR5LmVsZW1lbnQuc2NyZWVuLnNjcmVlbjtcbiAgICBjb25zdCBkZXZpY2UgPSB0aGlzLmFwcC5ncmFwaGljc0RldmljZTtcblxuICAgIGNvbnN0IHJhdGlvU2NhbGUgPSBzY3JlZW5Db21wLnNjYWxlO1xuICAgIGNvbnN0IHggPSAoc2NyZWVuUG9zLnggLyByYXRpb1NjYWxlKTtcbiAgICBjb25zdCB5ID0gKGRldmljZS5oZWlnaHQgLSBzY3JlZW5Qb3MueSkgLyByYXRpb1NjYWxlO1xuXG4gICAgcmV0dXJuIG5ldyBwYy5WZWMzKHgsIHksIDApO1xufVxuXG5JbnZlbnRvcnlQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlTW91c2VNb3ZlID0gZnVuY3Rpb24gKGRyYWdFbnRpdHksIHNpemUsIGV2dCkge1xuICAgIGNvbnN0IG5ld1Bvc2l0aW9uID0gdGhpcy5sb2NhbFBvc2l0aW9uRnJvbU1vdXNlRXZlbnQoZXZ0KTtcbiAgICB0aGlzLmRyYWdJY29uLnNldExvY2FsUG9zaXRpb24obmV3UG9zaXRpb24pO1xuXG4gICAgdGhpcy5kaXNwbGF5UG90ZW50aWFsTGlzdChkcmFnRW50aXR5LCBzaXplLCBuZXdQb3NpdGlvbik7XG5cbn1cblxuXG5cbkludmVudG9yeVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKGRyYWdFbnRpdHksIHNpemUsIGV2dCkge1xuICAgIGNvbnN0IGRyYWdQb3MgPSB0aGlzLmxvY2FsUG9zaXRpb25Gcm9tTW91c2VFdmVudChldnQpO1xuICAgIHRoaXMuZHJhZ0ljb24uZW5hYmxlZCA9IGZhbHNlO1xuICAgIGRyYWdFbnRpdHkuc2NyaXB0WydJbnZlbnRvcnlJdGVtQ29tcG9uZW50J10uZXhwYW5kKCk7XG4gICAgdGhpcy5lbnRpdHkuZWxlbWVudC5vZmYocGMuRVZFTlRfTU9VU0VNT1ZFKTtcbiAgICB0aGlzLmVudGl0eS5lbGVtZW50Lm9mZihwYy5FVkVOVF9NT1VTRVVQKTtcblxuICAgIGlmICh0aGlzLmFwcC50b3VjaCkge1xuICAgICAgICB0aGlzLmFwcC50b3VjaC5vZmYocGMuRVZFTlRfVE9VQ0hNT1ZFKTtcbiAgICAgICAgdGhpcy5hcHAudG91Y2gub2ZmKHBjLkVWRU5UX1RPVUNIRU5EKTtcbiAgICB9XG5cbiAgICBjb25zdCB0b3BTbG90UG9zaXRpb24gPSB0aGlzLnRvcFNsb3RQb3NpdGlvbi5nZXRMb2NhbFBvc2l0aW9uKCk7XG4gICAgY29uc3QgYm91bmRzID0ge1xuICAgICAgICB4MTogdG9wU2xvdFBvc2l0aW9uLngsIHkxOiB0b3BTbG90UG9zaXRpb24ueSAtIHRoaXMubWF4U2xvdHMgKiB0aGlzLnNsb3RIZWlnaHQsXG4gICAgICAgIHgyOiB0b3BTbG90UG9zaXRpb24ueCArIHRoaXMuc2xvdFdpZHRoLCB5MjogdG9wU2xvdFBvc2l0aW9uLnlcbiAgICB9O1xuXG4gICAgY29uc3QgaW5Cb3VuZHMgPSBpc0luQm91bmRzKGRyYWdQb3MsIGJvdW5kcyk7XG4gICAgaWYgKGluQm91bmRzKSB7XG4gICAgICAgIGNvbnN0IHNjcmVlbkhlaWdodCA9IHRoaXMuYXBwLmdyYXBoaWNzRGV2aWNlLmhlaWdodDtcblxuICAgICAgICAvLyBHZXQgdGhlIHRvcCBjb3JuZXIgcG9zaXRpb24gb2YgdGhlIGRyYWdnaW5nIGl0ZW0gYXMgdGhlIHRhcmdldFxuICAgICAgICBjb25zdCBjb3JuZXJTY3JlZW5Qb3MgPSB7IHg6IGRyYWdFbnRpdHkuZWxlbWVudC5zY3JlZW5Db3JuZXJzWzJdLngsIHk6IHNjcmVlbkhlaWdodCAtIGRyYWdFbnRpdHkuZWxlbWVudC5zY3JlZW5Db3JuZXJzWzJdLnkgfVxuICAgICAgICBjb25zdCBjb3JuZXJQb3MgPSB0aGlzLmxvY2FsUG9zaXRpb25Gcm9tTW91c2VFdmVudChjb3JuZXJTY3JlZW5Qb3MpO1xuXG4gICAgICAgIGNvbnN0IHNsb3RJbmRleCA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3IoKHRvcFNsb3RQb3NpdGlvbi55IC0gY29ybmVyUG9zLnkpIC8gdGhpcy5zbG90SGVpZ2h0KSk7XG4gICAgICAgIGNvbnN0IGl0ZW1EYXRhID0gZHJhZ0VudGl0eS5zY3JpcHRbJ0ludmVudG9yeUl0ZW1Db21wb25lbnQnXS5pdGVtRGF0YTtcbiAgICAgICAgdGhpcy5lbnRpdHkuZmlyZSgncmVvcmRlckl0ZW0nLCBpdGVtRGF0YS51dWlkLCBzbG90SW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGRyb3BwZWQgaW4gZXF1aXAgc2xvdFxuICAgICAgICB0aGlzLmNoZWNrRHJvcE9uRXF1aXBtZW50U2xvdChkcmFnRW50aXR5LCBldnQpO1xuICAgIH1cbn1cblxuSW52ZW50b3J5UGFuZWxDb21wb25lbnQucHJvdG90eXBlLmNoZWNrRHJvcE9uRXF1aXBtZW50U2xvdCA9IGZ1bmN0aW9uIChkcmFnZ2luZ0VudGl0eSwgbW91c2VFdmVudCkge1xuICAgIGZvciAoY29uc3QgZXF1aXBTbG90IG9mIHRoaXMuZXF1aXBtZW50U2xvdHMpIHtcbiAgICAgICAgY29uc3QgZXF1aXBTbG90S2V5ID0gZXF1aXBTbG90LmtleTtcbiAgICAgICAgY29uc3QgZXF1aXBTbG90RW50aXR5ID0gZXF1aXBTbG90LmVudGl0eTtcbiAgICAgICAgY29uc3QgY29ybmVycyA9IGVxdWlwU2xvdEVudGl0eS5lbGVtZW50LnNjcmVlbkNvcm5lcnM7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuYXBwLmdyYXBoaWNzRGV2aWNlLmhlaWdodDtcbiAgICAgICAgY29uc3QgcG9pbnQgPSB7IHg6IG1vdXNlRXZlbnQueCwgeTogaGVpZ2h0IC0gbW91c2VFdmVudC55IH07XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IHtcbiAgICAgICAgICAgIHgxOiBjb3JuZXJzWzBdLngsIHkxOiBjb3JuZXJzWzBdLnksXG4gICAgICAgICAgICB4MjogY29ybmVyc1syXS54LCB5MjogY29ybmVyc1syXS55LFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpc0luQm91bmRzKHBvaW50LCBib3VuZHMpKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtRGF0YSA9IGRyYWdnaW5nRW50aXR5LnNjcmlwdFtcIkludmVudG9yeUl0ZW1Db21wb25lbnRcIl0uaXRlbURhdGE7XG5cbiAgICAgICAgICAgIHRoaXMuZW50aXR5LmZpcmUoJ2VxdWlwSXRlbScsIGl0ZW1EYXRhLmlkLCBlcXVpcFNsb3RLZXkpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbkludmVudG9yeVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVJdGVtTW92ZSA9IGZ1bmN0aW9uIChkcmFnZ2luZ0VudGl0eSwgdmFsdWUpIHtcbiAgICBpZiAodGhpcy5pc0luQm91bmRzKHZhbHVlKSkge1xuICAgICAgICBkcmFnZ2luZ0VudGl0eS5zY3JpcHRbJ0ludmVudG9yeUl0ZW1Db21wb25lbnQnXS5leHBhbmQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnZ2luZ0VudGl0eS5zY3JpcHRbJ0ludmVudG9yeUl0ZW1Db21wb25lbnQnXS5jb2xsYXBzZSgpO1xuICAgIH1cbiAgICB0aGlzLnNldEhpZ2hsaWdodFBvc2l0aW9uKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gaXNJbkJvdW5kcyhwb2ludCwgYm91bmRzKSB7XG4gICAgcmV0dXJuIHBvaW50LnggPiBib3VuZHMueDEgJiYgcG9pbnQueCA8IGJvdW5kcy54MiAmJiBwb2ludC55ID4gYm91bmRzLnkxICYmIHBvaW50LnkgPCBib3VuZHMueTI7XG59XG5cbkludmVudG9yeVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVDbG9zZSA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICBldnQuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgcmV0dXJuIHRoaXMuZW50aXR5LmVuYWJsZWQgPSBmYWxzZTtcbn1cblxuSW52ZW50b3J5UGFuZWxDb21wb25lbnQucHJvdG90eXBlLmRpc3BsYXlJdGVtcyA9IGZ1bmN0aW9uIChpdGVtcywgZXF1aXBwZWRNYXApIHtcbiAgICBjb25zb2xlLmxvZyhpdGVtcyk7XG4gICAgY29uc29sZS5sb2coZXF1aXBwZWRNYXApO1xuICAgIHRoaXMuY2xlYXJQYW5lbCgpO1xuICAgIGNvbnN0IHRvcFNsb3RQb3NpdGlvbiA9IHRoaXMudG9wU2xvdFBvc2l0aW9uLmdldExvY2FsUG9zaXRpb24oKTtcbiAgICBsZXQgcnVubmluZ0luZGV4ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgcnVubmluZ0luZGV4ICs9IGl0ZW0uc2l6ZTtcblxuICAgICAgICBjb25zdCBuZXdJdGVtQ29tcG9uZW50ID0gdGhpcy5pdGVtQXNzZXQucmVzb3VyY2UuaW5zdGFudGlhdGUoKTtcbiAgICAgICAgbmV3SXRlbUNvbXBvbmVudC5zY3JpcHRbXCJJbnZlbnRvcnlJdGVtQ29tcG9uZW50XCJdLnNldHVwKGl0ZW0pO1xuICAgICAgICBuZXdJdGVtQ29tcG9uZW50LnNldExvY2FsUG9zaXRpb24odG9wU2xvdFBvc2l0aW9uLngsIHRvcFNsb3RQb3NpdGlvbi55IC0gKHJ1bm5pbmdJbmRleCAqIHRoaXMuc2xvdEhlaWdodCksIDApO1xuXG4gICAgICAgIHRoaXMuaW52ZW50b3J5SXRlbUVudGl0aWVzLnB1c2gobmV3SXRlbUNvbXBvbmVudCk7XG5cbiAgICAgICAgdGhpcy5lbnRpdHkuYWRkQ2hpbGQobmV3SXRlbUNvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBlcXVpcFNsb3Qgb2YgdGhpcy5lcXVpcG1lbnRTbG90cykge1xuICAgICAgICBjb25zdCBlcXVpcFNsb3RLZXkgPSBlcXVpcFNsb3Qua2V5O1xuICAgICAgICBjb25zdCBlcXVpcFNsb3RFbnRpdHkgPSBlcXVpcFNsb3QuZW50aXR5O1xuXG4gICAgICAgIGlmIChlcXVpcHBlZE1hcC5oYXMoZXF1aXBTbG90S2V5KSkge1xuICAgICAgICAgICAgY29uc3QgZXF1aXBwZWRJdGVtID0gZXF1aXBwZWRNYXAuZ2V0KGVxdWlwU2xvdEtleSk7XG4gICAgICAgICAgICBlcXVpcFNsb3RFbnRpdHkuc2NyaXB0W1wiSW52ZW50b3J5RXF1aXBwZWRTbG90Q29tcG9uZW50XCJdLnNldHVwKGVxdWlwcGVkSXRlbS5pY29uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVxdWlwU2xvdEVudGl0eS5zY3JpcHRbXCJJbnZlbnRvcnlFcXVpcHBlZFNsb3RDb21wb25lbnRcIl0uY2xlYXIoKTtcbiAgICAgICAgfVxuXG4gICAgfVxufVxuXG5JbnZlbnRvcnlQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuZGlzcGxheVBvdGVudGlhbExpc3QgPSBmdW5jdGlvbiAoZHJhZ0VudGl0eSwgc2l6ZSwgZHJhZ1Bvcykge1xuICAgIGNvbnN0IHRvcFNsb3RQb3NpdGlvbiA9IHRoaXMudG9wU2xvdFBvc2l0aW9uLmdldExvY2FsUG9zaXRpb24oKTtcbiAgICBjb25zdCBib3VuZHMgPSB7XG4gICAgICAgIHgxOiB0b3BTbG90UG9zaXRpb24ueCwgeTE6IHRvcFNsb3RQb3NpdGlvbi55IC0gdGhpcy5tYXhTbG90cyAqIHRoaXMuc2xvdEhlaWdodCxcbiAgICAgICAgeDI6IHRvcFNsb3RQb3NpdGlvbi54ICsgdGhpcy5zbG90V2lkdGgsIHkyOiB0b3BTbG90UG9zaXRpb24ueVxuICAgIH07XG5cbiAgICBjb25zdCBpbkJvdW5kcyA9IGlzSW5Cb3VuZHMoZHJhZ1BvcywgYm91bmRzKTtcbiAgICBpZiAoaW5Cb3VuZHMpIHtcbiAgICAgICAgLy8gRG8gdGhlIHN0dWZmXG4gICAgICAgIGRyYWdFbnRpdHkuc2NyaXB0WydJbnZlbnRvcnlJdGVtQ29tcG9uZW50J10uZXhwYW5kKCk7XG4gICAgICAgIHRoaXMuZHJhZ0ljb24uZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBzY3JlZW5IZWlnaHQgPSB0aGlzLmFwcC5ncmFwaGljc0RldmljZS5oZWlnaHQ7XG5cbiAgICAgICAgLy8gR2V0IHRoZSB0b3AgY29ybmVyIHBvc2l0aW9uIG9mIHRoZSBkcmFnZ2luZyBpdGVtIGFzIHRoZSB0YXJnZXRcbiAgICAgICAgY29uc3QgY29ybmVyU2NyZWVuUG9zID0geyB4OiBkcmFnRW50aXR5LmVsZW1lbnQuc2NyZWVuQ29ybmVyc1syXS54LCB5OiBzY3JlZW5IZWlnaHQgLSBkcmFnRW50aXR5LmVsZW1lbnQuc2NyZWVuQ29ybmVyc1syXS55IH1cbiAgICAgICAgY29uc3QgY29ybmVyUG9zID0gdGhpcy5sb2NhbFBvc2l0aW9uRnJvbU1vdXNlRXZlbnQoY29ybmVyU2NyZWVuUG9zKTtcblxuICAgICAgICBjb25zdCBzbG90SW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLmZsb29yKCh0b3BTbG90UG9zaXRpb24ueSAtIGNvcm5lclBvcy55KSAvIHRoaXMuc2xvdEhlaWdodCkpO1xuICAgICAgICB0aGlzLnJlb3JkZXJMaXN0V2l0aEdhcChkcmFnRW50aXR5LCBkcmFnRW50aXR5LnNjcmlwdFsnSW52ZW50b3J5SXRlbUNvbXBvbmVudCddLnNpemUsIHNsb3RJbmRleCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnRW50aXR5LnNjcmlwdFsnSW52ZW50b3J5SXRlbUNvbXBvbmVudCddLmNvbGxhcHNlKCk7XG4gICAgICAgIHRoaXMuZHJhZ0ljb24uZW5hYmxlZCA9IHRydWU7XG4gICAgfVxufVxuXG5JbnZlbnRvcnlQYW5lbENvbXBvbmVudC5wcm90b3R5cGUucmVvcmRlckxpc3RXaXRoR2FwID0gZnVuY3Rpb24gKGRyYWdFbnRpdHksIHNpemUsIGdhcEluZGV4KSB7XG4gICAgY29uc3QgdG9wU2xvdFBvc2l0aW9uID0gdGhpcy50b3BTbG90UG9zaXRpb24uZ2V0TG9jYWxQb3NpdGlvbigpO1xuICAgIGxldCBydW5uaW5nSW5kZXggPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmludmVudG9yeUl0ZW1FbnRpdGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBpbnZlbnRvcnlJdGVtRW50aXR5ID0gdGhpcy5pbnZlbnRvcnlJdGVtRW50aXRpZXNbaV07XG5cbiAgICAgICAgLy8gRG9uJ3QgcmVwb3NpdGlvbiB0aGUgZW50aXR5IGJlaW5nIGRyYWdnZWRcbiAgICAgICAgaWYgKGRyYWdFbnRpdHkgIT09IGludmVudG9yeUl0ZW1FbnRpdHkpIHtcbiAgICAgICAgICAgIGlmIChnYXBJbmRleCA+PSBydW5uaW5nSW5kZXggJiYgZ2FwSW5kZXggPCBydW5uaW5nSW5kZXggKyBpbnZlbnRvcnlJdGVtRW50aXR5LnNjcmlwdFtcIkludmVudG9yeUl0ZW1Db21wb25lbnRcIl0uc2l6ZSkge1xuICAgICAgICAgICAgICAgIHJ1bm5pbmdJbmRleCArPSBzaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcnVubmluZ0luZGV4ICs9IGludmVudG9yeUl0ZW1FbnRpdHkuc2NyaXB0W1wiSW52ZW50b3J5SXRlbUNvbXBvbmVudFwiXS5zaXplO1xuXG4gICAgICAgICAgICBpbnZlbnRvcnlJdGVtRW50aXR5LnNldExvY2FsUG9zaXRpb24odG9wU2xvdFBvc2l0aW9uLngsIHRvcFNsb3RQb3NpdGlvbi55IC0gKHJ1bm5pbmdJbmRleCAqIHRoaXMuc2xvdEhlaWdodCksIDApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbkludmVudG9yeVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5jbGVhclBhbmVsID0gZnVuY3Rpb24gKCkge1xuICAgIHdoaWxlICh0aGlzLmludmVudG9yeUl0ZW1FbnRpdGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGVudGl0eSA9IHRoaXMuaW52ZW50b3J5SXRlbUVudGl0aWVzLnBvcCgpO1xuICAgICAgICBlbnRpdHkuZGVzdHJveSgpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBJbnZlbnRvcnlEcmFnSWNvbkNvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnSW52ZW50b3J5RHJhZ0ljb25Db21wb25lbnQnKTtcblxuLypJbnZlbnRvcnlEcmFnSWNvbkNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnbGFiZWxFbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0xhYmVsIEVudGl0eScgfSk7XG5JbnZlbnRvcnlEcmFnSWNvbkNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnc2xvdEhlaWdodCcsIHsgdHlwZTogJ251bWJlcicsIHRpdGxlOiAnU2xvdCBIZWlnaHQnLCBkZWZhdWx0OiA0NCB9KTsqL1xuXG5cbkludmVudG9yeURyYWdJY29uQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXG59XG5cbkludmVudG9yeURyYWdJY29uQ29tcG9uZW50LnByb3RvdHlwZS5zZXR1cCA9IGZ1bmN0aW9uIChuYW1lLCBzaXplKSB7XG5cbn1cblxuIiwiZXhwb3J0IGNvbnN0IEludmVudG9yeUVxdWlwcGVkU2xvdENvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnSW52ZW50b3J5RXF1aXBwZWRTbG90Q29tcG9uZW50Jyk7XG5cbkludmVudG9yeUVxdWlwcGVkU2xvdENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnZGVmYXVsdEFzc2V0JywgeyB0eXBlOiAnYXNzZXQnLCB0aXRsZTogJ0RlZmF1bHQgQXNzZXQnIH0pO1xuXG5JbnZlbnRvcnlFcXVpcHBlZFNsb3RDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2ljb25FbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0ljb24gRW50aXR5JyB9KTtcblxuSW52ZW50b3J5RXF1aXBwZWRTbG90Q29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkgeyB9XG5cbkludmVudG9yeUVxdWlwcGVkU2xvdENvbXBvbmVudC5wcm90b3R5cGUuc2V0dXAgPSBmdW5jdGlvbiAoaWNvbkFzc2V0SWQpIHtcbiAgICBjb25zdCBhc3NldCA9IHRoaXMuYXBwLmFzc2V0cy5nZXQoaWNvbkFzc2V0SWQpO1xuICAgIHRoaXMuaWNvbkVudGl0eS5lbGVtZW50LnNwcml0ZUFzc2V0ID0gYXNzZXQ7XG5cbn1cblxuXG5JbnZlbnRvcnlFcXVpcHBlZFNsb3RDb21wb25lbnQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaWNvbkVudGl0eS5lbGVtZW50LnNwcml0ZUFzc2V0ID0gdGhpcy5kZWZhdWx0QXNzZXQ7XG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmNvbnN0IHsgUHVyZU1WQyB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBDYWNvZ2VuR2FtZSB9IGZyb20gJy4vdmlldy9DYWNvZ2VuR2FtZSc7XG5cbmltcG9ydCB7IE5hdmlnYXRpb25Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uQ29tcG9uZW50JztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50JztcbmltcG9ydCB7IEFncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2dhbWVDaGFyYWN0ZXIvYWdncm8vQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnO1xuaW1wb3J0IHsgVG9hc3RNZXNzYWdlQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L3RvYXN0TWVzc2FnZS9Ub2FzdE1lc3NhZ2VDb21wb25lbnQnO1xuaW1wb3J0IHsgU2V0Q2FtZXJhVGFyZ2V0Q29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2dhbWVDaGFyYWN0ZXIvc2V0Q2FtZXJhVGFyZ2V0L1NldENhbWVyYVRhcmdldENvbXBvbmVudCc7XG5pbXBvcnQgeyBQbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudCB9IGZyb20gJy4vdmlldy9wbGF5ZXJDb21iYXRQYW5lbC9QbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudCc7XG5pbXBvcnQgeyBIaXRib3hDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvY29sbGlzaW9uL0hpdGJveENvbXBvbmVudCc7XG5pbXBvcnQgeyBBY3Rpb25QYW5lbENvbXBvbmVudCB9IGZyb20gJy4vdmlldy9hY3Rpb25QYW5lbC9BY3Rpb25QYW5lbENvbXBvbmVudCc7XG5pbXBvcnQgeyBVSVN0b3BQcm9wYWdhdGlvbiB9IGZyb20gJy4vY29tcG9uZW50cy9VSVN0b3BQcm9wYWdhdGlvbic7XG5pbXBvcnQgeyBQcm9qZWN0aWxlQ3JlYXRvckNvbXBvbmVudCB9IGZyb20gJy4vdmlldy9wcm9qZWN0aWxlcy9Qcm9qZWN0aWxlQ3JlYXRvckNvbXBvbmVudCc7XG5pbXBvcnQgeyBQcm9qZWN0aWxlQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L3Byb2plY3RpbGVzL1Byb2plY3RpbGVDb21wb25lbnQnO1xuaW1wb3J0IHsgU3RhbWluYUJhckNvbXBvbmVudCB9IGZyb20gJy4vdmlldy9zdGFtaW5hQmFyL1N0YW1pbmFCYXJDb21wb25lbnQnO1xuaW1wb3J0IHsgQWN0aW9uc1JlbWFpbmluZ1BhbmVsQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2FjdGlvbnNSZW1haW5pbmdQYW5lbC9BY3Rpb25zUmVtYWluaW5nUGFuZWxDb21wb25lbnQnO1xuaW1wb3J0IHsgQWN0aW9uc1JlbWFpbmluZ1BpcENvbXBvbmVudCB9IGZyb20gJy4vdmlldy9hY3Rpb25zUmVtYWluaW5nUGFuZWwvQWN0aW9uc1JlbWFpbmluZ1BpcENvbXBvbmVudCc7XG5pbXBvcnQgeyBGbG9hdGluZ1N0YXR1c0NyZWF0b3JDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvZmxvYXRpbmdTdGF0dXMvRmxvYXRpbmdTdGF0dXNDcmVhdG9yQ29tcG9uZW50JztcbmltcG9ydCB7IFBvcnRhbENvbXBvbmVudCB9IGZyb20gJy4vdmlldy9wb3J0YWwvUG9ydGFsQ29tcG9uZW50JztcbmltcG9ydCB7IERpYWxvZ3VlUGFuZWxDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvZGlhbG9ndWVQYW5lbC9EaWFsb2d1ZVBhbmVsQ29tcG9uZW50JztcbmltcG9ydCB7IERpYWxvZ3VlQ2hvaWNlQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2RpYWxvZ3VlUGFuZWwvRGlhbG9ndWVDaG9pY2VDb21wb25lbnQnO1xuaW1wb3J0IHsgRGVmYXVsdEFuaW1hdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vdmlldy9nYW1lQ2hhcmFjdGVyL2RlZmF1bHRBbmltL0RlZmF1bHRBbmltYXRpb25Db21wb25lbnQnO1xuaW1wb3J0IHsgRGlhbG9ndWVUZXh0Q29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2RpYWxvZ3VlUGFuZWwvRGlhbG9ndWVUZXh0Q29tcG9uZW50JztcbmltcG9ydCB7IEF0dGFja0J1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vdmlldy9hY3Rpb25QYW5lbC9hdHRhY2tCdXR0b24vQXR0YWNrQnV0dG9uQ29tcG9uZW50JztcbmltcG9ydCB7IFVzZUl0ZW1CdXR0b25Db21wb25lbnQgfSBmcm9tICcuL3ZpZXcvYWN0aW9uUGFuZWwvdXNlSXRlbUJ1dHRvbi9Vc2VJdGVtQnV0dG9uQ29tcG9uZW50JztcbmltcG9ydCB7IFZlaGljbGVDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvdmVoaWNsZS9WZWhpY2xlQ29tcG9uZW50JztcbmltcG9ydCB7IFNjcmVlblJlc2l6ZUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9zY3JlZW5SZXNpemUvU2NyZWVuUmVzaXplQ29tcG9uZW50JztcbmltcG9ydCB7IERpYWxvZ3VlU2tpbGxUZXN0Q29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2RpYWxvZ3VlUGFuZWwvRGlhbG9ndWVTa2lsbFRlc3RDb21wb25lbnQnO1xuaW1wb3J0IHsgSW52ZW50b3J5SXRlbUNvbXBvbmVudCB9IGZyb20gJy4vdmlldy9pbnZlbnRvcnlQYW5lbC9JbnZlbnRvcnlJdGVtQ29tcG9uZW50JztcbmltcG9ydCB7IEludmVudG9yeVBhbmVsQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2ludmVudG9yeVBhbmVsL0ludmVudG9yeVBhbmVsQ29tcG9uZW50JztcbmltcG9ydCB7IEludmVudG9yeURyYWdJY29uQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2ludmVudG9yeVBhbmVsL0ludmVudG9yeURyYWdJY29uQ29tcG9uZW50JztcbmltcG9ydCB7IEludmVudG9yeUVxdWlwcGVkU2xvdENvbXBvbmVudCB9IGZyb20gJy4vdmlldy9pbnZlbnRvcnlQYW5lbC9JbnZlbnRvcnlFcXVpcHBlZFNsb3RDb21wb25lbnQnO1xuXG5cbmNsYXNzIE1haW4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBQdXJlTVZDLmRlYnVnID0gdHJ1ZTtcbiAgICAgICAgRmFjYWRlLmdldEluc3RhbmNlID0gR2FtZUZhY2FkZS5nZXRJbnN0YW5jZTtcbiAgICAgICAgY29uc29sZS5sb2coRmFjYWRlKTtcblxuICAgICAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgICAgIHRoaXMuZmFjYWRlLnN0YXJ0dXAodGhpcyk7XG4gICAgfVxufVxuXG5jb25zdCBtYWluID0gbmV3IE1haW4oKTsiXSwic291cmNlUm9vdCI6IiJ9