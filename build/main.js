(()=>{"use strict";var t={382:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(542),o=i(999),r=function(){function t(e){if(this.commandMap={},t.instanceMap[e])throw new Error("controller key for this Multiton key already constructed");this.multitonKey=e,this.logger=n.PureMVC.debug?n.PureMVC.logCommand:n.PureMVC.logNone,this.initializeController()}return t.removeController=function(t){delete this.instanceMap[t]},t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.prototype.registerCommand=function(t,e){this.commandMap[t]||this.view.registerObserver(t,this.executeCommand,this),this.commandMap[t]=e},t.prototype.hasCommand=function(t){return void 0!==this.commandMap[t]},t.prototype.removeCommand=function(t){this.hasCommand(t)&&(this.view.removeObserver(t,this.executeCommand,this),delete this.commandMap[t])},t.prototype.initializeController=function(){this.view=o.View.getInstance(this.multitonKey)},t.prototype.executeCommand=function(e){for(var i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];var o=this.commandMap[e];o&&(this.logger(t._consoleArgs,e,o.name),o.apply(void 0,[this.multitonKey,e].concat(i)))},t._consoleArgs=["","background: #3F234E","background: #6E2994","color: #D4BFE0; background: #8724BD;","background: #6E2994","background: #3F234E"],t.instanceMap={},t}();e.Controller=r},222:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(382),o=i(433),r=i(542),a=i(999),s=function(){function t(e){if(t.instanceMap[e])throw new Error("Facade instance for this Multiton key already constructed!");this.logger=r.PureMVC.debug?r.PureMVC.logNotification:r.PureMVC.logNone,this.initializeNotifier(e),this.initializeFacade()}return t.getInstance=function(e){return e?(t.instanceMap[e]||(t.instanceMap[e]=new t(e)),t.instanceMap[e]):null},t.hasCore=function(t){return void 0!==this.instanceMap[t]},t.removeCore=function(t){this.instanceMap[t]&&(o.Model.removeModel(t),a.View.removeView(t),n.Controller.removeController(t),delete this.instanceMap[t])},t.prototype.initializeFacade=function(){this.initializeModel(),this.initializeController(),this.initializeView()},t.prototype.registerCommand=function(t,e){this.controller.registerCommand(t,e)},t.prototype.removeCommand=function(t){this.controller.removeCommand(t)},t.prototype.hasCommand=function(t){return this.controller.hasCommand(t)},t.prototype.registerProxy=function(t){this.model.registerProxy(t)},t.prototype.retrieveProxy=function(t){return this.model.retrieveProxy(t)},t.prototype.removeProxy=function(t){return this.model?this.model.removeProxy(t):null},t.prototype.hasProxy=function(t){return this.model.hasProxy(t)},t.prototype.registerMediator=function(t){this.view.registerMediator(t)},t.prototype.retrieveMediator=function(t){return this.view.retrieveMediator(t)},t.prototype.removeMediator=function(t){return this.view.removeMediator(t)},t.prototype.sleepMediator=function(t){return this.view.sleepMediator(t)},t.prototype.awakeMediator=function(t){return this.view.awakeMediator(t)},t.prototype.hasMediator=function(t){return this.view.hasMediator(t)},t.prototype.sendNotification=function(e){for(var i,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];this.logger.apply(this,[t._consoleArgs,e].concat(n)),(i=this.view).notifyObservers.apply(i,[e].concat(n))},t.prototype.initializeNotifier=function(t){this.multitonKey=t},t.prototype.initializeController=function(){this.controller||(this.controller=n.Controller.getInstance(this.multitonKey))},t.prototype.initializeModel=function(){this.model||(this.model=o.Model.getInstance(this.multitonKey))},t.prototype.initializeView=function(){this.view||(this.view=a.View.getInstance(this.multitonKey))},t._consoleArgs=["","background: #757130","background: #DED434","color: #2F2E15; background: #FFF325;","background: #DED434","background: #757130"],t.instanceMap={},t}();e.Facade=s},651:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),a=i(542),s=function(t){function e(e,i){var n=t.call(this)||this;return n.logger=a.PureMVC.debug?a.PureMVC.logMediator:a.PureMVC.logNone,n.mediatorName=e||"Mediator",n.viewComponent=i,n.sleeping=!0,n.subscribedNotifications=[],n.notificationSubscriptionChange=null,n}return o(e,t),Object.defineProperty(e.prototype,"notifications",{get:function(){return this.subscribedNotifications},enumerable:!0,configurable:!0}),e.prototype.getMediatorName=function(){return this.mediatorName},e.prototype.setViewComponent=function(t){this.viewComponent=t},e.prototype.getViewComponent=function(){return this.viewComponent},e.prototype.onRegister=function(t){this.notificationSubscriptionChange=t,this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.notificationSubscriptionChange=null,this.logger(e._consoleArgs,this.constructor.name,"remove")},e.prototype.onSleep=function(){this.sleeping=!0,this.logger(e._consoleArgs,this.constructor.name,"sleep")},e.prototype.onAwake=function(){this.sleeping=!1,this.logger(e._consoleArgs,this.constructor.name,"awake")},Object.defineProperty(e.prototype,"isSleeping",{get:function(){return this.sleeping},enumerable:!0,configurable:!0}),e.prototype.subscribeNotification=function(t){this.changeSubscription(t,this.addSubscription)},e.prototype.unsubscribeNotification=function(t){this.changeSubscription(t,this.removeSubscription)},e.prototype.changeSubscription=function(t,e){var i=this,n=this.notifications.slice(),o=!1;t instanceof Array?t.forEach((function(t){o=e.call(i,t)||o})):o=e.call(this,t),o&&this.notificationSubscriptionChange&&this.notificationSubscriptionChange(this,n)},e.prototype.addSubscription=function(t){return-1===this.notifications.indexOf(t)&&(this.notifications.push(t),!0)},e.prototype.removeSubscription=function(t){var e=this.notifications.indexOf(t);return-1!==e&&(this.notifications.splice(e,1),!0)},e._consoleArgs=["","background: #2A3351","background: #364D98","color: #F4F6FE; background: #3656C1;","background: #364D98","background: #2A3351"],e}(r.Notifier);e.Mediator=s},433:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(e){if(this.proxyMap={},t.instanceMap[e])throw new Error("Model instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeModel()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeModel=function(t){delete this.instanceMap[t]},t.prototype.registerProxy=function(t){t.initializeNotifier(this.multitonKey),this.proxyMap[t.getProxyName()]=t,t.onRegister()},t.prototype.retrieveProxy=function(t){return this.proxyMap[t]},t.prototype.hasProxy=function(t){return void 0!==this.proxyMap[t]},t.prototype.removeProxy=function(t){if(this.proxyMap[t]){var e=this.proxyMap[t];return e.onRemove(),delete this.proxyMap[t],e}return null},t.prototype.initializeModel=function(){},t.instanceMap={},t}();e.Model=i},117:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(222),o=function(){function t(){}return t.prototype.initializeNotifier=function(t){this.multitonKey=t,this.facade=this.getFacade()},t.prototype.sendNotification=function(t){for(var e,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];this.facade&&(e=this.facade).sendNotification.apply(e,[t].concat(i))},t.prototype.getFacade=function(){if(null===this.multitonKey)throw new Error("multitonKey for this Notifier not yet initialized!");return n.Facade.getInstance(this.multitonKey)},t}();e.Notifier=o},413:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),a=i(542),s=function(t){function e(e,i){var n=t.call(this)||this;return n.proxyName=e||"Proxy",n.logger=a.PureMVC.debug?a.PureMVC.logProxy:a.PureMVC.logNone,i&&n.setData(i),n}return o(e,t),e.prototype.getProxyName=function(){return this.proxyName},e.prototype.setData=function(t){this.data=t},e.prototype.getData=function(){return this.data},e.prototype.onRegister=function(){this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.logger(e._consoleArgs,this.constructor.name,"remove")},e._consoleArgs=["","background: #295A34","background: #2FAA4A","color: #102415; background: #27D04C;","background: #2FAA4A","background: #295A34"],e}(r.Notifier);e.Proxy=s},542:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.logCommand=function(t,e,i){t[0]="%c %c %c "+e+" =>  "+i+" %c %c ",console.log.apply(console,t)},t.logNotification=function(t,e){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];t[0]="%c %c %c "+e+": args [ "+i+" ] %c %c ",console.log.apply(console,t)},t.logMediator=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logProxy=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logNone=function(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i]},t.debug=!0,t}();e.PureMVC=i},999:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(729),o=function(){function t(e){if(this.mediatorMap={},this.eventEmitter=new n,t.instanceMap[e])throw new Error("View instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeView()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeView=function(t){delete this.instanceMap[t]},t.prototype.removeObserver=function(t,e,i){this.eventEmitter.removeListener(t,e,i)},t.prototype.registerObserver=function(t,e,i){this.eventEmitter.on(t,e,i)},t.prototype.notifyObservers=function(t){for(var e,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];(e=this.eventEmitter).emit.apply(e,[t,t].concat(i))},t.prototype.registerMediator=function(t){this.mediatorMap[t.getMediatorName()]||(t.initializeNotifier(this.multitonKey),this.mediatorMap[t.getMediatorName()]=t,this.registerObservers(t),t.onRegister(this.onMediatorNotificationSubscriptionChange.bind(this)),t.onAwake())},t.prototype.awakeMediator=function(t){var e=this.mediatorMap[t];if(e){if(!e.isSleeping)return e;this.registerObservers(e),e.onAwake()}return e},t.prototype.retrieveMediator=function(t){return this.mediatorMap[t]},t.prototype.removeMediator=function(t){var e=this.mediatorMap[t];return e&&(this.removeObservers(e),delete this.mediatorMap[t],e.onSleep(),e.onRemove()),e},t.prototype.sleepMediator=function(t){var e=this.mediatorMap[t];if(e){if(e.isSleeping)return e;this.removeObservers(e),e.onSleep()}return e},t.prototype.hasMediator=function(t){return void 0!==this.mediatorMap[t]},t.prototype.initializeView=function(){},t.prototype.removeObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var n=0,o=i;n<o.length;n++){var r=o[n];this.removeObserver(r,t.handleNotification,t)}},t.prototype.registerObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var n=0,o=i;n<o.length;n++){var r=o[n];this.registerObserver(r,t.handleNotification,t)}},t.prototype.onMediatorNotificationSubscriptionChange=function(t,e){this.removeObservers(t,e),this.registerObservers(t)},t.instanceMap={},t}();e.View=o},710:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(382);e.Controller=n.Controller;var o=i(222);e.Facade=o.Facade;var r=i(651);e.Mediator=r.Mediator;var a=i(433);e.Model=a.Model;var s=i(117);e.Notifier=s.Notifier;var c=i(413);e.Proxy=c.Proxy;var h=i(542);e.PureMVC=h.PureMVC;var p=i(999);e.View=p.View},729:t=>{var e=Object.prototype.hasOwnProperty,i="~";function n(){}function o(t,e,i){this.fn=t,this.context=e,this.once=i||!1}function r(t,e,n,r,a){if("function"!=typeof n)throw new TypeError("The listener must be a function");var s=new o(n,r||t,a),c=i?i+e:e;return t._events[c]?t._events[c].fn?t._events[c]=[t._events[c],s]:t._events[c].push(s):(t._events[c]=s,t._eventsCount++),t}function a(t,e){0==--t._eventsCount?t._events=new n:delete t._events[e]}function s(){this._events=new n,this._eventsCount=0}Object.create&&(n.prototype=Object.create(null),(new n).__proto__||(i=!1)),s.prototype.eventNames=function(){var t,n,o=[];if(0===this._eventsCount)return o;for(n in t=this._events)e.call(t,n)&&o.push(i?n.slice(1):n);return Object.getOwnPropertySymbols?o.concat(Object.getOwnPropertySymbols(t)):o},s.prototype.listeners=function(t){var e=i?i+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var o=0,r=n.length,a=new Array(r);o<r;o++)a[o]=n[o].fn;return a},s.prototype.listenerCount=function(t){var e=i?i+t:t,n=this._events[e];return n?n.fn?1:n.length:0},s.prototype.emit=function(t,e,n,o,r,a){var s=i?i+t:t;if(!this._events[s])return!1;var c,h,p=this._events[s],u=arguments.length;if(p.fn){switch(p.once&&this.removeListener(t,p.fn,void 0,!0),u){case 1:return p.fn.call(p.context),!0;case 2:return p.fn.call(p.context,e),!0;case 3:return p.fn.call(p.context,e,n),!0;case 4:return p.fn.call(p.context,e,n,o),!0;case 5:return p.fn.call(p.context,e,n,o,r),!0;case 6:return p.fn.call(p.context,e,n,o,r,a),!0}for(h=1,c=new Array(u-1);h<u;h++)c[h-1]=arguments[h];p.fn.apply(p.context,c)}else{var d,l=p.length;for(h=0;h<l;h++)switch(p[h].once&&this.removeListener(t,p[h].fn,void 0,!0),u){case 1:p[h].fn.call(p[h].context);break;case 2:p[h].fn.call(p[h].context,e);break;case 3:p[h].fn.call(p[h].context,e,n);break;case 4:p[h].fn.call(p[h].context,e,n,o);break;default:if(!c)for(d=1,c=new Array(u-1);d<u;d++)c[d-1]=arguments[d];p[h].fn.apply(p[h].context,c)}}return!0},s.prototype.on=function(t,e,i){return r(this,t,e,i,!1)},s.prototype.once=function(t,e,i){return r(this,t,e,i,!0)},s.prototype.removeListener=function(t,e,n,o){var r=i?i+t:t;if(!this._events[r])return this;if(!e)return a(this,r),this;var s=this._events[r];if(s.fn)s.fn!==e||o&&!s.once||n&&s.context!==n||a(this,r);else{for(var c=0,h=[],p=s.length;c<p;c++)(s[c].fn!==e||o&&!s[c].once||n&&s[c].context!==n)&&h.push(s[c]);h.length?this._events[r]=1===h.length?h[0]:h:a(this,r)}return this},s.prototype.removeAllListeners=function(t){var e;return t?(e=i?i+t:t,this._events[e]&&a(this,e)):(this._events=new n,this._eventsCount=0),this},s.prototype.off=s.prototype.removeListener,s.prototype.addListener=s.prototype.on,s.prefixed=i,s.EventEmitter=s,t.exports=s},74:(t,e,i)=>{i.r(e),i.d(e,{GameFacade:()=>ot});var n=i(68);class o{constructor(t,e,i){this.x=t,this.y=e,this.z=i,this.connectedNodes=[],this.occupied=!1}isConnected(t){return void 0!==this.connectedNodes.find((e=>e.x===t.x&&e.y===t.y&&e.z===t.z))}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}equalsPoint(t,e,i){return this.x===t&&this.y===e&&this.z===i}addConnectedNode(t){this.isConnected(t)||this.connectedNodes.push(t)}disconnectedNode(t){const e=this.connectedNodes.findIndex((e=>e.equals(t)));this.connectedNodes.splice(e,1)}}var r=i(434),a=i(917);pc.createScript("GameMapComponent").prototype.initialize=function(){},i(203);const{Mediator:s}=i(710);class c extends s{static get NAME(){return"GameMapMediator"}constructor(t){super(c.NAME),this.subscribeNotification([n.i.CHANGE_SCENE_COMPLETE])}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case n.i.CHANGE_SCENE_COMPLETE:this.facade.retrieveProxy(a.u.NAME).vo,pc.Application.getApplication()}}}var h=i(99);const{GameMediator:p}=i(23),{Facade:u}=i(710);function d(t,e){console.log("Parse map");const i=pc.Application.getApplication().root.findByTag("navigation_floor");let o=[];const r=[];for(const t of i){const e=t.script.NavigationComponent;r.push(e);const i=l(t);e.setGrid(i)}for(const t of r)for(const e of t.connectedComponents){const i=e.script.NavigationComponent;f(t.getGrid(),i.getGrid()),o=o.concat(t.getGrid())}u.getInstance(t).registerProxy(new h.h(o)),u.getInstance(t).registerMediator(new c),u.getInstance(t).sendNotification(n.i.MAP_GRID_CREATED)}function l(t){const e=[],i=t.getLocalPosition(),n=t.getLocalScale(),r=Math.round(n.x),a=Math.round(n.z),s=Math.round(i.x-r/2),c=i.y,h=Math.round(i.z-a/2);for(let t=h;t<h+a;t++)for(let i=s;i<s+r;i++){const n=new o(i,c,t);e.push(n)}for(const t of e)for(const i of e)(i.equalsPoint(t.x-1,t.y,t.z)||i.equalsPoint(t.x+1,t.y,t.z)||i.equalsPoint(t.x,t.y,t.z-1)||i.equalsPoint(t.x,t.y,t.z+1))&&t.addConnectedNode(i);return e}function f(t,e){for(const i of t)for(const t of e)(t.equalsPoint(i.x-1,i.y,i.z)||t.equalsPoint(i.x+1,i.y,i.z)||t.equalsPoint(i.x,i.y,i.z-1)||t.equalsPoint(i.x,i.y,i.z+1))&&i.addConnectedNode(t)}const{Proxy:A}=i(710);class g extends A{get vo(){return this.getData()}static get NAME(){return"WeaponsProxy"}constructor(t){super(g.NAME,t)}getDamage(t,e){console.log(this.vo);for(const i in this.vo)if(Object.hasOwnProperty.call(this.vo,i)){const n=this.vo[i];if(Object.hasOwnProperty.call(n,t))return n[t].damage[Math.min(e-1,6)]}throw new Error("Cannot find weapon:: "+t)}}const{Facade:m}=i(710);function y(t,e){m.getInstance(t).registerProxy(new a.u);const i=pc.Application.getApplication().assets.get(40415631).resource;m.getInstance(t).registerProxy(new g(i))}const{Facade:E}=i(710);function N(t,e,...i){const o=pc.Application.getApplication(),r=i[0];console.log("Changing scene "+r);const a=o.root.findByName("Root"),s=o.scenes.find(r);o.scenes.loadSceneHierarchy(s.url,(function(e,i){e?console.error(e):a&&a.destroy(),E.getInstance(t).sendNotification(n.i.CHANGE_SCENE_COMPLETE,r),E.getInstance(t).sendNotification(n.i.PARSE_GAMEMAP,r)}))}function M(t){let e=t.length,i=void 0,n=-1;for(;0!==e;)n=Math.floor(Math.random()*e),e-=1,i=t[e],t[e]=t[n],t[n]=i;return t}var _=i(958);const{Proxy:v}=i(710),{CombatVO:C}=i(201);class T extends v{get vo(){return this.getData()}static get NAME(){return"CombatProxy"}constructor(t){super(T.NAME,new C(t))}onRegister(){const t=this.vo.participants;this.participantProxies=new Map;for(const e of t){const t=this.facade.retrieveProxy(_.b.NAME+e);this.participantProxies.set(e,t)}}nextTurn(){const t=this.vo.roundInitiative;if(t&&t.length>0){const e=t.shift();if(this.vo.activeParticipant=e,"end_round"!==e){this.facade.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Turn "+e);const t=this.participantProxies.get(e);t.resetCombatTurnState(),t.isNPC?this.facade.sendNotification(n.i.ENEMY_TURN,e):this.facade.sendNotification(n.i.AWAIT_PLAYER_COMBAT_INPUT,e)}else this.facade.sendNotification(n.i.SHOW_TOAST_MESSAGE,"End round"),setTimeout((()=>{this.facade.sendNotification(n.i.NEXT_COMBAT_ROUND)}),3e3)}}nextRound(){console.log("/////////////////"),console.log("//  New round  //"),console.log("/////////////////");const t=[];for(const[e,i]of this.participantProxies.entries()){const n=i.vo;for(let i=0;i<n.initiative;i++)t.push(e)}t.push("end_round");let e=M(t);for(;"end_round"===e[0];)e=M(e);this.vo.roundInitiative=e}get nextTurnCharacterId(){return this.vo.nextTurnCharacterId}get activeParticipant(){return this.vo.activeParticipant}set activeParticipant(t){this.vo.activeParticipant=t}}var P=i(448);const{Facade:O}=i(710);function S(t,e,...i){const o=i[0],r=O.getInstance(t);r.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Start Combat"),r.retrieveProxy(a.u.NAME).updateGameStateType(P.gameplayModeTypes.COMBAT);const s=r.retrieveProxy(_.b.NAME+o),c=["player"].concat(o).concat(s.combatGroup).filter((function(t,e,i){return i.indexOf(t)==e}));for(const t of c)r.sendNotification(n.i.END_MOVEMENT+t);const h=new T(c);r.registerProxy(h),setTimeout((()=>{r.sendNotification(n.i.NEXT_COMBAT_ROUND)}),2e3)}const{Facade:b}=i(710);function x(t,e,...i){const n=b.getInstance(t),o=n.retrieveProxy(a.u.NAME),r=n.retrieveProxy(T.NAME);o.vo.gameplayMode===P.gameplayModeTypes.COMBAT&&r.nextTurn()}const{Facade:I}=i(710);function R(t,e,...i){const o=I.getInstance(t),r=o.retrieveProxy(a.u.NAME),s=o.retrieveProxy(T.NAME);r.vo.gameplayMode===P.gameplayModeTypes.COMBAT&&(s.nextRound(),o.sendNotification(n.i.NEXT_COMBAT_TURN,s.vo.nextTurnCharacterId))}const{Facade:w}=i(710);function D(t,e,...i){setTimeout((()=>{const e=w.getInstance(t),i=e.retrieveProxy(T.NAME);e.sendNotification(n.i.HIDE_WALKABLE_AREA),e.sendNotification(n.i.NEXT_COMBAT_TURN,i.nextTurnCharacterId)}),500)}const{Facade:G}=i(710);function L(t,e,...i){const o=i[0],a=G.getInstance(t),s=(a.retrieveProxy(h.h.NAME),a.retrieveProxy(_.b.NAME+o)),c=s.currentNode,p=a.retrieveProxy(_.b.NAME+"player").currentNode.connectedNodes;if(p.some((t=>t.equals(c))))return void a.sendNotification(n.i.END_COMBAT_TURN);const u=p.filter((t=>!t.occupied));if(u.length>0){let t=u.reduce(((t,e)=>k(c,t)<k(c,e)?t:e));const e=r.q.calculatePath(c,t);if(e&&e.length>0){const i=s.vo;for(;e.length>i.availableMovement;)e.shift();s.currentNode=t,a.sendNotification(n.i.NAVIGATE_ALONG_PATH+o,e)}else a.sendNotification(n.i.END_COMBAT_TURN)}}function k(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)}var V=i(710);function H(t,e,...i){const o=V.Facade.getInstance(t),r=o.retrieveProxy(a.u.NAME),s=i[0];r.currentMode===P.gameplayModeTypes.EXPLORATION?o.sendNotification(n.i.NAVIGATE_TO_NODE+"player",s):r.currentMode===P.gameplayModeTypes.COMBAT&&"player"===o.retrieveProxy(T.NAME).activeParticipant&&o.sendNotification(n.i.COMBAT_NAVIGATE_TO_NODE,"player",s)}const{Facade:B}=i(710);function F(t,e,...i){const n=B.getInstance(t),o=i[0],a=i[1],s=n.retrieveProxy(_.b.NAME+o),c=s.vo,h=r.q.breadthFirstSearch(c.currentNode,c.availableMovement);for(const t of h)t.equals(a)&&z(n,s,a)}function z(t,e,i){const o=e.vo,a=r.q.calculatePath(o.currentNode,i);a&&a.length>0&&(o.availableMovement-=a.length-1,e.currentNode=i,t.sendNotification(n.i.HIDE_WALKABLE_AREA),t.sendNotification(n.i.NAVIGATE_ALONG_PATH+o.id,a))}function U(t,e,...i){const n=i[0],o=pc.Application.getApplication(),r=o.assets.get(40235966),a=o.root.findByName("WorldObjects");for(const t of n){const e=r.resource.instantiate();e.setLocalPosition(t.x,t.y,t.z),a.addChild(e)}}function Y(t,e,...i){const n=pc.Application.getApplication().root.findByTag("walkable_tile");for(const t of n)t.destroy()}function K(t,e,...i){const o=i[0],a=V.Facade.getInstance(t),s=a.retrieveProxy(_.b.NAME+o).vo,c=r.q.breadthFirstSearch(s.currentNode,s.availableMovement);a.sendNotification(n.i.SHOW_WALKABLE_AREA,c)}function W(t,e,...i){const o=V.Facade.getInstance(t),r=i[0],s=i[1];if(o.retrieveProxy(_.b.NAME+r).currentNode=s,o.retrieveProxy(a.u.NAME).currentMode===P.gameplayModeTypes.COMBAT){const t=o.retrieveProxy(T.NAME);t&&("player"===t.activeParticipant?o.sendNotification(n.i.AWAIT_PLAYER_COMBAT_INPUT,r):o.sendNotification(n.i.END_COMBAT_TURN))}}function q(t,e,...i){const o=V.Facade.getInstance(t),r=i[0].script.GameCharacterComponent.characterId,s=o.retrieveProxy(a.u.NAME),c=o.retrieveProxy(_.b.NAME+r),h=o.retrieveProxy(_.b.NAME+"player");if(s.currentMode===P.gameplayModeTypes.EXPLORATION){const t=j(h,c);t&&o.sendNotification(n.i.NAVIGATE_ALONG_PATH+"player",t)}else if(s.currentMode===P.gameplayModeTypes.COMBAT){const t=o.retrieveProxy(T.NAME);if(!t||"player"!==t.activeParticipant)return;if(function(t,e){const i=e.currentNode;return t.currentNode.connectedNodes.some((t=>t.equals(i)))}(h,c))"attack"===s.currentAction&&"attack"===s.currentAction&&o.sendNotification(n.i.RESOLVE_ATTACK,h.id,c.id);else{const t=j(h,c);t&&t.length-1<=h.vo.availableMovement?"attack"===s.currentAction?o.sendNotification(n.i.MOVE_ALONG_PATH_AND_ATTACK,"player",c.id,t):o.sendNotification(n.i.COMBAT_NAVIGATE_TO_NODE,"player",t.shift()):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Cannot reach target")}}}function j(t,e){const i=e.currentNode.connectedNodes.filter((t=>!t.occupied));if(i.length>0){const e=t.currentNode;let n=r.q.calculatePath(e,i[0]);for(let t=1;t<i.length;t++){const o=r.q.calculatePath(e,i[t]);o.length<n.length&&(n=o)}return n}}function X(t,e,...i){const o=V.Facade.getInstance(t),r=i[0],s=o.retrieveProxy(a.u.NAME);s.currentAction===r?s.currentAction="none":s.currentAction=r,o.sendNotification(n.i.DISPLAY_PLAYER_ACTION,s.currentAction)}function Q(t,e,...i){const o=V.Facade.getInstance(t),r=i[0],a=o.retrieveProxy(_.b.NAME+r),s=i[1],c=o.retrieveProxy(_.b.NAME+s);o.sendNotification(n.i.CHARACTER_LOOK_AT+r,c.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+s,a.currentNode);const h=J(a.skill),p=J(a.skill),u=o.retrieveProxy(g.NAME);if(h===p)o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`Attack tied(${h}/${p})`);else if(h>p){const t=$(h,p),e=u.getDamage("sword",t);c.applyDamage(e),o.sendNotification(n.i.DISPLAY_ATTACK+r),c.isDead?o.sendNotification(n.i.DISPLAY_DEATH+s):o.sendNotification(n.i.DISPLAY_HIT+s),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${r} damages ${s} for ${e}`)}else{const t=$(p,h),e=u.getDamage("sword",t);a.applyDamage(e),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${s} damages ${r} for ${e}`),o.sendNotification(n.i.DISPLAY_ATTACK+s),a.isDead?o.sendNotification(n.i.DISPLAY_DEATH+r):o.sendNotification(n.i.DISPLAY_HIT+r)}}function $(t,e){return t-e}function J(t){return t+Z()+Z()}function Z(){return Math.round(6*Math.random())}var tt=i(321);const{Facade:et}=i(710);function it(t,e,...i){const o=et.getInstance(t),r=i[0],a=i[1],s=i[2];o.retrieveProxy(_.b.NAME+r).useMovement(s.length-1);const c=o.retrieveMediator(tt.y.NAME+r);o.sendNotification(n.i.HIDE_WALKABLE_AREA),c.handleNavigateAlongPathWithPromise(s).then((()=>{o.sendNotification(n.i.RESOLVE_ATTACK,r,a)}))}const{Facade:nt}=i(710);class ot extends nt{static getInstance(t){return nt.instanceMap[t]||(nt.instanceMap[t]=new ot(t)),nt.instanceMap[t]}static get KEY(){return"Cacogen"}static get NAME(){return"CacogenFacade"}static get STARTUP(){return ot.NAME+"StartUp"}startup(t){this.sendNotification(ot.STARTUP,t)}sendNotification(t,...e){super.sendNotification(t,...e)}initializeController(){super.initializeController(),this.registerCommand(ot.STARTUP,y),this.registerCommand(n.i.CHANGE_SCENE,N),this.registerCommand(n.i.PARSE_GAMEMAP,d),this.registerCommand(n.i.START_COMBAT,S),this.registerCommand(n.i.NEXT_COMBAT_TURN,x),this.registerCommand(n.i.NEXT_COMBAT_ROUND,R),this.registerCommand(n.i.END_COMBAT_TURN,D),this.registerCommand(n.i.ENEMY_TURN,L),this.registerCommand(n.i.SELECTED_NODE,H),this.registerCommand(n.i.COMBAT_NAVIGATE_TO_NODE,F),this.registerCommand(n.i.SHOW_WALKABLE_AREA,U),this.registerCommand(n.i.HIDE_WALKABLE_AREA,Y),this.registerCommand(n.i.AWAIT_PLAYER_COMBAT_INPUT,K),this.registerCommand(n.i.FINISHED_MOVE,W),this.registerCommand(n.i.SELECT_GAME_CHARACTER,q),this.registerCommand(n.i.SET_PLAYER_ACTION,X),this.registerCommand(n.i.RESOLVE_ATTACK,Q),this.registerCommand(n.i.MOVE_ALONG_PATH_AND_ATTACK,it)}}},68:(t,e,i)=>{i.d(e,{i:()=>n});class n{static get CHANGE_SCENE(){return"CHANGE_SCENE"}static get CHANGE_SCENE_COMPLETE(){return"CHANGE_SCENE_COMPLETE"}static get APP_INITIALISED(){return"APP_INITIALISED"}static get PARSE_GAMEMAP(){return"PARSE_GAMEMAP"}static get MAP_GRID_CREATED(){return"MAP_GRID_CREATED"}static get NAVIGATE_TO_NODE(){return"NAVIGATE_TO_NODE"}static get COMBAT_NAVIGATE_TO_NODE(){return"COMBAT_NAVIGATE_TO_NODE"}static get SET_CAMERA_TARGET(){return"SET_CAMERA_TARGET"}static get INPUT_DRAG_MOUSE(){return"INPUT_DRAG_MOUSE"}static get MOVED_TO_NODE(){return"MOVED_TO_NODE"}static get FINISHED_MOVE(){return"FINISHED_MOVE"}static get START_COMBAT(){return"START_COMBAT"}static get SHOW_TOAST_MESSAGE(){return"SHOW_TOAST_MESSAGE"}static get NEXT_COMBAT_TURN(){return"NEXT_COMBAT_TURN"}static get NEXT_COMBAT_ROUND(){return"NEXT_COMBAT_ROUND"}static get END_COMBAT_TURN(){return"END_COMBAT_TURN"}static get ENEMY_TURN(){return"ENEMY_TURN"}static get SELECTED_NODE(){return"SELECTED_NODE"}static get NAVIGATE_ALONG_PATH(){return"NAVIGATE_ALONG_PATH"}static get SHOW_WALKABLE_AREA(){return"SHOW_WALKABLE_AREA"}static get HIDE_WALKABLE_AREA(){return"HIDE_WALKABLE_AREA"}static get END_MOVEMENT(){return"END_MOVEMENT"}static get AWAIT_PLAYER_COMBAT_INPUT(){return"AWAIT_PLAYER_COMBAT_INPUT"}static get SET_CHARACTER_TO_NODE(){return"SET_CHARACTER_TO_NODE"}static get SELECT_GAME_CHARACTER(){return"SELECT_GAME_CHARACTER"}static get SET_PLAYER_ACTION(){return"SET_PLAYER_ACTION"}static get DISPLAY_PLAYER_ACTION(){return"DISPLAY_PLAYER_ACTION"}static get USE_PLAYER_ACTION(){return"USE_PLAYER_ACTION"}static get RESOLVE_ATTACK(){return"RESOLVE_ATTACK"}static get MOVE_ALONG_PATH_AND_ATTACK(){return"MOVE_ALONG_PATH_AND_ATTACK"}static get UPDATE_STAMINA(){return"UPDATE_STAMINA"}static get DISPLAY_DEATH(){return"DISPLAY_DEATH"}static get DISPLAY_ATTACK(){return"DISPLAY_ATTACK"}static get DISPLAY_HIT(){return"DISPLAY_HIT"}static get CHARACTER_LOOK_AT(){return"CHARACTER_LOOK_AT"}}},201:(t,e,i)=>{i.r(e),i.d(e,{CombatVO:()=>n});class n{constructor(t){this.participants=t,this.roundInitiative=[],this.activeParticipant=void 0}get nextTurnCharacterId(){return this.roundInitiative[0]}}},958:(t,e,i)=>{i.d(e,{b:()=>a});var n=i(68);const{Proxy:o}=i(710),{GameCharacterVO:r}=i(940);class a extends o{get vo(){return this.getData()}static get NAME(){return"GameCharacterProxy_"}constructor(t){super(a.NAME+t.id,new r(t))}resetCombatTurnState(){this.vo.availableMovement=this.vo.maxMovement,this.vo.availableAction=this.vo.maxActionsPerTurn}useMovement(t){this.vo.availableMovement-=t}applyDamage(t){this.vo.currentStamina-=t,this.vo.currentStamina>0?this.facade.sendNotification(n.i.UPDATE_STAMINA+this.id,this.vo.currentStamina,this.vo.maximumStamina):console.log(this.id+" died")}get id(){return this.vo.id}get currentNode(){return this.vo.currentNode}set currentNode(t){this.vo.currentNode&&(this.vo.currentNode.occupied=!1),this.vo.currentNode=t,this.vo.currentNode.occupied=!0}get combatGroup(){return this.vo.combatGroup}get isNPC(){return this.vo.isNPC}get availableActions(){return this.vo.availableAction}get skill(){return this.vo.skill}get currentStamina(){return this.vo.currentStamina}get currentLuck(){return this.vo.currentStamina}get isDead(){return this.vo.currentStamina<=0}}},940:(t,e,i)=>{i.r(e),i.d(e,{GameCharacterVO:()=>n});class n{constructor(t){this.id=t.id,this.isNPC=t.isNPC,this.combatGroup=t.combatGroup||[],this.currentNode=void 0,this.agroArea=void 0,this.initiative=2,this.maxMovement=6,this.maxActionsPerTurn=1,this.availableAction=this.maxActionsPerTurn,this.availableMovement=this.maxMovement,this.skill=t.skill||1,this.maxStamina=t.maxStamina||1,this.currentStamina=this.maxStamina,this.maxLuck=t.maxLuck||1,this.currentLuck=this.maxLuck,this.advancedSkills=t.advancedSkills||{}}}},99:(t,e,i)=>{i.d(e,{h:()=>a});var n=i(434);const{Proxy:o}=i(710),{GameMapVO:r}=i(438);class a extends o{get vo(){return this.getData()}static get NAME(){return"GameMapProxy"}constructor(t){super(a.NAME),this.setData({mapGrid:t})}onRegister(){}findNearestNode(t){const e=this.vo.mapGrid;let i=e[0],o=n.q.getDistSquared(i,t);for(const r of e){const e=n.q.getDistSquared(r,t);e<o&&(o=e,i=r)}return i}}},438:(t,e,i)=>{i.r(e),i.d(e,{GameMapVO:()=>n});class n{constructor(){this.mapGrid=[]}}},434:(t,e,i)=>{i.d(e,{q:()=>o});class n{constructor(){this.data=[]}push(t,e=0){return this.data.push({value:t,priority:e})}pop(){let t=0,e=1/0;for(let i=0;i<this.data.length;i++){let n=this.data[i].priority;Math.min(e,n)===n&&(e=n,t=i)}return this.data.splice(t,1)[0].value}size(){return this.data.length}empty(){return 0===this.data.length}}class o{static breadthFirstSearch(t,e){let i=[];const n=[];i.push(t);const o=new Map;o.set(t,t);let r=0;for(;i.length>0&&r<e;){const t=[];for(const e of i)for(let i=0;i<e.connectedNodes.length;i++){const r=e.connectedNodes[i];r.occupied||o.has(r)||(t.push(r),n.push(r),o.set(r,e))}i=t,r++}return n}static calculatePath(t,e){const i=new n;i.push(t,0);const o=new Map,r=new Map;for(o.set(t,t),r.set(t,0);!i.empty();){const t=i.pop();if(t.equals(e))break;for(let n=0;n<t.connectedNodes.length;n++){const a=t.connectedNodes[n],s=r.get(t)+1;if(!a.occupied&&(!r.has(a)||s<r.get(a))){r.set(a,s);let n=s+this.heuristic(a,e);i.push(a,n),o.set(a,t)}}}let a=e,s=!1;const c=[];for(c.push(a);!a.equals(t)&&!s;)o.has(a)||!a.equals(e)?(a=o.get(a),c.push(a)):s=!0;return s?void 0:c}static getDistSquared(t,e){return(t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y)+(t.z-e.z)*(t.z-e.z)}static heuristic(t,e){return Math.abs(t.x-e.x)+Math.abs(t.y-e.y)+Math.abs(t.z-e.z)}}},917:(t,e,i)=>{i.d(e,{u:()=>r});const{Proxy:n}=i(710),{GameStateVO:o}=i(448);class r extends n{get vo(){return this.getData()}static get NAME(){return"GameStateProxy"}constructor(){super(r.NAME,new o)}updateGameStateType(t){this.vo.gameplayMode=t}get currentMode(){return this.vo.gameplayMode}get currentAction(){return this.vo.selectedAction}set currentAction(t){this.vo.selectedAction=t}}},448:(t,e,i)=>{i.r(e),i.d(e,{gameplayModeTypes:()=>n,GameStateVO:()=>o});const n={EXPLORATION:"EXPLORATION",COMBAT:"COMBAT",DIALOGUE:"DIALOGUE"};class o{constructor(){this.gameplayMode=n.EXPLORATION,this.selectedAction="none"}}},23:(t,e,i)=>{i.r(e),i.d(e,{GameMediator:()=>r});var n=i(68);const{Mediator:o}=i(710);class r extends o{static get NAME(){return"GameMediator"}constructor(){console.log("Register mediator - GameMediator");const t=pc.Application.getApplication();super(r.NAME,t),this.subscribeNotification(n.i.APP_INITIALISED)}handleNotification(t,...e){switch(t){case n.i.APP_INITIALISED:}}}},442:(t,e,i)=>{var n=i(710),o=i(74),r=i(958),a=i(321);const s=pc.createScript("GameCharacterComponent");s.attributes.add("characterId",{type:"string",title:"Character Id"}),s.attributes.add("characterSpeed",{type:"number",title:"Character Speed",default:4}),s.attributes.add("isNPC",{type:"boolean",title:"is NPC",default:!0}),s.attributes.add("statsOverrides",{type:"json",title:"Stats Overrides",schema:[{name:"skill",title:"Skill",type:"number",default:1},{name:"maxStamina",title:"Stamina",type:"number",default:1},{name:"maxLuck",title:"Luck",type:"number",default:1},{name:"maxMovement",title:"Movement",type:"number",default:6}]}),s.attributes.add("advancedSkills",{type:"json",title:"Advanced Skills",schema:[{name:"skillName",title:"Skill Name",type:"string"},{name:"skillValue",title:"Skill Value",type:"string"}],array:!0}),s.prototype.preregisterNotification=function(t){this.preregisteredNotifications||(this.preregisteredNotifications=[]),this.preregisteredNotifications.push(t)},s.prototype.postInitialize=function(){this.movementPath=[],this.facade=n.Facade.getInstance(o.GameFacade.KEY),this.facade.hasMediator(a.y.NAME+this.characterId)&&this.facade.removeMediator(a.y.NAME+this.characterId),this.preregisteredNotifications||(this.preregisteredNotifications=[]);const t=this.statsOverrides,e={id:this.characterId,isNPC:this.isNPC,advancedSkills:this.advancedSkills,...t},i=this.entity.script.CombatGroupComponent;i&&(e.combatGroup=i.combatGroup),this.facade.registerProxy(new r.b(e)),this.facade.registerMediator(new a.y(this.characterId,this.entity,this.preregisteredNotifications)),this.entity.animation.play("idle.glb")},s.prototype.setPath=function(t){console.log("Set the path!!"),this.movementPath&&this.movementPath.length>0&&this.entity.fire("cancelMove"),this.movementPath=t,this.entity.animation.loop=!0,this.entity.animation.play("walk.glb")},s.prototype.stopMovement=function(t){this.movementPath=[],this.entity.setLocalPosition(t.x,t.y,t.z),this.entity.animation.loop=!0,this.entity.animation.play("idle.glb")},s.prototype.update=function(t){this.moveAlongPath(t)},s.prototype.moveAlongPath=function(t){if(this.movementPath.length>0){const e=this.movementPath[this.movementPath.length-1],i=this.entity.getLocalPosition(),n=new pc.Vec3,o=new pc.Vec3(t*this.characterSpeed,t*this.characterSpeed,t*this.characterSpeed),r=new pc.Vec3(e.x,e.y,e.z);if(n.sub2(r,i),n.normalize(),n.mul(o),n.add(i),this.entity.setLocalPosition(n),this.lookAtPoint(e),n.distance(r)<.15){const t=this.movementPath.pop();0===this.movementPath.length&&(this.entity.fire("finishedMove",t),this.entity.animation.loop=!0,this.entity.animation.play("idle.glb")),this.entity.fire("updateCurrentNode",t)}}},s.prototype.lookAtPoint=function(t){const e=this.entity.getLocalPosition(),i=t.x-e.x,n=t.z-e.z,o=180*Math.atan2(i,n)/Math.PI;this.entity.setEulerAngles(0,o,0)},s.prototype.animateDeath=function(){this.entity.animation.loop=!1,this.entity.animation.play("die.glb")},s.prototype.animateHit=function(){this.entity.animation.loop=!1,this.entity.animation.play("hit.glb")},s.prototype.animateAttack=function(){this.entity.animation.loop=!1,this.entity.animation.play("attack.glb")}},321:(t,e,i)=>{i.d(e,{y:()=>c});var n=i(68),o=i(99),r=(i(917),i(442),i(434)),a=i(958);i(448);const{Mediator:s}=i(710);class c extends s{static get NAME(){return"GameCharacterMediator_"}constructor(t,e,i){super(c.NAME+t),this.id=t;let o=[n.i.CHANGE_SCENE_COMPLETE,n.i.NAVIGATE_TO_NODE+this.id,n.i.NAVIGATE_ALONG_PATH+this.id,n.i.SET_CHARACTER_TO_NODE+this.id,n.i.DISPLAY_DEATH+this.id,n.i.DISPLAY_ATTACK+this.id,n.i.DISPLAY_HIT+this.id,n.i.CHARACTER_LOOK_AT+this.id,n.i.START_COMBAT,n.i.MAP_GRID_CREATED];o=o.concat(i),this.subscribeNotification(o),this.viewComponent=e,this.viewComponent.on("updateCurrentNode",this.updateCurrentNode,this),this.viewComponent.on("finishedMove",this.handleFinishedMode,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...e){this.viewComponent&&this.viewComponent.fire(t,this.id,...e);for(const i in this.viewComponent.script)if(Object.hasOwnProperty.call(this.viewComponent.script,i)){const n=this.viewComponent.script[i];"function"==typeof n.handleNotification&&n.handleNotification(t,this.id,...e)}switch(t){case n.i.START_COMBAT:this.handleStartCombat();break;case n.i.MAP_GRID_CREATED:const t=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(a.b.NAME+this.id);i.currentNode||(i.currentNode=t.findNearestNode(this.viewComponent.getLocalPosition()));break;case n.i.NAVIGATE_TO_NODE+this.id:this.handleNavigateToNode(e[0]);break;case n.i.NAVIGATE_ALONG_PATH+this.id:this.handleNavigateAlongPath(e[0]);break;case n.i.SET_CHARACTER_TO_NODE+this.id:this.handleSetCharacterToNode(e[0]);break;case n.i.CHARACTER_LOOK_AT+this.id:const r=e[0];this.viewComponent.script.GameCharacterComponent.lookAtPoint(r);break;case n.i.DISPLAY_DEATH+this.id:this.viewComponent.script.GameCharacterComponent.animateDeath();break;case n.i.DISPLAY_ATTACK+this.id:this.viewComponent.script.GameCharacterComponent.animateAttack();break;case n.i.DISPLAY_HIT+this.id:this.viewComponent.script.GameCharacterComponent.animateHit()}}handleNavigateToNode(t){console.log("NAVIGATING TO NODE");const e=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(a.b.NAME+this.id);i.currentNode||(i.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition()));const n=r.q.calculatePath(i.currentNode,t);n&&n.length>0&&(this.viewComponent.script.GameCharacterComponent.setPath(n),i.currentNode=t)}handleNavigateAlongPath(t){this.viewComponent.script.GameCharacterComponent.setPath(t)}handleNavigateAlongPathWithPromise(t){return this.viewComponent.script.GameCharacterComponent.setPath(t),new Promise(((t,e)=>{this.viewComponent.on("finishedMove",(()=>{t()})),this.viewComponent.on("cancelMove",(()=>{e()}))}))}updateCurrentNode(t){this.facade.sendNotification(n.i.MOVED_TO_NODE+this.id,t)}handleFinishedMode(t){this.facade.sendNotification(n.i.FINISHED_MOVE,this.id,t)}lookForCharacter(t,e){for(const i of this.searchArea)i.equals(e)&&(this.viewComponent.script.GameCharacterComponent.lookAtPoint(e),this.facade.sendNotification(n.i.START_COMBAT,this.viewComponent,[t]))}handleStartCombat(){this.facade.retrieveProxy(a.b.NAME+this.id).vo}handleSetCharacterToNode(t){this.facade.retrieveProxy(a.b.NAME+this.id).currentNode=t,this.viewComponent.script.GameCharacterComponent.stopMovement(t)}}},203:(t,e,i)=>{var n=i(710),o=i(74),r=i(68);i(917);const{Mediator:a}=i(710);class s extends a{static get NAME(){return"InputLayerMediator"}constructor(t){super(s.NAME),this.subscribeNotification([r.i.CHANGE_SCENE_COMPLETE]),this.viewComponent=t,this.viewComponent.on("picker:gameCharacter",this.handlePickerGameCharacter,this),this.viewComponent.on("picker:navigation",this.handlePickerNavigation,this),this.viewComponent.on("scrolling",this.handleScrolling,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case r.i.CHANGE_SCENE_COMPLETE:}}handlePickerGameCharacter(t){this.facade.sendNotification(r.i.SELECT_GAME_CHARACTER,t)}handlePickerNavigation(t){this.facade.sendNotification(r.i.SELECTED_NODE,t)}handleScrolling(t){this.facade.sendNotification(r.i.INPUT_DRAG_MOUSE,t)}}const c=pc.createScript("GameCamera");c.attributes.add("distance",{type:"number",default:100,title:"Distance"}),c.attributes.add("dragMultiplierX",{type:"number",default:.5,title:"Drag Multiplier"}),c.attributes.add("dragMultiplierY",{type:"number",default:.5,title:"Drag Multiplier"}),c.attributes.add("minCameraHeight",{type:"number",default:5,title:"Min Camera Height"}),c.attributes.add("maxCameraHeight",{type:"number",default:100,title:"Max Camera Height"}),c.prototype.initialize=function(){this.facade=n.Facade.getInstance(o.GameFacade.KEY),this.facade.hasMediator(p.NAME)&&this.facade.removeMediator(p.NAME),this.facade.registerMediator(new p(this.entity))},c.prototype.setCameraTarget=function(t){this.cameraTarget=t,this.rotation=this.entity.getEulerAngles().y,this.cameraHeight=this.entity.getLocalPosition().y},c.prototype.handleDrag=function(t){this.rotation+=t.x*this.dragMultiplierX;let e=this.cameraHeight-t.y*this.dragMultiplierY;e=pc.math.clamp(e,this.minCameraHeight,this.maxCameraHeight),this.cameraHeight=e},c.prototype.getTargetCameraPosition=function(t){const e=this.entity.getLocalPosition(),i=Math.sin(this.rotation*Math.PI/180)*this.distance,n=Math.cos(this.rotation*Math.PI/180)*this.distance;return new pc.Vec3(t.x+i,e.y,t.z+n)},c.prototype.update=function(t){if(this.cameraTarget){const t=this.cameraTarget.getLocalPosition(),e=this.getTargetCameraPosition(t),i=this.entity.getLocalPosition(),n=(e.x+9*i.x)/10,o=(this.cameraHeight+9*i.y)/10,r=(e.z+9*i.z)/10;this.entity.setLocalPosition(n,o,r),this.entity.lookAt(t)}};const{Mediator:h}=i(710);class p extends h{static get NAME(){return"GameCameraMediator"}constructor(t){super(p.NAME),this.subscribeNotification([r.i.CHANGE_SCENE_COMPLETE,r.i.INPUT_DRAG_MOUSE,r.i.SET_CAMERA_TARGET]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case r.i.SET_CAMERA_TARGET:this.viewComponent.script.GameCamera.setCameraTarget(e[0]);break;case r.i.INPUT_DRAG_MOUSE:this.viewComponent.script.GameCamera.handleDrag(e[0])}}}const u=pc.createScript("InputLayerComponent");u.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),u.attributes.add("dragTime",{type:"number",title:"Drag Time",default:.4}),u.prototype.initialize=function(){this.facade=n.Facade.getInstance(o.GameFacade.KEY),this.facade.hasMediator(s.NAME)&&this.facade.removeMediator(s.NAME),this.facade.registerMediator(new s(this.entity)),this.ray=new pc.Ray,this.inputQueue=[],this.app.mouse.disableContextMenu(),this.clickDownStart=0,this.isDragging=!1,this.app.on("picker:result",this.handlePickerResult,this),this.app.mouse.on(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.entity.element.on(pc.EVENT_MOUSEDOWN,this.onMouseDown,this),this.app.mouse.on(pc.EVENT_MOUSEUP,this.onMouseUp,this),this.entity.once("destroy",(()=>{this.app.mouse.off(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.app.mouse.off(pc.EVENT_MOUSEUP,this.onMouseUp,this)}))},u.prototype.onMouseDown=function(t){this.isDragging=!0,this.clickDownStart=Date.now(),this.clickStartPoint={x:t.x,y:t.y}},u.prototype.onMouseMove=function(t){if(this.isDragging){const e=new pc.Vec2(this.clickStartPoint.x-t.x,this.clickStartPoint.y-t.y);this.entity.fire("scrolling",e),this.clickStartPoint={x:t.x,y:t.y}}},u.prototype.onMouseUp=function(){this.isDragging=!1,Date.now()-this.clickDownStart<1e3*this.dragTime&&this.clickStartPoint&&this.handleRaycastCollisions(this.clickStartPoint.x,this.clickStartPoint.y)},u.prototype.handleRaycastCollisions=function(t,e){const i=this.cameraEntity,n=this.cameraEntity.camera;n.screenToWorld(t,e,n.farClip,this.ray.direction),this.ray.origin.copy(i.getPosition()),this.ray.direction.sub(this.ray.origin).normalize(),this.app.fire("picker:raycast",this.ray,{x:t,y:e})},u.prototype.handlePickerResult=function(t,e,i){this.inputQueue.push({entity:t,hitPosition:e,screenPosition:i})},u.prototype.update=function(t){this.processInputQueue()},u.prototype.processInputQueue=function(){if(this.inputQueue.length>0){let e=this.inputQueue[0],i=-1;for(const n of this.inputQueue)((t=n.entity).tags.has("gameCharacter")?2:t.tags.has("navigation")?1:-1)>i&&(e=n);e.entity.tags.has("gameCharacter")&&this.pickedGameCharacter(e.entity,e.hitPosition),e.entity.tags.has("navigation")&&this.pickedNavigation(e.entity,e.hitPosition),this.inputQueue=[]}var t},u.prototype.pickedGameCharacter=function(t,e){this.entity.fire("picker:gameCharacter",t)},u.prototype.pickedNavigation=function(t,e){const i=t.script.NavigationComponent.getNearestNode(e);this.entity.fire("picker:navigation",i)}}},e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t=i(74),e=i(68);const{Facade:n}=i(710),{GameFacade:o}=i(74),r=pc.createScript("CacogenGame");r.prototype.initialize=function(){this.facade=n.getInstance(o.KEY),this.facade.sendNotification(e.i.APP_INITIALISED),this.facade.sendNotification(e.i.CHANGE_SCENE,"Map1")},r.prototype.update=function(t){};var a=i(434);const s=pc.createScript("NavigationComponent");s.attributes.add("connectedComponents",{type:"entity",array:!0,title:"Connected Components"}),s.prototype.initialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,.05,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.findByName("Plane").enabled=!1},s.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity,i,e)},s.prototype.setGrid=function(t){this.nodeGrid=t},s.prototype.getGrid=function(){return this.nodeGrid},s.prototype.getNearestNode=function(t){let e=this.nodeGrid[0],i=a.q.getDistSquared(e,t);for(const n of this.nodeGrid){const o=a.q.getDistSquared(n,t);o<i&&(i=o,e=n)}return e},i(442);var c=i(710),h=i(958),p=i(99),u=i(917),d=i(448);const l=pc.createScript("AgroGameCharacterComponent");l.attributes.add("sightRange",{type:"number",title:"Sight Range",default:5}),l.prototype.initialize=function(){this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MAP_GRID_CREATED),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MOVED_TO_NODE+"player"),this.entity.on(e.i.MAP_GRID_CREATED,this.handleMapGridCreated,this),this.entity.on(e.i.MOVED_TO_NODE+"player",this.handleMovedToNode,this)},l.prototype.handleMapGridCreated=function(e,...i){const n=c.Facade.getInstance(t.GameFacade.KEY),o=n.retrieveProxy(h.b.NAME+e),r=o.vo;if(!r.currentNode){const t=n.retrieveProxy(p.h.NAME);o.currentNode=t.findNearestNode(this.entity.getLocalPosition()),r.agroArea=a.q.breadthFirstSearch(r.currentNode,this.sightRange)}},l.prototype.handleMovedToNode=function(i,n){const o=c.Facade.getInstance(t.GameFacade.KEY),r=o.retrieveProxy(h.b.NAME+i).vo;if(o.retrieveProxy(u.u.NAME).vo.gameplayMode===d.gameplayModeTypes.EXPLORATION)for(const t of r.agroArea)t.equals(n)&&(this.entity.script.GameCharacterComponent.lookAtPoint(n),o.sendNotification(e.i.SET_CHARACTER_TO_NODE+"player",n),o.sendNotification(e.i.START_COMBAT,i))};const{Mediator:f}=i(710);class A extends f{static get NAME(){return"ToastMessageMediator"}constructor(t){super(A.NAME),this.subscribeNotification([e.i.SHOW_TOAST_MESSAGE]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SHOW_TOAST_MESSAGE:this.viewComponent.script.ToastMessageComponent.addMessage(i[0])}}}const g=pc.createScript("ToastMessageComponent");g.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),g.attributes.add("messageTime",{type:"number",default:5,title:"Message Time"}),g.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(A.NAME)&&this.facade.removeMediator(A.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new A(this.entity))},g.prototype.addMessage=function(t){0===this.messageQueue.length?(this.messageQueue.push(t),this.showNextMessage()):this.messageQueue.push(t)},g.prototype.showNextMessage=function(){if(this.messageQueue.length>0){const t=this.messageQueue[0];this.labelEntity.element.text=t,setTimeout((()=>{this.messageQueue.shift(),this.showNextMessage()}),1e3*this.messageTime)}else this.labelEntity.element.text=""},pc.createScript("SetCameraTargetComponent").prototype.postInitialize=function(){c.Facade.getInstance(t.GameFacade.KEY).sendNotification(e.i.SET_CAMERA_TARGET,this.entity)},i(203);const{Mediator:m}=i(710);class y extends m{static get NAME(){return"PlayerCombatPanelMediator"}constructor(t){super(y.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.AWAIT_PLAYER_COMBAT_INPUT,e.i.END_COMBAT_TURN]),this.viewComponent=t,this.viewComponent.on("click:endTurn",this.handleEndTurn,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:this.viewComponent.enabled=!1;break;case e.i.AWAIT_PLAYER_COMBAT_INPUT:this.viewComponent.enabled=!0;break;case e.i.END_COMBAT_TURN:this.viewComponent.enabled=!1}}handleEndTurn(t){this.sendNotification(e.i.END_COMBAT_TURN)}}const E=pc.createScript("PlayerCombatPanelComponent");E.attributes.add("endTurnButton",{type:"entity",title:"End Turn button"}),E.prototype.initialize=function(){},E.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(y.NAME)&&this.facade.removeMediator(y.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new y(this.entity)),this.endTurnButton.element.on("click",this.clickEndTurn,this)},E.prototype.clickEndTurn=function(t){this.entity.fire("click:endTurn")};const N=pc.createScript("CombatGroupComponent");N.attributes.add("combatGroup",{type:"string",title:"Combat Group",array:!0}),N.prototype.initialize=function(){};const M=pc.createScript("HitboxComponent");M.prototype.initialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,t.y/2,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.model.enabled=!1},M.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity.parent,i,e)},M.prototype.update=function(t){this.aabb.center.copy(this.entity.getPosition())};const{Mediator:_}=i(710);class v extends _{static get NAME(){return"ActionPanelMediator"}constructor(t){super(v.NAME),this.subscribeNotification([e.i.SET_PLAYER_ACTION,e.i.DISPLAY_PLAYER_ACTION,e.i.USE_PLAYER_ACTION]),this.viewComponent=t,this.viewComponent.on("click:actionButton",this.handleClickActionButton,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.DISPLAY_PLAYER_ACTION:const t=i[0];this.viewComponent.script.ActionPanelComponent.selectAction(t);break;case e.i.USE_PLAYER_ACTION:}}handleClickActionButton(t){this.facade.sendNotification(e.i.SET_PLAYER_ACTION,t)}}const C=pc.createScript("ActionButtonComponent");C.attributes.add("action",{type:"string",title:"Action"}),C.attributes.add("highlightEntity",{type:"entity",title:"Highlight Entity"}),C.attributes.add("iconEntity",{type:"entity",title:"Icon Entity"}),C.attributes.add("iconAsset",{type:"asset",title:"Icon Asset"}),C.prototype.initialize=function(){this.highlightEntity.enabled=!1,this.entity.on("select:action",this.handleChangeAction,this),this.entity.element.on("click",this.handleClick,this)},C.prototype.handleClick=function(t){this.entity.parent.fire("click:actionButton",this.action)},C.prototype.handleChangeAction=function(t){this.highlightEntity.enabled=this.action===t};const T=pc.createScript("ActionPanelComponent");T.attributes.add("actionButtons",{type:"entity",title:"Action Buttons",array:!0}),T.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(v.NAME)&&this.facade.removeMediator(v.NAME),this.facade.registerMediator(new v(this.entity))},T.prototype.selectAction=function(t){for(const e of this.actionButtons)e.fire("select:action",t)},pc.createScript("UIStopPropagation").prototype.initialize=function(){this.entity.element.on(pc.EVENT_MOUSEDOWN,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_MOUSEDOWN,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHSTART,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHMOVE,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHEND,(t=>{t.stopPropagation()}))};const{Facade:P}=i(710),{PureMVC:O}=i(710);new class{constructor(){console.log("Main start"),O.debug=!0,P.getInstance=t.GameFacade.getInstance,console.log(P),this.facade=P.getInstance(t.GameFacade.KEY),this.facade.startup(this)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,