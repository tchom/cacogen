(()=>{"use strict";var t={382:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(542),o=i(999),r=function(){function t(e){if(this.commandMap={},t.instanceMap[e])throw new Error("controller key for this Multiton key already constructed");this.multitonKey=e,this.logger=n.PureMVC.debug?n.PureMVC.logCommand:n.PureMVC.logNone,this.initializeController()}return t.removeController=function(t){delete this.instanceMap[t]},t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.prototype.registerCommand=function(t,e){this.commandMap[t]||this.view.registerObserver(t,this.executeCommand,this),this.commandMap[t]=e},t.prototype.hasCommand=function(t){return void 0!==this.commandMap[t]},t.prototype.removeCommand=function(t){this.hasCommand(t)&&(this.view.removeObserver(t,this.executeCommand,this),delete this.commandMap[t])},t.prototype.initializeController=function(){this.view=o.View.getInstance(this.multitonKey)},t.prototype.executeCommand=function(e){for(var i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];var o=this.commandMap[e];o&&(this.logger(t._consoleArgs,e,o.name),o.apply(void 0,[this.multitonKey,e].concat(i)))},t._consoleArgs=["","background: #3F234E","background: #6E2994","color: #D4BFE0; background: #8724BD;","background: #6E2994","background: #3F234E"],t.instanceMap={},t}();e.Controller=r},222:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(382),o=i(433),r=i(542),a=i(999),s=function(){function t(e){if(t.instanceMap[e])throw new Error("Facade instance for this Multiton key already constructed!");this.logger=r.PureMVC.debug?r.PureMVC.logNotification:r.PureMVC.logNone,this.initializeNotifier(e),this.initializeFacade()}return t.getInstance=function(e){return e?(t.instanceMap[e]||(t.instanceMap[e]=new t(e)),t.instanceMap[e]):null},t.hasCore=function(t){return void 0!==this.instanceMap[t]},t.removeCore=function(t){this.instanceMap[t]&&(o.Model.removeModel(t),a.View.removeView(t),n.Controller.removeController(t),delete this.instanceMap[t])},t.prototype.initializeFacade=function(){this.initializeModel(),this.initializeController(),this.initializeView()},t.prototype.registerCommand=function(t,e){this.controller.registerCommand(t,e)},t.prototype.removeCommand=function(t){this.controller.removeCommand(t)},t.prototype.hasCommand=function(t){return this.controller.hasCommand(t)},t.prototype.registerProxy=function(t){this.model.registerProxy(t)},t.prototype.retrieveProxy=function(t){return this.model.retrieveProxy(t)},t.prototype.removeProxy=function(t){return this.model?this.model.removeProxy(t):null},t.prototype.hasProxy=function(t){return this.model.hasProxy(t)},t.prototype.registerMediator=function(t){this.view.registerMediator(t)},t.prototype.retrieveMediator=function(t){return this.view.retrieveMediator(t)},t.prototype.removeMediator=function(t){return this.view.removeMediator(t)},t.prototype.sleepMediator=function(t){return this.view.sleepMediator(t)},t.prototype.awakeMediator=function(t){return this.view.awakeMediator(t)},t.prototype.hasMediator=function(t){return this.view.hasMediator(t)},t.prototype.sendNotification=function(e){for(var i,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];this.logger.apply(this,[t._consoleArgs,e].concat(n)),(i=this.view).notifyObservers.apply(i,[e].concat(n))},t.prototype.initializeNotifier=function(t){this.multitonKey=t},t.prototype.initializeController=function(){this.controller||(this.controller=n.Controller.getInstance(this.multitonKey))},t.prototype.initializeModel=function(){this.model||(this.model=o.Model.getInstance(this.multitonKey))},t.prototype.initializeView=function(){this.view||(this.view=a.View.getInstance(this.multitonKey))},t._consoleArgs=["","background: #757130","background: #DED434","color: #2F2E15; background: #FFF325;","background: #DED434","background: #757130"],t.instanceMap={},t}();e.Facade=s},651:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),a=i(542),s=function(t){function e(e,i){var n=t.call(this)||this;return n.logger=a.PureMVC.debug?a.PureMVC.logMediator:a.PureMVC.logNone,n.mediatorName=e||"Mediator",n.viewComponent=i,n.sleeping=!0,n.subscribedNotifications=[],n.notificationSubscriptionChange=null,n}return o(e,t),Object.defineProperty(e.prototype,"notifications",{get:function(){return this.subscribedNotifications},enumerable:!0,configurable:!0}),e.prototype.getMediatorName=function(){return this.mediatorName},e.prototype.setViewComponent=function(t){this.viewComponent=t},e.prototype.getViewComponent=function(){return this.viewComponent},e.prototype.onRegister=function(t){this.notificationSubscriptionChange=t,this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.notificationSubscriptionChange=null,this.logger(e._consoleArgs,this.constructor.name,"remove")},e.prototype.onSleep=function(){this.sleeping=!0,this.logger(e._consoleArgs,this.constructor.name,"sleep")},e.prototype.onAwake=function(){this.sleeping=!1,this.logger(e._consoleArgs,this.constructor.name,"awake")},Object.defineProperty(e.prototype,"isSleeping",{get:function(){return this.sleeping},enumerable:!0,configurable:!0}),e.prototype.subscribeNotification=function(t){this.changeSubscription(t,this.addSubscription)},e.prototype.unsubscribeNotification=function(t){this.changeSubscription(t,this.removeSubscription)},e.prototype.changeSubscription=function(t,e){var i=this,n=this.notifications.slice(),o=!1;t instanceof Array?t.forEach((function(t){o=e.call(i,t)||o})):o=e.call(this,t),o&&this.notificationSubscriptionChange&&this.notificationSubscriptionChange(this,n)},e.prototype.addSubscription=function(t){return-1===this.notifications.indexOf(t)&&(this.notifications.push(t),!0)},e.prototype.removeSubscription=function(t){var e=this.notifications.indexOf(t);return-1!==e&&(this.notifications.splice(e,1),!0)},e._consoleArgs=["","background: #2A3351","background: #364D98","color: #F4F6FE; background: #3656C1;","background: #364D98","background: #2A3351"],e}(r.Notifier);e.Mediator=s},433:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(e){if(this.proxyMap={},t.instanceMap[e])throw new Error("Model instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeModel()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeModel=function(t){delete this.instanceMap[t]},t.prototype.registerProxy=function(t){t.initializeNotifier(this.multitonKey),this.proxyMap[t.getProxyName()]=t,t.onRegister()},t.prototype.retrieveProxy=function(t){return this.proxyMap[t]},t.prototype.hasProxy=function(t){return void 0!==this.proxyMap[t]},t.prototype.removeProxy=function(t){if(this.proxyMap[t]){var e=this.proxyMap[t];return e.onRemove(),delete this.proxyMap[t],e}return null},t.prototype.initializeModel=function(){},t.instanceMap={},t}();e.Model=i},117:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(222),o=function(){function t(){}return t.prototype.initializeNotifier=function(t){this.multitonKey=t,this.facade=this.getFacade()},t.prototype.sendNotification=function(t){for(var e,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];this.facade&&(e=this.facade).sendNotification.apply(e,[t].concat(i))},t.prototype.getFacade=function(){if(null===this.multitonKey)throw new Error("multitonKey for this Notifier not yet initialized!");return n.Facade.getInstance(this.multitonKey)},t}();e.Notifier=o},413:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),a=i(542),s=function(t){function e(e,i){var n=t.call(this)||this;return n.proxyName=e||"Proxy",n.logger=a.PureMVC.debug?a.PureMVC.logProxy:a.PureMVC.logNone,i&&n.setData(i),n}return o(e,t),e.prototype.getProxyName=function(){return this.proxyName},e.prototype.setData=function(t){this.data=t},e.prototype.getData=function(){return this.data},e.prototype.onRegister=function(){this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.logger(e._consoleArgs,this.constructor.name,"remove")},e._consoleArgs=["","background: #295A34","background: #2FAA4A","color: #102415; background: #27D04C;","background: #2FAA4A","background: #295A34"],e}(r.Notifier);e.Proxy=s},542:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.logCommand=function(t,e,i){t[0]="%c %c %c "+e+" =>  "+i+" %c %c ",console.log.apply(console,t)},t.logNotification=function(t,e){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];t[0]="%c %c %c "+e+": args [ "+i+" ] %c %c ",console.log.apply(console,t)},t.logMediator=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logProxy=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logNone=function(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i]},t.debug=!0,t}();e.PureMVC=i},999:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(729),o=function(){function t(e){if(this.mediatorMap={},this.eventEmitter=new n,t.instanceMap[e])throw new Error("View instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeView()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeView=function(t){delete this.instanceMap[t]},t.prototype.removeObserver=function(t,e,i){this.eventEmitter.removeListener(t,e,i)},t.prototype.registerObserver=function(t,e,i){this.eventEmitter.on(t,e,i)},t.prototype.notifyObservers=function(t){for(var e,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];(e=this.eventEmitter).emit.apply(e,[t,t].concat(i))},t.prototype.registerMediator=function(t){this.mediatorMap[t.getMediatorName()]||(t.initializeNotifier(this.multitonKey),this.mediatorMap[t.getMediatorName()]=t,this.registerObservers(t),t.onRegister(this.onMediatorNotificationSubscriptionChange.bind(this)),t.onAwake())},t.prototype.awakeMediator=function(t){var e=this.mediatorMap[t];if(e){if(!e.isSleeping)return e;this.registerObservers(e),e.onAwake()}return e},t.prototype.retrieveMediator=function(t){return this.mediatorMap[t]},t.prototype.removeMediator=function(t){var e=this.mediatorMap[t];return e&&(this.removeObservers(e),delete this.mediatorMap[t],e.onSleep(),e.onRemove()),e},t.prototype.sleepMediator=function(t){var e=this.mediatorMap[t];if(e){if(e.isSleeping)return e;this.removeObservers(e),e.onSleep()}return e},t.prototype.hasMediator=function(t){return void 0!==this.mediatorMap[t]},t.prototype.initializeView=function(){},t.prototype.removeObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var n=0,o=i;n<o.length;n++){var r=o[n];this.removeObserver(r,t.handleNotification,t)}},t.prototype.registerObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var n=0,o=i;n<o.length;n++){var r=o[n];this.registerObserver(r,t.handleNotification,t)}},t.prototype.onMediatorNotificationSubscriptionChange=function(t,e){this.removeObservers(t,e),this.registerObservers(t)},t.instanceMap={},t}();e.View=o},710:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(382);e.Controller=n.Controller;var o=i(222);e.Facade=o.Facade;var r=i(651);e.Mediator=r.Mediator;var a=i(433);e.Model=a.Model;var s=i(117);e.Notifier=s.Notifier;var c=i(413);e.Proxy=c.Proxy;var h=i(542);e.PureMVC=h.PureMVC;var d=i(999);e.View=d.View},729:t=>{var e=Object.prototype.hasOwnProperty,i="~";function n(){}function o(t,e,i){this.fn=t,this.context=e,this.once=i||!1}function r(t,e,n,r,a){if("function"!=typeof n)throw new TypeError("The listener must be a function");var s=new o(n,r||t,a),c=i?i+e:e;return t._events[c]?t._events[c].fn?t._events[c]=[t._events[c],s]:t._events[c].push(s):(t._events[c]=s,t._eventsCount++),t}function a(t,e){0==--t._eventsCount?t._events=new n:delete t._events[e]}function s(){this._events=new n,this._eventsCount=0}Object.create&&(n.prototype=Object.create(null),(new n).__proto__||(i=!1)),s.prototype.eventNames=function(){var t,n,o=[];if(0===this._eventsCount)return o;for(n in t=this._events)e.call(t,n)&&o.push(i?n.slice(1):n);return Object.getOwnPropertySymbols?o.concat(Object.getOwnPropertySymbols(t)):o},s.prototype.listeners=function(t){var e=i?i+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var o=0,r=n.length,a=new Array(r);o<r;o++)a[o]=n[o].fn;return a},s.prototype.listenerCount=function(t){var e=i?i+t:t,n=this._events[e];return n?n.fn?1:n.length:0},s.prototype.emit=function(t,e,n,o,r,a){var s=i?i+t:t;if(!this._events[s])return!1;var c,h,d=this._events[s],l=arguments.length;if(d.fn){switch(d.once&&this.removeListener(t,d.fn,void 0,!0),l){case 1:return d.fn.call(d.context),!0;case 2:return d.fn.call(d.context,e),!0;case 3:return d.fn.call(d.context,e,n),!0;case 4:return d.fn.call(d.context,e,n,o),!0;case 5:return d.fn.call(d.context,e,n,o,r),!0;case 6:return d.fn.call(d.context,e,n,o,r,a),!0}for(h=1,c=new Array(l-1);h<l;h++)c[h-1]=arguments[h];d.fn.apply(d.context,c)}else{var p,u=d.length;for(h=0;h<u;h++)switch(d[h].once&&this.removeListener(t,d[h].fn,void 0,!0),l){case 1:d[h].fn.call(d[h].context);break;case 2:d[h].fn.call(d[h].context,e);break;case 3:d[h].fn.call(d[h].context,e,n);break;case 4:d[h].fn.call(d[h].context,e,n,o);break;default:if(!c)for(p=1,c=new Array(l-1);p<l;p++)c[p-1]=arguments[p];d[h].fn.apply(d[h].context,c)}}return!0},s.prototype.on=function(t,e,i){return r(this,t,e,i,!1)},s.prototype.once=function(t,e,i){return r(this,t,e,i,!0)},s.prototype.removeListener=function(t,e,n,o){var r=i?i+t:t;if(!this._events[r])return this;if(!e)return a(this,r),this;var s=this._events[r];if(s.fn)s.fn!==e||o&&!s.once||n&&s.context!==n||a(this,r);else{for(var c=0,h=[],d=s.length;c<d;c++)(s[c].fn!==e||o&&!s[c].once||n&&s[c].context!==n)&&h.push(s[c]);h.length?this._events[r]=1===h.length?h[0]:h:a(this,r)}return this},s.prototype.removeAllListeners=function(t){var e;return t?(e=i?i+t:t,this._events[e]&&a(this,e)):(this._events=new n,this._eventsCount=0),this},s.prototype.off=s.prototype.removeListener,s.prototype.addListener=s.prototype.on,s.prefixed=i,s.EventEmitter=s,t.exports=s},853:(t,e,i)=>{i.r(e),i.d(e,{GameFacade:()=>Ne});var n=i(210);class o{constructor(t,e,i){this.x=t,this.y=e,this.z=i,this.connectedNodes=[],this.occupied=!1}isConnected(t){return this.connectedNodes.some((e=>e.x===t.x&&e.y===t.y&&e.z===t.z))}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}equalsPoint(t,e,i){return this.x===t&&this.y===e&&this.z===i}addConnectedNode(t){this.isConnected(t)||this.connectedNodes.push(t)}disconnectedNode(t){const e=this.connectedNodes.findIndex((e=>e.equals(t)));this.connectedNodes.splice(e,1)}}var r=i(969),a=i(434);const{Facade:s}=i(710);function c(t,e,...i){const c=s.getInstance(t),g=pc.Application.getApplication(),A=function(t){const e=t.root.findByTag("navigation_floor");let i=[];const n=[];for(const t of e){const e=t.script.NavigationComponent;n.push(e);const i=l(t);e.setGrid(i)}for(const t of n)for(const e of t.connectedComponents){const n=e.script.NavigationComponent;p(t.getGrid(),n.getGrid()),i=i.concat(t.getGrid())}return i}(g),f=function(t,e){const i=[],n=t.root.findByTag("wall");for(const t of n){const n=h(t);i.push(n),d(t,e),t.destroy()}return i}(g,A),y=function(t,e){let i=[];const n=t.root.findByTag("cover");for(const t of n)i=i.concat(u(t,e)),t.destroy();return i}(g,A),m=function(t){const e=new Map,i=t.root.findByTag("portal");for(const t of i){const i=t.script.PortalComponent,n=i.portalId,o={portalId:n,destinationScene:i.destinationScene,destinationPortal:i.destinationPortal,standingPoint:i.standingPoint.getPosition(),hitboxPoint:i.hitbox.getPosition()};e.set(n,o)}return e}(g),N=function(t){const e=[];for(const i of t)E(i,t)&&e.push(new o(i.x,i.y,i.z));for(const i of e)for(const n of e)if(!i.equals(n)||!n.isConnected(i)){const e=a.q.calculateBresenhamLine(i.x,i.z,n.x,n.z);a.q.checkValidLine(e,t)&&(i.addConnectedNode(n),n.addConnectedNode(i))}return e}(A);c.hasProxy(r.h.NAME)&&c.removeProxy(r.h.NAME),c.registerProxy(new r.h(A,f,y,m,N)),c.sendNotification(n.i.MAP_GRID_CREATED)}function h(t){const e=t.getLocalScale(),i=new pc.Vec3(e.x/2,e.y/2,e.z/2);return new pc.BoundingBox(t.getPosition(),i)}function d(t,e){const i=t.getPosition(),n=t.getLocalScale(),o=Math.round(i.y-.5*n.y),r=Math.round(i.x-.5*n.x),a=Math.round(i.z-.5*n.z);for(let t=r;t<r+n.x;t++)for(let i=a;i<a+n.z;i++){const n=e.findIndex((e=>e.equalsPoint(t,o,i)));if(n>-1){const t=e.splice(n,1);for(const e of t)for(const t of e.connectedNodes)t.disconnectedNode(e)}}}function l(t){const e=[],i=t.getLocalPosition(),n=t.getLocalScale(),r=Math.round(n.x),a=Math.round(n.z),s=Math.round(i.x-r/2),c=i.y,h=Math.round(i.z-a/2);for(let t=h;t<h+a;t++)for(let i=s;i<s+r;i++){const n=new o(i,c,t);e.push(n)}for(const t of e)for(const i of e)(i.equalsPoint(t.x-1,t.y,t.z)||i.equalsPoint(t.x+1,t.y,t.z)||i.equalsPoint(t.x,t.y,t.z-1)||i.equalsPoint(t.x,t.y,t.z+1))&&t.addConnectedNode(i);return e}function p(t,e){for(const i of t)for(const t of e)(t.equalsPoint(i.x-1,i.y,i.z)||t.equalsPoint(i.x+1,i.y,i.z)||t.equalsPoint(i.x,i.y,i.z-1)||t.equalsPoint(i.x,i.y,i.z+1))&&i.addConnectedNode(t)}function u(t,e){const i=[],n=t.getPosition(),o=t.getLocalScale(),r=Math.round(n.y-.5*o.y),a=Math.round(n.x-.5*o.x),s=Math.round(n.z-.5*o.z);for(let t=a;t<a+o.x;t++)for(let n=s;n<s+o.z;n++){const o=new pc.Vec3(t,r,n);i.push(o);const a=e.findIndex((e=>e.equalsPoint(t,r,n)));if(a>-1){const t=e.splice(a,1);for(const e of t)for(const t of e.connectedNodes)t.disconnectedNode(e)}}return i}function E(t,e){const i=new pc.Vec3(t.x-1,t.y,t.z-1),n=new pc.Vec3(t.x,t.y,t.z-1),o=new pc.Vec3(t.x+1,t.y,t.z-1),r=new pc.Vec3(t.x+1,t.y,t.z),a=new pc.Vec3(t.x+1,t.y,t.z+1),s=new pc.Vec3(t.x,t.y,t.z+1),c=new pc.Vec3(t.x-1,t.y,t.z+1),h=new pc.Vec3(t.x-1,t.y,t.z);return!((e.some((t=>t.equals(i)))||!t.connectedNodes.some((t=>t.equals(n)))||!t.connectedNodes.some((t=>t.equals(h))))&&(e.some((t=>t.equals(o)))||!t.connectedNodes.some((t=>t.equals(n)))||!t.connectedNodes.some((t=>t.equals(r))))&&(e.some((t=>t.equals(a)))||!t.connectedNodes.some((t=>t.equals(s)))||!t.connectedNodes.some((t=>t.equals(r))))&&(e.some((t=>t.equals(c)))||!t.connectedNodes.some((t=>t.equals(s)))||!t.connectedNodes.some((t=>t.equals(h)))))}var g=i(917);const{Proxy:A}=i(710);class f extends A{get vo(){return this.getData()}static get NAME(){return"WeaponsProxy"}constructor(t){super(f.NAME,t)}getDamage(t,e){for(const i in this.vo)if(Object.hasOwnProperty.call(this.vo,i)){const n=this.vo[i];if(Object.hasOwnProperty.call(n,t))return n[t].damage[Math.min(e-1,6)]}throw new Error("Cannot find weapon:: "+t)}getWeaponCategory(t){for(const e in this.vo)if(Object.hasOwnProperty.call(this.vo,e)){const i=this.vo[e];if(Object.hasOwnProperty.call(i,t))return e}throw new Error("Cannot category for weapon:: "+t)}}const{Proxy:y}=i(710),{StoryVO:m}=i(553);class N extends y{get vo(){return this.getData()}static get NAME(){return"StoryProxy"}constructor(){const t=pc.Application.getApplication(),e=t.assets.get(40529920).resource.trees,i=new Map;for(const n in e)if(Object.hasOwnProperty.call(e,n)){const o=e[n],r=t.assets.get(o).resource;i.set(n,r)}super(N.NAME,i),this.currentTree=void 0,this.currentNode=void 0,this.currentStepIndex=0,this.currentConditions=[]}getTree(t){return this.vo.has(t)?this.vo.get(t):void 0}getNode(t,e){const i=t.nodes;return Object.hasOwnProperty.call(i,e)?i[e]:void 0}getStep(t,e){const i=t.steps;return e<i.length?i[e]:void 0}goToNode(t){this.currentNode=t,this.currentStepIndex=0}startDialogueTree(t){this.currentTree=t,this.currentNode="entry",this.currentStepIndex=0;const e=this.getTree(this.currentTree);if(!e)throw Error(`Cannot start dialogue: Tree ${this.currentTree} not found`);if(!this.getNode(e,this.currentNode))throw Error('Cannot start dialogue: no "entry" node defined on '+t);return e}getCurrentNodeStep(){const t=this.getTree(this.currentTree),e=this.getNode(t,this.currentNode),i=this.getValidStep(e,this.currentStepIndex);if(i&&i.once){const t=this.getConditionStringForStep(this.currentTree,this.currentNode,this.currentStepIndex);this.addCondition(t)}return i}continueCurrentNodeStep(){const t=this.getTree(this.currentTree),e=this.getNode(t,this.currentNode);this.currentStepIndex++;const i=this.getValidStep(e,this.currentStepIndex);if(i&&i.once){const t=this.getConditionStringForStep(this.currentTree,this.currentNode,this.currentStepIndex);this.addCondition(t)}return i}getValidStep(t,e){let i=this.getStep(t,e);if(i){let n=[];if(i.conditions&&(n=n.concat(i.conditions)),i.once){const t=this.getInvertedConditionStringForStep(this.currentTree,this.currentNode,e);n=n.concat(t),console.log("Test valid step"),console.log(n)}return this.testConditions(n)?i:(this.currentStepIndex=e+1,this.getValidStep(t,this.currentStepIndex))}return i}getConditionStringForStep(t,e,i){return`${t}${e}${i}`}getInvertedConditionStringForStep(t,e,i){return`!${t}${e}${i}`}selectChoice(t){return this.getCurrentNodeStep().choices[t]}addCondition(t){-1===this.currentConditions.indexOf(t)&&this.currentConditions.push(t)}removeCondition(t){const e=this.currentConditions.indexOf(t);e>-1&&this.currentConditions.splice(e,1)}testConditions(t){let e=!0;for(const i of t){const t="||",n=i.split(t);if(n.length>1){let t=!1;for(const e of n)this.checkCondition(e)&&(t=!0);e&&(e=t)}else e&&(e=this.checkCondition(i))}return e}checkCondition(t){let e=!0;if(t.startsWith("!")){const i=t.slice(1,t.length);this.currentConditions.indexOf(i)>-1&&(e=!1)}else if(t.startsWith("+")){const i=t.slice(1,t.length);this.addCondition(i),e=!0}else if(t.startsWith("-")){const i=t.slice(1,t.length);this.removeCondition(i),e=!0}else-1===this.currentConditions.indexOf(t)&&(e=!1);return e}}const{Proxy:C}=i(710),{InventoryVO:T}=i(838);class _ extends C{get vo(){return this.getData()}static get NAME(){return"InventoryProxy"}constructor(){super(_.NAME,new T)}get inventoryItems(){return this.vo.inventoryItems}set inventoryItems(t){this.vo.inventoryItems=t}reorderInventoryItem(t,e){let i=0,n=0;for(let t=0;t<this.inventoryItems.length;t++){const o=this.inventoryItems[t];e>=i&&e<i+o.size&&(n=t),i+=o.size}if(e>=i&&(n=this.inventoryItems.length-1),"[object Array]"!==Object.prototype.toString.call(this.inventoryItems))throw new Error("Please provide a valid array");const o=this.inventoryItems.splice(t,1);if(!o.length)throw new Error("There is no item in the array at index "+t);this.inventoryItems.splice(n,0,o[0])}}const{Facade:M}=i(710);function v(t,e){M.getInstance(t).registerProxy(new g.u);const i=pc.Application.getApplication();if(i){const e=i.assets.get(40415631).resource;M.getInstance(t).registerProxy(new f(e)),M.getInstance(t).registerProxy(new N),M.getInstance(t).registerProxy(new _)}}const{Facade:P}=i(710);function b(t,e,...i){const o=pc.Application.getApplication(),r=i[0],a=i[1];console.log("Changing scene "+r);const s=o.root.findByName("Root"),c=o.scenes.find(r);o.scenes.loadSceneHierarchy(c.url,(function(e,i){e?console.error(e):s&&s.destroy(),P.getInstance(t).sendNotification(n.i.CHANGE_SCENE_COMPLETE,r),P.getInstance(t).sendNotification(n.i.PARSE_GAMEMAP,r),P.getInstance(t).sendNotification(n.i.ADD_PLAYER_CHARACTER_TO_MAP,a)}))}function S(t){let e=t.length,i=void 0,n=-1;for(;0!==e;)n=Math.floor(Math.random()*e),e-=1,i=t[e],t[e]=t[n],t[n]=i;return t}var O=i(958);const{Proxy:I}=i(710),{CombatVO:x}=i(201);class L extends I{get vo(){return this.getData()}static get NAME(){return"CombatProxy"}constructor(t,e){super(L.NAME,new x(t,e))}onRegister(){const t=this.vo.participants;this.participantProxies=new Map;for(const e of t){const t=this.facade.retrieveProxy(O.b.NAME+e);this.participantProxies.set(e,t)}}nextTurn(){const t=this.vo.roundInitiative;if(t&&t.length>0){const e=t.shift();if(this.vo.activeParticipant=e,"end_round"!==e){this.facade.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Turn "+e);const t=this.participantProxies.get(e);t.resetCombatTurnState(),t.isNPC?this.facade.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,e):this.facade.sendNotification(n.i.AWAIT_PLAYER_COMBAT_INPUT,e)}else this.facade.sendNotification(n.i.SHOW_TOAST_MESSAGE,"End round"),setTimeout((()=>{this.facade.sendNotification(n.i.NEXT_COMBAT_ROUND)}),3e3)}}nextRound(){console.log("/////////////////"),console.log("//  New round  //"),console.log("/////////////////");const t=[];for(const[e,i]of this.participantProxies.entries()){const n=i.vo;for(let i=0;i<n.initiative;i++)t.push(e)}if(0===t.length)return void this.facade.sendNotification(n.i.END_COMBAT);t.push("end_round");let e=S(t);for(;"end_round"===e[0];)e=S(e);this.vo.roundInitiative=e}get nextTurnCharacterId(){return this.vo.nextTurnCharacterId}get activeParticipant(){return this.vo.activeParticipant}set activeParticipant(t){this.vo.activeParticipant=t}get participants(){return this.vo.participants}get teams(){return this.vo.teams}removeCharacterFromCombat(t){this.participantProxies.delete(t),this.vo.roundInitiative=this.vo.roundInitiative.filter((e=>e!==t));for(const[e,i]of this.teams.entries()){const o=i.indexOf(t);o>-1&&i.splice(o,1),0===i.length&&this.facade.sendNotification(n.i.END_COMBAT,e)}}}var D=i(448);const{Facade:w}=i(710);function R(t,e,...i){const o=i[0],r=w.getInstance(t);r.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Start Combat"),r.retrieveProxy(g.u.NAME).updateGameStateType(D.gameplayModeTypes.COMBAT);const a=r.retrieveProxy(O.b.NAME+o);r.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"spotted",a);const s=new Map,c=["player"];s.set("player_team",c);const h=[o].concat(a.combatGroup).filter((function(t,e,i){return i.indexOf(t)==e}));s.set("opposing_team",h);const d=c.concat(h),l=r.retrieveProxy(O.b.NAME+"player");for(const t of d)r.sendNotification(n.i.END_MOVEMENT+t),"player"!==t?r.sendNotification(n.i.CHARACTER_LOOK_AT+t,l.currentNode):r.sendNotification(n.i.CHARACTER_LOOK_AT+t,a.currentNode);const p=new L(d,s);r.registerProxy(p),setTimeout((()=>{r.sendNotification(n.i.NEXT_COMBAT_ROUND)}),2e3)}const{Facade:G}=i(710);function k(t,e,...i){const n=G.getInstance(t),o=n.retrieveProxy(g.u.NAME),r=n.retrieveProxy(L.NAME);o.vo.gameplayMode===D.gameplayModeTypes.COMBAT&&r.nextTurn()}const{Facade:U}=i(710);function H(t,e,...i){const o=U.getInstance(t),r=o.retrieveProxy(g.u.NAME),a=o.retrieveProxy(L.NAME);r.vo.gameplayMode===D.gameplayModeTypes.COMBAT&&(a.nextRound(),o.sendNotification(n.i.NEXT_COMBAT_TURN,a.vo.nextTurnCharacterId))}const{Facade:V}=i(710);function F(t,e,...i){setTimeout((()=>{const e=V.getInstance(t),i=e.retrieveProxy(L.NAME);e.sendNotification(n.i.HIDE_WALKABLE_AREA),e.sendNotification(n.i.NEXT_COMBAT_TURN,i.nextTurnCharacterId)}),500)}class B{static get SUCCESS(){return 0}static get FAILURE(){return 1}static get RUNNING(){return 2}static get ERROR(){return 3}}class z{constructor(t){this.initialize(t)}initialize(t){this.id=function(){for(var t=[],e="0123456789abcdef",i=0;i<36;i++)t[i]=e.substr(Math.floor(16*Math.random()),1);return t[14]="4",t[19]=e.substr(3&t[19]|8,1),t[8]=t[13]=t[18]=t[23]="-",t.join("")}(),this.children=t||[]}execute(t){this._enter(t),t.blackboard.get("isOpen",t.tree.id,this.id)||this._open(t);const e=this._tick(t);return e!==B.RUNNING&&this._close(t),this._exit(t),e}_enter(t){t.enterNode(this),this.enter(t)}_open(t){t.openNode(this),t.blackboard.set("isOpen",!0,t.tree.id,this.id),this.open(t)}_tick(t){return t.tickNode(this),this.tick(t)}_close(t){t.closeNode(this),t.blackboard.set("isOpen",!1,t.tree.id,this.id),this.close(t)}_exit(t){t.exitNode(this),this.exit(t)}enter(t){}open(t){}tick(t){return B.ERROR}close(t){}exit(t){}}class W extends z{tick(t){for(const e of this.children)e.execute(t);return B.SUCCESS}}class Y{constructor(){this.initialise()}initialise(){this.baseMemory={},this.treeMemory={}}getTreeMemory(t){return this.treeMemory[t]||(this.treeMemory[t]={nodeMemory:{},openNodes:[]}),this.treeMemory[t]}getNodeMemory(t,e){const i=t.nodeMemory;return i.hasOwnProperty(e)||(i[e]={}),i[e]}getMemory(t,e){var i=this.baseMemory;return t&&(i=this.getTreeMemory(t),e&&(i=this.getNodeMemory(i,e))),i}set(t,e,i,n){this.getMemory(i,n)[t]=e}get(t,e,i){return this.getMemory(e,i)[t]}}class K{constructor(){this.initialise()}initialise(){this.tree=void 0,this.openNodes=[],this.nodeCount=0,this.debug=void 0,this.target=void 0,this.blackboard=void 0}enterNode(t){this.nodeCount++,this.openNodes.push(t)}openNode(t){}tickNode(t){}closeNode(t){this.openNodes.pop()}exitNode(t){}}class q{constructor(t){this.initialise(t)}initialise(t){this.id=t,this.root=void 0}tick(t,e){const i=new K;i.target=t,i.blackboard=e,i.tree=this,this.root.execute(i);const n=e.get("openNodes",this.id)||[],o=i.openNodes.slice(0);let r=0;for(let t=0;t<Math.min(n.length,o.length)&&(r=t+1,n[t]===o[t]);t++);for(let t=n.length-1;t>=r;t--)n[t].close(i);e.set("openNodes",o,this.id),e.set("nodeCount",i.nodeCount,this.id)}}class j{constructor(t){this.id="basicMeleeTree",this.blackboard=new Y,this.tree=new q(t),this.initialise()}initialise(){}runCommands(t,e){this.blackboard.set("facade",t,!1,!1),this.blackboard.set("characterId",e,this.tree.id,!1),this.tree.tick(this,this.blackboard)}}class $ extends z{tick(t){for(const e of this.children){const i=e.execute(t);if(i!==B.FAILURE)return i}return B.FAILURE}}class X extends z{tick(t){return t.blackboard.set("target","player",t.tree.id,!1),B.SUCCESS}}class Q extends z{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1);return e.sendNotification(n.i.RESOLVE_ATTACK,i,o),B.SUCCESS}}class J extends z{tick(t){return t.blackboard.get("facade",!1,!1).sendNotification(n.i.END_COMBAT_TURN),B.SUCCESS}}class Z extends z{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(O.b.NAME+i).availableMovement>0?B.SUCCESS:B.FAILURE}}class tt extends z{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=e.retrieveProxy(O.b.NAME+i).currentNode;return e.retrieveProxy(O.b.NAME+"player").currentNode.connectedNodes.some((t=>t.equals(n)))?B.SUCCESS:B.FAILURE}}class et extends z{open(t){t.blackboard.set("runningChild",0,t.tree.id,this.id)}tick(t){for(let e=t.blackboard.get("runningChild",t.tree.id,this.id);e<this.children.length;e++){let i=this.children[e].execute(t);if(i!==B.SUCCESS)return i===B.RUNNING&&t.blackboard.set("runningChild",e,t.tree.id,this.id),i}return B.SUCCESS}}class it extends z{tick(t){const e=this.children[0];if(!e)return B.ERROR;let i=e.execute(t);return i==B.SUCCESS?i=B.FAILURE:i==B.FAILURE&&(i=B.SUCCESS),i}}class nt extends z{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("target",t.tree.id,!1);return e.retrieveProxy(O.b.NAME+i).isDead?B.SUCCESS:B.FAILURE}}class ot extends z{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1),r=e.retrieveProxy(O.b.NAME+i),s=r.currentNode,c=e.retrieveProxy(O.b.NAME+o).currentNode.connectedNodes.filter((t=>!t.occupied));if(c.length>0){let t=c.reduce(((t,e)=>rt(s,t)<rt(s,e)?t:e));const o=a.q.calculatePath(s,t);if(o&&o.length>0){const a=r.vo;for(;o.length>a.availableMovement;)o.shift();e.sendNotification(n.i.NAVIGATE_ALONG_PATH+i,o),r.currentNode=t}}return r.availableMovement=0,B.SUCCESS}}function rt(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)}class at extends z{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(O.b.NAME+i).isDead?B.SUCCESS:B.FAILURE}}class st extends z{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(O.b.NAME+i).availableActions>0?B.SUCCESS:B.FAILURE}}class ct extends z{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(O.b.NAME+i).availableMovement=0,B.SUCCESS}}class ht extends j{constructor(){super("basicMeleeTree")}initialise(){this.tree.root=new W([new $([new et([new X,new it([new at]),new it([new nt]),new $([new et([new tt,new st,new X,new Q,new ct]),new et([new Z,new X,new ot])])]),new J])])}}const{Facade:dt}=i(710);function lt(t,e,...i){const n=i[0],o=dt.getInstance(t),a=(o.retrieveProxy(r.h.NAME),o.retrieveProxy(O.b.NAME+n).currentNode);o.retrieveProxy(O.b.NAME+"player").currentNode.connectedNodes.some((t=>t.equals(a))),(new ht).runCommands(o,n)}var pt=i(710);function ut(t,e,...i){const o=pt.Facade.getInstance(t),a=o.retrieveProxy(g.u.NAME),s=o.retrieveProxy(r.h.NAME),c=i[0];s.hasValidNode(c)&&(a.currentMode===D.gameplayModeTypes.EXPLORATION?o.sendNotification(n.i.NAVIGATE_TO_WAYPOINT+"player",c):a.currentMode===D.gameplayModeTypes.COMBAT&&"player"===o.retrieveProxy(L.NAME).activeParticipant&&o.sendNotification(n.i.COMBAT_NAVIGATE_TO_NODE,"player",c))}const{Facade:Et}=i(710);function gt(t,e,...i){const n=Et.getInstance(t),o=i[0],r=i[1],s=n.retrieveProxy(O.b.NAME+o),c=s.vo,h=a.q.breadthFirstSearch(c.currentNode,c.availableMovement);for(const t of h)t.equals(r)&&At(n,s,r)}function At(t,e,i){const o=e.vo,r=a.q.calculatePath(o.currentNode,i);r&&r.length>0&&(o.availableMovement-=r.length-1,e.currentNode=i,t.sendNotification(n.i.HIDE_WALKABLE_AREA),t.sendNotification(n.i.NAVIGATE_ALONG_PATH+o.id,r))}function ft(t,e,...i){const n=i[0],o=pc.Application.getApplication(),r=o.assets.get(40235966),a=o.root.findByName("WorldObjects");for(const t of n){const e=r.resource.instantiate();e.setLocalPosition(t.x,t.y,t.z),a.addChild(e)}}function yt(t,e,...i){const n=pc.Application.getApplication().root.findByTag("walkable_tile");for(const t of n)t.destroy()}function mt(t,e,...i){const o=i[0],r=pt.Facade.getInstance(t),s=r.retrieveProxy(O.b.NAME+o).vo,c=a.q.breadthFirstSearch(s.currentNode,s.availableMovement);r.sendNotification(n.i.SHOW_WALKABLE_AREA,c)}function Nt(t,e,...i){const o=pt.Facade.getInstance(t),r=i[0],a=i[1];if(o.retrieveProxy(O.b.NAME+r).currentNode=a,o.retrieveProxy(g.u.NAME).currentMode===D.gameplayModeTypes.COMBAT){const t=o.retrieveProxy(L.NAME);t&&("player"===t.activeParticipant?o.sendNotification(n.i.AWAIT_PLAYER_COMBAT_INPUT,r):setTimeout((()=>{o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,r)}),500))}}function Ct(t){const e=t.currentNode;return new pc.Vec3(e.x,e.y+.5*t.height,e.z)}function Tt(t,e,...i){const o=pt.Facade.getInstance(t),s=i[0].script.GameCharacterComponent.characterId,c=o.retrieveProxy(g.u.NAME),h=o.retrieveProxy(r.h.NAME),d=o.retrieveProxy(O.b.NAME+s),l=o.retrieveProxy(O.b.NAME+"player"),p=o.retrieveProxy(f.NAME).getWeaponCategory(l.equippedWeapon);if(c.currentMode===D.gameplayModeTypes.EXPLORATION)"attack"===c.currentAction&&"ranged"===p?_t(h,l,d)?(o.sendNotification(n.i.RESOLVE_RANGED_ATTACK,"player",s),o.sendNotification(n.i.START_COMBAT,s)):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"No line of sight"):"attack"===c.currentAction?o.sendNotification(n.i.NAVIGATE_TO_CHARACTER_AND_ATTACK,s):o.sendNotification(n.i.NAVIGATE_TO_CHARACTER_AND_TALK,s);else if(c.currentMode===D.gameplayModeTypes.COMBAT){const t=o.retrieveProxy(L.NAME);if(!t||"player"!==t.activeParticipant)return;if(l.availableActions<=0)return void o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Out of actions");if("ranged"===p)_t(h,l,d)?o.sendNotification(n.i.RESOLVE_RANGED_ATTACK,"player",s):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"No line of sight");else if(function(t,e){const i=e.currentNode;return t.currentNode.connectedNodes.some((t=>t.equals(i)))}(l,d))"attack"===c.currentAction&&"attack"===c.currentAction&&o.sendNotification(n.i.RESOLVE_ATTACK,l.id,d.id);else{const t=function(t,e){const i=e.currentNode.connectedNodes.filter((t=>!t.occupied));if(i.length>0){const e=t.currentNode;let n=a.q.calculatePath(e,i[0]);for(let t=1;t<i.length;t++){const o=a.q.calculatePath(e,i[t]);o.length<n.length&&(n=o)}return n}}(l,d);t&&t.length-1<=l.vo.availableMovement?"attack"===c.currentAction?o.sendNotification(n.i.MOVE_ALONG_PATH_AND_ATTACK,"player",d.id,t):o.sendNotification(n.i.COMBAT_NAVIGATE_TO_NODE,"player",t.shift()):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Cannot reach target")}}}function _t(t,e,i){const n=Ct(e),o=Ct(i);return!t.rayIntersectsWall(n,o)}var Mt=i(829);function vt(t,e,...i){const o=pt.Facade.getInstance(t),r=i[0],a=o.retrieveProxy(O.b.NAME+r),s=i[1],c=o.retrieveProxy(O.b.NAME+s);o.sendNotification(n.i.CHARACTER_LOOK_AT+r,c.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+s,a.currentNode);const h=bt(a.skill),d=bt(c.skill),l=o.retrieveProxy(f.NAME);if(a.availableActions-=1,h===d)o.sendNotification(n.i.DISPLAY_ATTACK+r),o.sendNotification(n.i.DISPLAY_ATTACK+s),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`Attack tied(${h}/${d})`);else if(h>d){const t=Pt(h,d),e=l.getDamage(a.equippedWeapon,t);c.applyDamage(e),o.sendNotification(n.i.DISPLAY_ATTACK+r),c.isDead?o.sendNotification(n.i.KILL_GAME_CHARACTER,s):(o.sendNotification(n.i.DISPLAY_HIT+s),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${r} damages ${s} for ${e}`))}else{const t="melee"===l.getWeaponCategory(c.equippedWeapon),e=Pt(d,h),i=t?c.equippedWeapon:Mt.j.UNARMED,p=l.getDamage(i,e);a.applyDamage(p),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${s} damages ${r} for ${p}`),o.sendNotification(n.i.DISPLAY_ATTACK+s),a.isDead?o.sendNotification(n.i.KILL_GAME_CHARACTER,r):o.sendNotification(n.i.DISPLAY_HIT+r)}const p=o.retrieveProxy(L.NAME);p&&"player"!==p.activeParticipant&&setTimeout((()=>{o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,r)}),1500)}function Pt(t,e){return t-e}function bt(t){return t+St()+St()}function St(){return Math.round(6*Math.random())}var Ot=i(321);const{Facade:It}=i(710);function xt(t,e,...i){const o=It.getInstance(t),r=i[0],a=i[1],s=i[2];o.retrieveProxy(O.b.NAME+r).useMovement(s.length-1);const c=o.retrieveMediator(Ot.y.NAME+r);o.sendNotification(n.i.HIDE_WALKABLE_AREA),c.handleNavigateAlongPathWithPromise(s).then((()=>{o.sendNotification(n.i.RESOLVE_ATTACK,r,a)}))}function Lt(t,e,...i){const o=pt.Facade.getInstance(t),r=i[0];console.log("Kill character:: "+r);const a=o.retrieveProxy(O.b.NAME+r);o.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"death",a),o.sendNotification(n.i.DISPLAY_DEATH+r),a&&(a.currentNode.occupied=!1);const s=o.retrieveProxy(L.NAME);s&&s.removeCharacterFromCombat(r)}const{Facade:Dt}=i(710);function wt(t,e,...i){const o=i[0],r=Dt.getInstance(t);r.hasMediator(L.NAME)&&r.removeMediator(L.NAME),r.sendNotification(n.i.HIDE_WALKABLE_AREA);const a=r.retrieveProxy(g.u.NAME);"player_team"===o?(a.updateGameStateType(D.gameplayModeTypes.GAME_OVER),r.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Game Over")):(a.updateGameStateType(D.gameplayModeTypes.EXPLORATION),r.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Victory"))}var Rt=i(316);class Gt extends z{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1);return e.sendNotification(n.i.RESOLVE_RANGED_ATTACK,i,o),B.SUCCESS}}class kt extends z{constructor(t,e){super([]),this.minDistance=t,this.maxDistance=e}tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1),r=e.retrieveProxy(O.b.NAME+i),s=r.currentNode,c=e.retrieveProxy(O.b.NAME+o).currentNode,h=Math.pow(this.minDistance,2),d=Math.pow(this.maxDistance,2),l=r.availableMovement;r.availableMovement=0;const p=Ut(c,s);if(p>=h&&p<=d)return B.FAILURE;{const t=a.q.breadthFirstSearch(s,l);if(t.length>0){if(p<h){let o=t.reduce(((t,e)=>Ut(c,t)>Ut(c,e)?t:e));const h=a.q.calculatePath(s,o);h&&h.length>0&&(e.sendNotification(n.i.NAVIGATE_ALONG_PATH+i,h),r.currentNode=o)}else{let o=t.reduce(((t,e)=>Ut(c,t)<Ut(c,e)?t:e));const h=a.q.calculatePath(s,o);h&&h.length>0&&(e.sendNotification(n.i.NAVIGATE_ALONG_PATH+i,h),r.currentNode=o)}return B.SUCCESS}return B.FAILURE}}}function Ut(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)+Math.pow(e.z-t.z,2)}class Ht extends z{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);setTimeout((()=>{e.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,i)}),500)}}class Vt extends z{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1),o=e.retrieveProxy(O.b.NAME+i),a=(o.currentNode,e.retrieveProxy(O.b.NAME+n)),s=(a.currentNode,e.retrieveProxy(r.h.NAME)),c=Ct(o),h=Ct(a);return s.rayIntersectsWall(c,h)?B.FAILURE:B.SUCCESS}}class Ft extends z{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1),s=e.retrieveProxy(O.b.NAME+i),c=s.currentNode,h=e.retrieveProxy(O.b.NAME+o),d=h.currentNode.connectedNodes,l=e.retrieveProxy(r.h.NAME),p=d.filter((t=>!t.occupied));if(p.length>0){let t=p.reduce(((t,e)=>Bt(c,t)<Bt(c,e)?t:e));const o=a.q.calculatePath(c,t);if(o&&o.length>0){const r=s.vo;for(;o.length>r.availableMovement;)o.shift();const a=Ct(h);let c=0;for(let t=o.length-1;t>=0;t--){const e=o[t],i=new pc.Vec3(e.x,e.y+.5*s.height,e.z);if(!l.rayIntersectsWall(i,a)){c=t;break}}o.splice(0,c),e.sendNotification(n.i.NAVIGATE_ALONG_PATH+i,o),s.currentNode=t}}return s.availableMovement=0,B.SUCCESS}}function Bt(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)}class zt extends j{constructor(){super("basicRangedTree")}initialise(){this.tree.root=new W([new $([new et([new X,new it([new at]),new it([new nt]),new $([new et([new Z,new it([new Vt]),new Ft]),new et([new Z,new $([new kt(9,12),new Ht])]),new et([new st,new Vt,new Gt])])]),new J])])}}function Wt(t,e,...i){const n=pt.Facade.getInstance(t),o=i[0];switch(n.retrieveProxy(O.b.NAME+o).botBehaviour){case Rt.r.BASIC_MELEE:(new ht).runCommands(n,o);break;case Rt.r.BASIC_RANGED:(new zt).runCommands(n,o)}}var Yt=i(852);function Kt(t,e,...i){const o=pt.Facade.getInstance(t);let a=0,s=0;const c=i[0],h=o.retrieveProxy(O.b.NAME+c),d=h.currentNode;let l=i[1],p=o.retrieveProxy(O.b.NAME+l);const u=p.currentNode;o.sendNotification(n.i.CHARACTER_LOOK_AT+c,p.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+l,h.currentNode),a+=qt(h.skill),s+=qt(p.skill);const E=o.retrieveProxy(f.NAME);o.retrieveProxy(r.h.NAME).isInCover(new pc.Vec3(u.x,u.y,u.z),new pc.Vec3(d.x,d.y,d.z))&&(s+=2);const g=o.retrieveMediator(Yt.N.NAME),A=new pc.Vec3(h.currentNode.x,h.currentNode.y+1,h.currentNode.z),y=new pc.Vec3(p.currentNode.x,p.currentNode.y+1,p.currentNode.z);h.availableActions-=1,o.sendNotification(n.i.DISPLAY_ATTACK+c),g.createProjectile("crossbow_bolt",A,y).then((()=>{if(a>s){const t=o.retrieveProxy(L.NAME);if(t){const e=p.currentNode.connectedNodes,i=[l];for(const n of t.participants){const t=o.retrieveProxy(O.b.NAME+n);!t.isDead&&e.some((e=>e.equals(t.currentNode)))&&i.push(n)}l=i[Math.floor(Math.random()*i.length)],p=o.retrieveProxy(O.b.NAME+l)}const e=a-s,i=E.getDamage(h.equippedWeapon,e);p.applyDamage(i),p.isDead?o.sendNotification(n.i.KILL_GAME_CHARACTER,l):(o.sendNotification(n.i.DISPLAY_HIT+l),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${c} damages ${l} for ${i}`))}else o.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"dodge",p);const t=o.retrieveProxy(L.NAME);t&&"player"!==t.activeParticipant&&setTimeout((()=>{o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,c)}),500)}))}function qt(t){return t+jt()+jt()}function jt(){return Math.round(6*Math.random())}const{Facade:$t}=i(710);function Xt(t,e,...i){const o=$t.getInstance(t);if(o.retrieveProxy(g.u.NAME).currentMode===D.gameplayModeTypes.COMBAT&&"player"!==o.retrieveProxy(L.NAME).activeParticipant)return void o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Must change weapon on your turn");const r=i[0],a=i[1];o.retrieveProxy(O.b.NAME+r).equippedWeapon=a,o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${r} equips ${a}`)}function Qt(t,e,...i){const o=pt.Facade.getInstance(t),a=i[0],s=i[1],c=i[2],h=o.retrieveProxy(r.h.NAME).findNearestNode(a);o.retrieveMediator(Ot.y.NAME+"player").moveToNodeWithPromise(h).then((()=>{o.sendNotification(n.i.CHANGE_SCENE,s,c)}))}const{Facade:Jt}=i(710);function Zt(t,e,...i){const n=Jt.getInstance(t),o=i[0],a=pc.Application.getApplication(),s=a.assets.get(40523336),c=a.root.findByName("WorldObjects"),h=s.resource.instantiate();c.addChild(h);const d=n.retrieveProxy(r.h.NAME).retrievePortal(o);h.setLocalPosition(d.standingPoint)}const{Facade:te}=i(710);function ee(t,e,...i){const o=te.getInstance(t),r=i[0],s=o.retrieveProxy(O.b.NAME+"player"),c=o.retrieveProxy(O.b.NAME+r),h=o.retrieveMediator(Ot.y.NAME+"player"),d=function(t,e){const i=e.currentNode.connectedNodes,n=t.currentNode;if(i.some((t=>t.equals(n))))return[n];{const t=i.filter((t=>!t.occupied));if(t.length>0){let e=a.q.calculatePath(n,t[0]);for(let i=1;i<t.length;i++){const o=a.q.calculatePath(n,t[i]);(!e||o&&o.length<e.length)&&(e=o)}return e}return}}(s,c);d&&h.handleNavigateAlongPathWithPromise(d).then((()=>{o.sendNotification(n.i.START_DIALOGUE,r)}))}const{Facade:ie}=i(710);function ne(t,e,...i){const o=ie.getInstance(t),r=o.retrieveProxy(g.u.NAME),a=i[0],s=o.retrieveProxy(N.NAME),c=o.retrieveProxy(O.b.NAME+"player"),h=o.retrieveProxy(O.b.NAME+a),d=h.dialogueTree;s.startDialogueTree(d),r.updateGameStateType(D.gameplayModeTypes.DIALOGUE),o.sendNotification(n.i.CHARACTER_LOOK_AT+"player",h.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+a,c.currentNode),o.sendNotification(n.i.SHOW_DIALOGUE_PANEL);const l=s.getCurrentNodeStep();o.sendNotification(n.i.DISPLAY_DIALOGUE_STEP,{treeId:d,step:l})}function oe(t,e,...i){const o=pt.Facade.getInstance(t),r=o.retrieveProxy(N.NAME),a=r.continueCurrentNodeStep();if(a){if(a.choices?o.sendNotification(n.i.HIDE_DIALOGUE_CONTINUE_BUTTON):o.sendNotification(n.i.SHOW_DIALOGUE_CONTINUE_BUTTON),a.notifications)for(const t of a.notifications)o.sendNotification(t.name,...t.args);o.sendNotification(n.i.DISPLAY_DIALOGUE_STEP,{treeId:r.currentTree,step:a})}else o.sendNotification(n.i.END_DIALOGUE)}function re(t,e,...i){const o=pt.Facade.getInstance(t),r=i[0],a=o.retrieveProxy(N.NAME),s=a.selectChoice(r);o.sendNotification(n.i.CLEAR_DIALOGUE_CHOICES);const c={title:"YOU",text:s.text,titleColour:"#DB831C"};o.sendNotification(n.i.DISPLAY_DIALOGUE_STEP,{treeId:a.currentTree,step:c}),s.test?o.sendNotification(n.i.RESOLVE_DIALOGUE_SKILL_TEST,s.test):s.goto&&o.sendNotification(n.i.GO_TO_DIALOGUE_NODE,s.goto)}function ae(t,e,...i){const o=pt.Facade.getInstance(t),r=o.retrieveProxy(N.NAME),a=i[0];r.goToNode(a);const s=r.getCurrentNodeStep();if(s){if(o.sendNotification(n.i.SHOW_DIALOGUE_CONTINUE_BUTTON),o.sendNotification(n.i.DISPLAY_DIALOGUE_STEP,{treeId:r.currentTree,step:s}),console.log("*****"),console.log(s),s.notifications)for(const t of s.notifications)console.log("SHOOT COMMAND: "+t.name),o.sendNotification(t.name,...t.args)}else o.sendNotification(n.i.END_DIALOGUE)}const{Facade:se}=i(710);function ce(t,e,...i){const o=se.getInstance(t);o.retrieveProxy(g.u.NAME).updateGameStateType(D.gameplayModeTypes.EXPLORATION),o.sendNotification(n.i.HIDE_DIALOGUE_PANEL)}const{Facade:he}=i(710);function de(t,e,...i){const o=he.getInstance(t),r=i[0],s=o.retrieveProxy(O.b.NAME+"player"),c=o.retrieveProxy(O.b.NAME+r),h=o.retrieveMediator(Ot.y.NAME+"player"),d=function(t,e){const i=e.currentNode.connectedNodes,n=t.currentNode;if(i.some((t=>t.equals(n))))return[n];{const t=i.filter((t=>!t.occupied));if(t.length>0){let e=a.q.calculatePath(n,t[0]);for(let i=1;i<t.length;i++){const o=a.q.calculatePath(n,t[i]);o.length<e.length&&(e=o)}return e}return}}(s,c);d&&h.handleNavigateAlongPathWithPromise(d).then((()=>{o.sendNotification(n.i.START_COMBAT,r),o.sendNotification(n.i.RESOLVE_ATTACK,"player",r)}))}const{Facade:le}=i(710);function pe(t,e,...i){const n=le.getInstance(t),o=i[0];n.retrieveProxy(g.u.NAME).currentAction=o}function ue(t,e,...i){const o=pt.Facade.getInstance(t),r=i[0],a=o.retrieveProxy(O.b.NAME+"player").getSkillTotal(r.skill),s=Ee(),c=Ee(),h=a>=s+c;o.sendNotification(n.i.DISPLAY_DIALOGUE_SKILL_TEST,r.skill,a,s,c,h),h?(console.log(`Succeeded ${r.skill} with a ${a} vs ${s}+${c}`),o.sendNotification(n.i.GO_TO_DIALOGUE_NODE,r.success.goto)):(console.log(`Failed ${r.skill} with a ${a} vs ${s}+${c}`),o.sendNotification(n.i.GO_TO_DIALOGUE_NODE,r.failure.goto))}function Ee(){return Math.round(6*Math.random())}const{Facade:ge}=i(710);function Ae(t,e,...i){const o=ge.getInstance(t),r=o.retrieveProxy(_.NAME);o.sendNotification(n.i.DISPLAY_INVENTORY_PANEL,r.inventoryItems)}const{Facade:fe}=i(710);function ye(t,e,...i){const o=fe.getInstance(t),r=o.retrieveProxy(_.NAME),a=i[0],s=i[1];r.reorderInventoryItem(a,s),o.sendNotification(n.i.DISPLAY_INVENTORY_PANEL,r.inventoryItems)}const{Facade:me}=i(710);class Ne extends me{static getInstance(t){return me.instanceMap[t]||(me.instanceMap[t]=new Ne(t)),me.instanceMap[t]}static get KEY(){return"Cacogen"}static get NAME(){return"CacogenFacade"}static get STARTUP(){return Ne.NAME+"StartUp"}startup(t){this.sendNotification(Ne.STARTUP,t)}sendNotification(t,...e){super.sendNotification(t,...e)}initializeController(){super.initializeController(),this.registerCommand(Ne.STARTUP,v),this.registerCommand(n.i.CHANGE_SCENE,b),this.registerCommand(n.i.PARSE_GAMEMAP,c),this.registerCommand(n.i.START_COMBAT,R),this.registerCommand(n.i.NEXT_COMBAT_TURN,k),this.registerCommand(n.i.NEXT_COMBAT_ROUND,H),this.registerCommand(n.i.END_COMBAT_TURN,F),this.registerCommand(n.i.ENEMY_TURN,lt),this.registerCommand(n.i.SELECTED_NODE,ut),this.registerCommand(n.i.COMBAT_NAVIGATE_TO_NODE,gt),this.registerCommand(n.i.DETERMINE_NEXT_ENEMY_ACTION,Wt),this.registerCommand(n.i.SHOW_WALKABLE_AREA,ft),this.registerCommand(n.i.HIDE_WALKABLE_AREA,yt),this.registerCommand(n.i.AWAIT_PLAYER_COMBAT_INPUT,mt),this.registerCommand(n.i.FINISHED_MOVE,Nt),this.registerCommand(n.i.SELECT_GAME_CHARACTER,Tt),this.registerCommand(n.i.RESOLVE_ATTACK,vt),this.registerCommand(n.i.RESOLVE_RANGED_ATTACK,Kt),this.registerCommand(n.i.MOVE_ALONG_PATH_AND_ATTACK,xt),this.registerCommand(n.i.NAVIGATE_TO_CHARACTER_AND_ATTACK,de),this.registerCommand(n.i.KILL_GAME_CHARACTER,Lt),this.registerCommand(n.i.END_COMBAT,wt),this.registerCommand(n.i.EQUIP_WEAPON,Xt),this.registerCommand(n.i.NAVIGATE_THROUGH_PORTAL,Qt),this.registerCommand(n.i.ADD_PLAYER_CHARACTER_TO_MAP,Zt),this.registerCommand(n.i.NAVIGATE_TO_CHARACTER_AND_TALK,ee),this.registerCommand(n.i.START_DIALOGUE,ne),this.registerCommand(n.i.CONTINUE_DIALOGUE_NODE,oe),this.registerCommand(n.i.SELECT_DIALOGUE_CHOICE,re),this.registerCommand(n.i.GO_TO_DIALOGUE_NODE,ae),this.registerCommand(n.i.END_DIALOGUE,ce),this.registerCommand(n.i.GAMEPLAY_ACTION_CHANGED,pe),this.registerCommand(n.i.RESOLVE_DIALOGUE_SKILL_TEST,ue),this.registerCommand(n.i.CLICK_INVENTORY_BUTTON,Ae),this.registerCommand(n.i.REORDER_INVETORY_ITEM,ye)}}},316:(t,e,i)=>{i.d(e,{r:()=>n,_:()=>o});class n{static get NONE(){return 0}static get BASIC_MELEE(){return 1}static get BASIC_RANGED(){return 2}}const o=[{NONE:n.NONE},{BASIC_MELEE:n.BASIC_MELEE},{BASIC_RANGED:n.BASIC_RANGED}]},210:(t,e,i)=>{i.d(e,{i:()=>n});class n{static get CHANGE_SCENE(){return"CHANGE_SCENE"}static get CHANGE_SCENE_COMPLETE(){return"CHANGE_SCENE_COMPLETE"}static get APP_INITIALISED(){return"APP_INITIALISED"}static get PARSE_GAMEMAP(){return"PARSE_GAMEMAP"}static get MAP_GRID_CREATED(){return"MAP_GRID_CREATED"}static get NAVIGATE_TO_NODE(){return"NAVIGATE_TO_NODE"}static get NAVIGATE_TO_WAYPOINT(){return"NAVIGATE_TO_WAYPOINT"}static get NAVIGATE_THROUGH_PORTAL(){return"NAVIGATE_THROUGH_PORTAL"}static get COMBAT_NAVIGATE_TO_NODE(){return"COMBAT_NAVIGATE_TO_NODE"}static get SET_CAMERA_TARGET(){return"SET_CAMERA_TARGET"}static get INPUT_DRAG_MOUSE(){return"INPUT_DRAG_MOUSE"}static get MOVED_TO_NODE(){return"MOVED_TO_NODE"}static get FINISHED_MOVE(){return"FINISHED_MOVE"}static get START_COMBAT(){return"START_COMBAT"}static get SHOW_TOAST_MESSAGE(){return"SHOW_TOAST_MESSAGE"}static get NEXT_COMBAT_TURN(){return"NEXT_COMBAT_TURN"}static get NEXT_COMBAT_ROUND(){return"NEXT_COMBAT_ROUND"}static get END_COMBAT(){return"END_COMBAT"}static get END_COMBAT_TURN(){return"END_COMBAT_TURN"}static get ENEMY_TURN(){return"ENEMY_TURN"}static get SELECTED_NODE(){return"SELECTED_NODE"}static get DETERMINE_NEXT_ENEMY_ACTION(){return"DETERMINE_NEXT_ENEMY_ACTION"}static get NAVIGATE_ALONG_PATH(){return"NAVIGATE_ALONG_PATH"}static get SHOW_WALKABLE_AREA(){return"SHOW_WALKABLE_AREA"}static get HIDE_WALKABLE_AREA(){return"HIDE_WALKABLE_AREA"}static get END_MOVEMENT(){return"END_MOVEMENT"}static get AWAIT_PLAYER_COMBAT_INPUT(){return"AWAIT_PLAYER_COMBAT_INPUT"}static get SET_CHARACTER_TO_NODE(){return"SET_CHARACTER_TO_NODE"}static get SELECT_GAME_CHARACTER(){return"SELECT_GAME_CHARACTER"}static get TOGGLE_BUTTON(){return"TOGGLE_BUTTON"}static get USE_PLAYER_ACTION(){return"USE_PLAYER_ACTION"}static get RESOLVE_ATTACK(){return"RESOLVE_ATTACK"}static get RESOLVE_RANGED_ATTACK(){return"RESOLVE_RANGED_ATTACK"}static get MOVE_ALONG_PATH_AND_ATTACK(){return"MOVE_ALONG_PATH_AND_ATTACK"}static get UPDATE_STAMINA(){return"UPDATE_STAMINA"}static get DISPLAY_DEATH(){return"DISPLAY_DEATH"}static get DISPLAY_ATTACK(){return"DISPLAY_ATTACK"}static get DISPLAY_HIT(){return"DISPLAY_HIT"}static get KILL_GAME_CHARACTER(){return"KILL_GAME_CHARACTER"}static get CHARACTER_LOOK_AT(){return"CHARACTER_LOOK_AT"}static get CHANGE_STAMINA(){return"CHANGE_STAMINA"}static get EQUIP_WEAPON(){return"EQUIP_WEAPON"}static get USE_ACTION(){return"USE_ACTION"}static get DISPLAY_FLOATING_STATUS(){return"DISPLAY_FLOATING_STATUS"}static get ADD_PLAYER_CHARACTER_TO_MAP(){return"ADD_PLAYER_CHARACTER_TO_MAP"}static get NAVIGATE_TO_CHARACTER_AND_TALK(){return"NAVIGATE_TO_CHARACTER_AND_TALK"}static get NAVIGATE_TO_CHARACTER_AND_ATTACK(){return"NAVIGATE_TO_CHARACTER_AND_ATTACK"}static get SHOW_DIALOGUE_PANEL(){return"SHOW_DIALOGUE_PANEL"}static get HIDE_DIALOGUE_PANEL(){return"HIDE_DIALOGUE_PANEL"}static get SHOW_DIALOGUE_CONTINUE_BUTTON(){return"SHOW_DIALOGUE_CONTINUE_BUTTON"}static get HIDE_DIALOGUE_CONTINUE_BUTTON(){return"HIDE_DIALOGUE_CONTINUE_BUTTON"}static get DISPLAY_DIALOGUE_STEP(){return"DISPLAY_DIALOGUE_STEP"}static get DISPLAY_DIALOGUE_SKILL_TEST(){return"DISPLAY_DIALOGUE_SKILL_TEST"}static get CONTINUE_DIALOGUE_NODE(){return"CONTINUE_DIALOGUE_NODE"}static get SELECT_DIALOGUE_CHOICE(){return"SELECT_DIALOGUE_CHOICE"}static get RESOLVE_DIALOGUE_SKILL_TEST(){return"RESOLVE_DIALOGUE_SKILL_TEST"}static get CLEAR_DIALOGUE_CHOICES(){return"CLEAR_DIALOGUE_CHOICES"}static get GO_TO_DIALOGUE_NODE(){return"GO_TO_DIALOGUE_NODE"}static get START_DIALOGUE(){return"START_DIALOGUE"}static get END_DIALOGUE(){return"END_DIALOGUE"}static get GAMEPLAY_ACTION_CHANGED(){return"GAMEPLAY_ACTION_CHANGED"}static get CLICK_INVENTORY_BUTTON(){return"CLICK_INVENTORY_BUTTON"}static get DISPLAY_INVENTORY_PANEL(){return"DISPLAY_INVENTORY_PANEL"}static get REORDER_INVETORY_ITEM(){return"REORDER_INVETORY_ITEM"}}},829:(t,e,i)=>{i.d(e,{j:()=>n,E:()=>o});class n{static get SWORD(){return"sword"}static get AXE(){return"axe"}static get KNIFE(){return"knife"}static get STAFF(){return"staff"}static get HAMMER(){return"hammer"}static get SPEAR(){return"spear"}static get MACE(){return"mace"}static get POLEARM(){return"polearm"}static get MAUL(){return"maul"}static get GREATSWORD(){return"greatsword"}static get CLUB(){return"club"}static get UNARMED(){return"unarmed"}static get SHIELD(){return"shield"}static get FUSIL(){return"fusil"}static get BOW(){return"bow"}static get CROSSBOW(){return"crossbow"}static get PISTOLET(){return"pistolet"}}const o=Object.entries(Object.getOwnPropertyDescriptors(n)).filter((([t,e])=>"function"==typeof e.get)).map((([t])=>({[t]:n[t]})))},201:(t,e,i)=>{i.r(e),i.d(e,{CombatVO:()=>n});class n{constructor(t,e){this.participants=t,this.roundInitiative=[],this.activeParticipant=void 0,this.teams=e}get nextTurnCharacterId(){return this.roundInitiative[0]}}},958:(t,e,i)=>{i.d(e,{b:()=>a});var n=i(210);const{Proxy:o}=i(710),{GameCharacterVO:r}=i(940);class a extends o{get vo(){return this.getData()}static get NAME(){return"GameCharacterProxy_"}constructor(t){super(a.NAME+t.id,new r(t))}resetCombatTurnState(){this.vo.availableMovement=this.vo.maxMovement,this.vo.availableActions=this.vo.maxActionsPerTurn}useMovement(t){this.vo.availableMovement-=t}applyDamage(t){this.vo.currentStamina-=t,this.vo.currentStamina=Math.max(0,this.vo.currentStamina),this.vo.currentStamina>0?this.facade.sendNotification(n.i.UPDATE_STAMINA+this.id,this.vo.currentStamina,this.vo.maximumStamina):console.log(this.id+" died"),this.facade.sendNotification(n.i.CHANGE_STAMINA+this.id,this.vo.currentStamina,this.vo.maxStamina)}getSkillTotal(t){return console.log("Skill "+t),console.log(this.vo.advancedSkills),console.log(this.vo.advancedSkills.get(t)),this.vo.advancedSkills.has(t)?this.skill+this.vo.advancedSkills.get(t):this.skill}get id(){return this.vo.id}get dialogueTree(){return this.vo.dialogueTree}get currentNode(){return this.vo.currentNode}set currentNode(t){this.vo.currentNode&&(this.vo.currentNode.occupied=!1),this.vo.currentNode=t,this.vo.currentNode.occupied=!0}get combatGroup(){return this.vo.combatGroup}get isNPC(){return this.vo.isNPC}get availableMovement(){return this.vo.availableMovement}set availableMovement(t){this.vo.availableMovement=t}get availableActions(){return this.vo.availableActions}set availableActions(t){this.vo.availableActions=t,this.facade.sendNotification(n.i.USE_ACTION+this.id,this.availableActions,this.maxActionsPerTurn)}get maxActionsPerTurn(){return this.vo.maxActionsPerTurn}get skill(){return this.vo.skill}get currentStamina(){return this.vo.currentStamina}get currentLuck(){return this.vo.currentStamina}get isDead(){return this.vo.currentStamina<=0}get botBehaviour(){return this.vo.botBehaviour}get equippedWeapon(){return this.vo.equippedWeapon}set equippedWeapon(t){this.vo.equippedWeapon=t}get height(){return this.vo.height}}},940:(t,e,i)=>{i.r(e),i.d(e,{GameCharacterVO:()=>n});class n{constructor(t){this.id=t.id,this.isNPC=t.isNPC,this.combatGroup=t.combatGroup||[],this.dialogueTree=t.dialogueTree||this.id,this.currentNode=void 0,this.initiative=t.initiative||2,this.maxMovement=t.maxMovement||6,this.height=t.height||1.8,this.maxActionsPerTurn=1,this.availableActions=this.maxActionsPerTurn,this.availableMovement=this.maxMovement,this.skill=t.skill||1,this.maxStamina=t.maxStamina||1,this.currentStamina=this.maxStamina,this.maxLuck=t.maxLuck||1,this.currentLuck=this.maxLuck,this.advancedSkills=t.advancedSkills||new Map,this.botBehaviour=t.botBehaviour||0,this.equippedWeapon=t.equippedWeapon||"unarmed"}}},969:(t,e,i)=>{i.d(e,{h:()=>a});var n=i(434);const{Proxy:o}=i(710),{GameMapVO:r}=i(438);class a extends o{get vo(){return this.getData()}static get NAME(){return"GameMapProxy"}constructor(t,e,i,n,o){super(a.NAME),this.setData({mapGrid:t,wallBoundingBoxes:e,cover:i,portals:n,navigationGrid:o})}onRegister(){}findNearestNode(t){const e=this.vo.mapGrid;let i=e[0],o=n.q.getDistSquared(i,t);for(const r of e){const e=n.q.getDistSquared(r,t);e<o&&(o=e,i=r)}return i}findNearestWaypoint(t){const e=this.vo.navigationGrid;let i=e[0],o=n.q.getDistSquared(i,t);for(const r of e){const e=n.q.getDistSquared(r,t);e<o&&(o=e,i=r)}return i}rayIntersectsWall(t,e){const i=t.distance(e),n=e.clone().sub(t.clone()).normalize(),o=new pc.Ray(t,n),r=this.vo.wallBoundingBoxes;for(const e of r){const n=new pc.Vec3;if(e.intersectsRay(o,n)&&n.distance(t)<i)return!0}return!1}get cover(){return this.vo.cover}isInCover(t,e){const i=[],n=function(t){const e=[];return e.push(new pc.Vec3(t.x,t.y,t.z-1)),e.push(new pc.Vec3(t.x+1,t.y,t.z)),e.push(new pc.Vec3(t.x-1,t.y,t.z)),e.push(new pc.Vec3(t.x,t.y,t.z+1)),e}(t);for(const t of n)this.cover.find((e=>t.equals(e)))&&i.push(t);if(i.length>0){const n=t.distance(e);for(const t of i)if(t.distance(e)<n)return!0;return!1}return!1}retrievePortal(t){return this.vo.portals.get(t)}hasValidLine(t,e){const i=n.q.calculateBresenhamLine(t.x,t.z,e.x,e.z);return n.q.checkValidLine(i,this.vo.mapGrid)}hasValidNode(t){return this.vo.mapGrid.some((e=>e.equals(t)))}}},438:(t,e,i)=>{i.r(e),i.d(e,{GameMapVO:()=>n});class n{constructor(){this.mapGrid=[]}}},434:(t,e,i)=>{i.d(e,{q:()=>o});class n{constructor(){this.data=[]}push(t,e=0){return this.data.push({value:t,priority:e})}pop(){let t=0,e=1/0;for(let i=0;i<this.data.length;i++){let n=this.data[i].priority;Math.min(e,n)===n&&(e=n,t=i)}return this.data.splice(t,1)[0].value}size(){return this.data.length}empty(){return 0===this.data.length}}class o{static breadthFirstSearch(t,e){let i=[];const n=[];i.push(t);const o=new Map;o.set(t,t);let r=0;for(;i.length>0&&r<e;){const t=[];for(const e of i)for(let i=0;i<e.connectedNodes.length;i++){const r=e.connectedNodes[i];r.occupied||o.has(r)||(t.push(r),n.push(r),o.set(r,e))}i=t,r++}return n}static calculatePath(t,e){const i=new n;i.push(t,0);const o=new Map,r=new Map;for(o.set(t,t),r.set(t,0);!i.empty();){const t=i.pop();if(t.equals(e))break;for(let n=0;n<t.connectedNodes.length;n++){const a=t.connectedNodes[n],s=r.get(t)+1;if(!a.occupied&&(!r.has(a)||s<r.get(a))){r.set(a,s);let n=s+this.heuristic(a,e);i.push(a,n),o.set(a,t)}}}let a=e,s=!1;const c=[];for(c.push(a);!a.equals(t)&&!s;)o.has(a)||!a.equals(e)?(a=o.get(a),c.push(a)):s=!0;return s?void 0:c}static calculateWaypointsPath(t,e){const i=new n;i.push(t,0);const o=new Map,r=new Map;for(o.set(t,t),r.set(t,0);!i.empty();){const t=i.pop();if(t.equals(e))break;for(let n=0;n<t.connectedNodes.length;n++){const a=t.connectedNodes[n],s=this.getDistSquared(a,t),c=r.get(t)+s;if(!a.occupied&&(!r.has(a)||c<r.get(a))){r.set(a,c);let n=c+this.heuristic(a,e);i.push(a,n),o.set(a,t)}}}let a=e,s=!1;const c=[];for(c.push(a);!a.equals(t)&&!s;)o.has(a)||!a.equals(e)?(a=o.get(a),c.push(a)):s=!0;return s?void 0:c}static getDistSquared(t,e){return(t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y)+(t.z-e.z)*(t.z-e.z)}static heuristic(t,e){return Math.abs(t.x-e.x)+Math.abs(t.y-e.y)+Math.abs(t.z-e.z)}static calculateBresenhamLine(t,e,i,n){let o=i-t,r=n-e,a=Math.abs(o),s=Math.abs(r);const c=o>0?1:-1,h=r>0?1:-1,d={x:t,y:0,z:e},l=[];for(let t=0,e=0;t<a||e<s;)(.5+t)/a<(.5+e)/s?(d.x+=c,t++):(d.z+=h,e++),l.push({x:d.x,y:0,z:d.z});return l}static checkValidLine(t,e){let i=!0;for(const n of t)e.some((t=>t.equals(n)))||(i=!1);return i}}},917:(t,e,i)=>{i.d(e,{u:()=>r});const{Proxy:n}=i(710),{GameStateVO:o}=i(448);class r extends n{get vo(){return this.getData()}static get NAME(){return"GameStateProxy"}constructor(){super(r.NAME,new o)}updateGameStateType(t){this.vo.gameplayMode=t}get currentMode(){return this.vo.gameplayMode}get currentAction(){return this.vo.selectedAction}set currentAction(t){this.vo.selectedAction=t}}},448:(t,e,i)=>{i.r(e),i.d(e,{gameplayModeTypes:()=>n,GameStateVO:()=>o});const n={EXPLORATION:"EXPLORATION",COMBAT:"COMBAT",DIALOGUE:"DIALOGUE",GAME_OVER:"GAME_OVER"};class o{constructor(){this.gameplayMode=n.EXPLORATION,this.selectedAction="none"}}},838:(t,e,i)=>{i.r(e),i.d(e,{InventoryVO:()=>o});class n{constructor(t,e){this.name=t,this.size=e}}class o{constructor(){this.inventoryItems=[],this.addItem("Test One"),this.addItem("Test Two"),this.addItem("Test Three"),this.addItem("Test Four"),this.addItem("Test Five",3)}addItem(t,e=1){this.inventoryItems.push(new n(t,e))}}},553:(t,e,i)=>{i.r(e),i.d(e,{StoryVO:()=>n});class n{constructor(){}}},321:(t,e,i)=>{i.d(e,{y:()=>c});var n=i(210),o=i(969),r=i(434),a=i(958);const{Mediator:s}=i(710);class c extends s{static get NAME(){return"GameCharacterMediator_"}constructor(t,e,i){super(c.NAME+t),this.id=t;let o=[n.i.CHANGE_SCENE_COMPLETE,n.i.NAVIGATE_TO_NODE+this.id,n.i.NAVIGATE_TO_WAYPOINT+this.id,n.i.NAVIGATE_ALONG_PATH+this.id,n.i.SET_CHARACTER_TO_NODE+this.id,n.i.DISPLAY_DEATH+this.id,n.i.DISPLAY_ATTACK+this.id,n.i.DISPLAY_HIT+this.id,n.i.CHARACTER_LOOK_AT+this.id,n.i.START_COMBAT,n.i.MAP_GRID_CREATED];o=o.concat(i),this.subscribeNotification(o),this.viewComponent=e,this.viewComponent.on("updateCurrentNode",this.updateCurrentNode,this),this.viewComponent.on("finishedMove",this.handleFinishedMode,this),this.viewComponent.on("destroy",(()=>{this.viewComponent.off("updateCurrentNode",this.updateCurrentNode,this),this.viewComponent.off("finishedMove",this.handleFinishedMode,this)}))}onRegister(t){super.onRegister(t)}handleNotification(t,...e){this.viewComponent&&this.viewComponent.fire(t,this.id,...e);for(const i in this.viewComponent.script)if(Object.hasOwnProperty.call(this.viewComponent.script,i)){const n=this.viewComponent.script[i];"function"==typeof n.handleNotification&&n.handleNotification(t,this.id,...e)}switch(t){case n.i.START_COMBAT:this.handleStartCombat();break;case n.i.MAP_GRID_CREATED:const t=this.facade.retrieveProxy(o.h.NAME);this.facade.retrieveProxy(a.b.NAME+this.id).currentNode=t.findNearestNode(this.viewComponent.getLocalPosition());break;case n.i.NAVIGATE_TO_NODE+this.id:this.handleNavigateToNode(e[0]);break;case n.i.NAVIGATE_TO_WAYPOINT+this.id:this.handleNavigateToWaypoint(e[0]);break;case n.i.NAVIGATE_ALONG_PATH+this.id:this.handleNavigateAlongPath(e[0]);break;case n.i.SET_CHARACTER_TO_NODE+this.id:this.handleSetCharacterToNode(e[0]);break;case n.i.CHARACTER_LOOK_AT+this.id:const i=e[0];this.viewComponent.script.GameCharacterComponent.lookAtPoint(i);break;case n.i.DISPLAY_DEATH+this.id:const r=this.viewComponent.findByName("Hitbox");r&&r.fire("stopListening"),this.viewComponent.script.GameCharacterComponent.animateDeath();break;case n.i.DISPLAY_ATTACK+this.id:this.viewComponent.script.GameCharacterComponent.animateAttack();break;case n.i.DISPLAY_HIT+this.id:this.viewComponent.script.GameCharacterComponent.animateHit()}}handleNavigateToNode(t){const e=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(a.b.NAME+this.id);i.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition());const n=r.q.calculatePath(i.currentNode,t);n&&n.length>0&&(this.viewComponent.script.GameCharacterComponent.setPath(n),i.currentNode=t)}handleNavigateToWaypoint(t){const e=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(a.b.NAME+this.id);i.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition());const n=i.currentNode,s=e.findNearestWaypoint(this.viewComponent.getLocalPosition()),c=e.findNearestWaypoint(t);if(e.hasValidLine(n,t)){const e=[t,n];this.viewComponent.script.GameCharacterComponent.setPath(e),i.currentNode=t}else{const o=r.q.calculateWaypointsPath(s,c);if(o&&o.length>0){o.length>1&&e.hasValidLine(o[1],t)&&o.shift();let r=!0;for(;o.length>1&&r;)e.hasValidLine(o[o.length-2],n)?o.pop():r=!1;o.unshift(t),this.viewComponent.script.GameCharacterComponent.setPath(o),i.currentNode=t}}}handleNavigateAlongPath(t){this.viewComponent.script.GameCharacterComponent.setPath(t)}moveToNodeWithPromise(t){const e=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(a.b.NAME+this.id);i.currentNode,i.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition());const n=r.q.calculatePath(i.currentNode,t);return n&&n.length>0&&(this.viewComponent.script.GameCharacterComponent.setPath(n),i.currentNode=t),new Promise(((t,e)=>{this.viewComponent.on("finishedMove",(()=>{t()})),this.viewComponent.on("cancelMove",(()=>{e()}))}))}handleNavigateAlongPathWithPromise(t){return this.viewComponent.script.GameCharacterComponent.setPath(t),new Promise(((t,e)=>{this.viewComponent.on("finishedMove",(()=>{t()})),this.viewComponent.on("cancelMove",(()=>{e()}))}))}updateCurrentNode(t){this.facade.sendNotification(n.i.MOVED_TO_NODE+this.id,t)}handleFinishedMode(t){this.facade.sendNotification(n.i.FINISHED_MOVE,this.id,t)}lookForCharacter(t,e){for(const i of this.searchArea)i.equals(e)&&(this.viewComponent.script.GameCharacterComponent.lookAtPoint(e),this.facade.sendNotification(n.i.START_COMBAT,this.viewComponent,[t]))}handleStartCombat(){this.facade.retrieveProxy(a.b.NAME+this.id).vo}handleSetCharacterToNode(t){this.facade.retrieveProxy(a.b.NAME+this.id).currentNode=t,this.viewComponent.script.GameCharacterComponent.stopMovement(t)}}},852:(t,e,i)=>{i.d(e,{N:()=>o});const{Mediator:n}=i(710);class o extends n{static get NAME(){return"ProjectileCreatorMediator"}constructor(t){super(o.NAME),this.subscribeNotification([]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...e){}createProjectile(t,e,i){return this.viewComponent.script.ProjectileCreatorComponent.createProjectile(t,e,i)}}}},e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t=i(853),e=i(210);const{Facade:n}=i(710),{GameFacade:o}=i(853),r=pc.createScript("CacogenGame");r.prototype.initialize=function(){this.facade=n.getInstance(o.KEY),this.facade.sendNotification(e.i.APP_INITIALISED),this.facade.sendNotification(e.i.CHANGE_SCENE,"Port Taringo","entrance")},r.prototype.update=function(t){};var a=i(434);const s=pc.createScript("NavigationComponent");s.attributes.add("connectedComponents",{type:"entity",array:!0,title:"Connected Components"}),s.prototype.initialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,.05,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.findByName("Plane").enabled=!1,this.entity.once("destroy",(()=>{this.app.off("picker:raycast",this.handleRayCast,this)}))},s.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity,i,e)},s.prototype.setGrid=function(t){this.nodeGrid=t},s.prototype.getGrid=function(){return this.nodeGrid},s.prototype.getNearestNode=function(t){let e=this.nodeGrid[0],i=a.q.getDistSquared(e,t);for(const n of this.nodeGrid){const o=a.q.getDistSquared(n,t);o<i&&(i=o,e=n)}return e};var c=i(710),h=i(958),d=i(321),l=i(316),p=i(829),u=i(969);const E=pc.createScript("GameCharacterComponent");function g(t){const e=new Map;for(const i of t)e.set(i.skillName,i.skillValue);return e}E.attributes.add("characterId",{type:"string",title:"Character Id"}),E.attributes.add("characterSpeed",{type:"number",title:"Character Speed",default:4}),E.attributes.add("characterHeight",{type:"number",title:"Character Height",default:1.8}),E.attributes.add("isNPC",{type:"boolean",title:"is NPC",default:!0}),E.attributes.add("statsOverrides",{type:"json",title:"Stats Overrides",schema:[{name:"skill",title:"Skill",type:"number",default:1},{name:"maxStamina",title:"Stamina",type:"number",default:1},{name:"maxLuck",title:"Luck",type:"number",default:1},{name:"initiative",title:"Initiative",type:"number",default:2},{name:"maxMovement",title:"Movement",type:"number",default:6}]}),E.attributes.add("advancedSkills",{type:"json",title:"Advanced Skills",schema:[{name:"skillName",title:"Skill Name",type:"string"},{name:"skillValue",title:"Skill Value",type:"number"}],array:!0}),E.attributes.add("combatGroupName",{type:"string",title:"Combat Group Name"}),E.attributes.add("dialogueTreeName",{type:"string",title:"Dialogue Tree Name"}),E.attributes.add("botBehaviour",{type:"number",title:"Bot Behaviour",enum:l._,default:0}),E.attributes.add("equippedWeapon",{type:"string",title:"Equipped Weapon",enum:p.E,default:"unarmed"}),E.prototype.preregisterNotification=function(t){this.preregisteredNotifications||(this.preregisteredNotifications=[]),this.preregisteredNotifications.push(t)},E.prototype.postInitialize=function(){this.movementPath=[],this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.preregisteredNotifications||(this.preregisteredNotifications=[]);const e=this.statsOverrides,i={id:this.characterId,isNPC:this.isNPC,height:this.characterHeight,advancedSkills:g(this.advancedSkills),equippedWeapon:this.equippedWeapon,...e,botBehaviour:this.botBehaviour,dialogueTree:this.dialogueTreeName};if(this.combatGroupName&&""!==this.combatGroupName){const t=this.app.root.findByTag("combatGroup:"+this.combatGroupName),e=[];for(const i of t)if(i.enabled){const t=i.script.GameCharacterComponent.characterId;e.push(t)}i.combatGroup=e}if(this.facade.hasMediator(d.y.NAME+this.characterId)&&this.facade.removeMediator(d.y.NAME+this.characterId),this.facade.hasProxy(h.b.NAME+this.characterId));else{const t=new h.b(i),e=this.facade.retrieveProxy(u.h.NAME);if(e){const i=e.findNearestNode(this.entity.getPosition());t.currentNode=i}this.facade.registerProxy(t)}this.facade.registerMediator(new d.y(this.characterId,this.entity,this.preregisteredNotifications)),this.vehicle=this.entity.script.VehicleComponent,this.entity.animation.play("idle.glb",.1)},E.prototype.setPath=function(t){this.movementPath&&this.movementPath.length>0&&this.entity.fire("cancelMove"),this.movementPath=t,this.entity.animation.loop=!0,this.entity.animation.play("walk.glb",.1)},E.prototype.stopMovement=function(t){this.movementPath=[],this.entity.setLocalPosition(t.x,t.y,t.z),this.entity.animation.loop=!0,this.entity.animation.play("idle.glb",.1)},E.prototype.update=function(t){this.moveAlongPath(t)},E.prototype.moveAlongPath=function(t){if(this.movementPath.length>0){const e=this.movementPath[this.movementPath.length-1],i=this.entity.getLocalPosition(),n=new pc.Vec3(e.x,e.y,e.z);if(i.distance(n)<=t*this.characterSpeed){const t=this.movementPath.pop();0===this.movementPath.length&&(this.entity.fire("finishedMove",t),this.entity.animation.loop=!0,this.entity.animation.play("idle.glb",.1)),this.entity.fire("updateCurrentNode",t)}else this.movementPath.length>1?this.vehicle.seek(n,t):this.vehicle.arrive(n,t),this.vehicle.processVelocity(t)}},E.prototype.lookAtPoint=function(t){const e=this.entity.getLocalPosition(),i=t.x-e.x,n=t.z-e.z,o=180*Math.atan2(i,n)/Math.PI;this.entity.setEulerAngles(0,o,0)},E.prototype.animateDeath=function(){this.entity.animation.loop=!1,this.entity.animation.play("die.glb",.1)},E.prototype.animateHit=function(){this.entity.animation.loop=!1,this.entity.animation.play("hit.glb",.1)},E.prototype.animateAttack=function(){this.entity.animation.loop=!1,this.entity.animation.play("attack.glb",.1)};var A=i(917),f=i(448);const y=pc.createScript("AgroGameCharacterComponent");y.attributes.add("sightRange",{type:"number",title:"Sight Range",default:5}),y.prototype.initialize=function(){this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MAP_GRID_CREATED),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MOVED_TO_NODE+"player"),this.entity.on(e.i.MAP_GRID_CREATED,this.handleMapGridCreated,this),this.entity.on(e.i.MOVED_TO_NODE+"player",this.handleMovedToNode,this),console.log("Wait for initial")},y.prototype.handleMapGridCreated=function(e,...i){const n=c.Facade.getInstance(t.GameFacade.KEY);this.characterProxy=n.retrieveProxy(h.b.NAME+e)},y.prototype.handleMovedToNode=function(i,n){const o=c.Facade.getInstance(t.GameFacade.KEY);if(o.retrieveProxy(A.u.NAME).vo.gameplayMode!==f.gameplayModeTypes.EXPLORATION||this.characterProxy.isDead)return;const r=this.characterProxy.currentNode,a=new pc.Vec3(r.x,r.y,r.z),s=new pc.Vec3(n.x,n.y,n.z);if(a.distance(s)<=this.sightRange){const t=o.retrieveProxy(u.h.NAME);a.y+=this.characterProxy.height,t.rayIntersectsWall(a,s)||(o.sendNotification(e.i.SET_CHARACTER_TO_NODE+"player",n),o.sendNotification(e.i.START_COMBAT,i))}};const{Mediator:m}=i(710);class N extends m{static get NAME(){return"ToastMessageMediator"}constructor(t){super(N.NAME),this.subscribeNotification([e.i.SHOW_TOAST_MESSAGE]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SHOW_TOAST_MESSAGE:this.viewComponent.script.ToastMessageComponent.addMessage(i[0])}}}const C=pc.createScript("ToastMessageComponent");C.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),C.attributes.add("messageTime",{type:"number",default:5,title:"Message Time"}),C.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(N.NAME)&&this.facade.removeMediator(N.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new N(this.entity))},C.prototype.addMessage=function(t){0===this.messageQueue.length?(this.messageQueue.push(t),this.showNextMessage()):this.messageQueue.push(t)},C.prototype.showNextMessage=function(){if(this.messageQueue.length>0){const t=this.messageQueue[0];this.labelEntity.element.text=t,setTimeout((()=>{this.messageQueue.shift(),this.showNextMessage()}),1e3*this.messageTime)}else this.labelEntity.element.text=""},pc.createScript("SetCameraTargetComponent").prototype.postInitialize=function(){c.Facade.getInstance(t.GameFacade.KEY).sendNotification(e.i.SET_CAMERA_TARGET,this.entity)};const{Mediator:T}=i(710);class _ extends T{static get NAME(){return"InputLayerMediator"}constructor(t){super(_.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE]),this.viewComponent=t,this.viewComponent.on("picker:gameCharacter",this.handlePickerGameCharacter,this),this.viewComponent.on("picker:navigation",this.handlePickerNavigation,this),this.viewComponent.on("scrolling",this.handleScrolling,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:}}handlePickerGameCharacter(t){this.facade.sendNotification(e.i.SELECT_GAME_CHARACTER,t)}handlePickerNavigation(t){this.facade.sendNotification(e.i.SELECTED_NODE,t)}handleScrolling(t){this.facade.sendNotification(e.i.INPUT_DRAG_MOUSE,t)}}const M=pc.createScript("GameCamera");M.attributes.add("distance",{type:"number",default:100,title:"Distance"}),M.attributes.add("dragMultiplierX",{type:"number",default:.5,title:"Drag Multiplier"}),M.attributes.add("dragMultiplierY",{type:"number",default:.5,title:"Drag Multiplier"}),M.attributes.add("verticalScroll",{type:"boolean",default:!1,title:"Vertical Scroll"}),M.attributes.add("minCameraHeight",{type:"number",default:5,title:"Min Camera Height"}),M.attributes.add("maxCameraHeight",{type:"number",default:100,title:"Max Camera Height"}),M.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(P.NAME)&&this.facade.removeMediator(P.NAME),this.facade.registerMediator(new P(this.entity))},M.prototype.setCameraTarget=function(t){this.cameraTarget=t,this.rotation=this.entity.getEulerAngles().y,this.cameraHeight=this.entity.getLocalPosition().y},M.prototype.handleDrag=function(t){if(this.rotation+=t.x*this.dragMultiplierX,this.verticalScroll){let e=this.cameraHeight-t.y*this.dragMultiplierY;e=pc.math.clamp(e,this.minCameraHeight,this.maxCameraHeight),this.cameraHeight=e}},M.prototype.getTargetCameraPosition=function(t){const e=this.entity.getLocalPosition(),i=Math.sin(this.rotation*Math.PI/180)*this.distance,n=Math.cos(this.rotation*Math.PI/180)*this.distance;return new pc.Vec3(t.x+i,e.y,t.z+n)},M.prototype.update=function(t){if(this.cameraTarget){const t=this.cameraTarget.getLocalPosition(),e=this.getTargetCameraPosition(t),i=this.entity.getLocalPosition(),n=(e.x+9*i.x)/10,o=(this.cameraHeight+9*i.y)/10,r=(e.z+9*i.z)/10;this.entity.setLocalPosition(n,o,r),this.entity.lookAt(t)}};const{Mediator:v}=i(710);class P extends v{static get NAME(){return"GameCameraMediator"}constructor(t){super(P.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.INPUT_DRAG_MOUSE,e.i.SET_CAMERA_TARGET]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SET_CAMERA_TARGET:this.viewComponent.script.GameCamera.setCameraTarget(i[0]);break;case e.i.INPUT_DRAG_MOUSE:this.viewComponent.script.GameCamera.handleDrag(i[0])}}}const b=pc.createScript("InputLayerComponent");b.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),b.attributes.add("dragTime",{type:"number",title:"Drag Time",default:.4}),b.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(_.NAME)&&this.facade.removeMediator(_.NAME),this.facade.registerMediator(new _(this.entity)),this.ray=new pc.Ray,this.inputQueue=[],this.app.mouse.disableContextMenu(),this.clickDownStart=0,this.isDragging=!1,this.app.on("picker:result",this.handlePickerResult,this),this.app.mouse&&(this.app.mouse.on(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.entity.element.on(pc.EVENT_MOUSEDOWN,this.onMouseDown,this),this.app.mouse.on(pc.EVENT_MOUSEUP,this.onMouseUp,this),this.entity.once("destroy",(()=>{this.app.mouse.off(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.app.mouse.off(pc.EVENT_MOUSEUP,this.onMouseUp,this)}))),this.app.touch&&(this.app.touch.on(pc.EVENT_TOUCHMOVE,(t=>{this.onMouseMove(t.touches[0])})),this.entity.element.on(pc.EVENT_TOUCHSTART,(t=>{this.onMouseDown(t.touches[0])})),this.entity.element.on(pc.EVENT_TOUCHEND,(t=>{this.onMouseUp()})))},b.prototype.onMouseDown=function(t){this.isDragging=!0,this.clickDownStart=Date.now(),this.clickStartPoint={x:t.x,y:t.y}},b.prototype.onMouseMove=function(t){if(this.isDragging){const e=new pc.Vec2(this.clickStartPoint.x-t.x,this.clickStartPoint.y-t.y);this.entity.fire("scrolling",e),this.clickStartPoint={x:t.x,y:t.y}}},b.prototype.onMouseUp=function(){this.isDragging=!1,Date.now()-this.clickDownStart<1e3*this.dragTime&&this.clickStartPoint&&this.handleRaycastCollisions(this.clickStartPoint.x,this.clickStartPoint.y)},b.prototype.handleRaycastCollisions=function(t,e){const i=this.cameraEntity,n=this.cameraEntity.camera;n.screenToWorld(t,e,n.farClip,this.ray.direction),this.ray.origin.copy(i.getPosition()),this.ray.direction.sub(this.ray.origin).normalize(),this.app.fire("picker:raycast",this.ray,{x:t,y:e})},b.prototype.handlePickerResult=function(t,e,i){this.inputQueue.push({entity:t,hitPosition:e,screenPosition:i})},b.prototype.update=function(t){this.processInputQueue()},b.prototype.processInputQueue=function(){if(this.inputQueue.length>0){let e=this.inputQueue[0],i=-1;for(const n of this.inputQueue){const o=(t=n.entity).tags.has("gameCharacter")?3:t.tags.has("portal")?2:t.tags.has("navigation")?1:-1;o>i&&(e=n,i=o)}this.inputQueue=[],e.entity.tags.has("gameCharacter")&&this.pickedGameCharacter(e.entity,e.hitPosition),e.entity.tags.has("navigation")&&this.pickedNavigation(e.entity,e.hitPosition),e.entity.tags.has("portal")&&this.pickedPortal(e.entity,e.hitPosition)}var t},b.prototype.pickedGameCharacter=function(t,e){this.entity.fire("picker:gameCharacter",t)},b.prototype.pickedNavigation=function(t,e){const i=t.script.NavigationComponent.getNearestNode(e);this.entity.fire("picker:navigation",i)},b.prototype.pickedPortal=function(t,e){t.fire("picker:portal")};const{Mediator:S}=i(710);class O extends S{static get NAME(){return"PlayerCombatPanelMediator"}constructor(t){super(O.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.AWAIT_PLAYER_COMBAT_INPUT,e.i.END_COMBAT_TURN]),this.viewComponent=t,this.viewComponent.on("click:endTurn",this.handleEndTurn,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:this.viewComponent.enabled=!1;break;case e.i.AWAIT_PLAYER_COMBAT_INPUT:this.viewComponent.enabled=!0;break;case e.i.END_COMBAT_TURN:this.viewComponent.enabled=!1}}handleEndTurn(t){this.sendNotification(e.i.END_COMBAT_TURN)}}const I=pc.createScript("PlayerCombatPanelComponent");I.attributes.add("endTurnButton",{type:"entity",title:"End Turn button"}),I.prototype.initialize=function(){},I.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(O.NAME)&&this.facade.removeMediator(O.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new O(this.entity)),this.endTurnButton.element.on("click",this.clickEndTurn,this)},I.prototype.clickEndTurn=function(t){this.entity.fire("click:endTurn")};const x=pc.createScript("HitboxComponent");x.prototype.postInitialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,t.y/2,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.on("stopListening",(()=>{this.app.off("picker:raycast",this.handleRayCast,this)})),this.entity.on("destroy",(()=>{this.app.off("picker:raycast",this.handleRayCast,this)})),this.entity.model.enabled=!1},x.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity.parent,i,e)},x.prototype.update=function(t){this.aabb.center.copy(this.entity.getPosition())};const{Mediator:L}=i(710);class D extends L{static get NAME(){return"ActionPanelMediator"}constructor(t){super(D.NAME),this.subscribeNotification([e.i.SET_PLAYER_ACTION,e.i.TOGGLE_BUTTON,e.i.USE_PLAYER_ACTION]),this.viewComponent=t,this.viewComponent.on("click:fireCommand",this.handleFireCommand,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.TOGGLE_BUTTON:const t=i[0];this.viewComponent.script.ActionPanelComponent.selectAction(t);break;case e.i.USE_PLAYER_ACTION:}}handleFireCommand(t,...e){this.facade.sendNotification(t,...e)}}const w=pc.createScript("ActionButtonComponent");w.attributes.add("highlightEntity",{type:"entity",title:"Highlight Entity"}),w.attributes.add("iconEntity",{type:"entity",title:"Icon Entity"}),w.attributes.add("commands",{type:"json",schema:[{name:"commandName",title:"Command name",type:"string"},{name:"commandArgs",title:"Command arguments",type:"string",array:!0}],title:"Command name",array:!0}),w.prototype.initialize=function(){this.highlightEntity.enabled=!1,this.entity.on("select:action",this.handleChangeAction,this),this.entity.element.on("click",this.handleClick,this)},w.prototype.handleClick=function(t){for(const t of this.commands){const e=t.commandName,i=t.commandArgs;this.entity.parent.fire("click:fireCommand",e,...i)}},w.prototype.handleChangeAction=function(t){this.entity.name===t?this.highlightEntity.enabled=!this.highlightEntity.enabled:this.highlightEntity.enabled=!1};const R=pc.createScript("ActionPanelComponent");R.attributes.add("actionButtons",{type:"entity",title:"Action Buttons",array:!0}),R.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(D.NAME)&&this.facade.removeMediator(D.NAME),this.facade.registerMediator(new D(this.entity))},R.prototype.selectAction=function(t){for(const e of this.actionButtons)e.fire("select:action",t)},pc.createScript("UIStopPropagation").prototype.initialize=function(){this.entity.element.on(pc.EVENT_MOUSEDOWN,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_MOUSEDOWN,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHSTART,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHMOVE,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHEND,(t=>{t.stopPropagation()}))};var G=i(852);const k=pc.createScript("ProjectileCreatorComponent");k.attributes.add("projectileTypes",{type:"json",title:"Projectile Types",schema:[{name:"projectileName",title:"Projectile Name",type:"string"},{name:"projectileTemplate",title:"Projectile Template",type:"asset"}],array:!0}),k.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(G.N.NAME)&&this.facade.removeMediator(G.N.NAME),this.facade.registerMediator(new G.N(this.entity))},k.prototype.createProjectile=function(t,e,i){return new Promise(((n,o)=>{const r=this.projectileTypes.find((e=>e.projectileName===t));if(!r)throw o(),new Error(`Unable to create projectile "${t}"`);{const t=r.projectileTemplate.resource.instantiate();this.entity.addChild(t),t.once("projectileArrived",(()=>{n()})),t.script.ProjectileComponent.setTarget(e,i)}}))};const U=pc.createScript("ProjectileComponent");U.attributes.add("projectileSpeed",{type:"number",title:"Projectile Speed",default:8}),U.prototype.initialize=function(){},U.prototype.setTarget=function(t,e){this.entity.setLocalPosition(t.x,t.y,t.z),this.targetPoint=e,this.lookAtPoint(this.targetPoint)},U.prototype.update=function(t){if(this.targetPoint){const e=this.entity.getLocalPosition(),i=new pc.Vec3,n=new pc.Vec3(t*this.projectileSpeed,t*this.projectileSpeed,t*this.projectileSpeed);i.sub2(this.targetPoint.clone(),e),i.normalize(),i.mul(n),i.add(e),this.entity.setLocalPosition(i),i.distance(this.targetPoint)<=t*this.projectileSpeed&&(this.entity.fire("projectileArrived"),this.entity.destroy())}},U.prototype.lookAtPoint=function(t){const e=this.entity.getLocalPosition(),i=t.x-e.x,n=t.z-e.z,o=180*Math.atan2(i,n)/Math.PI;this.entity.setEulerAngles(0,o,0)};const{Mediator:H}=i(710);class V extends H{static get NAME(){return"StaminaBarMediator"}constructor(t){super(V.NAME),this.subscribeNotification([e.i.CHANGE_STAMINA+"player"]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_STAMINA+"player":const t=i[0],n=i[1];this.viewComponent.script.StaminaBarComponent.updateStamina(t,n)}}}const F=pc.createScript("StaminaBarComponent");F.attributes.add("barEntity",{type:"entity",title:"Bar Entity"}),F.attributes.add("staminaLabel",{type:"entity",title:"Stamina Label"}),F.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(V.NAME)&&this.facade.removeMediator(V.NAME),this.facade.registerMediator(new V(this.entity)),this.barEntityMaxWidth=this.barEntity.element.width},F.prototype.updateStamina=function(t,e){const i=pc.math.clamp(t/e,0,1),n=pc.math.lerp(0,this.barEntityMaxWidth,i);this.barEntity.element.width=n,this.barEntity.element.rect.z=i,this.barEntity.element.rect=this.barEntity.element.rect,this.staminaLabel.element.text=`${t}/${e}`};const{Mediator:B}=i(710);class z extends B{static get NAME(){return"ActionsRemainingPanelMediator"}constructor(t){super(z.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.AWAIT_PLAYER_COMBAT_INPUT,e.i.END_COMBAT_TURN,e.i.USE_ACTION+"player"]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:this.viewComponent.enabled=!1;break;case e.i.AWAIT_PLAYER_COMBAT_INPUT:const t=this.facade.retrieveProxy(h.b.NAME+"player"),n=t.availableActions,o=t.maxActionsPerTurn;this.viewComponent.script.ActionsRemainingPanelComponent.showAvailableAction(n,o),this.viewComponent.enabled=!0;break;case e.i.USE_ACTION+"player":this.viewComponent.script.ActionsRemainingPanelComponent.showAvailableAction(i[0],i[1]);break;case e.i.END_COMBAT_TURN:this.viewComponent.enabled=!1}}}const W=pc.createScript("ActionsRemainingPanelComponent");W.attributes.add("pipTemplate",{type:"asset",title:"Pip Template"}),W.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(z.NAME)&&this.facade.removeMediator(z.NAME),this.facade.registerMediator(new z(this.entity)),this.pips=[]},W.prototype.showAvailableAction=function(t,e){for(;this.pips.length<e;)this.createPip();for(let e=0;e<this.pips.length;e++)e<t?this.pips[e].fire("togglePip",!0):this.pips[e].fire("togglePip",!1)},W.prototype.createPip=function(){const t=this.pipTemplate.resource.instantiate();this.entity.addChild(t),this.pips.push(t)};const Y=pc.createScript("ActionsRemainingPipComponent");Y.attributes.add("pipFront",{type:"entity",title:"Pip front"}),Y.prototype.initialize=function(){this.entity.on("togglePip",(t=>{this.pipFront.enabled=t}))};const{Mediator:K}=i(710);class q extends K{static get NAME(){return"FloatingStatusCreatorMediator"}constructor(t){super(q.NAME),this.subscribeNotification([e.i.DISPLAY_FLOATING_STATUS]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.DISPLAY_FLOATING_STATUS:const t=this.viewComponent.script.FloatingStatusCreatorComponent,n=i[0],o=i[1];t.displayStatus(n,o)}}}const j=pc.createScript("TemporaryFloatingStatusComponent");j.prototype.initialize=function(){},j.prototype.setWorldPosition=function(t,e,i){this.entity.enabled=!0,this.worldPosition=t,this.device=this.app.graphicsDevice,this.cameraEntity=e,this.screenEntity=i,setTimeout((()=>{this.entity.destroy()}),1e3)},j.prototype.postUpdate=function(t){const e=this.worldSpaceToScreenSpace(this.worldPosition.clone());e&&this.entity.setLocalPosition(e)},j.prototype.worldSpaceToScreenSpace=function(t){if(this.device&&this.cameraEntity&&this.screenEntity){const e=t.clone(),i=new pc.Vec3;this.cameraEntity.camera.worldToScreen(e,i);const n=this.app.graphicsDevice.maxPixelRatio;i.x*=n,i.y*=n;const o=this.screenEntity.screen.scale,r=i.x/o,a=(this.device.height-i.y)/o;return new pc.Vec3(r,a,0)}};const $=pc.createScript("FloatingStatusCreatorComponent");$.attributes.add("screenEntity",{type:"entity",title:"Screen Entity"}),$.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),$.attributes.add("floatingStatuses",{type:"json",schema:[{name:"name",title:"Name",type:"string"},{name:"template",title:"Template",type:"asset"}],title:"Floating Statuses",array:!0}),$.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(q.NAME)&&this.facade.removeMediator(q.NAME),this.facade.registerMediator(new q(this.entity))},$.prototype.displayStatus=function(t,e,...i){const n=this.floatingStatuses.find((e=>e.name===t));if(!n)throw new Error("Cannot create floating status: "+t);{const t=e.currentNode,i=new pc.Vec3(t.x,t.y+e.height,t.z),o=n.template.resource.instantiate();o.script.TemporaryFloatingStatusComponent.setWorldPosition(i,this.cameraEntity,this.screenEntity),this.entity.parent.addChild(o)}};const{Mediator:X}=i(710);class Q extends X{static get NAME(){return"PortalMediator"}constructor(t){super(Q.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE]),this.viewComponent=t,this.viewComponent.on("picker:portal",this.selectedPortal,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SET_CAMERA_TARGET:}}selectedPortal(){const t=this.facade.retrieveProxy(A.u.NAME),i=this.viewComponent.script.PortalComponent,n=i.destinationScene,o=i.destinationPortal,r=i.standingPoint.getPosition();t.currentMode===f.gameplayModeTypes.EXPLORATION&&this.facade.sendNotification(e.i.NAVIGATE_THROUGH_PORTAL,r,n,o)}}const J=pc.createScript("PortalComponent");J.attributes.add("portalId",{type:"string",title:"Portal Id"}),J.attributes.add("destinationScene",{type:"string",title:"Destination Scene"}),J.attributes.add("destinationPortal",{type:"string",title:"Destination Portal"}),J.attributes.add("hitbox",{type:"entity",title:"Hitbox"}),J.attributes.add("standingPoint",{type:"entity",title:"Standing Point"}),J.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(Q.NAME)&&this.facade.removeMediator(Q.NAME),this.facade.registerMediator(new Q(this.entity)),this.standingPoint.model.enabled=!1};const{Mediator:Z}=i(710);class tt extends Z{static get NAME(){return"DialoguePanelMediator"}constructor(t){super(tt.NAME),this.subscribeNotification([e.i.SHOW_DIALOGUE_PANEL,e.i.HIDE_DIALOGUE_PANEL,e.i.DISPLAY_DIALOGUE_STEP,e.i.DISPLAY_DIALOGUE_SKILL_TEST,e.i.CLEAR_DIALOGUE_CHOICES,e.i.SHOW_DIALOGUE_CONTINUE_BUTTON,e.i.HIDE_DIALOGUE_CONTINUE_BUTTON]),this.viewComponent=t,this.viewComponent.on("clicked:continue",this.handleClickContinue,this),this.viewComponent.on("clicked:choice",this.handleClickChoice,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SHOW_DIALOGUE_PANEL:this.viewComponent.enabled=!0;break;case e.i.HIDE_DIALOGUE_PANEL:this.viewComponent.script.DialoguePanelComponent.clearPanel(),this.viewComponent.enabled=!1;break;case e.i.DISPLAY_DIALOGUE_STEP:this.viewComponent.script.DialoguePanelComponent.createStep(i[0]);break;case e.i.DISPLAY_DIALOGUE_SKILL_TEST:this.viewComponent.script.DialoguePanelComponent.createSkillTest(...i);break;case e.i.CLEAR_DIALOGUE_CHOICES:this.viewComponent.script.DialoguePanelComponent.clearDialogueChoices();break;case e.i.SHOW_DIALOGUE_CONTINUE_BUTTON:this.viewComponent.script.DialoguePanelComponent.setContinueButton(!0);break;case e.i.HIDE_DIALOGUE_CONTINUE_BUTTON:this.viewComponent.script.DialoguePanelComponent.setContinueButton(!1)}}handleClickContinue(){this.facade.sendNotification(e.i.CONTINUE_DIALOGUE_NODE)}handleClickChoice(t){this.facade.sendNotification(e.i.SELECT_DIALOGUE_CHOICE,t)}}const et=pc.createScript("DialoguePanelComponent");et.attributes.add("scrollbarViewEntity",{type:"entity",title:"Scrollbar View"}),et.attributes.add("contentEntity",{type:"entity",title:"Content Entity"}),et.attributes.add("feedEntity",{type:"entity",title:"Feed Entity"}),et.attributes.add("contentHeight",{type:"number",title:"Content Height",default:520}),et.attributes.add("textEntryTemplate",{type:"asset",title:"Text Entry Asset"}),et.attributes.add("choiceEntryTemplate",{type:"asset",title:"Choice Entry Asset"}),et.attributes.add("skillTestEntryTemplate",{type:"asset",title:"Skill Test Entry Asset"}),et.attributes.add("continueButtonEntity",{type:"entity",title:"Continue Button"}),et.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(tt.NAME)&&this.facade.removeMediator(tt.NAME),this.facade.registerMediator(new tt(this.entity)),this.entity.enabled=!1,this.choices=[],this.continueButtonEntity.element.on("click",(()=>{this.entity.fire("clicked:continue")}),this)},et.prototype.createStep=function(t){if(this.createText(t.step),t.step.choices)for(let e=0;e<t.step.choices.length;e++){const i=t.step.choices[e];this.createChoice(e,i.text)}},et.prototype.createText=function(t){const e=this.textEntryTemplate.resource.instantiate();e.script.DialogueTextComponent.setup(t),this.feedEntity.addChild(e),this.resizeToContents(),setTimeout((()=>{this.scrollbarViewEntity.scrollbar.value=1}),50)},et.prototype.createChoice=function(t,e){const i=this.choiceEntryTemplate.resource.instantiate();i.script.DialogueChoiceComponent.setup(t,e),i.element.text=e,this.feedEntity.addChild(i),this.choices.push(i),i.on("click",this.handleSelectChoice,this),this.resizeToContents(),setTimeout((()=>{this.scrollbarViewEntity.scrollbar.value=1}),50)},et.prototype.createSkillTest=function(t,e,i,n,o){const r=this.skillTestEntryTemplate.resource.instantiate();r.script.DialogueSkillTestComponent.setup(t,e,i,n,o),this.feedEntity.addChild(r),this.resizeToContents(),setTimeout((()=>{this.scrollbarViewEntity.scrollbar.value=1}),50)},et.prototype.clearDialogueChoices=function(){for(const t of this.choices)t.off("click",this.handleSelectChoice,this),t.destroy();this.choices=[]},et.prototype.clearPanel=function(){for(;this.feedEntity.children.length>0;)this.feedEntity.children[0].destroy()},et.prototype.handleSelectChoice=function(t){this.entity.fire("clicked:choice",t)},et.prototype.resizeToContents=function(){let t=this.feedEntity.layoutgroup.spacing.y,e=0;for(const i of this.feedEntity.children)e+=i.element.height,e+=t;this.contentEntity.element.height=Math.max(this.contentHeight,e)},et.prototype.setContinueButton=function(t){this.continueButtonEntity.enabled=t};const it=pc.createScript("DialogueChoiceComponent");it.attributes.add("indexEntity",{type:"entity",title:"Index Entity"}),it.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),it.prototype.initialize=function(){},it.prototype.setup=function(t,e){this.indexEntity.element.text=t+1+".",this.labelEntity.element.text=e,this.entity.element.height=this.labelEntity.element.height,this.entity.element.on("click",(()=>{this.entity.fire("click",t)}))},it.prototype.update=function(t){this.entity.element.height=this.labelEntity.element.height};const nt=pc.createScript("DefaultAnimationComponent");nt.attributes.add("animationName",{type:"string",title:"Animation Name"}),nt.prototype.postInitialize=function(){this.entity.animation.loop=!0,this.entity.animation.play(this.animationName,.1)};const ot=pc.createScript("DialogueTextComponent");ot.attributes.add("withImageWidth",{type:"number",title:"With Image Width",default:340}),ot.attributes.add("withoutImageWidth",{type:"number",title:"With Image Width",default:360}),ot.attributes.add("textContainer",{type:"entity",title:"Text Container"}),ot.attributes.add("titleEntity",{type:"entity",title:"Title Entity"}),ot.attributes.add("bodyEntity",{type:"entity",title:"Body Entity"}),ot.attributes.add("thumbnailContainer",{type:"entity",title:"Thumbnail Container"}),ot.attributes.add("thumbnailImage",{type:"entity",title:"Thumbnail Image"}),ot.prototype.initialize=function(){},ot.prototype.setup=function(t){t.title?(this.titleEntity.element.text=t.title,t.titleColour&&this.titleEntity.element.color.fromString(t.titleColour)):this.titleEntity.enabled=!1,t.thumbnail?this.textContainer.element.width=this.withImageWidth:(this.textContainer.element.width=this.withoutImageWidth,this.thumbnailContainer.enable=!1),this.bodyEntity.element.text=t.text},ot.prototype.setHeight=function(){const t=this.thumbnailContainer.enable?this.thumbnailContainer.element.height:0;let e=0,i=this.textContainer.layoutgroup.spacing.y;for(const t of this.textContainer.children)e+=t.element.height+i;this.titleEntity.enabled||(this.bodyEntity.element.width=this.withImageWidth),this.entity.element.height=Math.max(t,e)},ot.prototype.postInitialize=function(){this.setHeight()},ot.prototype.update=function(t){};const{Mediator:rt}=i(710);class at extends rt{static get NAME(){return"AttackButtonMediator"}constructor(t){super(at.NAME),this.subscribeNotification([e.i.GAMEPLAY_ACTION_CHANGED]),this.viewComponent=t,this.viewComponent.on("click:toggleAttack",this.handleToggleAttack,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.GAMEPLAY_ACTION_CHANGED:"attack"===i[0]?this.viewComponent.script.AttackButtonComponent.toggleHighlight(!0):this.viewComponent.script.AttackButtonComponent.toggleHighlight(!1)}}handleToggleAttack(t){t?this.facade.sendNotification(e.i.GAMEPLAY_ACTION_CHANGED,"attack"):this.facade.sendNotification(e.i.GAMEPLAY_ACTION_CHANGED,"interact")}}const st=pc.createScript("AttackButtonComponent");st.attributes.add("highlightEntity",{type:"entity",title:"Highlight Entity"}),st.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(at.NAME)&&this.facade.removeMediator(at.NAME),this.facade.registerMediator(new at(this.entity)),this.entity.element.on("click",this.handleClick,this)},st.prototype.handleClick=function(t){this.entity.fire("click:toggleAttack",!this.highlightEntity.enabled)},st.prototype.toggleHighlight=function(t){this.highlightEntity.enabled=t};const ct=pc.createScript("VehicleComponent");function ht(t,e){return t.length()<e?t:t.normalize().scale(e)}ct.attributes.add("mass",{type:"number",title:"Mass",default:3}),ct.attributes.add("maxSpeed",{type:"number",title:"Max Speed",default:5}),ct.attributes.add("maxForce",{type:"number",title:"Max Force",default:.5}),ct.attributes.add("arriveThreshold",{type:"number",title:"Arrival Threshold",default:1}),ct.prototype.initialize=function(){this.velocity=new pc.Vec3,this.steeringForce=new pc.Vec3},ct.prototype.processVelocity=function(t){const e=this.entity.getPosition();this.steeringForce=ht(this.steeringForce,this.maxForce),this.steeringForce=this.steeringForce.scale(1/this.mass),this.velocity=this.velocity.add(this.steeringForce),this.velocity=ht(this.velocity,this.maxSpeed*t),this.steeringForce=new pc.Vec3,this.entity.setLocalPosition(e.add(this.velocity));const i=180*(n=this.velocity,Math.atan2(n.x,n.z))/Math.PI;var n;this.entity.setEulerAngles(0,i,0)},ct.prototype.seek=function(t,e){const i=this.entity.getLocalPosition();let n=t.clone().sub(i);n=n.normalize(),n.scale(this.maxSpeed*e);const o=n.sub(this.velocity);this.steeringForce=this.steeringForce.add(o)},ct.prototype.arrive=function(t){const e=this.entity.getPosition();let i=t.clone().sub(e).normalize().scale(this.maxSpeed);const n=e.distance(t);i=n>this.arrivalThreshold?i.scale(this.maxSpeed):i.scale(this.maxSpeed*n/this.arriveThreshold);const o=i.sub(this.velocity);this.steeringForce=this.steeringForce.add(o)};const dt=pc.createScript("ScreenResizeComponent");dt.prototype.window=window,dt.prototype.postInitialize=function(){this.onResize(),this.window.addEventListener("resize",this.onResize.bind(this),!1)},dt.prototype.onResize=function(){const t=this.app.graphicsDevice;t.width<t.height?this.entity.screen.scaleBlend=1:this.entity.screen.scaleBlend=0,this.entity.screen.referenceResolution=new pc.Vec2(t.width,t.height)};const lt=pc.createScript("DialogueSkillTestComponent");lt.attributes.add("skillNameLabel",{type:"entity",title:"Skill Name Label"}),lt.attributes.add("skillValueLabel",{type:"entity",title:"Skill Value Label"}),lt.attributes.add("die1Label",{type:"entity",title:"Die 1 Label"}),lt.attributes.add("die2Label",{type:"entity",title:"Die 2 Label"}),lt.attributes.add("successLabel",{type:"entity",title:"Success Label"}),lt.attributes.add("failureLabel",{type:"entity",title:"Failure Label"}),lt.prototype.initialize=function(){},lt.prototype.setup=function(t,e,i,n,o){this.skillNameLabel.element.text=t,this.skillValueLabel.element.text=e,this.die1Label.element.text=i,this.die2Label.element.text=n,this.successLabel.enabled=o,this.failureLabel.enabled=!o};const pt=pc.createScript("InventoryItemComponent");pt.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),pt.attributes.add("slotHeight",{type:"number",title:"Slot Height",default:44}),pt.prototype.initialize=function(){this._handleDragHelper=new pc.ElementDragHelper(this.entity.element,"y"),this._handleDragHelper.on("drag:start",this.onHandleDrag,this),this._handleDragHelper.on("drag:move",this.onHandleMove,this),this._handleDragHelper.on("drag:end",this.onHandleDrop,this)},pt.prototype.setup=function(t,e){this.labelEntity.element.text=t,this.entity.element.height=this.slotHeight*e},pt.prototype.onHandleDrag=function(){this.entity.parent.fire("drag:item",this.entity)},pt.prototype.onHandleMove=function(t){this.entity.parent.fire("move:item",this.entity,t)},pt.prototype.onHandleDrop=function(){this.entity.parent.fire("drop:item",this.entity)};const{Mediator:ut}=i(710);class Et extends ut{static get NAME(){return"InventoryPanelMediator"}constructor(t){super(Et.NAME),this.subscribeNotification([e.i.DISPLAY_INVENTORY_PANEL]),this.viewComponent=t,this.viewComponent.on("reorderItem",this.handeReorderItem,this),this.viewComponent.enabled=!1}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.DISPLAY_INVENTORY_PANEL:const t=i[0];this.viewComponent.script.InventoryPanelComponent.displayItems(t),this.viewComponent.enabled=!0}}handeReorderItem(t,i){this.facade.sendNotification(e.i.REORDER_INVETORY_ITEM,t,i)}}const gt=pc.createScript("InventoryPanelComponent");gt.attributes.add("slotContainer",{type:"entity",title:"Slot Container"}),gt.attributes.add("itemContainer",{type:"entity",title:"Item Container"}),gt.attributes.add("separatorHighlight",{type:"entity",title:"Separator Highlight"}),gt.attributes.add("closeButton",{type:"entity",title:"Close Button"}),gt.attributes.add("itemAsset",{type:"asset",title:"Item Asset"}),gt.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(Et.NAME)&&this.facade.removeMediator(Et.NAME),this.facade.registerMediator(new Et(this.entity)),this.itemContainer.on("drag:item",this.handleItemDrag,this),this.itemContainer.on("move:item",this.handleItemMove,this),this.itemContainer.on("drop:item",this.handleItemDrop,this),this.closeButton.element.on("click",this.handleClose,this),this.separatorHighlight.enabled=!1},gt.prototype.handleItemDrag=function(t){this.separatorHighlight.enabled=!0,this.setHighlightPosition(t.getLocalPosition())},gt.prototype.handleItemMove=function(t,e){this.setHighlightPosition(e)},gt.prototype.setHighlightPosition=function(t){const e=this.getSlotIndex(t),i=this.getSeparatorPosition(e);this.separatorHighlight.setLocalPosition(i)},gt.prototype.handleItemDrop=function(t){this.separatorHighlight.enabled=!1;const e=this.getIndexOfItem(t),i=this.getSlotIndex(t.getLocalPosition());this.entity.fire("reorderItem",e,i)},gt.prototype.getSlotIndex=function(t){let e=0;const i=t.y,n=this.slotContainer.children.length-1;i<this.slotContainer.children[n].getLocalPosition().y&&(e=n);for(let t=0;t<this.slotContainer.children.length;t++){const n=this.slotContainer.children[t],o=n.getLocalPosition().y;i>=o&&i<o+n.element.height&&(e=t)}return e},gt.prototype.getSeparatorPosition=function(t){const e=this.slotContainer.children[t];return new pc.Vec3(e.getLocalPosition().x,e.getLocalPosition().y,e.getLocalPosition().z)},gt.prototype.getIndexOfItem=function(t){return this.itemContainer.children.indexOf(t)},gt.prototype.handleClose=function(){return this.entity.enabled=!1},gt.prototype.displayItems=function(t){this.clearPanel();for(const e of t){const t=this.itemAsset.resource.instantiate();t.script.InventoryItemComponent.setup(e.name,e.size),this.itemContainer.addChild(t)}},gt.prototype.clearPanel=function(){for(;this.itemContainer.children.length>0;)this.itemContainer.children[0].destroy()};const{Facade:At}=i(710),{PureMVC:ft}=i(710);new class{constructor(){ft.debug=!0,At.getInstance=t.GameFacade.getInstance,console.log(At),this.facade=At.getInstance(t.GameFacade.KEY),this.facade.startup(this)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvRmFjYWRlLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vbm9kZV9tb2R1bGVzL0Brb3JlZXovcHVyZS1tdmMvbGliL2NvbS9rb3JlZXovcHVyZW12Yy9NZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvTW9kZWwuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9ub2RlX21vZHVsZXMvQGtvcmVlei9wdXJlLW12Yy9saWIvY29tL2tvcmVlei9wdXJlbXZjL05vdGlmaWVyLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vbm9kZV9tb2R1bGVzL0Brb3JlZXovcHVyZS1tdmMvbGliL2NvbS9rb3JlZXovcHVyZW12Yy9Qcm94eS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvUHVyZU1WQy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvVmlldy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uTm9kZS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1BhcnNlR2FtZU1hcENvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvd2VhcG9ucy9XZWFwb25zUHJveHkuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvc3RvcnlQcm94eS9TdG9yeVByb3h5LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2ludmVudG9yeS9JbnZlbnRvcnlQcm94eS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1N0YXJ0dXBDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvQ2hhbmdlU2NlbmVDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3V0aWxzL1NodWZmbGVBcnJheS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHkuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9TdGFydENvbWJhdENvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9OZXh0Q29tYmF0VHVybkNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9OZXh0Q29tYmF0Um91bmRDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvRW5kQ29tYmF0VHVybkNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS9jb3JlL0JlaGF2aW91clN0YXR1cy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2NvcmUvQmFzZU5vZGUuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdXRpbHMvR1VJRC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2NvcmUvTWFzdGVyTm9kZS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2NvcmUvQmxhY2tib2FyZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2NvcmUvVGljay5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2NvcmUvQmVoYXZpb3VyVHJlZS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL3RyZWVzL0NoYXJhY3RlckNvbW1hbmRUcmVlLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2JlaGF2aW91clRyZWUvY29yZS9Qcmlvcml0eS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvYWN0aW9ucy9TZXRQbGF5ZXJBc1RhcmdldC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvYWN0aW9ucy9NZWxlZUF0dGFja1RhcmdldC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvYWN0aW9ucy9FbmRDb21iYXRUdXJuLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2JlaGF2aW91clRyZWUvYmVoYXZpb3Vycy9jb25kaXRpb25zL0hhc01vdmVtZW50UmVtYWluaW5nLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2JlaGF2aW91clRyZWUvYmVoYXZpb3Vycy9jb25kaXRpb25zL0lzTmV4dFRvUGxheWVyLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2JlaGF2aW91clRyZWUvY29yZS9NZW1TZXF1ZW5jZS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2NvcmUvZGVjb3JhdG9ycy9JbnZlcnRlci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvY29uZGl0aW9ucy9Jc1RhcmdldERlYWQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS9iZWhhdmlvdXJzL2FjdGlvbnMvTW92ZVRvd2FyZHNUYXJnZXQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS9iZWhhdmlvdXJzL2NvbmRpdGlvbnMvSXNEZWFkLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2JlaGF2aW91clRyZWUvYmVoYXZpb3Vycy9jb25kaXRpb25zL0hhc0FjdGlvbnNSZW1haW5pbmcuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS9iZWhhdmlvdXJzL2FjdGlvbnMvUmVsaW5xdWlzaE1vdmVtZW50UG9pbnRzLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2JlaGF2aW91clRyZWUvdHJlZXMvQmFzaWNNZWxlZVRyZWUuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9FbmVteVR1cm5Db21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvU2VsZWN0ZWROb2RlQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0NvbWJhdE5hdmlnYXRlVG9Ob2RlQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1Nob3dXYWxrYWJsZUFyZWFDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvSGlkZVdhbGthYmxlQXJlYUNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9Bd2FpdFBsYXllckNvbWJhdElucHV0Q29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0VuZE1vdmVtZW50Q29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy91dGlscy9DaGFyYWN0ZXJDZW50ZXJQb2ludC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1NlbGVjdGVkR2FtZUNoYXJhY3RlckNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9SZXNvbHZlQXR0YWNrQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL01vdmVBbG9uZ1BhdGhBbmRBdHRhY2tDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvS2lsbEdhbWVDaGFyYWN0ZXJDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvRW5kQ29tYmF0Q29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvYWN0aW9ucy9SYW5nZUF0dGFja1RhcmdldC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvYWN0aW9ucy9NYWludGFpbkRpc3RhbmNlRnJvbVRhcmdldC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvYWN0aW9ucy9QaWNrTmV4dEFjdGlvbi5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL2JlaGF2aW91cnMvY29uZGl0aW9ucy9DYW5TZWVUYXJnZXQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS9iZWhhdmlvdXJzL2FjdGlvbnMvTW92ZVRvd2FyZHNUYXJnZXRVbnRpbFZpc2libGUuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvYmVoYXZpb3VyVHJlZS90cmVlcy9CYXNpY1JhbmdlZFRyZWUuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9EZXRlcm1pbmVFbmVteUFjdGlvbkNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9SZXNvbHZlUmFuZ2VkQXR0YWNrQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0VxdWlwV2VhcG9uQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL05hdmlnYXRlVGhyb3VnaFBvcnRhbENvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9BZGRQbGF5ZXJDaGFyYWN0ZXJUb01hcENvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9OYXZpZ2F0ZVRvQ2hhcmFjdGVyQW5kVGFsay5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1N0YXJ0RGlhbG9ndWVDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvQ29udGludWVEaWFsb2d1ZVRleHRDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvU2VsZWN0RGlhbG9ndWVDaG9pY2VDb21tYW5kLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvR29Ub0RpYWxvZ3VlTm9kZUNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9FbmREaWFsb2d1ZUNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9OYXZpZ2F0ZVRvQ2hhcmFjdGVyQW5kQXR0YWNrQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0NoYW5nZUdhbWVwbGF5QWN0aW9uQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1Jlc29sdmVEaWFsb2d1ZVNraWxsVGVzdENvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9DbGlja0ludmVudG9yeUJ1dHRvbkNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9SZW9yZGVySW52ZW50b3J5SXRlbUNvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvR2FtZUZhY2FkZS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9iZWhhdmlvdXJUcmVlL0JvdEJlaGF2aW91clR5cGVzLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2RhdGEvV2VhcG9uVHlwZXMuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvY29tYmF0L0NvbWJhdFZPLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclZPLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVNYXAvR2FtZU1hcFByb3h5LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3V0aWxzL0FkamFjZW50UG9pbnRzLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVNYXAvR2FtZU1hcFZPLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Qcmlvcml0eVF1ZXVlLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHkuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVZPLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2ludmVudG9yeS9pdGVtcy9JbnZlbnRvcnlJdGVtLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2ludmVudG9yeS9JbnZlbnRvcnlWTy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9zdG9yeVByb3h5L1N0b3J5Vk8uanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L3Byb2plY3RpbGVzL1Byb2plY3RpbGVDcmVhdG9yTWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L0NhY29nZW5HYW1lLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbXBvbmVudHMvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvZ2FtZUNoYXJhY3Rlci9hZ2dyby9BZ3JvR2FtZUNoYXJhY3RlckNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L3RvYXN0TWVzc2FnZS9Ub2FzdE1lc3NhZ2VNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L3RvYXN0TWVzc2FnZS9Ub2FzdE1lc3NhZ2VDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9nYW1lQ2hhcmFjdGVyL3NldENhbWVyYVRhcmdldC9TZXRDYW1lcmFUYXJnZXRDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9pbnB1dExheWVyL0lucHV0TGF5ZXJNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2dhbWVDYW1lcmEvR2FtZUNhbWVyYS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2dhbWVDYW1lcmEvR2FtZUNhbWVyYU1lZGlhdG9yLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvaW5wdXRMYXllci9JbnB1dExheWVyQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvcGxheWVyQ29tYmF0UGFuZWwvUGxheWVyQ29tYmF0UGFuZWxNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L3BsYXllckNvbWJhdFBhbmVsL1BsYXllckNvbWJhdFBhbmVsQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbXBvbmVudHMvY29sbGlzaW9uL0hpdGJveENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2FjdGlvblBhbmVsL0FjdGlvblBhbmVsTWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9hY3Rpb25QYW5lbC9BY3Rpb25CdXR0b25Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9hY3Rpb25QYW5lbC9BY3Rpb25QYW5lbENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb21wb25lbnRzL1VJU3RvcFByb3BhZ2F0aW9uLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvcHJvamVjdGlsZXMvUHJvamVjdGlsZUNyZWF0b3JDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9wcm9qZWN0aWxlcy9Qcm9qZWN0aWxlQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvc3RhbWluYUJhci9TdGFtaW5hQmFyTWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9zdGFtaW5hQmFyL1N0YW1pbmFCYXJDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9hY3Rpb25zUmVtYWluaW5nUGFuZWwvQWN0aW9uc1JlbWFpbmluZ1BhbmVsTWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9hY3Rpb25zUmVtYWluaW5nUGFuZWwvQWN0aW9uc1JlbWFpbmluZ1BhbmVsQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvYWN0aW9uc1JlbWFpbmluZ1BhbmVsL0FjdGlvbnNSZW1haW5pbmdQaXBDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9mbG9hdGluZ1N0YXR1cy9GbG9hdGluZ1N0YXR1c0NyZWF0b3JNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2Zsb2F0aW5nU3RhdHVzL2NvbXBvbmVudHMvVGVtcG9yYXJ5RmxvYXRpbmdTdGF0dXNDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9mbG9hdGluZ1N0YXR1cy9GbG9hdGluZ1N0YXR1c0NyZWF0b3JDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9wb3J0YWwvUG9ydGFsTWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9wb3J0YWwvUG9ydGFsQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvZGlhbG9ndWVQYW5lbC9EaWFsb2d1ZVBhbmVsTWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9kaWFsb2d1ZVBhbmVsL0RpYWxvZ3VlUGFuZWxDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9kaWFsb2d1ZVBhbmVsL0RpYWxvZ3VlQ2hvaWNlQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvZ2FtZUNoYXJhY3Rlci9kZWZhdWx0QW5pbS9EZWZhdWx0QW5pbWF0aW9uQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvZGlhbG9ndWVQYW5lbC9EaWFsb2d1ZVRleHRDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9hY3Rpb25QYW5lbC9hdHRhY2tCdXR0b24vQXR0YWNrQnV0dG9uTWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9hY3Rpb25QYW5lbC9hdHRhY2tCdXR0b24vQXR0YWNrQnV0dG9uQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbXBvbmVudHMvdmVoaWNsZS9WZWhpY2xlQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2NvbXBvbmVudHMvc2NyZWVuUmVzaXplL1NjcmVlblJlc2l6ZUNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2RpYWxvZ3VlUGFuZWwvRGlhbG9ndWVTa2lsbFRlc3RDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9pbnZlbnRvcnlQYW5lbC9JbnZlbnRvcnlJdGVtQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvaW52ZW50b3J5UGFuZWwvSW52ZW50b3J5UGFuZWxNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2ludmVudG9yeVBhbmVsL0ludmVudG9yeVBhbmVsQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUHVyZU1WQ18xIiwiVmlld18xIiwiQ29udHJvbGxlciIsImtleSIsInRoaXMiLCJjb21tYW5kTWFwIiwiaW5zdGFuY2VNYXAiLCJFcnJvciIsIm11bHRpdG9uS2V5IiwibG9nZ2VyIiwiUHVyZU1WQyIsImRlYnVnIiwibG9nQ29tbWFuZCIsImxvZ05vbmUiLCJpbml0aWFsaXplQ29udHJvbGxlciIsInJlbW92ZUNvbnRyb2xsZXIiLCJnZXRJbnN0YW5jZSIsInByb3RvdHlwZSIsInJlZ2lzdGVyQ29tbWFuZCIsIm5vdGlmaWNhdGlvbk5hbWUiLCJjb21tYW5kQ2xhc3NSZWYiLCJ2aWV3IiwicmVnaXN0ZXJPYnNlcnZlciIsImV4ZWN1dGVDb21tYW5kIiwiaGFzQ29tbWFuZCIsInVuZGVmaW5lZCIsInJlbW92ZUNvbW1hbmQiLCJyZW1vdmVPYnNlcnZlciIsIlZpZXciLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJjb21tYW5kIiwiX2NvbnNvbGVBcmdzIiwibmFtZSIsImFwcGx5IiwiY29uY2F0IiwiQ29udHJvbGxlcl8xIiwiTW9kZWxfMSIsIkZhY2FkZSIsImxvZ05vdGlmaWNhdGlvbiIsImluaXRpYWxpemVOb3RpZmllciIsImluaXRpYWxpemVGYWNhZGUiLCJoYXNDb3JlIiwicmVtb3ZlQ29yZSIsIk1vZGVsIiwicmVtb3ZlTW9kZWwiLCJyZW1vdmVWaWV3IiwiaW5pdGlhbGl6ZU1vZGVsIiwiaW5pdGlhbGl6ZVZpZXciLCJjb250cm9sbGVyIiwicmVnaXN0ZXJQcm94eSIsInByb3h5IiwibW9kZWwiLCJyZXRyaWV2ZVByb3h5IiwicHJveHlOYW1lIiwicmVtb3ZlUHJveHkiLCJoYXNQcm94eSIsInJlZ2lzdGVyTWVkaWF0b3IiLCJtZWRpYXRvciIsInJldHJpZXZlTWVkaWF0b3IiLCJtZWRpYXRvck5hbWUiLCJyZW1vdmVNZWRpYXRvciIsInNsZWVwTWVkaWF0b3IiLCJhd2FrZU1lZGlhdG9yIiwiaGFzTWVkaWF0b3IiLCJzZW5kTm90aWZpY2F0aW9uIiwiX2EiLCJub3RpZnlPYnNlcnZlcnMiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwiZCIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsImhhc093blByb3BlcnR5IiwiX18iLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsIk5vdGlmaWVyXzEiLCJNZWRpYXRvciIsIl9zdXBlciIsInZpZXdDb21wb25lbnQiLCJfdGhpcyIsImNhbGwiLCJsb2dNZWRpYXRvciIsInNsZWVwaW5nIiwic3Vic2NyaWJlZE5vdGlmaWNhdGlvbnMiLCJub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UiLCJnZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiZ2V0TWVkaWF0b3JOYW1lIiwic2V0Vmlld0NvbXBvbmVudCIsImdldFZpZXdDb21wb25lbnQiLCJvblJlZ2lzdGVyIiwib25SZW1vdmUiLCJvblNsZWVwIiwib25Bd2FrZSIsInN1YnNjcmliZU5vdGlmaWNhdGlvbiIsImNoYW5nZVN1YnNjcmlwdGlvbiIsImFkZFN1YnNjcmlwdGlvbiIsInVuc3Vic2NyaWJlTm90aWZpY2F0aW9uIiwicmVtb3ZlU3Vic2NyaXB0aW9uIiwiYWN0aW9uIiwib2xkTm90aWZpY2F0aW9ucyIsIm5vdGlmaWNhdGlvbnMiLCJzbGljZSIsImNoYW5nZWQiLCJmb3JFYWNoIiwibm90aWZpY2F0aW9uIiwiaW5kZXhPZiIsInB1c2giLCJpbmRleCIsInNwbGljZSIsIk5vdGlmaWVyIiwicHJveHlNYXAiLCJnZXRQcm94eU5hbWUiLCJGYWNhZGVfMSIsImZhY2FkZSIsImdldEZhY2FkZSIsIlByb3h5IiwiZGF0YSIsImxvZ1Byb3h5Iiwic2V0RGF0YSIsImdldERhdGEiLCJjb25zb2xlQXJncyIsImNvbW1hbmROYW1lIiwiY29uc29sZSIsImxvZyIsIkV2ZW50RW1pdHRlciIsIm1lZGlhdG9yTWFwIiwiZXZlbnRFbWl0dGVyIiwib2JzZXJ2ZXJNZXRob2QiLCJjb250ZXh0IiwicmVtb3ZlTGlzdGVuZXIiLCJvbiIsImVtaXQiLCJyZWdpc3Rlck9ic2VydmVycyIsIm9uTWVkaWF0b3JOb3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UiLCJiaW5kIiwiaXNTbGVlcGluZyIsInJlbW92ZU9ic2VydmVycyIsImludGVyZXN0cyIsIm5vdGlmaWNhdGlvbkludGVyZXN0cyIsIm5vdGlmaWNhdGlvbkludGVyZXN0c18xIiwiaW50ZXJlc3QiLCJoYW5kbGVOb3RpZmljYXRpb24iLCJub3RpZmljYXRpb25JbnRlcmVzdHNfMiIsIk1lZGlhdG9yXzEiLCJQcm94eV8xIiwiaGFzIiwicHJlZml4IiwiRXZlbnRzIiwiRUUiLCJmbiIsIm9uY2UiLCJhZGRMaXN0ZW5lciIsImVtaXR0ZXIiLCJldmVudCIsIlR5cGVFcnJvciIsImxpc3RlbmVyIiwiZXZ0IiwiX2V2ZW50cyIsIl9ldmVudHNDb3VudCIsImNsZWFyRXZlbnQiLCJldmVudE5hbWVzIiwiZXZlbnRzIiwibmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJsaXN0ZW5lcnMiLCJoYW5kbGVycyIsImkiLCJsIiwiZWUiLCJsaXN0ZW5lckNvdW50IiwiYTEiLCJhMiIsImEzIiwiYTQiLCJhNSIsImxlbiIsImoiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJvZmYiLCJwcmVmaXhlZCIsIm1vZHVsZSIsIk5hdmlnYXRpb25Ob2RlIiwieCIsInkiLCJ6IiwiY29ubmVjdGVkTm9kZXMiLCJvY2N1cGllZCIsIm90aGVyTm9kZSIsInNvbWUiLCJub2RlIiwiaXNDb25uZWN0ZWQiLCJjb25uZWN0ZWROb2RlSW5kZXgiLCJmaW5kSW5kZXgiLCJlcXVhbHMiLCJwYXJzZUdhbWVNYXBDb21tYW5kIiwiYXBwIiwicGMiLCJBcHBsaWNhdGlvbiIsImdldEFwcGxpY2F0aW9uIiwiZmxvb3JHcmlkIiwibmF2aWdhdGlvbkZsb29ycyIsInJvb3QiLCJmaW5kQnlUYWciLCJjb21wbGV0ZWRHcmlkIiwibmF2aWdhdGlvbkNvbXBvbmVudHMiLCJmbG9vckVudGl0eSIsIm5hdkNvbXAiLCJzY3JpcHQiLCJjcmVhdGVQYXJ0aWFsR3JpZEZyb21GbG9vciIsInNldEdyaWQiLCJuYXZpZ2F0aW9uQ29tcCIsImNvbm5lY3RlZENvbXBFbnRpdHkiLCJjb25uZWN0ZWRDb21wb25lbnRzIiwiY29ubmVjdGVkTmF2Q29tcCIsImpvaW5Ub0FkamFjZW50R3JpZCIsImdldEdyaWQiLCJjcmVhdGVNYXBGbG9vciIsIndhbGxzIiwid2FsbHNCb3VuZGluZ0JveGVzIiwibWFwV2FsbEVudGl0aWVzIiwibWFwV2FsbEVudGl0eSIsImFhYmIiLCJjcmVhdGVCb3VuZGluZ0JveEZyb21FbnRpdHkiLCJjcmVhdGVGbG9vclVuZGVyV2FsbHMiLCJkZXN0cm95IiwiY3JlYXRlTWFwV2FsbHMiLCJjb3ZlciIsImNvdmVyUG9pbnRzIiwiY292ZXJFbnRpdGllcyIsImNvdmVyRW50aXR5IiwiY3JlYXRlQ292ZXJQb2ludEZyb21Cb3giLCJjcmVhdGVNYXBDb3ZlciIsInBvcnRhbHMiLCJNYXAiLCJwb3J0YWxFbnRpdGllcyIsInBvcnRhbEVudGl0eSIsInBvcnRhbENvbXBvbmVudCIsInBvcnRhbElkIiwicG9ydGFsIiwiZGVzdGluYXRpb25TY2VuZSIsImRlc3RpbmF0aW9uUG9ydGFsIiwic3RhbmRpbmdQb2ludCIsImdldFBvc2l0aW9uIiwiaGl0Ym94UG9pbnQiLCJoaXRib3giLCJzZXQiLCJjcmVhdGVQb3J0YWxzIiwid2F5cG9pbnRzTWFwIiwid2F5cG9pbnRzIiwiZmxvb3JOb2RlIiwiaXNXYXlwb2ludCIsIndheXBvaW50Iiwib3RoZXJXYXlwb2ludCIsImxpbmUiLCJBc3RhciIsImFkZENvbm5lY3RlZE5vZGUiLCJjcmVhdGVXYXlwb2ludHNNYXAiLCJHYW1lTWFwUHJveHkiLCJHYW1lQ29tbWFuZHMiLCJib3hFbnRpdHkiLCJzY2FsZSIsImdldExvY2FsU2NhbGUiLCJoYWxmRXh0ZW50cyIsIlZlYzMiLCJCb3VuZGluZ0JveCIsIndhbGwiLCJ3YWxsUG9zIiwid2FsbFNjYWxlIiwiTWF0aCIsInJvdW5kIiwiY29ybmVyWCIsImNvcm5lcloiLCJtYXRjaGluZ05vZGVJbmRleCIsImVxdWFsc1BvaW50IiwiZGVsZXRlZE5vZGVzIiwiZGVsZXRlZE5vZGUiLCJkaXNjb25uZWN0ZWROb2RlIiwiZ3JpZCIsImZsb29yUG9zaXRpb24iLCJnZXRMb2NhbFBvc2l0aW9uIiwiZmxvb3JTaXplIiwic25hcHBlZFdpZHRoIiwic25hcHBlZEJyZWFkdGgiLCJzbmFwcGVkWCIsInNuYXBwZWRZIiwic25hcHBlZFoiLCJncmlkVG9Kb2luIiwiYm94IiwiYm94UG9zIiwiYm94U2NhbGUiLCJjb3ZlclBvaW50IiwiZmxvb3JNYXAiLCJub3J0aHdlc3QiLCJub3J0aCIsIm5vcnRoZWFzdCIsImVhc3QiLCJzb3V0aGVhc3QiLCJzb3V0aCIsInNvdXRod2VzdCIsIndlc3QiLCJuIiwiV2VhcG9uc1Byb3h5Iiwic3VwZXIiLCJOQU1FIiwid2VhcG9uTmFtZSIsImRhbWFnZVRpZXIiLCJjYXRlZ29yeUtleSIsInZvIiwiY2F0ZWdvcnkiLCJkYW1hZ2UiLCJtaW4iLCJTdG9yeVZPIiwiU3RvcnlQcm94eSIsInN0b3J5VHJlZXMiLCJhc3NldHMiLCJyZXNvdXJjZSIsInRyZWVzIiwic3RvcnlUcmVlTWFwIiwidHJlZUtleSIsInN0b3J5VHJlZUFzc2V0SWQiLCJzdG9yeVRyZWUiLCJjdXJyZW50VHJlZSIsImN1cnJlbnROb2RlIiwiY3VycmVudFN0ZXBJbmRleCIsImN1cnJlbnRDb25kaXRpb25zIiwidHJlZUlkIiwidHJlZSIsIm5vZGVJZCIsIm5vZGVzIiwic3RlcEluZGV4Iiwic3RlcHMiLCJnZXRUcmVlIiwiZ2V0Tm9kZSIsInZhbGlkU3RlcCIsImdldFZhbGlkU3RlcCIsIm9uY2VDb25kaXRpb24iLCJnZXRDb25kaXRpb25TdHJpbmdGb3JTdGVwIiwiYWRkQ29uZGl0aW9uIiwibmV4dFZhbGlkU3RlcCIsImdldFN0ZXAiLCJ0ZXN0Q29uZGl0aW9ucyIsImNvbmRpdGlvbnMiLCJnZXRJbnZlcnRlZENvbmRpdGlvblN0cmluZ0ZvclN0ZXAiLCJjaG9pY2VJbmRleCIsImdldEN1cnJlbnROb2RlU3RlcCIsImNob2ljZXMiLCJjb25kaXRpb24iLCJzdWNjZXNzIiwib3JEZWxpbWl0ZXJlZCIsIm9yQ29uZGl0aW9ucyIsInNwbGl0Iiwib3JTdWNjZXNzIiwib3B0aW9uYWxDb25kaXRpb24iLCJjaGVja0NvbmRpdGlvbiIsInN0YXJ0c1dpdGgiLCJzdHJpcHBlZFN0cmluZyIsInJlbW92ZUNvbmRpdGlvbiIsIkludmVudG9yeVZPIiwiSW52ZW50b3J5UHJveHkiLCJpbnZlbnRvcnlJdGVtcyIsIm9yaWdpbmFsSW5kZXgiLCJzbG90SW5kZXgiLCJydW5uaW5nSW5kZXhUb3RhbCIsIm5ld0luZGV4IiwiaXRlbSIsInNpemUiLCJ0b1N0cmluZyIsInN0YXJ0dXBDb21tYW5kIiwiR2FtZVN0YXRlUHJveHkiLCJ3ZWFwb25zRGF0YSIsImNoYW5nZVNjZW5lQ29tbWFuZCIsInNjZW5lTmFtZSIsIm9sZEhpZXJhcmNoeSIsImZpbmRCeU5hbWUiLCJzY2VuZSIsInNjZW5lcyIsImZpbmQiLCJsb2FkU2NlbmVIaWVyYXJjaHkiLCJ1cmwiLCJlcnIiLCJwYXJlbnQiLCJlcnJvciIsInNodWZmbGVBcnJheSIsImFycmF5IiwiY3VycmVudEluZGV4IiwidGVtcG9yYXJ5VmFsdWUiLCJyYW5kb21JbmRleCIsImZsb29yIiwicmFuZG9tIiwiQ29tYmF0Vk8iLCJDb21iYXRQcm94eSIsInBhcnRpY2lwYW50cyIsInRlYW1zIiwicGFydGljaXBhbnRQcm94aWVzIiwicGFydGljaXBhbnQiLCJwYXJ0aWNpcGFudFByb3h5IiwiR2FtZUNoYXJhY3RlclByb3h5Iiwicm91bmRJbml0aWF0aXZlIiwibmV4dFR1cm5JZCIsInNoaWZ0IiwiYWN0aXZlUGFydGljaXBhbnQiLCJyZXNldENvbWJhdFR1cm5TdGF0ZSIsImlzTlBDIiwic2V0VGltZW91dCIsImluaXRpYXRpdmVzIiwiY2hhcmFjdGVySWQiLCJlbnRyaWVzIiwiaW5pdGlhdGl2ZSIsInNodWZmbGVkSW5pdGlhdGl2ZSIsIm5leHRUdXJuQ2hhcmFjdGVySWQiLCJkZWxldGUiLCJmaWx0ZXIiLCJlIiwidGVhbSIsImNoYXJhY3RlckluZGV4Iiwic3RhcnRDb21iYXRDb21tYW5kIiwiaW5zdGlnYXRpbmdDaGFyYWN0ZXJJZCIsInVwZGF0ZUdhbWVTdGF0ZVR5cGUiLCJnYW1lcGxheU1vZGVUeXBlcyIsImluc3RpZ2F0aW5nQ2hhcmFjdGVyUHJveHkiLCJwbGF5ZXJUZWFtIiwib3Bwb3NpbmdUZWFtIiwiY29tYmF0R3JvdXAiLCJwb3MiLCJzZWxmIiwicGxheWVyUHJveHkiLCJjb21iYXRQcm94eSIsIm5leHRDb21iYXRUdXJuQ29tbWFuZCIsImdhbWVTdGF0ZSIsImdhbWVwbGF5TW9kZSIsIm5leHRUdXJuIiwibmV4dENvbWJhdFJvdW5kQ29tbWFuZCIsIm5leHRSb3VuZCIsImVuZENvbWJhdFR1cm5Db21tYW5kIiwiQmVoYXZpb3VyU3RhdHVzIiwiQmFzZU5vZGUiLCJjaGlsZHJlbiIsImluaXRpYWxpemUiLCJpZCIsInMiLCJoZXhEaWdpdHMiLCJzdWJzdHIiLCJqb2luIiwiY3JlYXRlVVVJRCIsInRpY2siLCJfZW50ZXIiLCJibGFja2JvYXJkIiwiX29wZW4iLCJzdGF0dXMiLCJfdGljayIsIlJVTk5JTkciLCJfY2xvc2UiLCJfZXhpdCIsImVudGVyTm9kZSIsImVudGVyIiwib3Blbk5vZGUiLCJvcGVuIiwidGlja05vZGUiLCJjbG9zZU5vZGUiLCJjbG9zZSIsImV4aXROb2RlIiwiZXhpdCIsIkVSUk9SIiwiTWFzdGVyTm9kZSIsImNoaWxkTm9kZSIsImV4ZWN1dGUiLCJTVUNDRVNTIiwiQmxhY2tib2FyZCIsImluaXRpYWxpc2UiLCJiYXNlTWVtb3J5IiwidHJlZU1lbW9yeSIsInRyZWVTY29wZSIsIm5vZGVNZW1vcnkiLCJvcGVuTm9kZXMiLCJub2RlU2NvcGUiLCJtZW1vcnkiLCJnZXRUcmVlTWVtb3J5IiwiZ2V0Tm9kZU1lbW9yeSIsImdldE1lbW9yeSIsIlRpY2siLCJub2RlQ291bnQiLCJ0YXJnZXQiLCJwb3AiLCJCZWhhdmlvdXJUcmVlIiwibGFzdE9wZW5Ob2RlcyIsImN1cnJPcGVuTm9kZXMiLCJzdGFydCIsIkNoYXJhY3RlckNvbW1hbmRUcmVlIiwiUHJpb3JpdHkiLCJjaGlsZCIsIkZBSUxVUkUiLCJTZXRQbGF5ZXJBc1RhcmdldCIsIk1lbGVlQXR0YWNrVGFyZ2V0IiwiYXR0YWNrZXJJZCIsImRlZmVuZGVySWQiLCJFbmRDb21iYXRUdXJuIiwiSGFzTW92ZW1lbnRSZW1haW5pbmciLCJhdmFpbGFibGVNb3ZlbWVudCIsIklzTmV4dFRvUGxheWVyIiwiY2hhcmFjdGVyQ3VycmVudE5vZGUiLCJNZW1TZXF1ZW5jZSIsIkludmVydGVyIiwiSXNUYXJnZXREZWFkIiwidGFyZ2V0SWQiLCJpc0RlYWQiLCJNb3ZlVG93YXJkc1RhcmdldCIsImNoYXJhY3RlclByb3h5IiwicmVzdWx0IiwicmVkdWNlIiwiYSIsImRpc3RhbmNlU3FydCIsInBhdGgiLCJwMSIsInAyIiwicG93IiwiSXNEZWFkIiwiSGFzQWN0aW9uc1JlbWFpbmluZyIsImF2YWlsYWJsZUFjdGlvbnMiLCJSZWxpbnF1aXNoTW92ZW1lbnRQb2ludHMiLCJCYXNpY01lbGVlVHJlZSIsImVuZW15VHVybkNvbW1hbmQiLCJlbmVteUlkIiwiZW5lbXlDdXJyZW50Tm9kZSIsInJ1bkNvbW1hbmRzIiwic2VsZWN0ZWROb2RlQ29tbWFuZCIsImdhbWVTdGF0ZVByb3h5IiwiZ2FtZU1hcFByb3h5IiwiaGFzVmFsaWROb2RlIiwiY3VycmVudE1vZGUiLCJjb21iYXROYXZpZ2F0ZVRvTm9kZUNvbW1hbmQiLCJ0YXJnZXROb2RlIiwiZ2FtZUNoYXJhY3RlclByb3h5IiwibW92ZWFibGVOb2RlcyIsImhhbmRsZVZhbGlkTW92ZSIsInNob3dXYWxrYWJsZUFyZWFDb21tYW5kIiwid2Fsa2FibGVOb2RlcyIsIndhbGthYmxlVGlsZUFzc2V0IiwiY29udGFpbmVyIiwidGlsZSIsImluc3RhbnRpYXRlIiwic2V0TG9jYWxQb3NpdGlvbiIsImFkZENoaWxkIiwiaGlkZVdhbGthYmxlQXJlYUNvbW1hbmQiLCJ3YWxrYWJsZVRpbGVFbnRpdGllcyIsIndhbGthYmxlVGlsZUVudGl0eSIsImF3YWl0UGxheWVyQ29tYmF0SW5wdXRDb21tYW5kIiwiZW5kTW92ZW1lbnRDb21tYW5kIiwiZW5kTm9kZSIsImNlbnRlclBvaW50Q2hhcmFjdGVyUHJveHkiLCJoZWlnaHQiLCJzZWxlY3RlZEdhbWVDaGFyYWN0ZXJDb21tYW5kIiwidGFyZ2V0Q2hhcmFjdGVyUHJveHkiLCJwbGF5ZXJDaGFyYWN0ZXJQcm94eSIsIndlYXBvbkNhdGVnb3J5IiwiZ2V0V2VhcG9uQ2F0ZWdvcnkiLCJlcXVpcHBlZFdlYXBvbiIsImN1cnJlbnRBY3Rpb24iLCJjYW5TZWVUYXJnZXQiLCJ0YXJnZXRDdXJycmVudE5vZGUiLCJpc1RhcmdldEFkamFjZW50IiwicGF0aFRvVGFyZ2V0IiwidW5vY2N1cGllZE5vZGVzIiwicGxheWVyTm9kZSIsInNob3J0ZXN0UGF0aCIsIm90aGVyUGF0aCIsIm5hdmlnYXRlVG9DaGFyYWN0ZXIiLCJwbGF5ZXJQb2ludCIsInRhcmdldFBvaW50IiwicmF5SW50ZXJzZWN0c1dhbGwiLCJyZXNvbHZlQXR0YWNrQ29tbWFuZCIsImF0dGFja2VyUHJveHkiLCJkZWZlbmRlclByb3h5IiwiYXR0YWNrZXJSb2xsIiwicm9sbEF0dGFja1NraWxsIiwic2tpbGwiLCJkZWZlbmRlclJvbGwiLCJ3ZWFwb25zUHJveHkiLCJkZXRlcm1pbmVEYW1hZ2VUaWVyIiwiZ2V0RGFtYWdlIiwiYXBwbHlEYW1hZ2UiLCJoYXNNZWxlZVdlYXBvbiIsIndlYXBvbiIsIldlYXBvblR5cGVzIiwiaGlnaERhbWFnZSIsImxvd0RhbWFnZSIsInJvbGxEaWNlIiwibW92ZUFsb25nUGF0aEFuZEF0dGFja0NvbW1hbmQiLCJ1c2VNb3ZlbWVudCIsImNoYXJhY3Rlck1lZGlhdG9yIiwiR2FtZUNoYXJhY3Rlck1lZGlhdG9yIiwiaGFuZGxlTmF2aWdhdGVBbG9uZ1BhdGhXaXRoUHJvbWlzZSIsInRoZW4iLCJraWxsR2FtZUNoYXJhY3RlckNvbW1hbmQiLCJyZW1vdmVDaGFyYWN0ZXJGcm9tQ29tYmF0IiwiZW5kQ29tYmF0Q29tbWFuZCIsImxvc2luZ1RlYW0iLCJSYW5nZUF0dGFja1RhcmdldCIsIk1haW50YWluRGlzdGFuY2VGcm9tVGFyZ2V0IiwibWluRGlzdGFuY2UiLCJtYXhEaXN0YW5jZSIsInRhcmdldEN1cnJlbnROb2RlIiwibWluRGlzdGFuY2VTcXJ0IiwibWF4RGlzdGFuY2VTcXJ0IiwibW92ZVBvaW50c0F2YWlsYWJsZSIsImRpc3RhbmNlVG9UYXJnZXQiLCJQaWNrTmV4dEFjdGlvbiIsIkNhblNlZVRhcmdldCIsInRhcmdldFByb3h5IiwiZnJvbVBvcyIsInRvUG9zIiwiTW92ZVRvd2FyZHNUYXJnZXRVbnRpbFZpc2libGUiLCJkZWxldGVDb3VudCIsInBhdGhOb2RlIiwiQmFzaWNSYW5nZWRUcmVlIiwiZGV0ZXJtaW5lRW5lbXlBY3Rpb25Db21tYW5kIiwiYm90QmVoYXZpb3VyIiwiQm90QmVoYXZpb3VyVHlwZXMiLCJyZXNvbHZlUmFuZ2VkQXR0YWNrQ29tbWFuZCIsImF0dGFja2VyU2NvcmUiLCJkZWZlbmRlclNjb3JlIiwiYXR0YWNrZXJOb2RlIiwiZGVmZW5kZXJOb2RlIiwiaXNJbkNvdmVyIiwicHJvamVjdGlsZUNyZWF0b3JNZWRpYXRvciIsIlByb2plY3RpbGVDcmVhdG9yTWVkaWF0b3IiLCJwcm9qZWN0aWxlT3JpZ2luIiwicHJvamVjdGlsZVRhcmdldCIsImNyZWF0ZVByb2plY3RpbGUiLCJuZWlnaGJvdXJpbmdOb2RlcyIsInBvc3NpYmxlVGFyZ2V0cyIsImVxdWlwV2VhcG9uQ29tbWFuZCIsIm5hdmlnYXRlVGhyb3VnaFBvcnRhbENvbW1hbmQiLCJzdGFuZGluZ1Bvc2l0aW9uIiwic3RhbmRpbmdOb2RlIiwiZmluZE5lYXJlc3ROb2RlIiwibW92ZVRvTm9kZVdpdGhQcm9taXNlIiwiYWRkUGxheWVyQ2hhcmFjdGVyVG9NYXBDb21tYW5kIiwicGxheWVyQ2hhcmFjdGVyQXNzZXQiLCJwbGF5ZXJFbnRpdHkiLCJyZXRyaWV2ZVBvcnRhbCIsIm5hdmlnYXRlVG9DaGFyYWN0ZXJBbmRUYWxrQ29tbWFuZCIsInRhcmdldENoYXJhY3RlcklkIiwicGxheWVyQ2hhcmFjdGVyTWVkaWF0b3IiLCJzdGFydERpYWxvZ3VlQ29tbWFuZCIsImdhbWVzdGF0ZVByb3h5Iiwic3RvcnlQcm94eSIsImRpYWxvZ3VlVHJlZSIsInN0YXJ0RGlhbG9ndWVUcmVlIiwib3BlbmluZ1N0ZXAiLCJzdGVwIiwiY29udGludWVEaWFsb2d1ZVRleHRDb21tYW5kIiwibmV4dFN0ZXAiLCJjb250aW51ZUN1cnJlbnROb2RlU3RlcCIsInNlbGVjdERpYWxvZ3VlQ2hvaWNlQ29tbWFuZCIsInNlbGVjdGVkQ2hvaWNlIiwic2VsZWN0Q2hvaWNlIiwicmVzcG9uc2UiLCJ0aXRsZSIsInRleHQiLCJ0aXRsZUNvbG91ciIsInRlc3QiLCJnb3RvIiwiZ29Ub0RpYWxvZ3VlTm9kZUNvbW1hbmQiLCJuZXdOb2RlIiwiZ29Ub05vZGUiLCJjdXJyZW50U3RlcCIsImVuZERpYWxvZ3VlQ29tbWFuZCIsIm5hdmlnYXRlVG9DaGFyYWN0ZXJBbmRBdHRhY2tDb21tYW5kIiwiY2hhbmdlR2FtZXBsYXlBY3Rpb25Db21tYW5kIiwibmV3QWN0aW9uIiwicmVzb2x2ZURpYWxvZ3VlU2tpbGxUZXN0Q29tbWFuZCIsInBsYXllclNraWxsIiwiZ2V0U2tpbGxUb3RhbCIsImRpZTEiLCJkaWUyIiwiZmFpbHVyZSIsImNsaWNrSW52ZW50b3J5QnV0dG9uQ29tbWFuZCIsImludmVudG9yeVByb3h5IiwicmVvcmRlckludmVudG9yeUl0ZW1Db21tYW5kIiwicmVvcmRlckludmVudG9yeUl0ZW0iLCJHYW1lRmFjYWRlIiwiZ2FtZSIsIlNUQVJUVVAiLCJib3RCZWhhdmlvdXJFbnVtcyIsIk5PTkUiLCJCQVNJQ19NRUxFRSIsIkJBU0lDX1JBTkdFRCIsIndlYXBvbkVudW1zIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlc2NyaXB0b3IiLCJtYXAiLCJHYW1lQ2hhcmFjdGVyVk8iLCJwYXJhbXMiLCJtYXhNb3ZlbWVudCIsIm1heEFjdGlvbnNQZXJUdXJuIiwiY29zdCIsImRhbWFuZ2UiLCJjdXJyZW50U3RhbWluYSIsIm1heCIsIm1heGltdW1TdGFtaW5hIiwibWF4U3RhbWluYSIsInNraWxsS2V5IiwiYWR2YW5jZWRTa2lsbHMiLCJtYXhMdWNrIiwiY3VycmVudEx1Y2siLCJHYW1lTWFwVk8iLCJtYXBHcmlkIiwid2FsbEJvdW5kaW5nQm94ZXMiLCJuYXZHcmlkIiwibmF2aWdhdGlvbkdyaWQiLCJuZWFyZXN0Tm9kZSIsImRpc3RTcXJ0VG9OZWFyZXN0Tm9kZSIsImRpc3RUb05vZGUiLCJmcm9tIiwidG8iLCJkaXN0YW5jZSIsImRpcmVjdGlvbiIsImNsb25lIiwic3ViIiwibm9ybWFsaXplIiwicmF5IiwiUmF5IiwibWFwV2FsbHMiLCJoaXRQb3NpdGlvbiIsImludGVyc2VjdHNSYXkiLCJhdHRhY2tpbmdGcm9tIiwiYWRqYWNlbnRDb3ZlclBvaW50cyIsImFkamFjZW50UG9pbnRzIiwicG9pbnQiLCJwb2ludHMiLCJnZXRBZGphY2VudFBvaW50cyIsImFkamFjZW50UG9pbnQiLCJhZGphY2VudENvdmVyUG9pbnQiLCJub2RlQSIsIm5vZGVCIiwiUHJpb3JpdHlRdWV1ZSIsInByaW9yaXR5IiwiSW5maW5pdHkiLCJyYW5nZUxpbWl0IiwiZnJvbnRpZXIiLCJzZWFyY2hlZEFyZWEiLCJjYW1lRnJvbSIsInJhbmdlIiwibmV3RnJvbnRpZXIiLCJjdXJyZW50IiwibmV4dCIsImdvYWwiLCJjb3N0U29GYXIiLCJlbXB0eSIsIm5ld0Nvc3QiLCJoZXVyaXN0aWMiLCJwYXRoSXNCcm9rZW4iLCJkaXN0VmFsdWUiLCJnZXREaXN0U3F1YXJlZCIsInB0MSIsInB0MiIsImFicyIsIngwIiwiejAiLCJ4MSIsInoxIiwiZHgiLCJkeSIsIm54IiwibnkiLCJzaWduX3giLCJzaWduX3kiLCJpeCIsIml5IiwiaXNWYWxpZExpbmUiLCJHYW1lU3RhdGVWTyIsIm5ld1N0YXRlVHlwZSIsInNlbGVjdGVkQWN0aW9uIiwiRVhQTE9SQVRJT04iLCJDT01CQVQiLCJESUFMT0dVRSIsIkdBTUVfT1ZFUiIsIkludmVudG9yeUl0ZW0iLCJhZGRJdGVtIiwiaXRlbU5hbWUiLCJwcmVyZWdpc3RlcmVkTm90aWZpY2F0aW9ucyIsInVwZGF0ZUN1cnJlbnROb2RlIiwiaGFuZGxlRmluaXNoZWRNb2RlIiwiZmlyZSIsInNjcmlwdEtleSIsInNjcmlwdENvbXBvbmVudCIsImhhbmRsZVN0YXJ0Q29tYmF0IiwiaGFuZGxlTmF2aWdhdGVUb05vZGUiLCJoYW5kbGVOYXZpZ2F0ZVRvV2F5cG9pbnQiLCJoYW5kbGVOYXZpZ2F0ZUFsb25nUGF0aCIsImhhbmRsZVNldENoYXJhY3RlclRvTm9kZSIsImxvb2tQb2ludCIsImxvb2tBdFBvaW50IiwiYW5pbWF0ZURlYXRoIiwiYW5pbWF0ZUF0dGFjayIsImFuaW1hdGVIaXQiLCJzZXRQYXRoIiwibmVhcmVzdFdheXBvaW50IiwiZmluZE5lYXJlc3RXYXlwb2ludCIsIm5lYXJlc3RUYXJnZXRXYXlwb2ludCIsImhhc1ZhbGlkTGluZSIsImhhc0xpbmVUb1BvaW50IiwidW5zaGlmdCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2VhcmNoTm9kZSIsInNlYXJjaEFyZWEiLCJzdG9wTW92ZW1lbnQiLCJ0eXBlIiwib3JpZ2luUG9pbnQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsIm8iLCJvYmoiLCJwcm9wIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiQ2Fjb2dlbkdhbWUiLCJjcmVhdGVTY3JpcHQiLCJLRVkiLCJ1cGRhdGUiLCJkdCIsIk5hdmlnYXRpb25Db21wb25lbnQiLCJhdHRyaWJ1dGVzIiwiYWRkIiwiZW50aXR5IiwiaGFuZGxlUmF5Q2FzdCIsImVuYWJsZWQiLCJzY3JlZW5Qb3MiLCJub2RlR3JpZCIsImdldE5lYXJlc3ROb2RlIiwiR2FtZUNoYXJhY3RlckNvbXBvbmVudCIsImFkdmFuY2VkU2tpbGxzU2NoZW1hVG9NYXAiLCJhZHZhbmNlZFNraWxsc1NjaGVtYSIsInNraWxsT2JqZWN0Iiwic2tpbGxOYW1lIiwic2tpbGxWYWx1ZSIsImRlZmF1bHQiLCJzY2hlbWEiLCJlbnVtIiwicHJlcmVnaXN0ZXJOb3RpZmljYXRpb24iLCJwb3N0SW5pdGlhbGl6ZSIsIm1vdmVtZW50UGF0aCIsInN0YXRzT3ZlcnJpZGVzIiwicHJveHlQYXJhbXMiLCJjaGFyYWN0ZXJIZWlnaHQiLCJkaWFsb2d1ZVRyZWVOYW1lIiwiY29tYmF0R3JvdXBOYW1lIiwiY29tcmFkZUVudGl0aWVzIiwiY29tcmFkZUVudGl0eSIsImNvbXJhZGVJZCIsInZlaGljbGUiLCJhbmltYXRpb24iLCJwbGF5IiwibG9vcCIsIm1vdmVBbG9uZ1BhdGgiLCJuZXh0UGF0aFBvaW50IiwibG9jYWxQb3MiLCJub2RlUG9pbnQiLCJjaGFyYWN0ZXJTcGVlZCIsInNlZWsiLCJhcnJpdmUiLCJwcm9jZXNzVmVsb2NpdHkiLCJkeiIsImFuZ2xlVG9EZXN0IiwiYXRhbjIiLCJQSSIsInNldEV1bGVyQW5nbGVzIiwiQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQiLCJoYW5kbGVNYXBHcmlkQ3JlYXRlZCIsImhhbmRsZU1vdmVkVG9Ob2RlIiwiY2hhcmFjdGVyUG9pbnQiLCJzaWdodFJhbmdlIiwiVG9hc3RNZXNzYWdlTWVkaWF0b3IiLCJhZGRNZXNzYWdlIiwiVG9hc3RNZXNzYWdlQ29tcG9uZW50IiwibWVzc2FnZVF1ZXVlIiwiY3VycmVudFRpbWVvdXQiLCJtZXNzYWdlIiwic2hvd05leHRNZXNzYWdlIiwibmV4dE1lc3NhZ2UiLCJsYWJlbEVudGl0eSIsImVsZW1lbnQiLCJtZXNzYWdlVGltZSIsIklucHV0TGF5ZXJNZWRpYXRvciIsImhhbmRsZVBpY2tlckdhbWVDaGFyYWN0ZXIiLCJoYW5kbGVQaWNrZXJOYXZpZ2F0aW9uIiwiaGFuZGxlU2Nyb2xsaW5nIiwiY2hhcmFjdGVyRW50aXR5IiwiR2FtZUNhbWVyYSIsIkdhbWVDYW1lcmFNZWRpYXRvciIsInNldENhbWVyYVRhcmdldCIsImNhbWVyYVRhcmdldCIsInJvdGF0aW9uIiwiZ2V0RXVsZXJBbmdsZXMiLCJjYW1lcmFIZWlnaHQiLCJoYW5kbGVEcmFnIiwiZHJhZ011bHRpcGxpZXJYIiwidmVydGljYWxTY3JvbGwiLCJuZXdDYW1lcmFIZWlnaHQiLCJkcmFnTXVsdGlwbGllclkiLCJtYXRoIiwiY2xhbXAiLCJtaW5DYW1lcmFIZWlnaHQiLCJtYXhDYW1lcmFIZWlnaHQiLCJnZXRUYXJnZXRDYW1lcmFQb3NpdGlvbiIsImZvY3VzUG9pbnQiLCJjYW1lcmFQb3NpdGlvbiIsInRhcmdldFgiLCJzaW4iLCJ0YXJnZXRaIiwiY29zIiwiY2FtZXJhVGFyZ2V0UG9zaXRpb24iLCJ0YXJnZXRQb3NpdGlvbiIsImN1cnJlbnRQb3MiLCJ0d2VlblgiLCJ0d2VlblkiLCJ0d2VlbloiLCJsb29rQXQiLCJJbnB1dExheWVyQ29tcG9uZW50IiwiaW5wdXRRdWV1ZSIsIm1vdXNlIiwiZGlzYWJsZUNvbnRleHRNZW51IiwiY2xpY2tEb3duU3RhcnQiLCJpc0RyYWdnaW5nIiwiaGFuZGxlUGlja2VyUmVzdWx0IiwiRVZFTlRfTU9VU0VNT1ZFIiwib25Nb3VzZU1vdmUiLCJFVkVOVF9NT1VTRURPV04iLCJvbk1vdXNlRG93biIsIkVWRU5UX01PVVNFVVAiLCJvbk1vdXNlVXAiLCJ0b3VjaCIsIkVWRU5UX1RPVUNITU9WRSIsInRvdWNoRXZ0IiwidG91Y2hlcyIsIkVWRU5UX1RPVUNIU1RBUlQiLCJFVkVOVF9UT1VDSEVORCIsIkRhdGUiLCJub3ciLCJjbGlja1N0YXJ0UG9pbnQiLCJWZWMyIiwiZHJhZ1RpbWUiLCJoYW5kbGVSYXljYXN0Q29sbGlzaW9ucyIsImNhbWVyYUVudGl0eSIsImNhbWVyYUNvbXBvbmVudCIsImNhbWVyYSIsInNjcmVlblRvV29ybGQiLCJmYXJDbGlwIiwib3JpZ2luIiwiY29weSIsInBpY2tlZEVudGl0eSIsInNjcmVlblBvc2l0aW9uIiwicHJvY2Vzc0lucHV0UXVldWUiLCJoaWdoZXN0UHJpb3JpdHlQaWNrIiwiaGlnaGVzdFByaW9yaXR5IiwicGljayIsInBpY2tQcmlvcml0eSIsInRhZ3MiLCJwaWNrZWRHYW1lQ2hhcmFjdGVyIiwicGlja2VkTmF2aWdhdGlvbiIsInBpY2tlZFBvcnRhbCIsIlBsYXllckNvbWJhdFBhbmVsTWVkaWF0b3IiLCJoYW5kbGVFbmRUdXJuIiwiUGxheWVyQ29tYmF0UGFuZWxDb21wb25lbnQiLCJlbmRUdXJuQnV0dG9uIiwiY2xpY2tFbmRUdXJuIiwiSGl0Ym94Q29tcG9uZW50IiwiY2VudGVyIiwiQWN0aW9uUGFuZWxNZWRpYXRvciIsImhhbmRsZUZpcmVDb21tYW5kIiwiYWN0aW9uTmFtZSIsInNlbGVjdEFjdGlvbiIsIkFjdGlvbkJ1dHRvbkNvbXBvbmVudCIsImhpZ2hsaWdodEVudGl0eSIsImhhbmRsZUNoYW5nZUFjdGlvbiIsImhhbmRsZUNsaWNrIiwiY29tbWFuZHMiLCJjb21tYW5kQXJncyIsIkFjdGlvblBhbmVsQ29tcG9uZW50IiwiYnV0dG9uIiwiYWN0aW9uQnV0dG9ucyIsInN0b3BQcm9wYWdhdGlvbiIsIlByb2plY3RpbGVDcmVhdG9yQ29tcG9uZW50IiwicHJvamVjdGlsZU5hbWUiLCJwcm9qZWN0aWxlU2NoZW1lIiwicHJvamVjdGlsZVR5cGVzIiwic2NoZW1lIiwibmV3UHJvamVjdGlsZSIsInByb2plY3RpbGVUZW1wbGF0ZSIsInNldFRhcmdldCIsIlByb2plY3RpbGVDb21wb25lbnQiLCJuZXdQb3NpdGlvbiIsInNwZWVkIiwicHJvamVjdGlsZVNwZWVkIiwic3ViMiIsIm11bCIsIlN0YW1pbmFCYXJNZWRpYXRvciIsIm5ld1N0YW1pbmEiLCJ1cGRhdGVTdGFtaW5hIiwiU3RhbWluYUJhckNvbXBvbmVudCIsImJhckVudGl0eU1heFdpZHRoIiwiYmFyRW50aXR5Iiwid2lkdGgiLCJsZXJwIiwicmVjdCIsInN0YW1pbmFMYWJlbCIsIkFjdGlvbnNSZW1haW5pbmdQYW5lbE1lZGlhdG9yIiwibWF4QWN0aW9ucyIsInNob3dBdmFpbGFibGVBY3Rpb24iLCJBY3Rpb25zUmVtYWluaW5nUGFuZWxDb21wb25lbnQiLCJwaXBzIiwiY3JlYXRlUGlwIiwibmV3UGlwIiwicGlwVGVtcGxhdGUiLCJBY3Rpb25zUmVtYWluaW5nUGlwQ29tcG9uZW50Iiwic2hvdyIsInBpcEZyb250IiwiRmxvYXRpbmdTdGF0dXNDcmVhdG9yTWVkaWF0b3IiLCJzY3JpcHRDb21wIiwiZmxvYXRlck5hbWUiLCJkaXNwbGF5U3RhdHVzIiwiVGVtcG9yYXJ5RmxvYXRpbmdTdGF0dXNDb21wb25lbnQiLCJzZXRXb3JsZFBvc2l0aW9uIiwid29ybGRQb3NpdGlvbiIsInNjcmVlbiIsImRldmljZSIsImdyYXBoaWNzRGV2aWNlIiwic2NyZWVuRW50aXR5IiwicG9zdFVwZGF0ZSIsInBvc2l0aW9uIiwid29ybGRTcGFjZVRvU2NyZWVuU3BhY2UiLCJ3b3JsZFBvcyIsIndvcmxkVG9TY3JlZW4iLCJwaXhlbFJhdGlvIiwibWF4UGl4ZWxSYXRpbyIsInJhdGlvU2NhbGUiLCJGbG9hdGluZ1N0YXR1c0NyZWF0b3JDb21wb25lbnQiLCJmbG9hdGluZ1N0YXR1c2VzIiwib3RoZXJTY2hlbWUiLCJ0YXJnZXRQb3MiLCJuZXdTdGF0dXMiLCJ0ZW1wbGF0ZSIsIlBvcnRhbE1lZGlhdG9yIiwic2VsZWN0ZWRQb3J0YWwiLCJQb3J0YWxDb21wb25lbnQiLCJEaWFsb2d1ZVBhbmVsTWVkaWF0b3IiLCJoYW5kbGVDbGlja0NvbnRpbnVlIiwiaGFuZGxlQ2xpY2tDaG9pY2UiLCJjbGVhclBhbmVsIiwiY3JlYXRlU3RlcCIsImNyZWF0ZVNraWxsVGVzdCIsImNsZWFyRGlhbG9ndWVDaG9pY2VzIiwic2V0Q29udGludWVCdXR0b24iLCJEaWFsb2d1ZVBhbmVsQ29tcG9uZW50IiwiY29udGludWVCdXR0b25FbnRpdHkiLCJzdGVwRGF0YSIsImNyZWF0ZVRleHQiLCJjaG9pY2UiLCJjcmVhdGVDaG9pY2UiLCJuZXdUZXh0IiwidGV4dEVudHJ5VGVtcGxhdGUiLCJzZXR1cCIsImZlZWRFbnRpdHkiLCJyZXNpemVUb0NvbnRlbnRzIiwic2Nyb2xsYmFyVmlld0VudGl0eSIsInNjcm9sbGJhciIsIm5ld0Nob2ljZSIsImNob2ljZUVudHJ5VGVtcGxhdGUiLCJoYW5kbGVTZWxlY3RDaG9pY2UiLCJ3YXNTdWNjZXNzIiwibmV3U2tpbGxUZXN0Iiwic2tpbGxUZXN0RW50cnlUZW1wbGF0ZSIsInNwYWNpbmdWZXJ0aWNhbCIsImxheW91dGdyb3VwIiwic3BhY2luZyIsImZlZWRDaGlsZCIsImNvbnRlbnRFbnRpdHkiLCJjb250ZW50SGVpZ2h0IiwiRGlhbG9ndWVDaG9pY2VDb21wb25lbnQiLCJsYWJlbCIsImluZGV4RW50aXR5IiwiRGVmYXVsdEFuaW1hdGlvbkNvbXBvbmVudCIsImFuaW1hdGlvbk5hbWUiLCJEaWFsb2d1ZVRleHRDb21wb25lbnQiLCJ0aXRsZUVudGl0eSIsImNvbG9yIiwiZnJvbVN0cmluZyIsInRodW1ibmFpbCIsInRleHRDb250YWluZXIiLCJ3aXRoSW1hZ2VXaWR0aCIsIndpdGhvdXRJbWFnZVdpZHRoIiwidGh1bWJuYWlsQ29udGFpbmVyIiwiZW5hYmxlIiwiYm9keUVudGl0eSIsInNldEhlaWdodCIsIm1pbkhlaWdodCIsInRleHRDaGlsZCIsIkF0dGFja0J1dHRvbk1lZGlhdG9yIiwiaGFuZGxlVG9nZ2xlQXR0YWNrIiwidG9nZ2xlSGlnaGxpZ2h0IiwiYXR0YWNrRW5hYmxlZCIsIkF0dGFja0J1dHRvbkNvbXBvbmVudCIsImlzRW5hYmxlZCIsIlZlaGljbGVDb21wb25lbnQiLCJjbGFtcFZlYzMiLCJ2ZWMzIiwibWF4VmFsdWUiLCJ2ZWxvY2l0eSIsInN0ZWVyaW5nRm9yY2UiLCJtYXhTcGVlZCIsInlSb3RhdGlvbiIsImRlc2lyZWRWZWxvY2l0eSIsImZvcmNlIiwiYXJyaXZhbFRocmVzaG9sZCIsImFycml2ZVRocmVzaG9sZCIsIlNjcmVlblJlc2l6ZUNvbXBvbmVudCIsIndpbmRvdyIsIm9uUmVzaXplIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNjYWxlQmxlbmQiLCJyZWZlcmVuY2VSZXNvbHV0aW9uIiwiRGlhbG9ndWVTa2lsbFRlc3RDb21wb25lbnQiLCJza2lsbE5hbWVMYWJlbCIsInNraWxsVmFsdWVMYWJlbCIsImRpZTFMYWJlbCIsImRpZTJMYWJlbCIsInN1Y2Nlc3NMYWJlbCIsImZhaWx1cmVMYWJlbCIsIkludmVudG9yeUl0ZW1Db21wb25lbnQiLCJfaGFuZGxlRHJhZ0hlbHBlciIsIkVsZW1lbnREcmFnSGVscGVyIiwib25IYW5kbGVEcmFnIiwib25IYW5kbGVNb3ZlIiwib25IYW5kbGVEcm9wIiwic2xvdEhlaWdodCIsIkludmVudG9yeVBhbmVsTWVkaWF0b3IiLCJoYW5kZVJlb3JkZXJJdGVtIiwiaXRlbXMiLCJkaXNwbGF5SXRlbXMiLCJJbnZlbnRvcnlQYW5lbENvbXBvbmVudCIsIml0ZW1Db250YWluZXIiLCJoYW5kbGVJdGVtRHJhZyIsImhhbmRsZUl0ZW1Nb3ZlIiwiaGFuZGxlSXRlbURyb3AiLCJjbG9zZUJ1dHRvbiIsImhhbmRsZUNsb3NlIiwic2VwYXJhdG9ySGlnaGxpZ2h0IiwiZHJhZ2dlZEVudGl0eSIsInNldEhpZ2hsaWdodFBvc2l0aW9uIiwiZHJhZ2dpbmdFbnRpdHkiLCJnZXRTbG90SW5kZXgiLCJzZXBhcmF0b3JQb3MiLCJnZXRTZXBhcmF0b3JQb3NpdGlvbiIsImRyb3BwZWRFbnRpdHkiLCJnZXRJbmRleE9mSXRlbSIsInBvc1kiLCJib3R0b21TbG90SW5kZXgiLCJzbG90Q29udGFpbmVyIiwic2xvdCIsInNsb3RZIiwic2xvdEVudGl0eSIsIml0ZW1FbnRpdHkiLCJuZXdJdGVtQ29tcG9uZW50IiwiaXRlbUFzc2V0Iiwic3RhcnR1cCJdLCJtYXBwaW5ncyI6IndDQUNBQSxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0RCxJQUFJQyxFQUFZLEVBQVEsS0FDcEJDLEVBQVMsRUFBUSxLQUVqQkMsRUFBNEIsV0FDNUIsU0FBU0EsRUFBV0MsR0FFaEIsR0FEQUMsS0FBS0MsV0FBYSxHQUNkSCxFQUFXSSxZQUFZSCxHQUN2QixNQUFNLElBQUlJLE1BTEgsNERBT1hILEtBQUtJLFlBQWNMLEVBQ25CQyxLQUFLSyxPQUFTVCxFQUFVVSxRQUFRQyxNQUFRWCxFQUFVVSxRQUFRRSxXQUFhWixFQUFVVSxRQUFRRyxRQUN6RlQsS0FBS1UsdUJBcURULE9BbkRBWixFQUFXYSxpQkFBbUIsU0FBVVosVUFDN0JDLEtBQUtFLFlBQVlILElBRTVCRCxFQUFXYyxZQUFjLFNBQVViLEdBQy9CLE9BQUtBLEdBR0FDLEtBQUtFLFlBQVlILEtBQ2xCQyxLQUFLRSxZQUFZSCxHQUFPLElBQUlELEVBQVdDLElBRXBDQyxLQUFLRSxZQUFZSCxJQUxiLE1BT2ZELEVBQVdlLFVBQVVDLGdCQUFrQixTQUFVQyxFQUFrQkMsR0FDMURoQixLQUFLQyxXQUFXYyxJQUNqQmYsS0FBS2lCLEtBQUtDLGlCQUFpQkgsRUFBa0JmLEtBQUttQixlQUFnQm5CLE1BRXRFQSxLQUFLQyxXQUFXYyxHQUFvQkMsR0FFeENsQixFQUFXZSxVQUFVTyxXQUFhLFNBQVVMLEdBQ3hDLFlBQTZDTSxJQUF0Q3JCLEtBQUtDLFdBQVdjLElBRTNCakIsRUFBV2UsVUFBVVMsY0FBZ0IsU0FBVVAsR0FDdkNmLEtBQUtvQixXQUFXTCxLQUNoQmYsS0FBS2lCLEtBQUtNLGVBQWVSLEVBQWtCZixLQUFLbUIsZUFBZ0JuQixhQUN6REEsS0FBS0MsV0FBV2MsS0FHL0JqQixFQUFXZSxVQUFVSCxxQkFBdUIsV0FDeENWLEtB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LElBQUssRUFBUSxNQUNyQixRQUFFOUIsSUFBWSxFQUFRLEtBMENmLElBWGIsTUFDSSxjQUNJQSxHQUFRQyxPQUFRLEVBQ2hCLEdBQU9LLFlBQWNpcUIsRUFBVyxXQUFYLFlBQ3JCOWlCLFFBQVFDLElBQUksSUFFWmhJLEtBQUtzSCxPQUFTLEdBQU8xRyxZQUFZaXFCLEVBQVcsV0FBWCxLQUNqQzdxQixLQUFLc0gsT0FBT2lpQyxRQUFRdnBDLFMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFB1cmVNVkNfMSA9IHJlcXVpcmUoXCIuL1B1cmVNVkNcIik7XG52YXIgVmlld18xID0gcmVxdWlyZShcIi4vVmlld1wiKTtcbnZhciBNVUxUSVRPTl9NU0cgPSBcImNvbnRyb2xsZXIga2V5IGZvciB0aGlzIE11bHRpdG9uIGtleSBhbHJlYWR5IGNvbnN0cnVjdGVkXCI7XG52YXIgQ29udHJvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb250cm9sbGVyKGtleSkge1xuICAgICAgICB0aGlzLmNvbW1hbmRNYXAgPSB7fTtcbiAgICAgICAgaWYgKENvbnRyb2xsZXIuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE1VTFRJVE9OX01TRyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tdWx0aXRvbktleSA9IGtleTtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBQdXJlTVZDXzEuUHVyZU1WQy5kZWJ1ZyA/IFB1cmVNVkNfMS5QdXJlTVZDLmxvZ0NvbW1hbmQgOiBQdXJlTVZDXzEuUHVyZU1WQy5sb2dOb25lO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVDb250cm9sbGVyKCk7XG4gICAgfVxuICAgIENvbnRyb2xsZXIucmVtb3ZlQ29udHJvbGxlciA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuaW5zdGFuY2VNYXBba2V5XTtcbiAgICB9O1xuICAgIENvbnRyb2xsZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZU1hcFtrZXldID0gbmV3IENvbnRyb2xsZXIoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZU1hcFtrZXldO1xuICAgIH07XG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUucmVnaXN0ZXJDb21tYW5kID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUsIGNvbW1hbmRDbGFzc1JlZikge1xuICAgICAgICBpZiAoIXRoaXMuY29tbWFuZE1hcFtub3RpZmljYXRpb25OYW1lXSkge1xuICAgICAgICAgICAgdGhpcy52aWV3LnJlZ2lzdGVyT2JzZXJ2ZXIobm90aWZpY2F0aW9uTmFtZSwgdGhpcy5leGVjdXRlQ29tbWFuZCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb21tYW5kTWFwW25vdGlmaWNhdGlvbk5hbWVdID0gY29tbWFuZENsYXNzUmVmO1xuICAgIH07XG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUuaGFzQ29tbWFuZCA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmRNYXBbbm90aWZpY2F0aW9uTmFtZV0gIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIENvbnRyb2xsZXIucHJvdG90eXBlLnJlbW92ZUNvbW1hbmQgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICBpZiAodGhpcy5oYXNDb21tYW5kKG5vdGlmaWNhdGlvbk5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcucmVtb3ZlT2JzZXJ2ZXIobm90aWZpY2F0aW9uTmFtZSwgdGhpcy5leGVjdXRlQ29tbWFuZCwgdGhpcyk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5jb21tYW5kTWFwW25vdGlmaWNhdGlvbk5hbWVdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb250cm9sbGVyLnByb3RvdHlwZS5pbml0aWFsaXplQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy52aWV3ID0gVmlld18xLlZpZXcuZ2V0SW5zdGFuY2UodGhpcy5tdWx0aXRvbktleSk7XG4gICAgfTtcbiAgICBDb250cm9sbGVyLnByb3RvdHlwZS5leGVjdXRlQ29tbWFuZCA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb21tYW5kID0gdGhpcy5jb21tYW5kTWFwW25vdGlmaWNhdGlvbk5hbWVdO1xuICAgICAgICBpZiAoIWNvbW1hbmQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvZ2dlcihDb250cm9sbGVyLl9jb25zb2xlQXJncywgbm90aWZpY2F0aW9uTmFtZSwgY29tbWFuZC5uYW1lKTtcbiAgICAgICAgY29tbWFuZC5hcHBseSh2b2lkIDAsIFt0aGlzLm11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lXS5jb25jYXQoYXJncykpO1xuICAgIH07XG4gICAgQ29udHJvbGxlci5fY29uc29sZUFyZ3MgPSBbXG4gICAgICAgIFwiXCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMzRjIzNEVcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzZFMjk5NFwiLFxuICAgICAgICBcImNvbG9yOiBcIiArIFwiI0Q0QkZFMFwiICsgXCI7IGJhY2tncm91bmQ6IFwiICsgXCIjODcyNEJEXCIgKyBcIjtcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzZFMjk5NFwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjM0YyMzRFXCJcbiAgICBdO1xuICAgIENvbnRyb2xsZXIuaW5zdGFuY2VNYXAgPSB7fTtcbiAgICByZXR1cm4gQ29udHJvbGxlcjtcbn0oKSk7XG5leHBvcnRzLkNvbnRyb2xsZXIgPSBDb250cm9sbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29udHJvbGxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ3JlYXRlZCBieSBzYXJnaXMgb24gNy80LzE3LlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ29udHJvbGxlcl8xID0gcmVxdWlyZShcIi4vQ29udHJvbGxlclwiKTtcbnZhciBNb2RlbF8xID0gcmVxdWlyZShcIi4vTW9kZWxcIik7XG52YXIgUHVyZU1WQ18xID0gcmVxdWlyZShcIi4vUHVyZU1WQ1wiKTtcbnZhciBWaWV3XzEgPSByZXF1aXJlKFwiLi9WaWV3XCIpO1xudmFyIE1VTFRJVE9OX01TRyA9IFwiRmFjYWRlIGluc3RhbmNlIGZvciB0aGlzIE11bHRpdG9uIGtleSBhbHJlYWR5IGNvbnN0cnVjdGVkIVwiO1xudmFyIEZhY2FkZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGYWNhZGUoa2V5KSB7XG4gICAgICAgIGlmIChGYWNhZGUuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE1VTFRJVE9OX01TRyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2dnZXIgPSBQdXJlTVZDXzEuUHVyZU1WQy5kZWJ1ZyA/IFB1cmVNVkNfMS5QdXJlTVZDLmxvZ05vdGlmaWNhdGlvbiA6IFB1cmVNVkNfMS5QdXJlTVZDLmxvZ05vbmU7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZU5vdGlmaWVyKGtleSk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZUZhY2FkZSgpO1xuICAgIH1cbiAgICBGYWNhZGUuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUZhY2FkZS5pbnN0YW5jZU1hcFtrZXldKSB7XG4gICAgICAgICAgICBGYWNhZGUuaW5zdGFuY2VNYXBba2V5XSA9IG5ldyBGYWNhZGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRmFjYWRlLmluc3RhbmNlTWFwW2tleV07XG4gICAgfTtcbiAgICBGYWNhZGUuaGFzQ29yZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VNYXBba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgRmFjYWRlLnJlbW92ZUNvcmUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghdGhpcy5pbnN0YW5jZU1hcFtrZXldKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgTW9kZWxfMS5Nb2RlbC5yZW1vdmVNb2RlbChrZXkpO1xuICAgICAgICBWaWV3XzEuVmlldy5yZW1vdmVWaWV3KGtleSk7XG4gICAgICAgIENvbnRyb2xsZXJfMS5Db250cm9sbGVyLnJlbW92ZUNvbnRyb2xsZXIoa2V5KTtcbiAgICAgICAgZGVsZXRlIHRoaXMuaW5zdGFuY2VNYXBba2V5XTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuaW5pdGlhbGl6ZUZhY2FkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplTW9kZWwoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplQ29udHJvbGxlcigpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVWaWV3KCk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnJlZ2lzdGVyQ29tbWFuZCA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lLCBjb21tYW5kQ2xhc3NSZWYpIHtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyLnJlZ2lzdGVyQ29tbWFuZChub3RpZmljYXRpb25OYW1lLCBjb21tYW5kQ2xhc3NSZWYpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5yZW1vdmVDb21tYW5kID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyLnJlbW92ZUNvbW1hbmQobm90aWZpY2F0aW9uTmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLmhhc0NvbW1hbmQgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sbGVyLmhhc0NvbW1hbmQobm90aWZpY2F0aW9uTmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnJlZ2lzdGVyUHJveHkgPSBmdW5jdGlvbiAocHJveHkpIHtcbiAgICAgICAgdGhpcy5tb2RlbC5yZWdpc3RlclByb3h5KHByb3h5KTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUucmV0cmlldmVQcm94eSA9IGZ1bmN0aW9uIChwcm94eU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwucmV0cmlldmVQcm94eShwcm94eU5hbWUpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5yZW1vdmVQcm94eSA9IGZ1bmN0aW9uIChwcm94eU5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsLnJlbW92ZVByb3h5KHByb3h5TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLmhhc1Byb3h5ID0gZnVuY3Rpb24gKHByb3h5TmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5oYXNQcm94eShwcm94eU5hbWUpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5yZWdpc3Rlck1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yKSB7XG4gICAgICAgIHRoaXMudmlldy5yZWdpc3Rlck1lZGlhdG9yKG1lZGlhdG9yKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUucmV0cmlldmVNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5yZXRyaWV2ZU1lZGlhdG9yKG1lZGlhdG9yTmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnJlbW92ZU1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LnJlbW92ZU1lZGlhdG9yKG1lZGlhdG9yTmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnNsZWVwTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuc2xlZXBNZWRpYXRvcihtZWRpYXRvck5hbWUpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5hd2FrZU1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LmF3YWtlTWVkaWF0b3IobWVkaWF0b3JOYW1lKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuaGFzTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuaGFzTWVkaWF0b3IobWVkaWF0b3JOYW1lKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuc2VuZE5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5sb2dnZXIuYXBwbHkodGhpcywgW0ZhY2FkZS5fY29uc29sZUFyZ3MsIG5vdGlmaWNhdGlvbk5hbWVdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIChfYSA9IHRoaXMudmlldykubm90aWZ5T2JzZXJ2ZXJzLmFwcGx5KF9hLCBbbm90aWZpY2F0aW9uTmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuaW5pdGlhbGl6ZU5vdGlmaWVyID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0aGlzLm11bHRpdG9uS2V5ID0ga2V5O1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5pbml0aWFsaXplQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udHJvbGxlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IENvbnRyb2xsZXJfMS5Db250cm9sbGVyLmdldEluc3RhbmNlKHRoaXMubXVsdGl0b25LZXkpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5pbml0aWFsaXplTW9kZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLm1vZGVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb2RlbCA9IE1vZGVsXzEuTW9kZWwuZ2V0SW5zdGFuY2UodGhpcy5tdWx0aXRvbktleSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLmluaXRpYWxpemVWaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy52aWV3KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52aWV3ID0gVmlld18xLlZpZXcuZ2V0SW5zdGFuY2UodGhpcy5tdWx0aXRvbktleSk7XG4gICAgfTtcbiAgICBGYWNhZGUuX2NvbnNvbGVBcmdzID0gW1xuICAgICAgICBcIlwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjNzU3MTMwXCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiNERUQ0MzRcIixcbiAgICAgICAgXCJjb2xvcjogXCIgKyBcIiMyRjJFMTVcIiArIFwiOyBiYWNrZ3JvdW5kOiBcIiArIFwiI0ZGRjMyNVwiICsgXCI7XCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiNERUQ0MzRcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzc1NzEzMFwiXG4gICAgXTtcbiAgICBGYWNhZGUuaW5zdGFuY2VNYXAgPSB7fTtcbiAgICByZXR1cm4gRmFjYWRlO1xufSgpKTtcbmV4cG9ydHMuRmFjYWRlID0gRmFjYWRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmFjYWRlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTm90aWZpZXJfMSA9IHJlcXVpcmUoXCIuL05vdGlmaWVyXCIpO1xudmFyIFB1cmVNVkNfMSA9IHJlcXVpcmUoXCIuL1B1cmVNVkNcIik7XG52YXIgTkFNRSA9IFwiTWVkaWF0b3JcIjtcbnZhciBNZWRpYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWVkaWF0b3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWVkaWF0b3IobWVkaWF0b3JOYW1lLCB2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmxvZ2dlciA9IFB1cmVNVkNfMS5QdXJlTVZDLmRlYnVnID8gUHVyZU1WQ18xLlB1cmVNVkMubG9nTWVkaWF0b3IgOiBQdXJlTVZDXzEuUHVyZU1WQy5sb2dOb25lO1xuICAgICAgICBfdGhpcy5tZWRpYXRvck5hbWUgPSBtZWRpYXRvck5hbWUgfHwgTkFNRTtcbiAgICAgICAgX3RoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgICAgIF90aGlzLnNsZWVwaW5nID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuc3Vic2NyaWJlZE5vdGlmaWNhdGlvbnMgPSBbXTtcbiAgICAgICAgX3RoaXMubm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVkaWF0b3IucHJvdG90eXBlLCBcIm5vdGlmaWNhdGlvbnNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN1YnNjcmliZWROb3RpZmljYXRpb25zO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNZWRpYXRvci5wcm90b3R5cGUuZ2V0TWVkaWF0b3JOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZWRpYXRvck5hbWU7XG4gICAgfTtcbiAgICBNZWRpYXRvci5wcm90b3R5cGUuc2V0Vmlld0NvbXBvbmVudCA9IGZ1bmN0aW9uICh2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgfTtcbiAgICBNZWRpYXRvci5wcm90b3R5cGUuZ2V0Vmlld0NvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0NvbXBvbmVudDtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5vblJlZ2lzdGVyID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSA9IG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZTtcbiAgICAgICAgdGhpcy5sb2dnZXIoTWVkaWF0b3IuX2NvbnNvbGVBcmdzLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIFwicmVnaXN0ZXJcIik7XG4gICAgfTtcbiAgICBNZWRpYXRvci5wcm90b3R5cGUub25SZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5sb2dnZXIoTWVkaWF0b3IuX2NvbnNvbGVBcmdzLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIFwicmVtb3ZlXCIpO1xuICAgIH07XG4gICAgTWVkaWF0b3IucHJvdG90eXBlLm9uU2xlZXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2xlZXBpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmxvZ2dlcihNZWRpYXRvci5fY29uc29sZUFyZ3MsIHRoaXMuY29uc3RydWN0b3IubmFtZSwgXCJzbGVlcFwiKTtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5vbkF3YWtlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNsZWVwaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9nZ2VyKE1lZGlhdG9yLl9jb25zb2xlQXJncywgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBcImF3YWtlXCIpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lZGlhdG9yLnByb3RvdHlwZSwgXCJpc1NsZWVwaW5nXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zbGVlcGluZztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTWVkaWF0b3IucHJvdG90eXBlLnN1YnNjcmliZU5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlU3Vic2NyaXB0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIHRoaXMuYWRkU3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS51bnN1YnNjcmliZU5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlU3Vic2NyaXB0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIHRoaXMucmVtb3ZlU3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5jaGFuZ2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSwgYWN0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBvbGROb3RpZmljYXRpb25zID0gdGhpcy5ub3RpZmljYXRpb25zLnNsaWNlKCk7XG4gICAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIGlmIChub3RpZmljYXRpb25OYW1lIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIG5vdGlmaWNhdGlvbk5hbWUuZm9yRWFjaChmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlZCA9IGFjdGlvbi5jYWxsKF90aGlzLCBub3RpZmljYXRpb24pIHx8IGNoYW5nZWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNoYW5nZWQgPSBhY3Rpb24uY2FsbCh0aGlzLCBub3RpZmljYXRpb25OYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhbmdlZCAmJiB0aGlzLm5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UodGhpcywgb2xkTm90aWZpY2F0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5hZGRTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmaWNhdGlvbnMuaW5kZXhPZihub3RpZmljYXRpb24pID09PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnB1c2gobm90aWZpY2F0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5yZW1vdmVTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMubm90aWZpY2F0aW9ucy5pbmRleE9mKG5vdGlmaWNhdGlvbik7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgTWVkaWF0b3IuX2NvbnNvbGVBcmdzID0gW1xuICAgICAgICBcIlwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjMkEzMzUxXCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMzNjREOThcIixcbiAgICAgICAgXCJjb2xvcjogXCIgKyBcIiNGNEY2RkVcIiArIFwiOyBiYWNrZ3JvdW5kOiBcIiArIFwiIzM2NTZDMVwiICsgXCI7XCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMzNjREOThcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzJBMzM1MVwiXG4gICAgXTtcbiAgICByZXR1cm4gTWVkaWF0b3I7XG59KE5vdGlmaWVyXzEuTm90aWZpZXIpKTtcbmV4cG9ydHMuTWVkaWF0b3IgPSBNZWRpYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1lZGlhdG9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE1VTFRJVE9OX01TRyA9IFwiTW9kZWwgaW5zdGFuY2UgZm9yIHRoaXMgTXVsdGl0b24ga2V5IGFscmVhZHkgY29uc3RydWN0ZWQhXCI7XG52YXIgTW9kZWwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kZWwoa2V5KSB7XG4gICAgICAgIHRoaXMucHJveHlNYXAgPSB7fTtcbiAgICAgICAgaWYgKE1vZGVsLmluc3RhbmNlTWFwW2tleV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihNVUxUSVRPTl9NU0cpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubXVsdGl0b25LZXkgPSBrZXk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZU1vZGVsKCk7XG4gICAgfVxuICAgIE1vZGVsLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlTWFwW2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VNYXBba2V5XSA9IG5ldyBNb2RlbChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlTWFwW2tleV07XG4gICAgfTtcbiAgICBNb2RlbC5yZW1vdmVNb2RlbCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuaW5zdGFuY2VNYXBba2V5XTtcbiAgICB9O1xuICAgIE1vZGVsLnByb3RvdHlwZS5yZWdpc3RlclByb3h5ID0gZnVuY3Rpb24gKHByb3h5KSB7XG4gICAgICAgIHByb3h5LmluaXRpYWxpemVOb3RpZmllcih0aGlzLm11bHRpdG9uS2V5KTtcbiAgICAgICAgdGhpcy5wcm94eU1hcFtwcm94eS5nZXRQcm94eU5hbWUoKV0gPSBwcm94eTtcbiAgICAgICAgcHJveHkub25SZWdpc3RlcigpO1xuICAgIH07XG4gICAgTW9kZWwucHJvdG90eXBlLnJldHJpZXZlUHJveHkgPSBmdW5jdGlvbiAocHJveHlOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3h5TWFwW3Byb3h5TmFtZV07XG4gICAgfTtcbiAgICBNb2RlbC5wcm90b3R5cGUuaGFzUHJveHkgPSBmdW5jdGlvbiAocHJveHlOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3h5TWFwW3Byb3h5TmFtZV0gIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIE1vZGVsLnByb3RvdHlwZS5yZW1vdmVQcm94eSA9IGZ1bmN0aW9uIChwcm94eU5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMucHJveHlNYXBbcHJveHlOYW1lXSkge1xuICAgICAgICAgICAgdmFyIHByb3h5ID0gdGhpcy5wcm94eU1hcFtwcm94eU5hbWVdO1xuICAgICAgICAgICAgcHJveHkub25SZW1vdmUoKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnByb3h5TWFwW3Byb3h5TmFtZV07XG4gICAgICAgICAgICByZXR1cm4gcHJveHk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBNb2RlbC5wcm90b3R5cGUuaW5pdGlhbGl6ZU1vZGVsID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIE1vZGVsLmluc3RhbmNlTWFwID0ge307XG4gICAgcmV0dXJuIE1vZGVsO1xufSgpKTtcbmV4cG9ydHMuTW9kZWwgPSBNb2RlbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1vZGVsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHNhcmdpcyBvbiA3LzQvMTcuXG4gKi9cbnZhciBGYWNhZGVfMSA9IHJlcXVpcmUoXCIuL0ZhY2FkZVwiKTtcbnZhciBNVUxUSVRPTl9NU0cgPSBcIm11bHRpdG9uS2V5IGZvciB0aGlzIE5vdGlmaWVyIG5vdCB5ZXQgaW5pdGlhbGl6ZWQhXCI7XG52YXIgTm90aWZpZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm90aWZpZXIoKSB7XG4gICAgfVxuICAgIE5vdGlmaWVyLnByb3RvdHlwZS5pbml0aWFsaXplTm90aWZpZXIgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHRoaXMubXVsdGl0b25LZXkgPSBrZXk7XG4gICAgICAgIHRoaXMuZmFjYWRlID0gdGhpcy5nZXRGYWNhZGUoKTtcbiAgICB9O1xuICAgIE5vdGlmaWVyLnByb3RvdHlwZS5zZW5kTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5mYWNhZGUpIHtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuZmFjYWRlKS5zZW5kTm90aWZpY2F0aW9uLmFwcGx5KF9hLCBbbm90aWZpY2F0aW9uTmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTm90aWZpZXIucHJvdG90eXBlLmdldEZhY2FkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubXVsdGl0b25LZXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihNVUxUSVRPTl9NU0cpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBGYWNhZGVfMS5GYWNhZGUuZ2V0SW5zdGFuY2UodGhpcy5tdWx0aXRvbktleSk7XG4gICAgfTtcbiAgICByZXR1cm4gTm90aWZpZXI7XG59KCkpO1xuZXhwb3J0cy5Ob3RpZmllciA9IE5vdGlmaWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQ3JlYXRlZCBieSBzYXJnaXMgb24gNy80LzE3LlxuICovXG52YXIgTm90aWZpZXJfMSA9IHJlcXVpcmUoXCIuL05vdGlmaWVyXCIpO1xudmFyIFB1cmVNVkNfMSA9IHJlcXVpcmUoXCIuL1B1cmVNVkNcIik7XG52YXIgTkFNRSA9IFwiUHJveHlcIjtcbnZhciBQcm94eSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUHJveHksIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUHJveHkocHJveHlOYW1lLCBkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb3h5TmFtZSA9IHByb3h5TmFtZSB8fCBOQU1FO1xuICAgICAgICBfdGhpcy5sb2dnZXIgPSBQdXJlTVZDXzEuUHVyZU1WQy5kZWJ1ZyA/IFB1cmVNVkNfMS5QdXJlTVZDLmxvZ1Byb3h5IDogUHVyZU1WQ18xLlB1cmVNVkMubG9nTm9uZTtcbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIF90aGlzLnNldERhdGEoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBQcm94eS5wcm90b3R5cGUuZ2V0UHJveHlOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm94eU5hbWU7XG4gICAgfTtcbiAgICBQcm94eS5wcm90b3R5cGUuc2V0RGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfTtcbiAgICBQcm94eS5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgICB9O1xuICAgIFByb3h5LnByb3RvdHlwZS5vblJlZ2lzdGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxvZ2dlcihQcm94eS5fY29uc29sZUFyZ3MsIHRoaXMuY29uc3RydWN0b3IubmFtZSwgXCJyZWdpc3RlclwiKTtcbiAgICB9O1xuICAgIFByb3h5LnByb3RvdHlwZS5vblJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIoUHJveHkuX2NvbnNvbGVBcmdzLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIFwicmVtb3ZlXCIpO1xuICAgIH07XG4gICAgUHJveHkuX2NvbnNvbGVBcmdzID0gW1xuICAgICAgICBcIlwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjMjk1QTM0XCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMyRkFBNEFcIixcbiAgICAgICAgXCJjb2xvcjogXCIgKyBcIiMxMDI0MTVcIiArIFwiOyBiYWNrZ3JvdW5kOiBcIiArIFwiIzI3RDA0Q1wiICsgXCI7XCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMyRkFBNEFcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzI5NUEzNFwiXG4gICAgXTtcbiAgICByZXR1cm4gUHJveHk7XG59KE5vdGlmaWVyXzEuTm90aWZpZXIpKTtcbmV4cG9ydHMuUHJveHkgPSBQcm94eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByb3h5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFB1cmVNVkMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHVyZU1WQygpIHtcbiAgICB9XG4gICAgUHVyZU1WQy5sb2dDb21tYW5kID0gZnVuY3Rpb24gKGNvbnNvbGVBcmdzLCBub3RpZmljYXRpb25OYW1lLCBjb21tYW5kTmFtZSkge1xuICAgICAgICBjb25zb2xlQXJnc1swXSA9IFwiJWMgJWMgJWMgXCIgKyBub3RpZmljYXRpb25OYW1lICsgXCIgPT4gIFwiICsgY29tbWFuZE5hbWUgKyBcIiAlYyAlYyBcIjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgY29uc29sZUFyZ3MpO1xuICAgIH07XG4gICAgUHVyZU1WQy5sb2dOb3RpZmljYXRpb24gPSBmdW5jdGlvbiAoY29uc29sZUFyZ3MsIG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZUFyZ3NbMF0gPSBcIiVjICVjICVjIFwiICsgbm90aWZpY2F0aW9uTmFtZSArIFwiOiBhcmdzIFsgXCIgKyBhcmdzICsgXCIgXSAlYyAlYyBcIjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgY29uc29sZUFyZ3MpO1xuICAgIH07XG4gICAgUHVyZU1WQy5sb2dNZWRpYXRvciA9IGZ1bmN0aW9uIChjb25zb2xlQXJncywgbmFtZSwgYWN0aW9uKSB7XG4gICAgICAgIGNvbnNvbGVBcmdzWzBdID0gXCIlYyAlYyAlYyBcIiArIG5hbWUgKyBcIjogXCIgKyBhY3Rpb24gKyBcIiAlYyAlYyBcIjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgY29uc29sZUFyZ3MpO1xuICAgIH07XG4gICAgUHVyZU1WQy5sb2dQcm94eSA9IGZ1bmN0aW9uIChjb25zb2xlQXJncywgbmFtZSwgYWN0aW9uKSB7XG4gICAgICAgIGNvbnNvbGVBcmdzWzBdID0gXCIlYyAlYyAlYyBcIiArIG5hbWUgKyBcIjogXCIgKyBhY3Rpb24gKyBcIiAlYyAlYyBcIjtcbiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgY29uc29sZUFyZ3MpO1xuICAgIH07XG4gICAgUHVyZU1WQy5sb2dOb25lID0gZnVuY3Rpb24gKGNvbnNvbGVBcmdzKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQdXJlTVZDLmRlYnVnID0gdHJ1ZTtcbiAgICByZXR1cm4gUHVyZU1WQztcbn0oKSk7XG5leHBvcnRzLlB1cmVNVkMgPSBQdXJlTVZDO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHVyZU1WQy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKFwiZXZlbnRlbWl0dGVyM1wiKTtcbnZhciBNVUxUSVRPTl9NU0cgPSBcIlZpZXcgaW5zdGFuY2UgZm9yIHRoaXMgTXVsdGl0b24ga2V5IGFscmVhZHkgY29uc3RydWN0ZWQhXCI7XG52YXIgVmlldyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWaWV3KGtleSkge1xuICAgICAgICB0aGlzLm1lZGlhdG9yTWFwID0ge307XG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICBpZiAoVmlldy5pbnN0YW5jZU1hcFtrZXldKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTVVMVElUT05fTVNHKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm11bHRpdG9uS2V5ID0ga2V5O1xuICAgICAgICB0aGlzLmluaXRpYWxpemVWaWV3KCk7XG4gICAgfVxuICAgIFZpZXcuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZU1hcFtrZXldID0gbmV3IFZpZXcoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZU1hcFtrZXldO1xuICAgIH07XG4gICAgVmlldy5yZW1vdmVWaWV3ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWxldGUgdGhpcy5pbnN0YW5jZU1hcFtrZXldO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmVtb3ZlT2JzZXJ2ZXIgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSwgb2JzZXJ2ZXJNZXRob2QsIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIobm90aWZpY2F0aW9uTmFtZSwgb2JzZXJ2ZXJNZXRob2QsIGNvbnRleHQpO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmVnaXN0ZXJPYnNlcnZlciA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lLCBvYnNlcnZlck1ldGhvZCwgY29udGV4dCkge1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5vbihub3RpZmljYXRpb25OYW1lLCBvYnNlcnZlck1ldGhvZCwgY29udGV4dCk7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5ub3RpZnlPYnNlcnZlcnMgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMuZXZlbnRFbWl0dGVyKS5lbWl0LmFwcGx5KF9hLCBbbm90aWZpY2F0aW9uTmFtZSwgbm90aWZpY2F0aW9uTmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnJlZ2lzdGVyTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3IpIHtcbiAgICAgICAgaWYgKHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3IuZ2V0TWVkaWF0b3JOYW1lKCldKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbWVkaWF0b3IuaW5pdGlhbGl6ZU5vdGlmaWVyKHRoaXMubXVsdGl0b25LZXkpO1xuICAgICAgICAvLyByZWdpc3RlciB0aGUgbWVkaWF0b3IgZm9yIHJldHJpZXZhbCBieSBuYW1lXG4gICAgICAgIHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3IuZ2V0TWVkaWF0b3JOYW1lKCldID0gbWVkaWF0b3I7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJPYnNlcnZlcnMobWVkaWF0b3IpO1xuICAgICAgICBtZWRpYXRvci5vblJlZ2lzdGVyKHRoaXMub25NZWRpYXRvck5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgbWVkaWF0b3Iub25Bd2FrZSgpO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUuYXdha2VNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvck5hbWUpIHtcbiAgICAgICAgdmFyIG1lZGlhdG9yID0gdGhpcy5tZWRpYXRvck1hcFttZWRpYXRvck5hbWVdO1xuICAgICAgICBpZiAobWVkaWF0b3IpIHtcbiAgICAgICAgICAgIGlmICghbWVkaWF0b3IuaXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZWRpYXRvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJPYnNlcnZlcnMobWVkaWF0b3IpO1xuICAgICAgICAgICAgLy8gYWxlcnQgdGhlIG1lZGlhdG9yIHRoYXQgaXQgaGFzIGJlZW4gYXdha2VuXG4gICAgICAgICAgICBtZWRpYXRvci5vbkF3YWtlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lZGlhdG9yO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmV0cmlldmVNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3JOYW1lXTtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnJlbW92ZU1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yTmFtZSkge1xuICAgICAgICB2YXIgbWVkaWF0b3IgPSB0aGlzLm1lZGlhdG9yTWFwW21lZGlhdG9yTmFtZV07XG4gICAgICAgIGlmIChtZWRpYXRvcikge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVPYnNlcnZlcnMobWVkaWF0b3IpO1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBtZWRpYXRvciBmcm9tIHRoZSBtYXBcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm1lZGlhdG9yTWFwW21lZGlhdG9yTmFtZV07XG4gICAgICAgICAgICBtZWRpYXRvci5vblNsZWVwKCk7XG4gICAgICAgICAgICAvLyBhbGVydCB0aGUgbWVkaWF0b3IgdGhhdCBpdCBoYXMgYmVlbiByZW1vdmVkXG4gICAgICAgICAgICBtZWRpYXRvci5vblJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZWRpYXRvcjtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnNsZWVwTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHZhciBtZWRpYXRvciA9IHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3JOYW1lXTtcbiAgICAgICAgaWYgKG1lZGlhdG9yKSB7XG4gICAgICAgICAgICBpZiAobWVkaWF0b3IuaXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZWRpYXRvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVtb3ZlT2JzZXJ2ZXJzKG1lZGlhdG9yKTtcbiAgICAgICAgICAgIC8vIGFsZXJ0IHRoZSBtZWRpYXRvciB0aGF0IGl0IGhhcyBiZWVuIHNsZXB0XG4gICAgICAgICAgICBtZWRpYXRvci5vblNsZWVwKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lZGlhdG9yO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUuaGFzTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lZGlhdG9yTWFwW21lZGlhdG9yTmFtZV0gIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLmluaXRpYWxpemVWaWV3ID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIFZpZXcucHJvdG90eXBlLnJlbW92ZU9ic2VydmVycyA9IGZ1bmN0aW9uIChtZWRpYXRvciwgaW50ZXJlc3RzKSB7XG4gICAgICAgIC8vIGZvciBldmVyeSBub3RpZmljYXRpb24gdGhlIG1lZGlhdG9yIGlzIGludGVyZXN0ZWQgaW4uLi5cbiAgICAgICAgdmFyIG5vdGlmaWNhdGlvbkludGVyZXN0cyA9IGludGVyZXN0cyB8fCBtZWRpYXRvci5ub3RpZmljYXRpb25zO1xuICAgICAgICBpZiAobm90aWZpY2F0aW9uSW50ZXJlc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgbm90aWZpY2F0aW9uSW50ZXJlc3RzXzEgPSBub3RpZmljYXRpb25JbnRlcmVzdHM7IF9pIDwgbm90aWZpY2F0aW9uSW50ZXJlc3RzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGludGVyZXN0ID0gbm90aWZpY2F0aW9uSW50ZXJlc3RzXzFbX2ldO1xuICAgICAgICAgICAgICAgIC8vIGludGVyZXN0XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVPYnNlcnZlcihpbnRlcmVzdCwgbWVkaWF0b3IuaGFuZGxlTm90aWZpY2F0aW9uLCBtZWRpYXRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLnJlZ2lzdGVyT2JzZXJ2ZXJzID0gZnVuY3Rpb24gKG1lZGlhdG9yLCBpbnRlcmVzdHMpIHtcbiAgICAgICAgLy8gZ2V0IG5vdGlmaWNhdGlvbiBpbnRlcmVzdHMgaWYgYW55XG4gICAgICAgIHZhciBub3RpZmljYXRpb25JbnRlcmVzdHMgPSBpbnRlcmVzdHMgfHwgbWVkaWF0b3Iubm90aWZpY2F0aW9ucztcbiAgICAgICAgLy8gcmVnaXN0ZXIgbWVkaWF0b3IgYXMgYW4gb2JzZXJ2ZXIgZm9yIGVhY2ggbm90aWZpY2F0aW9uXG4gICAgICAgIGlmIChub3RpZmljYXRpb25JbnRlcmVzdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBub3RpZmljYXRpb25JbnRlcmVzdHNfMiA9IG5vdGlmaWNhdGlvbkludGVyZXN0czsgX2kgPCBub3RpZmljYXRpb25JbnRlcmVzdHNfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJlc3QgPSBub3RpZmljYXRpb25JbnRlcmVzdHNfMltfaV07XG4gICAgICAgICAgICAgICAgdGhpcy5yZWdpc3Rlck9ic2VydmVyKGludGVyZXN0LCBtZWRpYXRvci5oYW5kbGVOb3RpZmljYXRpb24sIG1lZGlhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUub25NZWRpYXRvck5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSA9IGZ1bmN0aW9uIChtZWRpYXRvciwgb2xkTm90aWZpY2F0aW9ucykge1xuICAgICAgICB0aGlzLnJlbW92ZU9ic2VydmVycyhtZWRpYXRvciwgb2xkTm90aWZpY2F0aW9ucyk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJPYnNlcnZlcnMobWVkaWF0b3IpO1xuICAgIH07XG4gICAgVmlldy5pbnN0YW5jZU1hcCA9IHt9O1xuICAgIHJldHVybiBWaWV3O1xufSgpKTtcbmV4cG9ydHMuVmlldyA9IFZpZXc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WaWV3LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIENvbnRyb2xsZXJfMSA9IHJlcXVpcmUoXCIuL2NvbS9rb3JlZXovcHVyZW12Yy9Db250cm9sbGVyXCIpO1xuZXhwb3J0cy5Db250cm9sbGVyID0gQ29udHJvbGxlcl8xLkNvbnRyb2xsZXI7XG52YXIgRmFjYWRlXzEgPSByZXF1aXJlKFwiLi9jb20va29yZWV6L3B1cmVtdmMvRmFjYWRlXCIpO1xuZXhwb3J0cy5GYWNhZGUgPSBGYWNhZGVfMS5GYWNhZGU7XG52YXIgTWVkaWF0b3JfMSA9IHJlcXVpcmUoXCIuL2NvbS9rb3JlZXovcHVyZW12Yy9NZWRpYXRvclwiKTtcbmV4cG9ydHMuTWVkaWF0b3IgPSBNZWRpYXRvcl8xLk1lZGlhdG9yO1xudmFyIE1vZGVsXzEgPSByZXF1aXJlKFwiLi9jb20va29yZWV6L3B1cmVtdmMvTW9kZWxcIik7XG5leHBvcnRzLk1vZGVsID0gTW9kZWxfMS5Nb2RlbDtcbnZhciBOb3RpZmllcl8xID0gcmVxdWlyZShcIi4vY29tL2tvcmVlei9wdXJlbXZjL05vdGlmaWVyXCIpO1xuZXhwb3J0cy5Ob3RpZmllciA9IE5vdGlmaWVyXzEuTm90aWZpZXI7XG52YXIgUHJveHlfMSA9IHJlcXVpcmUoXCIuL2NvbS9rb3JlZXovcHVyZW12Yy9Qcm94eVwiKTtcbmV4cG9ydHMuUHJveHkgPSBQcm94eV8xLlByb3h5O1xudmFyIFB1cmVNVkNfMSA9IHJlcXVpcmUoXCIuL2NvbS9rb3JlZXovcHVyZW12Yy9QdXJlTVZDXCIpO1xuZXhwb3J0cy5QdXJlTVZDID0gUHVyZU1WQ18xLlB1cmVNVkM7XG52YXIgVmlld18xID0gcmVxdWlyZShcIi4vY29tL2tvcmVlei9wdXJlbXZjL1ZpZXdcIik7XG5leHBvcnRzLlZpZXcgPSBWaWV3XzEuVmlldztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCBwcmVmaXggPSAnfic7XG5cbi8qKlxuICogQ29uc3RydWN0b3IgdG8gY3JlYXRlIGEgc3RvcmFnZSBmb3Igb3VyIGBFRWAgb2JqZWN0cy5cbiAqIEFuIGBFdmVudHNgIGluc3RhbmNlIGlzIGEgcGxhaW4gb2JqZWN0IHdob3NlIHByb3BlcnRpZXMgYXJlIGV2ZW50IG5hbWVzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRXZlbnRzKCkge31cblxuLy9cbi8vIFdlIHRyeSB0byBub3QgaW5oZXJpdCBmcm9tIGBPYmplY3QucHJvdG90eXBlYC4gSW4gc29tZSBlbmdpbmVzIGNyZWF0aW5nIGFuXG4vLyBpbnN0YW5jZSBpbiB0aGlzIHdheSBpcyBmYXN0ZXIgdGhhbiBjYWxsaW5nIGBPYmplY3QuY3JlYXRlKG51bGwpYCBkaXJlY3RseS5cbi8vIElmIGBPYmplY3QuY3JlYXRlKG51bGwpYCBpcyBub3Qgc3VwcG9ydGVkIHdlIHByZWZpeCB0aGUgZXZlbnQgbmFtZXMgd2l0aCBhXG4vLyBjaGFyYWN0ZXIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGJ1aWx0LWluIG9iamVjdCBwcm9wZXJ0aWVzIGFyZSBub3Rcbi8vIG92ZXJyaWRkZW4gb3IgdXNlZCBhcyBhbiBhdHRhY2sgdmVjdG9yLlxuLy9cbmlmIChPYmplY3QuY3JlYXRlKSB7XG4gIEV2ZW50cy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIC8vXG4gIC8vIFRoaXMgaGFjayBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgYF9fcHJvdG9fX2AgcHJvcGVydHkgaXMgc3RpbGwgaW5oZXJpdGVkIGluXG4gIC8vIHNvbWUgb2xkIGJyb3dzZXJzIGxpa2UgQW5kcm9pZCA0LCBpUGhvbmUgNS4xLCBPcGVyYSAxMSBhbmQgU2FmYXJpIDUuXG4gIC8vXG4gIGlmICghbmV3IEV2ZW50cygpLl9fcHJvdG9fXykgcHJlZml4ID0gZmFsc2U7XG59XG5cbi8qKlxuICogUmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgZXZlbnQgbGlzdGVuZXIuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29uY2U9ZmFsc2VdIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIEVFKGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHRoaXMuZm4gPSBmbjtcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5vbmNlID0gb25jZSB8fCBmYWxzZTtcbn1cblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZW1pdHRlciBSZWZlcmVuY2UgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGluc3RhbmNlLlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSBTcGVjaWZ5IGlmIHRoZSBsaXN0ZW5lciBpcyBhIG9uZS10aW1lIGxpc3RlbmVyLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyID0gbmV3IEVFKGZuLCBjb250ZXh0IHx8IGVtaXR0ZXIsIG9uY2UpXG4gICAgLCBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghZW1pdHRlci5fZXZlbnRzW2V2dF0pIGVtaXR0ZXIuX2V2ZW50c1tldnRdID0gbGlzdGVuZXIsIGVtaXR0ZXIuX2V2ZW50c0NvdW50Kys7XG4gIGVsc2UgaWYgKCFlbWl0dGVyLl9ldmVudHNbZXZ0XS5mbikgZW1pdHRlci5fZXZlbnRzW2V2dF0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2UgZW1pdHRlci5fZXZlbnRzW2V2dF0gPSBbZW1pdHRlci5fZXZlbnRzW2V2dF0sIGxpc3RlbmVyXTtcblxuICByZXR1cm4gZW1pdHRlcjtcbn1cblxuLyoqXG4gKiBDbGVhciBldmVudCBieSBuYW1lLlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIFJlZmVyZW5jZSB0byB0aGUgYEV2ZW50RW1pdHRlcmAgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZ0IFRoZSBFdmVudCBuYW1lLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJFdmVudChlbWl0dGVyLCBldnQpIHtcbiAgaWYgKC0tZW1pdHRlci5fZXZlbnRzQ291bnQgPT09IDApIGVtaXR0ZXIuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgZWxzZSBkZWxldGUgZW1pdHRlci5fZXZlbnRzW2V2dF07XG59XG5cbi8qKlxuICogTWluaW1hbCBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UgdGhhdCBpcyBtb2xkZWQgYWdhaW5zdCB0aGUgTm9kZS5qc1xuICogYEV2ZW50RW1pdHRlcmAgaW50ZXJmYWNlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiBhbiBhcnJheSBsaXN0aW5nIHRoZSBldmVudHMgZm9yIHdoaWNoIHRoZSBlbWl0dGVyIGhhcyByZWdpc3RlcmVkXG4gKiBsaXN0ZW5lcnMuXG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICB2YXIgbmFtZXMgPSBbXVxuICAgICwgZXZlbnRzXG4gICAgLCBuYW1lO1xuXG4gIGlmICh0aGlzLl9ldmVudHNDb3VudCA9PT0gMCkgcmV0dXJuIG5hbWVzO1xuXG4gIGZvciAobmFtZSBpbiAoZXZlbnRzID0gdGhpcy5fZXZlbnRzKSkge1xuICAgIGlmIChoYXMuY2FsbChldmVudHMsIG5hbWUpKSBuYW1lcy5wdXNoKHByZWZpeCA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lKTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgcmV0dXJuIG5hbWVzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGV2ZW50cykpO1xuICB9XG5cbiAgcmV0dXJuIG5hbWVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxpc3RlbmVycyByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIHJlZ2lzdGVyZWQgbGlzdGVuZXJzLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyhldmVudCkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudFxuICAgICwgaGFuZGxlcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAoIWhhbmRsZXJzKSByZXR1cm4gW107XG4gIGlmIChoYW5kbGVycy5mbikgcmV0dXJuIFtoYW5kbGVycy5mbl07XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBoYW5kbGVycy5sZW5ndGgsIGVlID0gbmV3IEFycmF5KGwpOyBpIDwgbDsgaSsrKSB7XG4gICAgZWVbaV0gPSBoYW5kbGVyc1tpXS5mbjtcbiAgfVxuXG4gIHJldHVybiBlZTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBudW1iZXIgb2YgbGlzdGVuZXJzIGxpc3RlbmluZyB0byBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1iZXIgb2YgbGlzdGVuZXJzLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiBsaXN0ZW5lckNvdW50KGV2ZW50KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAoIWxpc3RlbmVycykgcmV0dXJuIDA7XG4gIGlmIChsaXN0ZW5lcnMuZm4pIHJldHVybiAxO1xuICByZXR1cm4gbGlzdGVuZXJzLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQ2FsbHMgZWFjaCBvZiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgZXZlbnQgaGFkIGxpc3RlbmVycywgZWxzZSBgZmFsc2VgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50LCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbZXZ0XSkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XVxuICAgICwgbGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgYXJnc1xuICAgICwgaTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKGxpc3RlbmVycy5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnMuZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgY2FzZSAxOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQpLCB0cnVlO1xuICAgICAgY2FzZSAyOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExKSwgdHJ1ZTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIpLCB0cnVlO1xuICAgICAgY2FzZSA0OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMpLCB0cnVlO1xuICAgICAgY2FzZSA1OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0KSwgdHJ1ZTtcbiAgICAgIGNhc2UgNjogcmV0dXJuIGxpc3RlbmVycy5mbi5jYWxsKGxpc3RlbmVycy5jb250ZXh0LCBhMSwgYTIsIGEzLCBhNCwgYTUpLCB0cnVlO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm4uYXBwbHkobGlzdGVuZXJzLmNvbnRleHQsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoXG4gICAgICAsIGo7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChsaXN0ZW5lcnNbaV0ub25jZSkgdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzW2ldLmZuLCB1bmRlZmluZWQsIHRydWUpO1xuXG4gICAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgICBjYXNlIDE6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0KTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMik7IGJyZWFrO1xuICAgICAgICBjYXNlIDQ6IGxpc3RlbmVyc1tpXS5mbi5jYWxsKGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhMSwgYTIsIGEzKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaWYgKCFhcmdzKSBmb3IgKGogPSAxLCBhcmdzID0gbmV3IEFycmF5KGxlbiAtMSk7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgYXJnc1tqIC0gMV0gPSBhcmd1bWVudHNbal07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGlzdGVuZXJzW2ldLmZuLmFwcGx5KGxpc3RlbmVyc1tpXS5jb250ZXh0LCBhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQWRkIGEgbGlzdGVuZXIgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHsqfSBbY29udGV4dD10aGlzXSBUaGUgY29udGV4dCB0byBpbnZva2UgdGhlIGxpc3RlbmVyIHdpdGguXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbihldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIGFkZExpc3RlbmVyKHRoaXMsIGV2ZW50LCBmbiwgY29udGV4dCwgZmFsc2UpO1xufTtcblxuLyoqXG4gKiBBZGQgYSBvbmUtdGltZSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZShldmVudCwgZm4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIGFkZExpc3RlbmVyKHRoaXMsIGV2ZW50LCBmbiwgY29udGV4dCwgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgbGlzdGVuZXJzIG9mIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IG1hdGNoIHRoaXMgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgT25seSByZW1vdmUgdGhlIGxpc3RlbmVycyB0aGF0IGhhdmUgdGhpcyBjb250ZXh0LlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIE9ubHkgcmVtb3ZlIG9uZS10aW1lIGxpc3RlbmVycy5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBmbiwgY29udGV4dCwgb25jZSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gdGhpcztcbiAgaWYgKCFmbikge1xuICAgIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbZXZ0XTtcblxuICBpZiAobGlzdGVuZXJzLmZuKSB7XG4gICAgaWYgKFxuICAgICAgbGlzdGVuZXJzLmZuID09PSBmbiAmJlxuICAgICAgKCFvbmNlIHx8IGxpc3RlbmVycy5vbmNlKSAmJlxuICAgICAgKCFjb250ZXh0IHx8IGxpc3RlbmVycy5jb250ZXh0ID09PSBjb250ZXh0KVxuICAgICkge1xuICAgICAgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMCwgZXZlbnRzID0gW10sIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKFxuICAgICAgICBsaXN0ZW5lcnNbaV0uZm4gIT09IGZuIHx8XG4gICAgICAgIChvbmNlICYmICFsaXN0ZW5lcnNbaV0ub25jZSkgfHxcbiAgICAgICAgKGNvbnRleHQgJiYgbGlzdGVuZXJzW2ldLmNvbnRleHQgIT09IGNvbnRleHQpXG4gICAgICApIHtcbiAgICAgICAgZXZlbnRzLnB1c2gobGlzdGVuZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIFJlc2V0IHRoZSBhcnJheSwgb3IgcmVtb3ZlIGl0IGNvbXBsZXRlbHkgaWYgd2UgaGF2ZSBubyBtb3JlIGxpc3RlbmVycy5cbiAgICAvL1xuICAgIGlmIChldmVudHMubGVuZ3RoKSB0aGlzLl9ldmVudHNbZXZ0XSA9IGV2ZW50cy5sZW5ndGggPT09IDEgPyBldmVudHNbMF0gOiBldmVudHM7XG4gICAgZWxzZSBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBsaXN0ZW5lcnMsIG9yIHRob3NlIG9mIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IFtldmVudF0gVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSBgdGhpc2AuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQ7XG5cbiAgaWYgKGV2ZW50KSB7XG4gICAgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcbiAgICBpZiAodGhpcy5fZXZlbnRzW2V2dF0pIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRzKCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vL1xuLy8gQWxpYXMgbWV0aG9kcyBuYW1lcyBiZWNhdXNlIHBlb3BsZSByb2xsIGxpa2UgdGhhdC5cbi8vXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbjtcblxuLy9cbi8vIEV4cG9zZSB0aGUgcHJlZml4LlxuLy9cbkV2ZW50RW1pdHRlci5wcmVmaXhlZCA9IHByZWZpeDtcblxuLy9cbi8vIEFsbG93IGBFdmVudEVtaXR0ZXJgIHRvIGJlIGltcG9ydGVkIGFzIG1vZHVsZSBuYW1lc3BhY2UuXG4vL1xuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG1vZHVsZSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcbn1cbiIsImV4cG9ydCBjbGFzcyBOYXZpZ2F0aW9uTm9kZSB7XG4gICAgY29uc3RydWN0b3IoeCwgeSwgeikge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLnogPSB6O1xuICAgICAgICB0aGlzLmNvbm5lY3RlZE5vZGVzID0gW107XG4gICAgICAgIHRoaXMub2NjdXBpZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpc0Nvbm5lY3RlZChvdGhlck5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdGVkTm9kZXMuc29tZShub2RlID0+IG5vZGUueCA9PT0gb3RoZXJOb2RlLnhcbiAgICAgICAgICAgICYmIG5vZGUueSA9PT0gb3RoZXJOb2RlLnkgJiYgbm9kZS56ID09PSBvdGhlck5vZGUueik7XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyTm9kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy54ID09PSBvdGhlck5vZGUueCAmJiB0aGlzLnkgPT09IG90aGVyTm9kZS55ICYmIHRoaXMueiA9PT0gb3RoZXJOb2RlLno7XG4gICAgfVxuXG4gICAgZXF1YWxzUG9pbnQoeCwgeSwgeikge1xuICAgICAgICByZXR1cm4gdGhpcy54ID09PSB4ICYmIHRoaXMueSA9PT0geSAmJiB0aGlzLnogPT09IHo7XG4gICAgfVxuXG4gICAgYWRkQ29ubmVjdGVkTm9kZShvdGhlck5vZGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQ29ubmVjdGVkKG90aGVyTm9kZSkpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkTm9kZXMucHVzaChvdGhlck5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkTm9kZShvdGhlck5vZGUpIHtcbiAgICAgICAgY29uc3QgY29ubmVjdGVkTm9kZUluZGV4ID0gdGhpcy5jb25uZWN0ZWROb2Rlcy5maW5kSW5kZXgobm9kZSA9PiBub2RlLmVxdWFscyhvdGhlck5vZGUpKTtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWROb2Rlcy5zcGxpY2UoY29ubmVjdGVkTm9kZUluZGV4LCAxKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgTmF2aWdhdGlvbk5vZGUgfSBmcm9tICcuLi9tb2RlbC9nYW1lTWFwL25hdmlnYXRpb24vTmF2aWdhdGlvbk5vZGUnO1xuaW1wb3J0IHsgR2FtZU1hcFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZU1hcC9HYW1lTWFwUHJveHknO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgQXN0YXIgfSBmcm9tICcuLi9tb2RlbC9nYW1lTWFwL25hdmlnYXRpb24vQXN0YXInO1xuY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2FtZU1hcENvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIC8vIE9uY2UgYSBnYW1lTWFwIHNjZW5lIGlzIGxvYWRlZCwgcGFyc2UgZ2FtZU1hcCBWTywgZ2VuZXJhdGUgbmF2IG1lc2gsIGV0Y1xuICAgIC8vIEdldCBuYXZpZ2F0aW9uIGZsb29yc1xuICAgIGNvbnN0IGFwcCA9IHBjLkFwcGxpY2F0aW9uLmdldEFwcGxpY2F0aW9uKCk7XG4gICAgY29uc3QgZmxvb3JHcmlkID0gY3JlYXRlTWFwRmxvb3IoYXBwKTtcbiAgICBjb25zdCB3YWxscyA9IGNyZWF0ZU1hcFdhbGxzKGFwcCwgZmxvb3JHcmlkKTtcbiAgICBjb25zdCBjb3ZlciA9IGNyZWF0ZU1hcENvdmVyKGFwcCwgZmxvb3JHcmlkKTtcbiAgICBjb25zdCBwb3J0YWxzID0gY3JlYXRlUG9ydGFscyhhcHApO1xuXG4gICAgLy8gd2F5cG9pbnRzXG4gICAgY29uc3Qgd2F5cG9pbnRzTWFwID0gY3JlYXRlV2F5cG9pbnRzTWFwKGZsb29yR3JpZCk7XG5cbiAgICAvLyBSZWdpc3RlciBtZWRpYXRvcnNcblxuICAgIGlmIChmYWNhZGUuaGFzUHJveHkoR2FtZU1hcFByb3h5Lk5BTUUpKSB7XG4gICAgICAgIC8vIHJlbW92ZSBvbGQgbWFwXG4gICAgICAgIGZhY2FkZS5yZW1vdmVQcm94eShHYW1lTWFwUHJveHkuTkFNRSlcbiAgICB9XG5cbiAgICBmYWNhZGUucmVnaXN0ZXJQcm94eShuZXcgR2FtZU1hcFByb3h5KGZsb29yR3JpZCwgd2FsbHMsIGNvdmVyLCBwb3J0YWxzLCB3YXlwb2ludHNNYXApKTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTUFQX0dSSURfQ1JFQVRFRCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1hcEZsb29yKGFwcCkge1xuICAgIGNvbnN0IG5hdmlnYXRpb25GbG9vcnMgPSBhcHAucm9vdC5maW5kQnlUYWcoJ25hdmlnYXRpb25fZmxvb3InKTtcblxuICAgIGxldCBjb21wbGV0ZWRHcmlkID0gW107XG5cbiAgICBjb25zdCBuYXZpZ2F0aW9uQ29tcG9uZW50cyA9IFtdO1xuICAgIC8vIEZpcnN0IHBhcnNlIC0gY3JlYXRlIG5vZGVzIGFuZCBjb25uZWN0aW9ucyBmb3IgaW5kaXZpZHVhbCBcbiAgICAvLyBuYXZpZ2F0aW9uIGNvbXBvbmVudHNcbiAgICBmb3IgKGNvbnN0IGZsb29yRW50aXR5IG9mIG5hdmlnYXRpb25GbG9vcnMpIHtcbiAgICAgICAgY29uc3QgbmF2Q29tcCA9IGZsb29yRW50aXR5LnNjcmlwdFsnTmF2aWdhdGlvbkNvbXBvbmVudCddO1xuICAgICAgICBuYXZpZ2F0aW9uQ29tcG9uZW50cy5wdXNoKG5hdkNvbXApO1xuXG4gICAgICAgIGNvbnN0IGZsb29yR3JpZCA9IGNyZWF0ZVBhcnRpYWxHcmlkRnJvbUZsb29yKGZsb29yRW50aXR5KVxuICAgICAgICBuYXZDb21wLnNldEdyaWQoZmxvb3JHcmlkKTtcbiAgICB9XG5cbiAgICAvLyBTZWNvbmQgcGFyc2UgLSBzdGl0Y2ggdG9nZXRoZXIgYWRqYWNlbnQgbm9kZXMgaW4gXG4gICAgLy8gY29ubmVjdGVkIG5hdmlnYXRpb24gbWVzaGVzXG4gICAgZm9yIChjb25zdCBuYXZpZ2F0aW9uQ29tcCBvZiBuYXZpZ2F0aW9uQ29tcG9uZW50cykge1xuICAgICAgICBmb3IgKGNvbnN0IGNvbm5lY3RlZENvbXBFbnRpdHkgb2YgbmF2aWdhdGlvbkNvbXAuY29ubmVjdGVkQ29tcG9uZW50cykge1xuICAgICAgICAgICAgY29uc3QgY29ubmVjdGVkTmF2Q29tcCA9IGNvbm5lY3RlZENvbXBFbnRpdHkuc2NyaXB0WydOYXZpZ2F0aW9uQ29tcG9uZW50J107XG5cbiAgICAgICAgICAgIGpvaW5Ub0FkamFjZW50R3JpZChuYXZpZ2F0aW9uQ29tcC5nZXRHcmlkKCksIGNvbm5lY3RlZE5hdkNvbXAuZ2V0R3JpZCgpKTtcbiAgICAgICAgICAgIGNvbXBsZXRlZEdyaWQgPSBjb21wbGV0ZWRHcmlkLmNvbmNhdChuYXZpZ2F0aW9uQ29tcC5nZXRHcmlkKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBsZXRlZEdyaWQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1hcFdhbGxzKGFwcCwgZmxvb3JHcmlkKSB7XG4gICAgY29uc3Qgd2FsbHNCb3VuZGluZ0JveGVzID0gW107XG4gICAgY29uc3QgbWFwV2FsbEVudGl0aWVzID0gYXBwLnJvb3QuZmluZEJ5VGFnKCd3YWxsJyk7XG4gICAgZm9yIChjb25zdCBtYXBXYWxsRW50aXR5IG9mIG1hcFdhbGxFbnRpdGllcykge1xuICAgICAgICBjb25zdCBhYWJiID0gY3JlYXRlQm91bmRpbmdCb3hGcm9tRW50aXR5KG1hcFdhbGxFbnRpdHkpO1xuICAgICAgICB3YWxsc0JvdW5kaW5nQm94ZXMucHVzaChhYWJiKTtcbiAgICAgICAgY3JlYXRlRmxvb3JVbmRlcldhbGxzKG1hcFdhbGxFbnRpdHksIGZsb29yR3JpZCk7XG4gICAgICAgIG1hcFdhbGxFbnRpdHkuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIHJldHVybiB3YWxsc0JvdW5kaW5nQm94ZXM7XG5cbn1cblxuZnVuY3Rpb24gY3JlYXRlQm91bmRpbmdCb3hGcm9tRW50aXR5KGJveEVudGl0eSkge1xuICAgIGNvbnN0IHNjYWxlID0gYm94RW50aXR5LmdldExvY2FsU2NhbGUoKTtcbiAgICBjb25zdCBoYWxmRXh0ZW50cyA9IG5ldyBwYy5WZWMzKHNjYWxlLnggLyAyLCBzY2FsZS55IC8gMiwgc2NhbGUueiAvIDIpO1xuICAgIGNvbnN0IGFhYmIgPSBuZXcgcGMuQm91bmRpbmdCb3goYm94RW50aXR5LmdldFBvc2l0aW9uKCksIGhhbGZFeHRlbnRzKTtcbiAgICByZXR1cm4gYWFiYjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmxvb3JVbmRlcldhbGxzKHdhbGwsIGZsb29yR3JpZCkge1xuICAgIGNvbnN0IHdhbGxQb3MgPSB3YWxsLmdldFBvc2l0aW9uKCk7XG4gICAgY29uc3Qgd2FsbFNjYWxlID0gd2FsbC5nZXRMb2NhbFNjYWxlKCk7XG4gICAgY29uc3QgeSA9IE1hdGgucm91bmQod2FsbFBvcy55IC0gKHdhbGxTY2FsZS55ICogMC41KSk7XG5cbiAgICBjb25zdCBjb3JuZXJYID0gTWF0aC5yb3VuZCh3YWxsUG9zLnggLSAod2FsbFNjYWxlLnggKiAwLjUpKTtcbiAgICBjb25zdCBjb3JuZXJaID0gTWF0aC5yb3VuZCh3YWxsUG9zLnogLSAod2FsbFNjYWxlLnogKiAwLjUpKTtcblxuICAgIGZvciAobGV0IHggPSBjb3JuZXJYOyB4IDwgY29ybmVyWCArIHdhbGxTY2FsZS54OyB4KyspIHtcbiAgICAgICAgZm9yIChsZXQgeiA9IGNvcm5lclo7IHogPCBjb3JuZXJaICsgd2FsbFNjYWxlLno7IHorKykge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmdOb2RlSW5kZXggPSBmbG9vckdyaWQuZmluZEluZGV4KChub2RlKSA9PiBub2RlLmVxdWFsc1BvaW50KHgsIHksIHopKTtcbiAgICAgICAgICAgIGlmIChtYXRjaGluZ05vZGVJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlZE5vZGVzID0gZmxvb3JHcmlkLnNwbGljZShtYXRjaGluZ05vZGVJbmRleCwgMSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRlbGV0ZWROb2RlIG9mIGRlbGV0ZWROb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgZGVsZXRlZE5vZGUuY29ubmVjdGVkTm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGlzY29ubmVjdGVkTm9kZShkZWxldGVkTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWxHcmlkRnJvbUZsb29yKGZsb29yRW50aXR5KSB7XG4gICAgLy8gc25hcCB0byBncmlkXG4gICAgY29uc3QgZ3JpZCA9IFtdO1xuXG4gICAgY29uc3QgZmxvb3JQb3NpdGlvbiA9IGZsb29yRW50aXR5LmdldExvY2FsUG9zaXRpb24oKTtcbiAgICBjb25zdCBmbG9vclNpemUgPSBmbG9vckVudGl0eS5nZXRMb2NhbFNjYWxlKCk7XG5cbiAgICBjb25zdCBzbmFwcGVkV2lkdGggPSBNYXRoLnJvdW5kKGZsb29yU2l6ZS54KTtcbiAgICBjb25zdCBzbmFwcGVkQnJlYWR0aCA9IE1hdGgucm91bmQoZmxvb3JTaXplLnopO1xuXG4gICAgY29uc3Qgc25hcHBlZFggPSBNYXRoLnJvdW5kKGZsb29yUG9zaXRpb24ueCAtIChzbmFwcGVkV2lkdGggLyAyKSk7XG4gICAgY29uc3Qgc25hcHBlZFkgPSBmbG9vclBvc2l0aW9uLnk7XG4gICAgY29uc3Qgc25hcHBlZFogPSBNYXRoLnJvdW5kKGZsb29yUG9zaXRpb24ueiAtIChzbmFwcGVkQnJlYWR0aCAvIDIpKTtcblxuICAgIGZvciAobGV0IHogPSBzbmFwcGVkWjsgeiA8IHNuYXBwZWRaICsgc25hcHBlZEJyZWFkdGg7IHorKykge1xuICAgICAgICBmb3IgKGxldCB4ID0gc25hcHBlZFg7IHggPCBzbmFwcGVkWCArIHNuYXBwZWRXaWR0aDsgeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbmV3IE5hdmlnYXRpb25Ob2RlKHgsIHNuYXBwZWRZLCB6KTtcbiAgICAgICAgICAgIGdyaWQucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbm5lY3QgbmVpZ2hib3Vyc1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBncmlkKSB7XG4gICAgICAgIGZvciAoY29uc3Qgb3RoZXJOb2RlIG9mIGdyaWQpIHtcbiAgICAgICAgICAgIGlmIChvdGhlck5vZGUuZXF1YWxzUG9pbnQobm9kZS54IC0gMSwgbm9kZS55LCBub2RlLnopIHx8XG4gICAgICAgICAgICAgICAgb3RoZXJOb2RlLmVxdWFsc1BvaW50KG5vZGUueCArIDEsIG5vZGUueSwgbm9kZS56KSB8fFxuICAgICAgICAgICAgICAgIG90aGVyTm9kZS5lcXVhbHNQb2ludChub2RlLngsIG5vZGUueSwgbm9kZS56IC0gMSkgfHxcbiAgICAgICAgICAgICAgICBvdGhlck5vZGUuZXF1YWxzUG9pbnQobm9kZS54LCBub2RlLnksIG5vZGUueiArIDEpKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5hZGRDb25uZWN0ZWROb2RlKG90aGVyTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ3JpZDtcbn1cblxuZnVuY3Rpb24gam9pblRvQWRqYWNlbnRHcmlkKGdyaWQsIGdyaWRUb0pvaW4pIHtcbiAgICAvLyBDb25uZWN0IG5laWdoYm91cnNcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgZ3JpZCkge1xuICAgICAgICBmb3IgKGNvbnN0IG90aGVyTm9kZSBvZiBncmlkVG9Kb2luKSB7XG4gICAgICAgICAgICBpZiAob3RoZXJOb2RlLmVxdWFsc1BvaW50KG5vZGUueCAtIDEsIG5vZGUueSwgbm9kZS56KSB8fFxuICAgICAgICAgICAgICAgIG90aGVyTm9kZS5lcXVhbHNQb2ludChub2RlLnggKyAxLCBub2RlLnksIG5vZGUueikgfHxcbiAgICAgICAgICAgICAgICBvdGhlck5vZGUuZXF1YWxzUG9pbnQobm9kZS54LCBub2RlLnksIG5vZGUueiAtIDEpIHx8XG4gICAgICAgICAgICAgICAgb3RoZXJOb2RlLmVxdWFsc1BvaW50KG5vZGUueCwgbm9kZS55LCBub2RlLnogKyAxKSkge1xuICAgICAgICAgICAgICAgIG5vZGUuYWRkQ29ubmVjdGVkTm9kZShvdGhlck5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXBDb3ZlcihhcHAsIGZsb29yR3JpZCkge1xuICAgIGxldCBjb3ZlclBvaW50cyA9IFtdO1xuICAgIGNvbnN0IGNvdmVyRW50aXRpZXMgPSBhcHAucm9vdC5maW5kQnlUYWcoJ2NvdmVyJyk7XG4gICAgZm9yIChjb25zdCBjb3ZlckVudGl0eSBvZiBjb3ZlckVudGl0aWVzKSB7XG4gICAgICAgIGNvdmVyUG9pbnRzID0gY292ZXJQb2ludHMuY29uY2F0KGNyZWF0ZUNvdmVyUG9pbnRGcm9tQm94KGNvdmVyRW50aXR5LCBmbG9vckdyaWQpKTtcbiAgICAgICAgY292ZXJFbnRpdHkuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIHJldHVybiBjb3ZlclBvaW50cztcblxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb3ZlclBvaW50RnJvbUJveChib3gsIGZsb29yR3JpZCkge1xuICAgIGNvbnN0IGNvdmVyUG9pbnRzID0gW107XG4gICAgY29uc3QgYm94UG9zID0gYm94LmdldFBvc2l0aW9uKCk7XG4gICAgY29uc3QgYm94U2NhbGUgPSBib3guZ2V0TG9jYWxTY2FsZSgpO1xuICAgIGNvbnN0IHkgPSBNYXRoLnJvdW5kKGJveFBvcy55IC0gKGJveFNjYWxlLnkgKiAwLjUpKTtcblxuICAgIGNvbnN0IGNvcm5lclggPSBNYXRoLnJvdW5kKGJveFBvcy54IC0gKGJveFNjYWxlLnggKiAwLjUpKTtcbiAgICBjb25zdCBjb3JuZXJaID0gTWF0aC5yb3VuZChib3hQb3MueiAtIChib3hTY2FsZS56ICogMC41KSk7XG5cbiAgICBmb3IgKGxldCB4ID0gY29ybmVyWDsgeCA8IGNvcm5lclggKyBib3hTY2FsZS54OyB4KyspIHtcbiAgICAgICAgZm9yIChsZXQgeiA9IGNvcm5lclo7IHogPCBjb3JuZXJaICsgYm94U2NhbGUuejsgeisrKSB7XG4gICAgICAgICAgICBjb25zdCBjb3ZlclBvaW50ID0gbmV3IHBjLlZlYzMoeCwgeSwgeik7XG4gICAgICAgICAgICBjb3ZlclBvaW50cy5wdXNoKGNvdmVyUG9pbnQpO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmdOb2RlSW5kZXggPSBmbG9vckdyaWQuZmluZEluZGV4KChub2RlKSA9PiBub2RlLmVxdWFsc1BvaW50KHgsIHksIHopKTtcbiAgICAgICAgICAgIGlmIChtYXRjaGluZ05vZGVJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlZE5vZGVzID0gZmxvb3JHcmlkLnNwbGljZShtYXRjaGluZ05vZGVJbmRleCwgMSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRlbGV0ZWROb2RlIG9mIGRlbGV0ZWROb2Rlcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgZGVsZXRlZE5vZGUuY29ubmVjdGVkTm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGlzY29ubmVjdGVkTm9kZShkZWxldGVkTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvdmVyUG9pbnRzO1xuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBvcnRhbHMoYXBwKSB7XG4gICAgY29uc3QgcG9ydGFscyA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBwb3J0YWxFbnRpdGllcyA9IGFwcC5yb290LmZpbmRCeVRhZygncG9ydGFsJyk7XG4gICAgZm9yIChjb25zdCBwb3J0YWxFbnRpdHkgb2YgcG9ydGFsRW50aXRpZXMpIHtcbiAgICAgICAgY29uc3QgcG9ydGFsQ29tcG9uZW50ID0gcG9ydGFsRW50aXR5LnNjcmlwdFsnUG9ydGFsQ29tcG9uZW50J107XG4gICAgICAgIGNvbnN0IHBvcnRhbElkID0gcG9ydGFsQ29tcG9uZW50LnBvcnRhbElkO1xuICAgICAgICBjb25zdCBkZXN0aW5hdGlvblNjZW5lID0gcG9ydGFsQ29tcG9uZW50LmRlc3RpbmF0aW9uU2NlbmU7XG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uUG9ydGFsID0gcG9ydGFsQ29tcG9uZW50LmRlc3RpbmF0aW9uUG9ydGFsO1xuICAgICAgICBjb25zdCBzdGFuZGluZ1BvaW50ID0gcG9ydGFsQ29tcG9uZW50LnN0YW5kaW5nUG9pbnQuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgaGl0Ym94UG9pbnQgPSBwb3J0YWxDb21wb25lbnQuaGl0Ym94LmdldFBvc2l0aW9uKCk7XG5cbiAgICAgICAgY29uc3QgcG9ydGFsID0ge1xuICAgICAgICAgICAgcG9ydGFsSWQ6IHBvcnRhbElkLFxuICAgICAgICAgICAgZGVzdGluYXRpb25TY2VuZTogZGVzdGluYXRpb25TY2VuZSxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uUG9ydGFsOiBkZXN0aW5hdGlvblBvcnRhbCxcbiAgICAgICAgICAgIHN0YW5kaW5nUG9pbnQ6IHN0YW5kaW5nUG9pbnQsXG4gICAgICAgICAgICBoaXRib3hQb2ludDogaGl0Ym94UG9pbnRcbiAgICAgICAgfVxuXG4gICAgICAgIHBvcnRhbHMuc2V0KHBvcnRhbElkLCBwb3J0YWwpO1xuICAgIH1cblxuICAgIHJldHVybiBwb3J0YWxzO1xuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdheXBvaW50c01hcChmbG9vckdyaWQpIHtcbiAgICBjb25zdCB3YXlwb2ludHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGZsb29yTm9kZSBvZiBmbG9vckdyaWQpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgZGlhZ29uYWxzIGludGVyc2VjdCB3YWxsc1xuXG4gICAgICAgIGlmIChpc1dheXBvaW50KGZsb29yTm9kZSwgZmxvb3JHcmlkKSkge1xuICAgICAgICAgICAgd2F5cG9pbnRzLnB1c2gobmV3IE5hdmlnYXRpb25Ob2RlKGZsb29yTm9kZS54LCBmbG9vck5vZGUueSwgZmxvb3JOb2RlLnopKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3Qgd2F5cG9pbnQgb2Ygd2F5cG9pbnRzKSB7XG4gICAgICAgIGZvciAoY29uc3Qgb3RoZXJXYXlwb2ludCBvZiB3YXlwb2ludHMpIHtcbiAgICAgICAgICAgIGlmICghd2F5cG9pbnQuZXF1YWxzKG90aGVyV2F5cG9pbnQpIHx8ICFvdGhlcldheXBvaW50LmlzQ29ubmVjdGVkKHdheXBvaW50KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBBc3Rhci5jYWxjdWxhdGVCcmVzZW5oYW1MaW5lKHdheXBvaW50LngsIHdheXBvaW50LnosIG90aGVyV2F5cG9pbnQueCwgb3RoZXJXYXlwb2ludC56KTtcbiAgICAgICAgICAgICAgICBpZiAoQXN0YXIuY2hlY2tWYWxpZExpbmUobGluZSwgZmxvb3JHcmlkKSkge1xuICAgICAgICAgICAgICAgICAgICB3YXlwb2ludC5hZGRDb25uZWN0ZWROb2RlKG90aGVyV2F5cG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICBvdGhlcldheXBvaW50LmFkZENvbm5lY3RlZE5vZGUod2F5cG9pbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3YXlwb2ludHM7XG59XG5cbmZ1bmN0aW9uIGlzV2F5cG9pbnQoZmxvb3JOb2RlLCBmbG9vck1hcCkge1xuICAgIC8vQ2hlY2sgbndcbiAgICBjb25zdCBub3J0aHdlc3QgPSBuZXcgcGMuVmVjMyhmbG9vck5vZGUueCAtIDEsIGZsb29yTm9kZS55LCBmbG9vck5vZGUueiAtIDEpO1xuICAgIGNvbnN0IG5vcnRoID0gbmV3IHBjLlZlYzMoZmxvb3JOb2RlLngsIGZsb29yTm9kZS55LCBmbG9vck5vZGUueiAtIDEpO1xuICAgIGNvbnN0IG5vcnRoZWFzdCA9IG5ldyBwYy5WZWMzKGZsb29yTm9kZS54ICsgMSwgZmxvb3JOb2RlLnksIGZsb29yTm9kZS56IC0gMSk7XG4gICAgY29uc3QgZWFzdCA9IG5ldyBwYy5WZWMzKGZsb29yTm9kZS54ICsgMSwgZmxvb3JOb2RlLnksIGZsb29yTm9kZS56KTtcbiAgICBjb25zdCBzb3V0aGVhc3QgPSBuZXcgcGMuVmVjMyhmbG9vck5vZGUueCArIDEsIGZsb29yTm9kZS55LCBmbG9vck5vZGUueiArIDEpO1xuICAgIGNvbnN0IHNvdXRoID0gbmV3IHBjLlZlYzMoZmxvb3JOb2RlLngsIGZsb29yTm9kZS55LCBmbG9vck5vZGUueiArIDEpO1xuICAgIGNvbnN0IHNvdXRod2VzdCA9IG5ldyBwYy5WZWMzKGZsb29yTm9kZS54IC0gMSwgZmxvb3JOb2RlLnksIGZsb29yTm9kZS56ICsgMSk7XG4gICAgY29uc3Qgd2VzdCA9IG5ldyBwYy5WZWMzKGZsb29yTm9kZS54IC0gMSwgZmxvb3JOb2RlLnksIGZsb29yTm9kZS56KTtcblxuICAgIC8vIG5vcnRod2VzdFxuICAgIGlmICghZmxvb3JNYXAuc29tZShuID0+IG4uZXF1YWxzKG5vcnRod2VzdCkpKSB7XG4gICAgICAgIGlmIChmbG9vck5vZGUuY29ubmVjdGVkTm9kZXMuc29tZShuID0+IG4uZXF1YWxzKG5vcnRoKSlcbiAgICAgICAgICAgICYmIGZsb29yTm9kZS5jb25uZWN0ZWROb2Rlcy5zb21lKG4gPT4gbi5lcXVhbHMod2VzdCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIG5vcnRoZWFzdFxuICAgIGlmICghZmxvb3JNYXAuc29tZShuID0+IG4uZXF1YWxzKG5vcnRoZWFzdCkpKSB7XG4gICAgICAgIGlmIChmbG9vck5vZGUuY29ubmVjdGVkTm9kZXMuc29tZShuID0+IG4uZXF1YWxzKG5vcnRoKSlcbiAgICAgICAgICAgICYmIGZsb29yTm9kZS5jb25uZWN0ZWROb2Rlcy5zb21lKG4gPT4gbi5lcXVhbHMoZWFzdCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHNvdXRoZWFzdFxuICAgIGlmICghZmxvb3JNYXAuc29tZShuID0+IG4uZXF1YWxzKHNvdXRoZWFzdCkpKSB7XG4gICAgICAgIGlmIChmbG9vck5vZGUuY29ubmVjdGVkTm9kZXMuc29tZShuID0+IG4uZXF1YWxzKHNvdXRoKSlcbiAgICAgICAgICAgICYmIGZsb29yTm9kZS5jb25uZWN0ZWROb2Rlcy5zb21lKG4gPT4gbi5lcXVhbHMoZWFzdCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHNvdXRod2VzdFxuICAgIGlmICghZmxvb3JNYXAuc29tZShuID0+IG4uZXF1YWxzKHNvdXRod2VzdCkpKSB7XG4gICAgICAgIGlmIChmbG9vck5vZGUuY29ubmVjdGVkTm9kZXMuc29tZShuID0+IG4uZXF1YWxzKHNvdXRoKSlcbiAgICAgICAgICAgICYmIGZsb29yTm9kZS5jb25uZWN0ZWROb2Rlcy5zb21lKG4gPT4gbi5lcXVhbHMod2VzdCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn0iLCJjb25zdCB7IFByb3h5IH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cblxuZXhwb3J0IGNsYXNzIFdlYXBvbnNQcm94eSBleHRlbmRzIFByb3h5IHtcbiAgICBnZXQgdm8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGEoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJXZWFwb25zUHJveHlcIiB9O1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcihXZWFwb25zUHJveHkuTkFNRSwgZGF0YSk7XG4gICAgfVxuXG4gICAgZ2V0RGFtYWdlKHdlYXBvbk5hbWUsIGRhbWFnZVRpZXIpIHtcbiAgICAgICAgZm9yIChjb25zdCBjYXRlZ29yeUtleSBpbiB0aGlzLnZvKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodGhpcy52bywgY2F0ZWdvcnlLZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSB0aGlzLnZvW2NhdGVnb3J5S2V5XTtcblxuICAgICAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChjYXRlZ29yeSwgd2VhcG9uTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhdGVnb3J5W3dlYXBvbk5hbWVdLmRhbWFnZVtNYXRoLm1pbihkYW1hZ2VUaWVyIC0gMSwgNildO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGZpbmQgd2VhcG9uOjogJHt3ZWFwb25OYW1lfWApO1xuICAgIH1cblxuICAgIGdldFdlYXBvbkNhdGVnb3J5KHdlYXBvbk5hbWUpIHtcbiAgICAgICAgZm9yIChjb25zdCBjYXRlZ29yeUtleSBpbiB0aGlzLnZvKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwodGhpcy52bywgY2F0ZWdvcnlLZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSB0aGlzLnZvW2NhdGVnb3J5S2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoY2F0ZWdvcnksIHdlYXBvbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYXRlZ29yeUtleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjYXRlZ29yeSBmb3Igd2VhcG9uOjogJHt3ZWFwb25OYW1lfWApO1xuXG4gICAgfVxufSIsImNvbnN0IHsgUHJveHkgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgU3RvcnlWTyB9ID0gcmVxdWlyZSgnLi9TdG9yeVZPJyk7XG5cblxuZXhwb3J0IGNsYXNzIFN0b3J5UHJveHkgZXh0ZW5kcyBQcm94eSB7XG4gICAgZ2V0IHZvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRhKCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiU3RvcnlQcm94eVwiIH07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc3QgYXBwID0gcGMuQXBwbGljYXRpb24uZ2V0QXBwbGljYXRpb24oKTtcbiAgICAgICAgY29uc3Qgc3RvcnlUcnVuayA9IGFwcC5hc3NldHMuZ2V0KDQwNTI5OTIwKS5yZXNvdXJjZTtcbiAgICAgICAgY29uc3Qgc3RvcnlUcmVlcyA9IHN0b3J5VHJ1bmsudHJlZXM7XG4gICAgICAgIGNvbnN0IHN0b3J5VHJlZU1hcCA9IG5ldyBNYXAoKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHRyZWVLZXkgaW4gc3RvcnlUcmVlcykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHN0b3J5VHJlZXMsIHRyZWVLZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcnlUcmVlQXNzZXRJZCA9IHN0b3J5VHJlZXNbdHJlZUtleV07XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcnlUcmVlID0gYXBwLmFzc2V0cy5nZXQoc3RvcnlUcmVlQXNzZXRJZCkucmVzb3VyY2U7XG5cbiAgICAgICAgICAgICAgICBzdG9yeVRyZWVNYXAuc2V0KHRyZWVLZXksIHN0b3J5VHJlZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlcihTdG9yeVByb3h5Lk5BTUUsIHN0b3J5VHJlZU1hcCk7XG5cbiAgICAgICAgLy8gUHJvcGVydGllc1xuICAgICAgICB0aGlzLmN1cnJlbnRUcmVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmN1cnJlbnROb2RlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwSW5kZXggPSAwO1xuICAgICAgICB0aGlzLmN1cnJlbnRDb25kaXRpb25zID0gW107XG4gICAgfVxuXG4gICAgZ2V0VHJlZSh0cmVlSWQpIHtcbiAgICAgICAgaWYgKHRoaXMudm8uaGFzKHRyZWVJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZvLmdldCh0cmVlSWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldE5vZGUodHJlZSwgbm9kZUlkKSB7XG4gICAgICAgIGNvbnN0IG5vZGVzID0gdHJlZS5ub2RlcztcbiAgICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5vZGVzLCBub2RlSWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZXNbbm9kZUlkXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRTdGVwKG5vZGUsIHN0ZXBJbmRleCkge1xuICAgICAgICBjb25zdCBzdGVwcyA9IG5vZGUuc3RlcHM7XG4gICAgICAgIGlmIChzdGVwSW5kZXggPCBzdGVwcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGVwc1tzdGVwSW5kZXhdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdvVG9Ob2RlKG5vZGVJZCkge1xuICAgICAgICB0aGlzLmN1cnJlbnROb2RlID0gbm9kZUlkO1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwSW5kZXggPSAwO1xuICAgIH1cblxuICAgIHN0YXJ0RGlhbG9ndWVUcmVlKHRyZWVJZCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRUcmVlID0gdHJlZUlkO1xuICAgICAgICB0aGlzLmN1cnJlbnROb2RlID0gXCJlbnRyeVwiO1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwSW5kZXggPSAwO1xuXG4gICAgICAgIGNvbnN0IHRyZWUgPSB0aGlzLmdldFRyZWUodGhpcy5jdXJyZW50VHJlZSk7XG4gICAgICAgIGlmICghdHJlZSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYENhbm5vdCBzdGFydCBkaWFsb2d1ZTogVHJlZSAke3RoaXMuY3VycmVudFRyZWV9IG5vdCBmb3VuZGApO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmdldE5vZGUodHJlZSwgdGhpcy5jdXJyZW50Tm9kZSkpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDYW5ub3Qgc3RhcnQgZGlhbG9ndWU6IG5vIFwiZW50cnlcIiBub2RlIGRlZmluZWQgb24gJHt0cmVlSWR9YCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJlZTtcbiAgICB9XG5cbiAgICBnZXRDdXJyZW50Tm9kZVN0ZXAoKSB7XG4gICAgICAgIGNvbnN0IHRyZWUgPSB0aGlzLmdldFRyZWUodGhpcy5jdXJyZW50VHJlZSk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnROb2RlID0gdGhpcy5nZXROb2RlKHRyZWUsIHRoaXMuY3VycmVudE5vZGUpO1xuICAgICAgICBjb25zdCB2YWxpZFN0ZXAgPSB0aGlzLmdldFZhbGlkU3RlcChjdXJyZW50Tm9kZSwgdGhpcy5jdXJyZW50U3RlcEluZGV4KTtcbiAgICAgICAgaWYgKHZhbGlkU3RlcCAmJiB2YWxpZFN0ZXAub25jZSkge1xuICAgICAgICAgICAgY29uc3Qgb25jZUNvbmRpdGlvbiA9IHRoaXMuZ2V0Q29uZGl0aW9uU3RyaW5nRm9yU3RlcCh0aGlzLmN1cnJlbnRUcmVlLCB0aGlzLmN1cnJlbnROb2RlLCB0aGlzLmN1cnJlbnRTdGVwSW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5hZGRDb25kaXRpb24ob25jZUNvbmRpdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbGlkU3RlcDtcbiAgICB9XG5cblxuICAgIGNvbnRpbnVlQ3VycmVudE5vZGVTdGVwKCkge1xuICAgICAgICBjb25zdCB0cmVlID0gdGhpcy5nZXRUcmVlKHRoaXMuY3VycmVudFRyZWUpO1xuICAgICAgICBjb25zdCBjdXJyZW50Tm9kZSA9IHRoaXMuZ2V0Tm9kZSh0cmVlLCB0aGlzLmN1cnJlbnROb2RlKVxuICAgICAgICAvLyBpbmNyZW1lbnQgc3RlcEluZGV4XG4gICAgICAgIHRoaXMuY3VycmVudFN0ZXBJbmRleCsrO1xuXG4gICAgICAgIGNvbnN0IHZhbGlkU3RlcCA9IHRoaXMuZ2V0VmFsaWRTdGVwKGN1cnJlbnROb2RlLCB0aGlzLmN1cnJlbnRTdGVwSW5kZXgpO1xuICAgICAgICBpZiAodmFsaWRTdGVwICYmIHZhbGlkU3RlcC5vbmNlKSB7XG4gICAgICAgICAgICBjb25zdCBvbmNlQ29uZGl0aW9uID0gdGhpcy5nZXRDb25kaXRpb25TdHJpbmdGb3JTdGVwKHRoaXMuY3VycmVudFRyZWUsIHRoaXMuY3VycmVudE5vZGUsIHRoaXMuY3VycmVudFN0ZXBJbmRleCk7XG4gICAgICAgICAgICB0aGlzLmFkZENvbmRpdGlvbihvbmNlQ29uZGl0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsaWRTdGVwO1xuICAgIH1cblxuICAgIGdldFZhbGlkU3RlcChub2RlLCBzdGVwSW5kZXgpIHtcbiAgICAgICAgbGV0IG5leHRWYWxpZFN0ZXAgPSB0aGlzLmdldFN0ZXAobm9kZSwgc3RlcEluZGV4KTtcblxuXG4gICAgICAgIGlmIChuZXh0VmFsaWRTdGVwKSB7XG4gICAgICAgICAgICBsZXQgdGVzdENvbmRpdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIGlmIChuZXh0VmFsaWRTdGVwLmNvbmRpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0ZXN0Q29uZGl0aW9ucyA9IHRlc3RDb25kaXRpb25zLmNvbmNhdChuZXh0VmFsaWRTdGVwLmNvbmRpdGlvbnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobmV4dFZhbGlkU3RlcC5vbmNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb25jZUNvbmRpdGlvbiA9IHRoaXMuZ2V0SW52ZXJ0ZWRDb25kaXRpb25TdHJpbmdGb3JTdGVwKHRoaXMuY3VycmVudFRyZWUsIHRoaXMuY3VycmVudE5vZGUsIHN0ZXBJbmRleCk7XG4gICAgICAgICAgICAgICAgdGVzdENvbmRpdGlvbnMgPSB0ZXN0Q29uZGl0aW9ucy5jb25jYXQob25jZUNvbmRpdGlvbik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1Rlc3QgdmFsaWQgc3RlcCcpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRlc3RDb25kaXRpb25zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMudGVzdENvbmRpdGlvbnModGVzdENvbmRpdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHRWYWxpZFN0ZXA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFN0ZXBJbmRleCA9IHN0ZXBJbmRleCArIDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsaWRTdGVwKG5vZGUsIHRoaXMuY3VycmVudFN0ZXBJbmRleCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0VmFsaWRTdGVwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q29uZGl0aW9uU3RyaW5nRm9yU3RlcCh0cmVlSWQsIG5vZGVJZCwgc3RlcEluZGV4KSB7XG4gICAgICAgIHJldHVybiBgJHt0cmVlSWR9JHtub2RlSWR9JHtzdGVwSW5kZXh9YDtcbiAgICB9XG5cbiAgICBnZXRJbnZlcnRlZENvbmRpdGlvblN0cmluZ0ZvclN0ZXAodHJlZUlkLCBub2RlSWQsIHN0ZXBJbmRleCkge1xuICAgICAgICByZXR1cm4gYCEke3RyZWVJZH0ke25vZGVJZH0ke3N0ZXBJbmRleH1gO1xuICAgIH1cblxuICAgIHNlbGVjdENob2ljZShjaG9pY2VJbmRleCkge1xuICAgICAgICBjb25zdCBjdXJyZW50Tm9kZSA9IHRoaXMuZ2V0Q3VycmVudE5vZGVTdGVwKCk7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkQ2hvaWNlID0gY3VycmVudE5vZGUuY2hvaWNlc1tjaG9pY2VJbmRleF07XG4gICAgICAgIHJldHVybiBzZWxlY3RlZENob2ljZTtcbiAgICB9XG5cbiAgICBhZGRDb25kaXRpb24oY29uZGl0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRDb25kaXRpb25zLmluZGV4T2YoY29uZGl0aW9uKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENvbmRpdGlvbnMucHVzaChjb25kaXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlQ29uZGl0aW9uKGNvbmRpdGlvbikge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuY3VycmVudENvbmRpdGlvbnMuaW5kZXhPZihjb25kaXRpb24pO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29uZGl0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGVzdENvbmRpdGlvbnMoY29uZGl0aW9ucykge1xuICAgICAgICBsZXQgc3VjY2VzcyA9IHRydWU7XG5cbiAgICAgICAgZm9yIChjb25zdCBjb25kaXRpb24gb2YgY29uZGl0aW9ucykge1xuICAgICAgICAgICAgLy8gY2hlY2sgZm9yIG9wZXJhdG9yc1xuICAgICAgICAgICAgY29uc3Qgb3JEZWxpbWl0ZXJlZCA9IFwifHxcIjtcbiAgICAgICAgICAgIGNvbnN0IG9yQ29uZGl0aW9ucyA9IGNvbmRpdGlvbi5zcGxpdChvckRlbGltaXRlcmVkKTtcblxuICAgICAgICAgICAgaWYgKG9yQ29uZGl0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgLy8gT25seSBvbmUgbmVlZHMgdG8gYmUgdHJ1ZVxuICAgICAgICAgICAgICAgIGxldCBvclN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9wdGlvbmFsQ29uZGl0aW9uIG9mIG9yQ29uZGl0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja0NvbmRpdGlvbihvcHRpb25hbENvbmRpdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yU3VjY2VzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA9IG9yU3VjY2VzcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgPSB0aGlzLmNoZWNrQ29uZGl0aW9uKGNvbmRpdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XG4gICAgfVxuXG4gICAgY2hlY2tDb25kaXRpb24oY29uZGl0aW9uKSB7XG4gICAgICAgIGxldCBzdWNjZXNzID0gdHJ1ZTtcblxuICAgICAgICAvLyBkZXRlcm1pbmUgaWYgcG9zaXRpdmUgb2YgbmVnYXRpdmVcbiAgICAgICAgaWYgKGNvbmRpdGlvbi5zdGFydHNXaXRoKFwiIVwiKSkge1xuICAgICAgICAgICAgY29uc3Qgc3RyaXBwZWRTdHJpbmcgPSBjb25kaXRpb24uc2xpY2UoMSwgY29uZGl0aW9uLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRDb25kaXRpb25zLmluZGV4T2Yoc3RyaXBwZWRTdHJpbmcpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY29uZGl0aW9uLnN0YXJ0c1dpdGgoXCIrXCIpKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpcHBlZFN0cmluZyA9IGNvbmRpdGlvbi5zbGljZSgxLCBjb25kaXRpb24ubGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMuYWRkQ29uZGl0aW9uKHN0cmlwcGVkU3RyaW5nKTtcbiAgICAgICAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbmRpdGlvbi5zdGFydHNXaXRoKFwiLVwiKSkge1xuICAgICAgICAgICAgY29uc3Qgc3RyaXBwZWRTdHJpbmcgPSBjb25kaXRpb24uc2xpY2UoMSwgY29uZGl0aW9uLmxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNvbmRpdGlvbihzdHJpcHBlZFN0cmluZyk7XG4gICAgICAgICAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRDb25kaXRpb25zLmluZGV4T2YoY29uZGl0aW9uKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3VjY2VzcztcbiAgICB9XG59XG4iLCJjb25zdCB7IFByb3h5IH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5jb25zdCB7IEludmVudG9yeVZPIH0gPSByZXF1aXJlKCcuL0ludmVudG9yeVZPJyk7XG5cblxuZXhwb3J0IGNsYXNzIEludmVudG9yeVByb3h5IGV4dGVuZHMgUHJveHkge1xuICAgIGdldCB2bygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YSgpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkludmVudG9yeVByb3h5XCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihJbnZlbnRvcnlQcm94eS5OQU1FLCBuZXcgSW52ZW50b3J5Vk8oKSk7XG4gICAgfVxuXG4gICAgZ2V0IGludmVudG9yeUl0ZW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5pbnZlbnRvcnlJdGVtcztcbiAgICB9XG5cbiAgICBzZXQgaW52ZW50b3J5SXRlbXModmFsdWUpIHtcbiAgICAgICAgdGhpcy52by5pbnZlbnRvcnlJdGVtcyA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJlb3JkZXJJbnZlbnRvcnlJdGVtKG9yaWdpbmFsSW5kZXgsIHNsb3RJbmRleCkge1xuICAgICAgICBsZXQgcnVubmluZ0luZGV4VG90YWwgPSAwO1xuICAgICAgICBsZXQgbmV3SW5kZXggPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaW52ZW50b3J5SXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmludmVudG9yeUl0ZW1zW2ldO1xuXG4gICAgICAgICAgICBpZiAoc2xvdEluZGV4ID49IHJ1bm5pbmdJbmRleFRvdGFsICYmIHNsb3RJbmRleCA8IHJ1bm5pbmdJbmRleFRvdGFsICsgaXRlbS5zaXplKSB7XG4gICAgICAgICAgICAgICAgbmV3SW5kZXggPSBpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBydW5uaW5nSW5kZXhUb3RhbCArPSBpdGVtLnNpemU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2xvdEluZGV4ID49IHJ1bm5pbmdJbmRleFRvdGFsKSB7XG4gICAgICAgICAgICBuZXdJbmRleCA9IHRoaXMuaW52ZW50b3J5SXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSBhIHZhbGlkIGFycmF5IGlzIHByb3ZpZGVkXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcy5pbnZlbnRvcnlJdGVtcykgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBhcnJheScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVsZXRlIHRoZSBpdGVtIGZyb20gaXQncyBjdXJyZW50IHBvc2l0aW9uXG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmludmVudG9yeUl0ZW1zLnNwbGljZShvcmlnaW5hbEluZGV4LCAxKTtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlcmUncyBhbiBpdGVtIHRvIG1vdmVcbiAgICAgICAgaWYgKCFpdGVtLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSBpcyBubyBpdGVtIGluIHRoZSBhcnJheSBhdCBpbmRleCAnICsgb3JpZ2luYWxJbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNb3ZlIHRoZSBpdGVtIHRvIGl0cyBuZXcgcG9zaXRpb25cbiAgICAgICAgdGhpcy5pbnZlbnRvcnlJdGVtcy5zcGxpY2UobmV3SW5kZXgsIDAsIGl0ZW1bMF0pO1xuICAgIH1cblxufSIsImltcG9ydCB7IEdhbWVTdGF0ZVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVByb3h5JztcbmltcG9ydCB7IFdlYXBvbnNQcm94eSB9IGZyb20gJy4uL21vZGVsL3dlYXBvbnMvV2VhcG9uc1Byb3h5JztcbmltcG9ydCB7IFN0b3J5UHJveHkgfSBmcm9tICcuLi9tb2RlbC9zdG9yeVByb3h5L1N0b3J5UHJveHknO1xuaW1wb3J0IHsgSW52ZW50b3J5UHJveHkgfSBmcm9tICcuLi9tb2RlbC9pbnZlbnRvcnkvSW52ZW50b3J5UHJveHknO1xuY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0dXBDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lKSB7XG4gICAgLy8gUmVnaXN0ZXIgYXBwLWxldmVsIG1lZGlhdG9ycy9wcm94aWVzL2NvbW1hbmRzIGhlcmVcblxuICAgIC8vIENyZWF0ZSBnYW1lIHN0YXRlIHByb3h5XG4gICAgRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KS5yZWdpc3RlclByb3h5KG5ldyBHYW1lU3RhdGVQcm94eSgpKTtcblxuICAgIC8vIExvYWQgd2VhcG9ucyBkYXRhIGFuZCBjcmVhdGUgcHJveHlcbiAgICBjb25zdCBhcHAgPSBwYy5BcHBsaWNhdGlvbi5nZXRBcHBsaWNhdGlvbigpO1xuICAgIGlmIChhcHApIHtcbiAgICAgICAgY29uc3Qgd2VhcG9uc0RhdGEgPSBhcHAuYXNzZXRzLmdldCg0MDQxNTYzMSkucmVzb3VyY2U7XG4gICAgICAgIEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSkucmVnaXN0ZXJQcm94eShuZXcgV2VhcG9uc1Byb3h5KHdlYXBvbnNEYXRhKSk7XG4gICAgICAgIEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSkucmVnaXN0ZXJQcm94eShuZXcgU3RvcnlQcm94eSgpKTtcbiAgICAgICAgRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KS5yZWdpc3RlclByb3h5KG5ldyBJbnZlbnRvcnlQcm94eSgpKTtcbiAgICB9XG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZVNjZW5lQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGFwcCA9IHBjLkFwcGxpY2F0aW9uLmdldEFwcGxpY2F0aW9uKCk7XG4gICAgY29uc3Qgc2NlbmVOYW1lID0gYXJnc1swXTtcbiAgICBjb25zdCBwb3J0YWxJZCA9IGFyZ3NbMV07XG4gICAgY29uc29sZS5sb2coYENoYW5naW5nIHNjZW5lICR7c2NlbmVOYW1lfWApO1xuXG4gICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBzY2VuZSdzIHJvb3Qgb2JqZWN0XG4gICAgY29uc3Qgb2xkSGllcmFyY2h5ID0gYXBwLnJvb3QuZmluZEJ5TmFtZSgnUm9vdCcpO1xuXG4gICAgLy8gR2V0IHRoZSBwYXRoIHRvIHRoZSBzY2VuZVxuICAgIGNvbnN0IHNjZW5lID0gYXBwLnNjZW5lcy5maW5kKHNjZW5lTmFtZSk7XG5cbiAgICAvLyBMb2FkIHRoZSBzY2VuZXMgZW50aXR5IGhpZXJhcmNoeVxuICAgIGFwcC5zY2VuZXMubG9hZFNjZW5lSGllcmFyY2h5KHNjZW5lLnVybCwgZnVuY3Rpb24gKGVyciwgcGFyZW50KSB7XG4gICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICBpZiAob2xkSGllcmFyY2h5KSB7XG4gICAgICAgICAgICAgICAgb2xkSGllcmFyY2h5LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkNIQU5HRV9TQ0VORV9DT01QTEVURSwgc2NlbmVOYW1lKTtcbiAgICAgICAgRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5QQVJTRV9HQU1FTUFQLCBzY2VuZU5hbWUpO1xuICAgICAgICBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkFERF9QTEFZRVJfQ0hBUkFDVEVSX1RPX01BUCwgcG9ydGFsSWQpO1xuXG4gICAgfSk7XG59IiwiZXhwb3J0IGZ1bmN0aW9uIHNodWZmbGVBcnJheShhcnJheSkge1xuICAgIGxldCBjdXJyZW50SW5kZXggPSBhcnJheS5sZW5ndGhcbiAgICBsZXQgdGVtcG9yYXJ5VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgbGV0IHJhbmRvbUluZGV4ID0gLTE7XG5cbiAgICAvLyBXaGlsZSB0aGVyZSByZW1haW4gZWxlbWVudHMgdG8gc2h1ZmZsZS4uLlxuICAgIHdoaWxlICgwICE9PSBjdXJyZW50SW5kZXgpIHtcblxuICAgICAgICAvLyBQaWNrIGEgcmVtYWluaW5nIGVsZW1lbnQuLi5cbiAgICAgICAgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjdXJyZW50SW5kZXgpO1xuICAgICAgICBjdXJyZW50SW5kZXggLT0gMTtcblxuICAgICAgICAvLyBBbmQgc3dhcCBpdCB3aXRoIHRoZSBjdXJyZW50IGVsZW1lbnQuXG4gICAgICAgIHRlbXBvcmFyeVZhbHVlID0gYXJyYXlbY3VycmVudEluZGV4XTtcbiAgICAgICAgYXJyYXlbY3VycmVudEluZGV4XSA9IGFycmF5W3JhbmRvbUluZGV4XTtcbiAgICAgICAgYXJyYXlbcmFuZG9tSW5kZXhdID0gdGVtcG9yYXJ5VmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufVxuIiwiY29uc3QgeyBQcm94eSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgc2h1ZmZsZUFycmF5IH0gZnJvbSAnLi4vLi4vdXRpbHMvU2h1ZmZsZUFycmF5JztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmNvbnN0IHsgQ29tYmF0Vk8gfSA9IHJlcXVpcmUoJy4vQ29tYmF0Vk8nKTtcblxuXG5leHBvcnQgY2xhc3MgQ29tYmF0UHJveHkgZXh0ZW5kcyBQcm94eSB7XG4gICAgZ2V0IHZvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRhKCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiQ29tYmF0UHJveHlcIiB9O1xuXG4gICAgY29uc3RydWN0b3IocGFydGljaXBhbnRzLCB0ZWFtcykge1xuICAgICAgICBzdXBlcihDb21iYXRQcm94eS5OQU1FLCBuZXcgQ29tYmF0Vk8ocGFydGljaXBhbnRzLCB0ZWFtcykpO1xuICAgIH1cblxuICAgIG9uUmVnaXN0ZXIoKSB7XG4gICAgICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IHRoaXMudm8ucGFydGljaXBhbnRzO1xuICAgICAgICB0aGlzLnBhcnRpY2lwYW50UHJveGllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0aWNpcGFudCBvZiBwYXJ0aWNpcGFudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRpY2lwYW50UHJveHkgPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgcGFydGljaXBhbnQpO1xuICAgICAgICAgICAgdGhpcy5wYXJ0aWNpcGFudFByb3hpZXMuc2V0KHBhcnRpY2lwYW50LCBwYXJ0aWNpcGFudFByb3h5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5leHRUdXJuKCkge1xuICAgICAgICBjb25zdCByb3VuZEluaXRpYXRpdmUgPSB0aGlzLnZvLnJvdW5kSW5pdGlhdGl2ZTtcblxuICAgICAgICBpZiAocm91bmRJbml0aWF0aXZlICYmIHJvdW5kSW5pdGlhdGl2ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0VHVybklkID0gcm91bmRJbml0aWF0aXZlLnNoaWZ0KCk7XG4gICAgICAgICAgICB0aGlzLnZvLmFjdGl2ZVBhcnRpY2lwYW50ID0gbmV4dFR1cm5JZDtcblxuICAgICAgICAgICAgaWYgKG5leHRUdXJuSWQgIT09ICdlbmRfcm91bmQnKSB7XG4gICAgICAgICAgICAgICAgLy8gTmV4dCBUdXJuXG4gICAgICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFLCBgVHVybiAke25leHRUdXJuSWR9YCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJveHkgPSB0aGlzLnBhcnRpY2lwYW50UHJveGllcy5nZXQobmV4dFR1cm5JZCk7XG4gICAgICAgICAgICAgICAgcHJveHkucmVzZXRDb21iYXRUdXJuU3RhdGUoKTtcblxuICAgICAgICAgICAgICAgIGlmIChwcm94eS5pc05QQykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ERVRFUk1JTkVfTkVYVF9FTkVNWV9BQ1RJT04sIG5leHRUdXJuSWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkFXQUlUX1BMQVlFUl9DT01CQVRfSU5QVVQsIG5leHRUdXJuSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRW5kIHJvdW5kXG4gICAgICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFLCBgRW5kIHJvdW5kYCk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5FWFRfQ09NQkFUX1JPVU5EKTtcbiAgICAgICAgICAgICAgICB9LCAzMDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5leHRSb3VuZCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJy8vLy8vLy8vLy8vLy8vLy8vJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCcvLyAgTmV3IHJvdW5kICAvLycpO1xuICAgICAgICBjb25zb2xlLmxvZygnLy8vLy8vLy8vLy8vLy8vLy8nKTtcbiAgICAgICAgY29uc3QgaW5pdGlhdGl2ZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBbY2hhcmFjdGVySWQsIHByb3h5XSBvZiB0aGlzLnBhcnRpY2lwYW50UHJveGllcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZvID0gcHJveHkudm87XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZvLmluaXRpYXRpdmU7IGkrKykge1xuICAgICAgICAgICAgICAgIGluaXRpYXRpdmVzLnB1c2goY2hhcmFjdGVySWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluaXRpYXRpdmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gRXZlcnlvbmUgaXMgb3V0IG9mIHRoZSBjb21iYXQgc29tZWhvdywgcHJvYmFibHkgZGVhZFxuICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRU5EX0NPTUJBVCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgZW5kIG9mIHJvdW5kIHRva2VuXG4gICAgICAgIGluaXRpYXRpdmVzLnB1c2goJ2VuZF9yb3VuZCcpO1xuXG4gICAgICAgIGxldCBzaHVmZmxlZEluaXRpYXRpdmUgPSBzaHVmZmxlQXJyYXkoaW5pdGlhdGl2ZXMpO1xuICAgICAgICAvLyBlbnN1cmUgcm91bmQgZG9lc24ndCBzdGFydCB3aXRoIFwiZW5kX3JvdW5kXCJcbiAgICAgICAgd2hpbGUgKHNodWZmbGVkSW5pdGlhdGl2ZVswXSA9PT0gXCJlbmRfcm91bmRcIikge1xuICAgICAgICAgICAgc2h1ZmZsZWRJbml0aWF0aXZlID0gc2h1ZmZsZUFycmF5KHNodWZmbGVkSW5pdGlhdGl2ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudm8ucm91bmRJbml0aWF0aXZlID0gc2h1ZmZsZWRJbml0aWF0aXZlO1xuICAgIH1cblxuICAgIGdldCBuZXh0VHVybkNoYXJhY3RlcklkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5uZXh0VHVybkNoYXJhY3RlcklkO1xuICAgIH1cblxuICAgIGdldCBhY3RpdmVQYXJ0aWNpcGFudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uYWN0aXZlUGFydGljaXBhbnQ7XG4gICAgfVxuXG4gICAgc2V0IGFjdGl2ZVBhcnRpY2lwYW50KHZhbHVlKSB7XG4gICAgICAgIHRoaXMudm8uYWN0aXZlUGFydGljaXBhbnQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgcGFydGljaXBhbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5wYXJ0aWNpcGFudHM7XG4gICAgfVxuXG4gICAgZ2V0IHRlYW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by50ZWFtcztcbiAgICB9XG5cbiAgICByZW1vdmVDaGFyYWN0ZXJGcm9tQ29tYmF0KGNoYXJhY3RlcklkKSB7XG4gICAgICAgIC8vIHJlbW92ZSBmcm9tIHBhcnRpY2NpcGFudHNcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudFByb3hpZXMuZGVsZXRlKGNoYXJhY3RlcklkKTtcbiAgICAgICAgLy8gcmVtb3ZlIGZyb20gaW5pdGlhdGl2ZVxuICAgICAgICB0aGlzLnZvLnJvdW5kSW5pdGlhdGl2ZSA9IHRoaXMudm8ucm91bmRJbml0aWF0aXZlLmZpbHRlcihlID0+IGUgIT09IGNoYXJhY3RlcklkKTtcblxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHRlYW1dIG9mIHRoaXMudGVhbXMuZW50cmllcygpKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGNoYXJhY3RlckluZGV4ID0gdGVhbS5pbmRleE9mKGNoYXJhY3RlcklkKTtcbiAgICAgICAgICAgIGlmIChjaGFyYWN0ZXJJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdGVhbS5zcGxpY2UoY2hhcmFjdGVySW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGVhbS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5FTkRfQ09NQkFULCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG59XG4iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgQ29tYmF0UHJveHkgfSBmcm9tICcuLi9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHknO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk8nO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRDb21iYXRDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgaW5zdGlnYXRpbmdDaGFyYWN0ZXJJZCA9IGFyZ3NbMF07XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFLCBcIlN0YXJ0IENvbWJhdFwiKTtcblxuICAgIGNvbnN0IGdhbWVTdGF0ZVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZVN0YXRlUHJveHkuTkFNRSk7XG4gICAgZ2FtZVN0YXRlUHJveHkudXBkYXRlR2FtZVN0YXRlVHlwZShnYW1lcGxheU1vZGVUeXBlcy5DT01CQVQpO1xuXG4gICAgY29uc3QgaW5zdGlnYXRpbmdDaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgaW5zdGlnYXRpbmdDaGFyYWN0ZXJJZCk7XG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfRkxPQVRJTkdfU1RBVFVTLCBcInNwb3R0ZWRcIiwgaW5zdGlnYXRpbmdDaGFyYWN0ZXJQcm94eSk7XG5cblxuICAgIC8vIFNldHVwIHRoZSBjb21iYXRcbiAgICBjb25zdCB0ZWFtcyA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBwbGF5ZXJUZWFtID0gWydwbGF5ZXInXTtcbiAgICB0ZWFtcy5zZXQoJ3BsYXllcl90ZWFtJywgcGxheWVyVGVhbSk7XG5cbiAgICBjb25zdCBvcHBvc2luZ1RlYW0gPSBbaW5zdGlnYXRpbmdDaGFyYWN0ZXJJZF0uY29uY2F0KGluc3RpZ2F0aW5nQ2hhcmFjdGVyUHJveHkuY29tYmF0R3JvdXApLmZpbHRlcihmdW5jdGlvbiAoaXRlbSwgcG9zLCBzZWxmKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmluZGV4T2YoaXRlbSkgPT0gcG9zO1xuICAgIH0pO1xuICAgIHRlYW1zLnNldCgnb3Bwb3NpbmdfdGVhbScsIG9wcG9zaW5nVGVhbSk7XG5cbiAgICBjb25zdCBwYXJ0aWNpcGFudHMgPSBwbGF5ZXJUZWFtLmNvbmNhdChvcHBvc2luZ1RlYW0pO1xuXG5cbiAgICBjb25zdCBwbGF5ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgXCJwbGF5ZXJcIik7XG5cbiAgICBmb3IgKGNvbnN0IHBhcnRpY2lwYW50IG9mIHBhcnRpY2lwYW50cykge1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRU5EX01PVkVNRU5UICsgcGFydGljaXBhbnQpO1xuICAgICAgICBpZiAocGFydGljaXBhbnQgIT09IFwicGxheWVyXCIpIHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5DSEFSQUNURVJfTE9PS19BVCArIHBhcnRpY2lwYW50LCBwbGF5ZXJQcm94eS5jdXJyZW50Tm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBUkFDVEVSX0xPT0tfQVQgKyBwYXJ0aWNpcGFudCwgaW5zdGlnYXRpbmdDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGNvbnN0IGNvbWJhdFByb3h5ID0gbmV3IENvbWJhdFByb3h5KHBhcnRpY2lwYW50cywgdGVhbXMpO1xuICAgIGZhY2FkZS5yZWdpc3RlclByb3h5KGNvbWJhdFByb3h5KTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkVYVF9DT01CQVRfUk9VTkQpO1xuICAgIH0sIDIwMDApO1xufSIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBDb21iYXRQcm94eSB9IGZyb20gJy4uL21vZGVsL2NvbWJhdC9Db21iYXRQcm94eSc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Q29tYmF0VHVybkNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuXG4gICAgY29uc3QgZ2FtZVN0YXRlID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZVN0YXRlUHJveHkuTkFNRSk7XG4gICAgY29uc3QgY29tYmF0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShDb21iYXRQcm94eS5OQU1FKTtcblxuICAgIGlmIChnYW1lU3RhdGUudm8uZ2FtZXBsYXlNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5DT01CQVQpIHtcbiAgICAgICAgY29tYmF0UHJveHkubmV4dFR1cm4oKTtcbiAgICB9XG5cbn0iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgQ29tYmF0UHJveHkgfSBmcm9tICcuLi9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHknO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk8nO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbmV4dENvbWJhdFJvdW5kQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG5cbiAgICBjb25zdCBnYW1lU3RhdGUgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcbiAgICBjb25zdCBjb21iYXRQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KENvbWJhdFByb3h5Lk5BTUUpO1xuXG4gICAgaWYgKGdhbWVTdGF0ZS52by5nYW1lcGxheU1vZGUgPT09IGdhbWVwbGF5TW9kZVR5cGVzLkNPTUJBVCkge1xuICAgICAgICBjb21iYXRQcm94eS5uZXh0Um91bmQoKTtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5FWFRfQ09NQkFUX1RVUk4sIGNvbWJhdFByb3h5LnZvLm5leHRUdXJuQ2hhcmFjdGVySWQpO1xuXG4gICAgfVxuXG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGVuZENvbWJhdFR1cm5Db21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgICAgIGNvbnN0IGNvbWJhdFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoQ29tYmF0UHJveHkuTkFNRSk7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ISURFX1dBTEtBQkxFX0FSRUEpO1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkVYVF9DT01CQVRfVFVSTiwgY29tYmF0UHJveHkubmV4dFR1cm5DaGFyYWN0ZXJJZCk7XG4gICAgfSwgNTAwKTtcbn1cbiIsImV4cG9ydCBjbGFzcyBCZWhhdmlvdXJTdGF0dXMge1xuICAgIHN0YXRpYyBnZXQgU1VDQ0VTUygpIHsgcmV0dXJuIDAgfTtcbiAgICBzdGF0aWMgZ2V0IEZBSUxVUkUoKSB7IHJldHVybiAxIH07XG4gICAgc3RhdGljIGdldCBSVU5OSU5HKCkgeyByZXR1cm4gMiB9O1xuICAgIHN0YXRpYyBnZXQgRVJST1IoKSB7IHJldHVybiAzIH07XG59IiwiaW1wb3J0IHsgQmVoYXZpb3VyU3RhdHVzIH0gZnJvbSAnLi9CZWhhdmlvdXJTdGF0dXMnO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gJy4uLy4uL3V0aWxzL0dVSUQnO1xuXG5leHBvcnQgY2xhc3MgQmFzZU5vZGUge1xuICAgIGNvbnN0cnVjdG9yKGNoaWxkcmVuKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZShjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZShjaGlsZHJlbikge1xuICAgICAgICB0aGlzLmlkID0gY3JlYXRlVVVJRCgpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW4gfHwgW107XG4gICAgfVxuXG4gICAgZXhlY3V0ZSh0aWNrKSB7XG4gICAgICAgIC8qIEVOVEVSICovXG4gICAgICAgIHRoaXMuX2VudGVyKHRpY2spO1xuXG4gICAgICAgIC8qIE9QRU4gKi9cbiAgICAgICAgaWYgKCF0aWNrLmJsYWNrYm9hcmQuZ2V0KCdpc09wZW4nLCB0aWNrLnRyZWUuaWQsIHRoaXMuaWQpKSB7XG4gICAgICAgICAgICB0aGlzLl9vcGVuKHRpY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogVElDSyAqL1xuICAgICAgICBjb25zdCBzdGF0dXMgPSB0aGlzLl90aWNrKHRpY2spO1xuXG4gICAgICAgIC8qIENMT1NFICovXG4gICAgICAgIGlmIChzdGF0dXMgIT09IEJlaGF2aW91clN0YXR1cy5SVU5OSU5HKSB7XG4gICAgICAgICAgICB0aGlzLl9jbG9zZSh0aWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIEVYSVQgKi9cbiAgICAgICAgdGhpcy5fZXhpdCh0aWNrKTtcblxuICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgIH1cblxuICAgIF9lbnRlcih0aWNrKSB7XG4gICAgICAgIHRpY2suZW50ZXJOb2RlKHRoaXMpO1xuICAgICAgICB0aGlzLmVudGVyKHRpY2spO1xuICAgIH1cblxuICAgIF9vcGVuKHRpY2spIHtcbiAgICAgICAgdGljay5vcGVuTm9kZSh0aGlzKTtcbiAgICAgICAgdGljay5ibGFja2JvYXJkLnNldCgnaXNPcGVuJywgdHJ1ZSwgdGljay50cmVlLmlkLCB0aGlzLmlkKTtcbiAgICAgICAgdGhpcy5vcGVuKHRpY2spO1xuICAgIH1cblxuICAgIF90aWNrKHRpY2spIHtcbiAgICAgICAgdGljay50aWNrTm9kZSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudGljayh0aWNrKTtcbiAgICB9XG5cbiAgICBfY2xvc2UodGljaykge1xuICAgICAgICB0aWNrLmNsb3NlTm9kZSh0aGlzKTtcbiAgICAgICAgdGljay5ibGFja2JvYXJkLnNldCgnaXNPcGVuJywgZmFsc2UsIHRpY2sudHJlZS5pZCwgdGhpcy5pZCk7XG4gICAgICAgIHRoaXMuY2xvc2UodGljayk7XG4gICAgfVxuXG4gICAgX2V4aXQodGljaykge1xuICAgICAgICB0aWNrLmV4aXROb2RlKHRoaXMpO1xuICAgICAgICB0aGlzLmV4aXQodGljayk7XG4gICAgfVxuXG4gICAgLy8gT3ZlcmlkZSB0aGVzZVxuICAgIGVudGVyKHRpY2spIHsgfVxuICAgIG9wZW4odGljaykgeyB9XG4gICAgdGljayh0aWNrKSB7IHJldHVybiBCZWhhdmlvdXJTdGF0dXMuRVJST1IgfVxuICAgIGNsb3NlKHRpY2spIHsgfVxuICAgIGV4aXQodGljaykgeyB9XG59IiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVVSUQoKSB7XG4gICAgdmFyIHMgPSBbXTtcbiAgICB2YXIgaGV4RGlnaXRzID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzNjsgaSsrKSB7XG4gICAgICAgIHNbaV0gPSBoZXhEaWdpdHMuc3Vic3RyKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDB4MTApLCAxKTtcbiAgICB9XG4gICAgLy8gYml0cyAxMi0xNSBvZiB0aGUgdGltZV9oaV9hbmRfdmVyc2lvbiBmaWVsZCB0byAwMDEwXG4gICAgc1sxNF0gPSBcIjRcIjtcblxuICAgIC8vIGJpdHMgNi03IG9mIHRoZSBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkIHRvIDAxXG4gICAgc1sxOV0gPSBoZXhEaWdpdHMuc3Vic3RyKChzWzE5XSAmIDB4MykgfCAweDgsIDEpO1xuXG4gICAgc1s4XSA9IHNbMTNdID0gc1sxOF0gPSBzWzIzXSA9IFwiLVwiO1xuXG4gICAgdmFyIHV1aWQgPSBzLmpvaW4oXCJcIik7XG4gICAgcmV0dXJuIHV1aWQ7XG5cbn1cbiIsImltcG9ydCB7IEJhc2VOb2RlIH0gZnJvbSAnLi9CYXNlTm9kZSc7XG5pbXBvcnQgeyBCZWhhdmlvdXJTdGF0dXMgfSBmcm9tICcuL0JlaGF2aW91clN0YXR1cyc7XG5cbmV4cG9ydCBjbGFzcyBNYXN0ZXJOb2RlIGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIHRpY2sodGljaykge1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkTm9kZSBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBjaGlsZE5vZGUuZXhlY3V0ZSh0aWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuU1VDQ0VTUztcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIEJsYWNrYm9hcmQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmluaXRpYWxpc2UoKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXNlKCkge1xuICAgICAgICB0aGlzLmJhc2VNZW1vcnkgPSB7fTsgLy8gdXNlZCB0byBzdG9yZSBnbG9iYWwgaW5mb3JtYXRpb25cbiAgICAgICAgdGhpcy50cmVlTWVtb3J5ID0ge307IC8vIHVzZWQgdG8gc3RvcmUgdHJlZSBhbmQgbm9kZSBpbmZvcm1hdGlvblxuICAgIH1cblxuICAgIGdldFRyZWVNZW1vcnkodHJlZVNjb3BlKSB7XG4gICAgICAgIGlmICghdGhpcy50cmVlTWVtb3J5W3RyZWVTY29wZV0pIHtcbiAgICAgICAgICAgIHRoaXMudHJlZU1lbW9yeVt0cmVlU2NvcGVdID0ge1xuICAgICAgICAgICAgICAgIG5vZGVNZW1vcnk6IHt9LFxuICAgICAgICAgICAgICAgIG9wZW5Ob2RlczogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudHJlZU1lbW9yeVt0cmVlU2NvcGVdO1xuICAgIH1cblxuICAgIGdldE5vZGVNZW1vcnkodHJlZU1lbW9yeSwgbm9kZVNjb3BlKSB7XG4gICAgICAgIGNvbnN0IG1lbW9yeSA9IHRyZWVNZW1vcnlbJ25vZGVNZW1vcnknXTtcbiAgICAgICAgaWYgKCFtZW1vcnkuaGFzT3duUHJvcGVydHkobm9kZVNjb3BlKSkge1xuICAgICAgICAgICAgbWVtb3J5W25vZGVTY29wZV0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZW1vcnlbbm9kZVNjb3BlXTtcbiAgICB9XG5cbiAgICBnZXRNZW1vcnkodHJlZVNjb3BlLCBub2RlU2NvcGUpIHtcbiAgICAgICAgdmFyIG1lbW9yeSA9IHRoaXMuYmFzZU1lbW9yeTtcblxuICAgICAgICBpZiAodHJlZVNjb3BlKSB7XG4gICAgICAgICAgICBtZW1vcnkgPSB0aGlzLmdldFRyZWVNZW1vcnkodHJlZVNjb3BlKTtcblxuICAgICAgICAgICAgaWYgKG5vZGVTY29wZSkge1xuICAgICAgICAgICAgICAgIG1lbW9yeSA9IHRoaXMuZ2V0Tm9kZU1lbW9yeShtZW1vcnksIG5vZGVTY29wZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWVtb3J5O1xuICAgIH07XG5cbiAgICBzZXQoa2V5LCB2YWx1ZSwgdHJlZVNjb3BlLCBub2RlU2NvcGUpIHtcbiAgICAgICAgY29uc3QgbWVtb3J5ID0gdGhpcy5nZXRNZW1vcnkodHJlZVNjb3BlLCBub2RlU2NvcGUpO1xuICAgICAgICBtZW1vcnlba2V5XSA9IHZhbHVlO1xuICAgIH07XG5cbiAgICBnZXQoa2V5LCB0cmVlU2NvcGUsIG5vZGVTY29wZSkge1xuICAgICAgICBjb25zdCBtZW1vcnkgPSB0aGlzLmdldE1lbW9yeSh0cmVlU2NvcGUsIG5vZGVTY29wZSk7XG4gICAgICAgIHJldHVybiBtZW1vcnlba2V5XTtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIFRpY2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmluaXRpYWxpc2UoKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXNlKCkge1xuICAgICAgICB0aGlzLnRyZWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3Blbk5vZGVzID0gW107XG4gICAgICAgIHRoaXMubm9kZUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5kZWJ1ZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYmxhY2tib2FyZCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBlbnRlck5vZGUobm9kZSkge1xuICAgICAgICB0aGlzLm5vZGVDb3VudCsrO1xuICAgICAgICB0aGlzLm9wZW5Ob2Rlcy5wdXNoKG5vZGUpO1xuICAgIH1cblxuICAgIG9wZW5Ob2RlKG5vZGUpIHtcblxuICAgIH1cblxuICAgIHRpY2tOb2RlKG5vZGUpIHtcblxuICAgIH1cblxuICAgIGNsb3NlTm9kZShub2RlKSB7XG4gICAgICAgIHRoaXMub3Blbk5vZGVzLnBvcCgpO1xuICAgIH1cblxuICAgIGV4aXROb2RlKG5vZGUpIHtcblxuICAgIH1cbn0iLCJpbXBvcnQgeyBUaWNrIH0gZnJvbSBcIi4vVGlja1wiO1xuXG5leHBvcnQgY2xhc3MgQmVoYXZpb3VyVHJlZSB7XG4gICAgY29uc3RydWN0b3IoaWQpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsaXNlKGlkKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXNlKGlkKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5yb290ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHRpY2sodGFyZ2V0LCBibGFja2JvYXJkKSB7XG4gICAgICAgIC8qIENSRUFURSBBIFRJQ0sgT0JKRUNUICovXG4gICAgICAgIGNvbnN0IHRpY2sgPSBuZXcgVGljaygpO1xuICAgICAgICB0aWNrLnRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGljay5ibGFja2JvYXJkID0gYmxhY2tib2FyZDtcbiAgICAgICAgdGljay50cmVlID0gdGhpcztcblxuICAgICAgICAvKiBUSUNLIE5PREUgKi9cbiAgICAgICAgdGhpcy5yb290LmV4ZWN1dGUodGljayk7XG5cbiAgICAgICAgLyogQ0xPU0UgTk9ERVMgRlJPTSBMQVNUIFRJQ0ssIElGIE5FRURFRCAqL1xuICAgICAgICBjb25zdCBsYXN0T3Blbk5vZGVzID0gYmxhY2tib2FyZC5nZXQoJ29wZW5Ob2RlcycsIHRoaXMuaWQpIHx8IFtdO1xuICAgICAgICBjb25zdCBjdXJyT3Blbk5vZGVzID0gdGljay5vcGVuTm9kZXMuc2xpY2UoMCk7XG5cbiAgICAgICAgLy8gZG9lcyBub3QgY2xvc2UgaWYgaXQgaXMgc3RpbGwgb3BlbiBpbiB0aGlzIHRpY2tcbiAgICAgICAgbGV0IHN0YXJ0ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLm1pbihsYXN0T3Blbk5vZGVzLmxlbmd0aCwgY3Vyck9wZW5Ob2Rlcy5sZW5ndGgpOyBpKyspIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICBpZiAobGFzdE9wZW5Ob2Rlc1tpXSAhPT0gY3Vyck9wZW5Ob2Rlc1tpXSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xvc2UgdGhlIG5vZGVzXG4gICAgICAgIGZvciAobGV0IGkgPSBsYXN0T3Blbk5vZGVzLmxlbmd0aCAtIDE7IGkgPj0gc3RhcnQ7IGktLSkge1xuICAgICAgICAgICAgbGFzdE9wZW5Ob2Rlc1tpXS5jbG9zZSh0aWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIFBPUFVMQVRFIEJMQUNLQk9BUkQgKi9cbiAgICAgICAgYmxhY2tib2FyZC5zZXQoJ29wZW5Ob2RlcycsIGN1cnJPcGVuTm9kZXMsIHRoaXMuaWQpO1xuICAgICAgICBibGFja2JvYXJkLnNldCgnbm9kZUNvdW50JywgdGljay5ub2RlQ291bnQsIHRoaXMuaWQpO1xuXG4gICAgfVxufSIsImltcG9ydCB7IEJsYWNrYm9hcmQgfSBmcm9tICcuLi9jb3JlL0JsYWNrYm9hcmQnO1xuaW1wb3J0IHsgQmVoYXZpb3VyVHJlZSB9IGZyb20gJy4uL2NvcmUvQmVoYXZpb3VyVHJlZSc7XG5cbmV4cG9ydCBjbGFzcyBDaGFyYWN0ZXJDb21tYW5kVHJlZSB7XG4gICAgY29uc3RydWN0b3IoaWQpIHtcbiAgICAgICAgdGhpcy5pZCA9ICdiYXNpY01lbGVlVHJlZSc7XG4gICAgICAgIHRoaXMuYmxhY2tib2FyZCA9IG5ldyBCbGFja2JvYXJkKCk7XG4gICAgICAgIHRoaXMudHJlZSA9IG5ldyBCZWhhdmlvdXJUcmVlKGlkKTtcblxuICAgICAgICB0aGlzLmluaXRpYWxpc2UoKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXNlKCkge1xuICAgICAgICAvLyBPdmVycmlkZSB0byBzZXQgdHJlZVxuICAgIH1cblxuICAgIHJ1bkNvbW1hbmRzKGZhY2FkZSwgY2hhcmFjdGVySWQpIHtcbiAgICAgICAgdGhpcy5ibGFja2JvYXJkLnNldChcImZhY2FkZVwiLCBmYWNhZGUsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuYmxhY2tib2FyZC5zZXQoXCJjaGFyYWN0ZXJJZFwiLCBjaGFyYWN0ZXJJZCwgdGhpcy50cmVlLmlkLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy50cmVlLnRpY2sodGhpcywgdGhpcy5ibGFja2JvYXJkKTtcbiAgICB9XG5cbn0iLCJpbXBvcnQgeyBCYXNlTm9kZSB9IGZyb20gJy4vQmFzZU5vZGUnO1xuaW1wb3J0IHsgQmVoYXZpb3VyU3RhdHVzIH0gZnJvbSAnLi9CZWhhdmlvdXJTdGF0dXMnO1xuXG5leHBvcnQgY2xhc3MgUHJpb3JpdHkgZXh0ZW5kcyBCYXNlTm9kZSB7XG4gICAgdGljayh0aWNrKSB7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gY2hpbGQuZXhlY3V0ZSh0aWNrKTtcblxuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gQmVoYXZpb3VyU3RhdHVzLkZBSUxVUkUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5GQUlMVVJFO1xuICAgIH1cblxufSIsImltcG9ydCB7IEJhc2VOb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9CYXNlTm9kZSc7XG5pbXBvcnQgeyBCZWhhdmlvdXJTdGF0dXMgfSBmcm9tICcuLi8uLi9jb3JlL0JlaGF2aW91clN0YXR1cyc7XG5cbmV4cG9ydCBjbGFzcyBTZXRQbGF5ZXJBc1RhcmdldCBleHRlbmRzIEJhc2VOb2RlIHtcbiAgICB0aWNrKHRpY2spIHtcbiAgICAgICAgdGljay5ibGFja2JvYXJkLnNldCgndGFyZ2V0JywgJ3BsYXllcicsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLlNVQ0NFU1M7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZU5vZGUgfSBmcm9tICcuLi8uLi9jb3JlL0Jhc2VOb2RlJztcbmltcG9ydCB7IEJlaGF2aW91clN0YXR1cyB9IGZyb20gJy4uLy4uL2NvcmUvQmVoYXZpb3VyU3RhdHVzJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGNsYXNzIE1lbGVlQXR0YWNrVGFyZ2V0IGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIHRpY2sodGljaykge1xuICAgICAgICBjb25zdCBmYWNhZGUgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdmYWNhZGUnLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBhdHRhY2tlcklkID0gdGljay5ibGFja2JvYXJkLmdldCgnY2hhcmFjdGVySWQnLCB0aWNrLnRyZWUuaWQsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgZGVmZW5kZXJJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ3RhcmdldCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuUkVTT0xWRV9BVFRBQ0ssIGF0dGFja2VySWQsIGRlZmVuZGVySWQpO1xuICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLlNVQ0NFU1M7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZU5vZGUgfSBmcm9tICcuLi8uLi9jb3JlL0Jhc2VOb2RlJztcbmltcG9ydCB7IEJlaGF2aW91clN0YXR1cyB9IGZyb20gJy4uLy4uL2NvcmUvQmVoYXZpb3VyU3RhdHVzJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGNsYXNzIEVuZENvbWJhdFR1cm4gZXh0ZW5kcyBCYXNlTm9kZSB7XG4gICAgdGljayh0aWNrKSB7XG4gICAgICAgIGNvbnN0IGZhY2FkZSA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2ZhY2FkZScsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5FTkRfQ09NQkFUX1RVUk4pO1xuXG4gICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuU1VDQ0VTUztcbiAgICB9XG59IiwiaW1wb3J0IHsgQmFzZU5vZGUgfSBmcm9tICcuLi8uLi9jb3JlL0Jhc2VOb2RlJztcbmltcG9ydCB7IEJlaGF2aW91clN0YXR1cyB9IGZyb20gJy4uLy4uL2NvcmUvQmVoYXZpb3VyU3RhdHVzJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcblxuZXhwb3J0IGNsYXNzIEhhc01vdmVtZW50UmVtYWluaW5nIGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIHRpY2sodGljaykge1xuICAgICAgICBjb25zdCBmYWNhZGUgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdmYWNhZGUnLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2NoYXJhY3RlcklkJywgdGljay50cmVlLmlkLCBmYWxzZSk7XG5cbiAgICAgICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGNoYXJhY3RlcklkKTtcblxuXG4gICAgICAgIGlmIChjaGFyYWN0ZXJQcm94eS5hdmFpbGFibGVNb3ZlbWVudCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuU1VDQ0VTUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuRkFJTFVSRTtcbiAgICAgICAgfVxuXG5cbiAgICB9XG59IiwiaW1wb3J0IHsgQmFzZU5vZGUgfSBmcm9tICcuLi8uLi9jb3JlL0Jhc2VOb2RlJztcbmltcG9ydCB7IEJlaGF2aW91clN0YXR1cyB9IGZyb20gJy4uLy4uL2NvcmUvQmVoYXZpb3VyU3RhdHVzJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcblxuZXhwb3J0IGNsYXNzIElzTmV4dFRvUGxheWVyIGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIHRpY2sodGljaykge1xuICAgICAgICBjb25zdCBmYWNhZGUgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdmYWNhZGUnLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2NoYXJhY3RlcklkJywgdGljay50cmVlLmlkLCBmYWxzZSk7XG5cbiAgICAgICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGNoYXJhY3RlcklkKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVyQ3VycmVudE5vZGUgPSBjaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZTtcbiAgICAgICAgLy8gZmluZCBkZXNpcmVkIG1vdmUgcG9zaXRpb25cbiAgICAgICAgY29uc3QgcGxheWVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIFwicGxheWVyXCIpO1xuICAgICAgICBjb25zdCBwbGF5ZXJOb2RlID0gcGxheWVyUHJveHkuY3VycmVudE5vZGU7XG4gICAgICAgIGNvbnN0IGNvbm5lY3RlZE5vZGVzID0gcGxheWVyTm9kZS5jb25uZWN0ZWROb2RlcztcblxuICAgICAgICAvLyBDaGVjayBpZiBjaGFyYWN0ZXIgaXMgYWxyZWFkeSBhZGphY2VudCB0byB0YXJnZXRcbiAgICAgICAgY29uc3QgaXNBZGphY2VudCA9IGNvbm5lY3RlZE5vZGVzLnNvbWUobiA9PiBuLmVxdWFscyhjaGFyYWN0ZXJDdXJyZW50Tm9kZSkpO1xuXG4gICAgICAgIGlmIChpc0FkamFjZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLlNVQ0NFU1M7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLkZBSUxVUkU7XG4gICAgICAgIH1cblxuXG4gICAgfVxufSIsImltcG9ydCB7IEJhc2VOb2RlIH0gZnJvbSAnLi9CYXNlTm9kZSc7XG5pbXBvcnQgeyBCZWhhdmlvdXJTdGF0dXMgfSBmcm9tICcuL0JlaGF2aW91clN0YXR1cyc7XG5cbmV4cG9ydCBjbGFzcyBNZW1TZXF1ZW5jZSBleHRlbmRzIEJhc2VOb2RlIHtcbiAgICBvcGVuKHRpY2spIHtcbiAgICAgICAgdGljay5ibGFja2JvYXJkLnNldCgncnVubmluZ0NoaWxkJywgMCwgdGljay50cmVlLmlkLCB0aGlzLmlkKTtcbiAgICB9XG5cbiAgICB0aWNrKHRpY2spIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdydW5uaW5nQ2hpbGQnLCB0aWNrLnRyZWUuaWQsIHRoaXMuaWQpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSBjaGlsZDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSB0aGlzLmNoaWxkcmVuW2ldLmV4ZWN1dGUodGljayk7XG5cbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IEJlaGF2aW91clN0YXR1cy5TVUNDRVNTKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gQmVoYXZpb3VyU3RhdHVzLlJVTk5JTkcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljay5ibGFja2JvYXJkLnNldCgncnVubmluZ0NoaWxkJywgaSwgdGljay50cmVlLmlkLCB0aGlzLmlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuU1VDQ0VTUztcbiAgICB9XG5cbn0iLCJcbmltcG9ydCB7IEJhc2VOb2RlIH0gZnJvbSAnLi4vQmFzZU5vZGUnO1xuaW1wb3J0IHsgQmVoYXZpb3VyU3RhdHVzIH0gZnJvbSAnLi4vQmVoYXZpb3VyU3RhdHVzJztcbmV4cG9ydCBjbGFzcyBJbnZlcnRlciBleHRlbmRzIEJhc2VOb2RlIHtcbiAgICB0aWNrKHRpY2spIHtcblxuICAgICAgICAvLyBwcmVzdW1lIGludmVydGVyIGhhcyBvbmUgY2hpbGRcbiAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLmNoaWxkcmVuWzBdO1xuXG4gICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuRVJST1I7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc3RhdHVzID0gY2hpbGQuZXhlY3V0ZSh0aWNrKTtcblxuICAgICAgICBpZiAoc3RhdHVzID09IEJlaGF2aW91clN0YXR1cy5TVUNDRVNTKVxuICAgICAgICAgICAgc3RhdHVzID0gQmVoYXZpb3VyU3RhdHVzLkZBSUxVUkU7XG4gICAgICAgIGVsc2UgaWYgKHN0YXR1cyA9PSBCZWhhdmlvdXJTdGF0dXMuRkFJTFVSRSlcbiAgICAgICAgICAgIHN0YXR1cyA9IEJlaGF2aW91clN0YXR1cy5TVUNDRVNTO1xuXG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfVxufSIsImltcG9ydCB7IEJhc2VOb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9CYXNlTm9kZSc7XG5pbXBvcnQgeyBCZWhhdmlvdXJTdGF0dXMgfSBmcm9tICcuLi8uLi9jb3JlL0JlaGF2aW91clN0YXR1cyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5cbmV4cG9ydCBjbGFzcyBJc1RhcmdldERlYWQgZXh0ZW5kcyBCYXNlTm9kZSB7XG4gICAgdGljayh0aWNrKSB7XG4gICAgICAgIGNvbnN0IGZhY2FkZSA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2ZhY2FkZScsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IHRhcmdldElkID0gdGljay5ibGFja2JvYXJkLmdldCgndGFyZ2V0JywgdGljay50cmVlLmlkLCBmYWxzZSk7XG5cbiAgICAgICAgLy8gZmluZCBkZXNpcmVkIG1vdmUgcG9zaXRpb25cbiAgICAgICAgY29uc3QgcGxheWVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHRhcmdldElkKTtcblxuICAgICAgICBpZiAocGxheWVyUHJveHkuaXNEZWFkKSB7XG4gICAgICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLlNVQ0NFU1M7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLkZBSUxVUkU7XG4gICAgICAgIH1cblxuXG4gICAgfVxufSIsImltcG9ydCB7IEJhc2VOb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9CYXNlTm9kZSc7XG5pbXBvcnQgeyBCZWhhdmlvdXJTdGF0dXMgfSBmcm9tICcuLi8uLi9jb3JlL0JlaGF2aW91clN0YXR1cyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhcic7XG5cbmV4cG9ydCBjbGFzcyBNb3ZlVG93YXJkc1RhcmdldCBleHRlbmRzIEJhc2VOb2RlIHtcbiAgICB0aWNrKHRpY2spIHtcbiAgICAgICAgY29uc3QgZmFjYWRlID0gdGljay5ibGFja2JvYXJkLmdldCgnZmFjYWRlJywgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVySWQgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdjaGFyYWN0ZXJJZCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuICAgICAgICBjb25zdCB0YXJnZXRJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ3RhcmdldCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IGNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBjaGFyYWN0ZXJJZCk7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlckN1cnJlbnROb2RlID0gY2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGU7XG4gICAgICAgIGNvbnN0IHRhcmdldFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0YXJnZXRJZCk7XG4gICAgICAgIGNvbnN0IHRhcmdldEN1cnJlbnROb2RlID0gdGFyZ2V0UHJveHkuY3VycmVudE5vZGU7XG4gICAgICAgIGNvbnN0IGNvbm5lY3RlZE5vZGVzID0gdGFyZ2V0Q3VycmVudE5vZGUuY29ubmVjdGVkTm9kZXM7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY29ubmVjdGVkTm9kZXMuZmlsdGVyKG5vZGUgPT4gIW5vZGUub2NjdXBpZWQpO1xuXG4gICAgICAgIC8vIENoZWNrIHRoZXJlIGlzIGEgbm9kZSB0byBtb3ZlIHRvIFxuICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIEZpbmQgbmVhcmVzdCBub2RlXG4gICAgICAgICAgICBsZXQgbm9kZSA9IHJlc3VsdC5yZWR1Y2UoKGEsIGIpID0+IGRpc3RhbmNlU3FydChjaGFyYWN0ZXJDdXJyZW50Tm9kZSwgYSkgPCBkaXN0YW5jZVNxcnQoY2hhcmFjdGVyQ3VycmVudE5vZGUsIGIpID8gYSA6IGIpO1xuXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gQXN0YXIuY2FsY3VsYXRlUGF0aChjaGFyYWN0ZXJDdXJyZW50Tm9kZSwgbm9kZSk7XG4gICAgICAgICAgICBpZiAocGF0aCAmJiBwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyB0cmltIG1vdmVtZW50XG4gICAgICAgICAgICAgICAgY29uc3Qgdm8gPSBjaGFyYWN0ZXJQcm94eS52bztcbiAgICAgICAgICAgICAgICB3aGlsZSAocGF0aC5sZW5ndGggPiB2by5hdmFpbGFibGVNb3ZlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBwYXRoLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGVuZCBwb2ludCBpbiBhZGphY2VudCB0byB0YXJnZXRcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkFWSUdBVEVfQUxPTkdfUEFUSCArIGNoYXJhY3RlcklkLCBwYXRoKTtcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IG5vZGU7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVzZSB1cCBtb3ZlbWVudCBwb2ludHNcbiAgICAgICAgY2hhcmFjdGVyUHJveHkuYXZhaWxhYmxlTW92ZW1lbnQgPSAwO1xuXG4gICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuU1VDQ0VTUztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpc3RhbmNlU3FydChwMSwgcDIpIHtcbiAgICByZXR1cm4gTWF0aC5wb3cocDIueCAtIHAxLngsIDIpICsgTWF0aC5wb3cocDIueSAtIHAxLnksIDIpO1xufVxuIiwiaW1wb3J0IHsgQmFzZU5vZGUgfSBmcm9tICcuLi8uLi9jb3JlL0Jhc2VOb2RlJztcbmltcG9ydCB7IEJlaGF2aW91clN0YXR1cyB9IGZyb20gJy4uLy4uL2NvcmUvQmVoYXZpb3VyU3RhdHVzJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcblxuZXhwb3J0IGNsYXNzIElzRGVhZCBleHRlbmRzIEJhc2VOb2RlIHtcbiAgICB0aWNrKHRpY2spIHtcbiAgICAgICAgY29uc3QgZmFjYWRlID0gdGljay5ibGFja2JvYXJkLmdldCgnZmFjYWRlJywgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVySWQgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdjaGFyYWN0ZXJJZCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuXG4gICAgICAgIC8vIGZpbmQgZGVzaXJlZCBtb3ZlIHBvc2l0aW9uXG4gICAgICAgIGNvbnN0IHBsYXllclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBjaGFyYWN0ZXJJZCk7XG5cbiAgICAgICAgaWYgKHBsYXllclByb3h5LmlzRGVhZCkge1xuICAgICAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5TVUNDRVNTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5GQUlMVVJFO1xuICAgICAgICB9XG5cblxuICAgIH1cbn0iLCJpbXBvcnQgeyBCYXNlTm9kZSB9IGZyb20gJy4uLy4uL2NvcmUvQmFzZU5vZGUnO1xuaW1wb3J0IHsgQmVoYXZpb3VyU3RhdHVzIH0gZnJvbSAnLi4vLi4vY29yZS9CZWhhdmlvdXJTdGF0dXMnO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuXG5leHBvcnQgY2xhc3MgSGFzQWN0aW9uc1JlbWFpbmluZyBleHRlbmRzIEJhc2VOb2RlIHtcbiAgICB0aWNrKHRpY2spIHtcbiAgICAgICAgY29uc3QgZmFjYWRlID0gdGljay5ibGFja2JvYXJkLmdldCgnZmFjYWRlJywgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVySWQgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdjaGFyYWN0ZXJJZCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgY2hhcmFjdGVySWQpO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXJQcm94eS5hdmFpbGFibGVBY3Rpb25zID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5TVUNDRVNTO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLkZBSUxVUkU7XG5cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VOb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9CYXNlTm9kZSc7XG5pbXBvcnQgeyBCZWhhdmlvdXJTdGF0dXMgfSBmcm9tICcuLi8uLi9jb3JlL0JlaGF2aW91clN0YXR1cyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5cbmV4cG9ydCBjbGFzcyBSZWxpbnF1aXNoTW92ZW1lbnRQb2ludHMgZXh0ZW5kcyBCYXNlTm9kZSB7XG4gICAgdGljayh0aWNrKSB7XG4gICAgICAgIGNvbnN0IGZhY2FkZSA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2ZhY2FkZScsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlcklkID0gdGljay5ibGFja2JvYXJkLmdldCgnY2hhcmFjdGVySWQnLCB0aWNrLnRyZWUuaWQsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGNoYXJhY3RlcklkKTtcblxuICAgICAgICBjaGFyYWN0ZXJQcm94eS5hdmFpbGFibGVNb3ZlbWVudCA9IDA7XG5cbiAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5TVUNDRVNTO1xuXG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTWFzdGVyTm9kZSB9IGZyb20gJy4uL2NvcmUvTWFzdGVyTm9kZSc7XG5pbXBvcnQgeyBDaGFyYWN0ZXJDb21tYW5kVHJlZSB9IGZyb20gJy4vQ2hhcmFjdGVyQ29tbWFuZFRyZWUnO1xuaW1wb3J0IHsgUHJpb3JpdHkgfSBmcm9tICcuLi9jb3JlL1ByaW9yaXR5JztcbmltcG9ydCB7IFNldFBsYXllckFzVGFyZ2V0IH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9hY3Rpb25zL1NldFBsYXllckFzVGFyZ2V0JztcbmltcG9ydCB7IE1lbGVlQXR0YWNrVGFyZ2V0IH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9hY3Rpb25zL01lbGVlQXR0YWNrVGFyZ2V0JztcbmltcG9ydCB7IEVuZENvbWJhdFR1cm4gfSBmcm9tICcuLi9iZWhhdmlvdXJzL2FjdGlvbnMvRW5kQ29tYmF0VHVybic7XG5pbXBvcnQgeyBIYXNNb3ZlbWVudFJlbWFpbmluZyB9IGZyb20gJy4uL2JlaGF2aW91cnMvY29uZGl0aW9ucy9IYXNNb3ZlbWVudFJlbWFpbmluZyc7XG5pbXBvcnQgeyBJc05leHRUb1BsYXllciB9IGZyb20gJy4uL2JlaGF2aW91cnMvY29uZGl0aW9ucy9Jc05leHRUb1BsYXllcic7XG5pbXBvcnQgeyBNZW1TZXF1ZW5jZSB9IGZyb20gJy4uL2NvcmUvTWVtU2VxdWVuY2UnO1xuaW1wb3J0IHsgSW52ZXJ0ZXIgfSBmcm9tICcuLi9jb3JlL2RlY29yYXRvcnMvSW52ZXJ0ZXInO1xuaW1wb3J0IHsgSXNUYXJnZXREZWFkIH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9jb25kaXRpb25zL0lzVGFyZ2V0RGVhZCc7XG5pbXBvcnQgeyBNb3ZlVG93YXJkc1RhcmdldCB9IGZyb20gJy4uL2JlaGF2aW91cnMvYWN0aW9ucy9Nb3ZlVG93YXJkc1RhcmdldCc7XG5pbXBvcnQgeyBJc0RlYWQgfSBmcm9tICcuLi9iZWhhdmlvdXJzL2NvbmRpdGlvbnMvSXNEZWFkJztcbmltcG9ydCB7IEhhc0FjdGlvbnNSZW1haW5pbmcgfSBmcm9tICcuLi9iZWhhdmlvdXJzL2NvbmRpdGlvbnMvSGFzQWN0aW9uc1JlbWFpbmluZyc7XG5pbXBvcnQgeyBSZWxpbnF1aXNoTW92ZW1lbnRQb2ludHMgfSBmcm9tICcuLi9iZWhhdmlvdXJzL2FjdGlvbnMvUmVsaW5xdWlzaE1vdmVtZW50UG9pbnRzJztcblxuZXhwb3J0IGNsYXNzIEJhc2ljTWVsZWVUcmVlIGV4dGVuZHMgQ2hhcmFjdGVyQ29tbWFuZFRyZWUge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdiYXNpY01lbGVlVHJlZScpO1xuICAgIH1cblxuICAgIGluaXRpYWxpc2UoKSB7XG4gICAgICAgIHRoaXMudHJlZS5yb290ID0gbmV3IE1hc3Rlck5vZGUoW1xuICAgICAgICAgICAgbmV3IFByaW9yaXR5KFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE1lbVNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTZXRQbGF5ZXJBc1RhcmdldCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEludmVydGVyKFtuZXcgSXNEZWFkKCldKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBJbnZlcnRlcihbbmV3IElzVGFyZ2V0RGVhZCgpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUHJpb3JpdHkoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNZW1TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBJc05leHRUb1BsYXllcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgSGFzQWN0aW9uc1JlbWFpbmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgU2V0UGxheWVyQXNUYXJnZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1lbGVlQXR0YWNrVGFyZ2V0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZWxpbnF1aXNoTW92ZW1lbnRQb2ludHMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTWVtU2VxdWVuY2UoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgSGFzTW92ZW1lbnRSZW1haW5pbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFNldFBsYXllckFzVGFyZ2V0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNb3ZlVG93YXJkc1RhcmdldCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBdKSxcblxuICAgICAgICAgICAgICAgICAgICBuZXcgRW5kQ29tYmF0VHVybigpXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIClcbiAgICAgICAgXSk7XG4gICAgfVxufSIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBDb21iYXRQcm94eSB9IGZyb20gJy4uL21vZGVsL2NvbWJhdC9Db21iYXRQcm94eSc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lTWFwUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lTWFwL0dhbWVNYXBQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhcic7XG5pbXBvcnQgeyBCYXNpY01lbGVlVHJlZSB9IGZyb20gJy4uL2JlaGF2aW91clRyZWUvdHJlZXMvQmFzaWNNZWxlZVRyZWUnO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5lbXlUdXJuQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGVuZW15SWQgPSBhcmdzWzBdO1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgZ2FtZU1hcFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZU1hcFByb3h5Lk5BTUUpO1xuXG4gICAgY29uc3QgZW5lbXlQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgZW5lbXlJZCk7XG4gICAgY29uc3QgZW5lbXlDdXJyZW50Tm9kZSA9IGVuZW15UHJveHkuY3VycmVudE5vZGU7XG4gICAgLy8gZmluZCBkZXNpcmVkIG1vdmUgcG9zaXRpb25cbiAgICBjb25zdCBwbGF5ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgXCJwbGF5ZXJcIik7XG4gICAgY29uc3QgcGxheWVyTm9kZSA9IHBsYXllclByb3h5LmN1cnJlbnROb2RlO1xuICAgIGNvbnN0IGNvbm5lY3RlZE5vZGVzID0gcGxheWVyTm9kZS5jb25uZWN0ZWROb2RlcztcblxuICAgIC8vIENoZWNrIGlmIGNoYXJhY3RlciBpcyBhbHJlYWR5IGFkamFjZW50IHRvIHRhcmdldFxuICAgIGNvbnN0IGlzQWRqYWNlbnQgPSBjb25uZWN0ZWROb2Rlcy5zb21lKG4gPT4gbi5lcXVhbHMoZW5lbXlDdXJyZW50Tm9kZSkpO1xuXG4gICAgY29uc3QgYmFzaWNNZWxlZVRyZWUgPSBuZXcgQmFzaWNNZWxlZVRyZWUoKTtcbiAgICBiYXNpY01lbGVlVHJlZS5ydW5Db21tYW5kcyhmYWNhZGUsIGVuZW15SWQpO1xuXG4gICAgLyovLyB3ZSdyZSBhbHJlYWR5IHRoZXJlXG4gICAgaWYgKGlzQWRqYWNlbnQpIHtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlJFU09MVkVfQVRUQUNLLCBlbmVteVByb3h5LmlkLCBwbGF5ZXJQcm94eS5pZCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkVORF9DT01CQVRfVFVSTik7XG4gICAgICAgIH0sIDIwMDApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gY29ubmVjdGVkTm9kZXMuZmlsdGVyKG5vZGUgPT4gIW5vZGUub2NjdXBpZWQpO1xuXG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIEZpbmQgbmVhcmVzdCBub2RlXG4gICAgICAgIGxldCBub2RlID0gcmVzdWx0LnJlZHVjZSgoYSwgYikgPT4gZGlzdGFuY2VTcXJ0KGVuZW15Q3VycmVudE5vZGUsIGEpIDwgZGlzdGFuY2VTcXJ0KGVuZW15Q3VycmVudE5vZGUsIGIpID8gYSA6IGIpO1xuXG5cbiAgICAgICAgY29uc3QgcGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgoZW5lbXlDdXJyZW50Tm9kZSwgbm9kZSk7XG4gICAgICAgIGlmIChwYXRoICYmIHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gdHJpbSBtb3ZlbWVudFxuICAgICAgICAgICAgY29uc3Qgdm8gPSBlbmVteVByb3h5LnZvO1xuICAgICAgICAgICAgd2hpbGUgKHBhdGgubGVuZ3RoID4gdm8uYXZhaWxhYmxlTW92ZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBwYXRoLnNoaWZ0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBlbmQgcG9pbnQgaW4gYWRqYWNlbnQgdG8gdGFyZ2V0XG4gICAgICAgICAgICBjb25zdCBlbmRQb2ludCA9IHBhdGhbMF07XG4gICAgICAgICAgICBjb25zdCBlbmRwb2ludElzQWRqYWNlbnQgPSBjb25uZWN0ZWROb2Rlcy5zb21lKG4gPT4gbi5lcXVhbHMoZW5kUG9pbnQpKTtcblxuICAgICAgICAgICAgaWYgKGVuZHBvaW50SXNBZGphY2VudCkge1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5NT1ZFX0FMT05HX1BBVEhfQU5EX0FUVEFDSywgZW5lbXlJZCwgXCJwbGF5ZXJcIiwgcGF0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5OQVZJR0FURV9BTE9OR19QQVRIICsgZW5lbXlJZCwgcGF0aCk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgZW5lbXlQcm94eS5jdXJyZW50Tm9kZSA9IG5vZGU7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5FTkRfQ09NQkFUX1RVUk4pO1xuICAgICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5FTkRfQ09NQkFUX1RVUk4pO1xuICAgICAgICB9LCAxNTAwKTtcbiAgICB9Ki9cbn1cblxuZnVuY3Rpb24gZGlzdGFuY2VTcXJ0KHAxLCBwMikge1xuICAgIHJldHVybiBNYXRoLnBvdyhwMi54IC0gcDEueCwgMikgKyBNYXRoLnBvdyhwMi55IC0gcDEueSwgMik7XG59XG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tIFwiLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVByb3h5XCI7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gXCIuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk9cIjtcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IEdhbWVNYXBQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvR2FtZU1hcFByb3h5JztcblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdGVkTm9kZUNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGNvbnN0IGdhbWVTdGF0ZVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZVN0YXRlUHJveHkuTkFNRSk7XG4gICAgY29uc3QgZ2FtZU1hcFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZU1hcFByb3h5Lk5BTUUpO1xuXG5cbiAgICBjb25zdCBub2RlID0gYXJnc1swXTtcblxuICAgIGlmIChnYW1lTWFwUHJveHkuaGFzVmFsaWROb2RlKG5vZGUpKSB7XG4gICAgICAgIGlmIChnYW1lU3RhdGVQcm94eS5jdXJyZW50TW9kZSA9PT0gZ2FtZXBsYXlNb2RlVHlwZXMuRVhQTE9SQVRJT04pIHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5OQVZJR0FURV9UT19XQVlQT0lOVCArIFwicGxheWVyXCIsIG5vZGUpO1xuICAgICAgICB9IGVsc2UgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5DT01CQVQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbWJhdFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoQ29tYmF0UHJveHkuTkFNRSk7XG4gICAgICAgICAgICBpZiAoY29tYmF0UHJveHkuYWN0aXZlUGFydGljaXBhbnQgPT09IFwicGxheWVyXCIpIHtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ09NQkFUX05BVklHQVRFX1RPX05PREUsIFwicGxheWVyXCIsIG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21iYXROYXZpZ2F0ZVRvTm9kZUNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGNvbnN0IGlkID0gYXJnc1swXTtcbiAgICBjb25zdCB0YXJnZXROb2RlID0gYXJnc1sxXTtcblxuICAgIGNvbnN0IGdhbWVDaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgaWQpO1xuICAgIGNvbnN0IHZvID0gZ2FtZUNoYXJhY3RlclByb3h5LnZvO1xuICAgIGNvbnN0IG1vdmVhYmxlTm9kZXMgPSBBc3Rhci5icmVhZHRoRmlyc3RTZWFyY2godm8uY3VycmVudE5vZGUsIHZvLmF2YWlsYWJsZU1vdmVtZW50KTtcblxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBtb3ZlYWJsZU5vZGVzKSB7XG4gICAgICAgIGlmIChub2RlLmVxdWFscyh0YXJnZXROb2RlKSkge1xuICAgICAgICAgICAgaGFuZGxlVmFsaWRNb3ZlKGZhY2FkZSwgZ2FtZUNoYXJhY3RlclByb3h5LCB0YXJnZXROb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlVmFsaWRNb3ZlKGZhY2FkZSwgY2hhcmFjdGVyUHJveHksIHRhcmdldE5vZGUpIHtcbiAgICBjb25zdCB2byA9IGNoYXJhY3RlclByb3h5LnZvO1xuICAgIGNvbnN0IHBhdGggPSBBc3Rhci5jYWxjdWxhdGVQYXRoKHZvLmN1cnJlbnROb2RlLCB0YXJnZXROb2RlKTtcbiAgICBpZiAocGF0aCAmJiBwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdm8uYXZhaWxhYmxlTW92ZW1lbnQgLT0gKHBhdGgubGVuZ3RoIC0gMSk7IC8vIERldHJhY3QgYnkgb25lLi4uIHRoZSBmaXJzdCBwYXRoIG5vZGUgZG9lc24ndCBjb3VudFxuICAgICAgICBjaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IHRhcmdldE5vZGU7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ISURFX1dBTEtBQkxFX0FSRUEpO1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkFWSUdBVEVfQUxPTkdfUEFUSCArIHZvLmlkLCBwYXRoKTtcbiAgICB9XG59IiwiZXhwb3J0IGZ1bmN0aW9uIHNob3dXYWxrYWJsZUFyZWFDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3Qgd2Fsa2FibGVOb2RlcyA9IGFyZ3NbMF07XG4gICAgY29uc3QgYXBwID0gcGMuQXBwbGljYXRpb24uZ2V0QXBwbGljYXRpb24oKTtcbiAgICBjb25zdCB3YWxrYWJsZVRpbGVBc3NldCA9IGFwcC5hc3NldHMuZ2V0KDQwMjM1OTY2KTtcbiAgICBjb25zdCBjb250YWluZXIgPSBhcHAucm9vdC5maW5kQnlOYW1lKFwiV29ybGRPYmplY3RzXCIpO1xuXG4gICAgZm9yIChjb25zdCBub2RlIG9mIHdhbGthYmxlTm9kZXMpIHtcbiAgICAgICAgY29uc3QgdGlsZSA9IHdhbGthYmxlVGlsZUFzc2V0LnJlc291cmNlLmluc3RhbnRpYXRlKCk7XG4gICAgICAgIHRpbGUuc2V0TG9jYWxQb3NpdGlvbihub2RlLngsIG5vZGUueSwgbm9kZS56KTtcbiAgICAgICAgY29udGFpbmVyLmFkZENoaWxkKHRpbGUpO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSBcIkBrb3JlZXovcHVyZS1tdmNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGhpZGVXYWxrYWJsZUFyZWFDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgYXBwID0gcGMuQXBwbGljYXRpb24uZ2V0QXBwbGljYXRpb24oKTtcbiAgICBjb25zdCB3YWxrYWJsZVRpbGVFbnRpdGllcyA9IGFwcC5yb290LmZpbmRCeVRhZygnd2Fsa2FibGVfdGlsZScpO1xuICAgIGZvciAoY29uc3Qgd2Fsa2FibGVUaWxlRW50aXR5IG9mIHdhbGthYmxlVGlsZUVudGl0aWVzKSB7XG4gICAgICAgIHdhbGthYmxlVGlsZUVudGl0eS5kZXN0cm95KCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSBcIkBrb3JlZXovcHVyZS1tdmNcIjtcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSBcIi4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3RhclwiO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuXG5leHBvcnQgZnVuY3Rpb24gYXdhaXRQbGF5ZXJDb21iYXRJbnB1dENvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IGFyZ3NbMF07XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcblxuICAgIGNvbnN0IGNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBjaGFyYWN0ZXJJZCk7XG4gICAgY29uc3Qgdm8gPSBjaGFyYWN0ZXJQcm94eS52bztcbiAgICBjb25zdCBtb3ZlYWJsZU5vZGVzID0gQXN0YXIuYnJlYWR0aEZpcnN0U2VhcmNoKHZvLmN1cnJlbnROb2RlLCB2by5hdmFpbGFibGVNb3ZlbWVudCk7XG5cbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19XQUxLQUJMRV9BUkVBLCBtb3ZlYWJsZU5vZGVzKTtcblxufVxuIiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSBcIkBrb3JlZXovcHVyZS1tdmNcIjtcbmltcG9ydCB7IEdhbWVTdGF0ZVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVByb3h5JztcbmltcG9ydCB7IGdhbWVwbGF5TW9kZVR5cGVzIH0gZnJvbSBcIi4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWT1wiO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSBcIi4vR2FtZUNvbW1hbmRzXCI7XG5pbXBvcnQgeyBDb21iYXRQcm94eSB9IGZyb20gJy4uL21vZGVsL2NvbWJhdC9Db21iYXRQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmRNb3ZlbWVudENvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGNvbnN0IGlkID0gYXJnc1swXTtcbiAgICBjb25zdCBlbmROb2RlID0gYXJnc1sxXTtcblxuICAgIGNvbnN0IGNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBpZCk7XG4gICAgY2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUgPSBlbmROb2RlO1xuXG4gICAgY29uc3QgZ2FtZVN0YXRlID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZVN0YXRlUHJveHkuTkFNRSk7XG4gICAgaWYgKGdhbWVTdGF0ZS5jdXJyZW50TW9kZSA9PT0gZ2FtZXBsYXlNb2RlVHlwZXMuQ09NQkFUKSB7XG4gICAgICAgIGNvbnN0IGNvbWJhdFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoQ29tYmF0UHJveHkuTkFNRSk7XG5cbiAgICAgICAgaWYgKGNvbWJhdFByb3h5KSB7XG4gICAgICAgICAgICBpZiAoY29tYmF0UHJveHkuYWN0aXZlUGFydGljaXBhbnQgPT09IFwicGxheWVyXCIpIHtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQVdBSVRfUExBWUVSX0NPTUJBVF9JTlBVVCwgaWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRFVEVSTUlORV9ORVhUX0VORU1ZX0FDVElPTiwgaWQpO1xuICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY2VudGVyUG9pbnRDaGFyYWN0ZXJQcm94eShjaGFyYWN0ZXJQcm94eSkge1xuICAgIGNvbnN0IGN1cnJlbnROb2RlID0gY2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGU7XG4gICAgcmV0dXJuIG5ldyBwYy5WZWMzKGN1cnJlbnROb2RlLngsXG4gICAgICAgIGN1cnJlbnROb2RlLnkgKyBjaGFyYWN0ZXJQcm94eS5oZWlnaHQgKiAwLjUsXG4gICAgICAgIGN1cnJlbnROb2RlLnopO1xufSIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk8nO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuaW1wb3J0IHsgQXN0YXIgfSBmcm9tICcuLi9tb2RlbC9nYW1lTWFwL25hdmlnYXRpb24vQXN0YXInO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgQ29tYmF0UHJveHkgfSBmcm9tICcuLi9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHknO1xuaW1wb3J0IHsgV2VhcG9uc1Byb3h5IH0gZnJvbSAnLi4vbW9kZWwvd2VhcG9ucy9XZWFwb25zUHJveHknO1xuaW1wb3J0IHsgY2VudGVyUG9pbnRDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL3V0aWxzL0NoYXJhY3RlckNlbnRlclBvaW50JztcbmltcG9ydCB7IEdhbWVNYXBQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvR2FtZU1hcFByb3h5JztcblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdGVkR2FtZUNoYXJhY3RlckNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGNvbnN0IGdhbWVDaGFyYWN0ZXJFbnRpdHkgPSBhcmdzWzBdO1xuICAgIGNvbnN0IGlkID0gZ2FtZUNoYXJhY3RlckVudGl0eS5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5jaGFyYWN0ZXJJZDtcbiAgICBjb25zdCBnYW1lU3RhdGVQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVTdGF0ZVByb3h5Lk5BTUUpO1xuICAgIGNvbnN0IGdhbWVNYXBQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVNYXBQcm94eS5OQU1FKTtcbiAgICBjb25zdCB0YXJnZXRDaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgaWQpO1xuICAgIGNvbnN0IHBsYXllckNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBcInBsYXllclwiKTtcblxuICAgIGNvbnN0IHdlYXBvblByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoV2VhcG9uc1Byb3h5Lk5BTUUpO1xuICAgIGNvbnN0IHdlYXBvbkNhdGVnb3J5ID0gd2VhcG9uUHJveHkuZ2V0V2VhcG9uQ2F0ZWdvcnkocGxheWVyQ2hhcmFjdGVyUHJveHkuZXF1aXBwZWRXZWFwb24pO1xuXG4gICAgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5FWFBMT1JBVElPTikge1xuICAgICAgICBpZiAoZ2FtZVN0YXRlUHJveHkuY3VycmVudEFjdGlvbiA9PT0gJ2F0dGFjaycgJiYgd2VhcG9uQ2F0ZWdvcnkgPT09IFwicmFuZ2VkXCIpIHtcbiAgICAgICAgICAgIGlmIChjYW5TZWVUYXJnZXQoZ2FtZU1hcFByb3h5LCBwbGF5ZXJDaGFyYWN0ZXJQcm94eSwgdGFyZ2V0Q2hhcmFjdGVyUHJveHkpKSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlJFU09MVkVfUkFOR0VEX0FUVEFDSywgXCJwbGF5ZXJcIiwgaWQpO1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TVEFSVF9DT01CQVQsIGlkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNIT1dfVE9BU1RfTUVTU0FHRSwgXCJObyBsaW5lIG9mIHNpZ2h0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRBY3Rpb24gPT09ICdhdHRhY2snKSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX0NIQVJBQ1RFUl9BTkRfQVRUQUNLLCBpZCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX0NIQVJBQ1RFUl9BTkRfVEFMSywgaWQpO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5DT01CQVQpIHtcbiAgICAgICAgY29uc3QgY29tYmF0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShDb21iYXRQcm94eS5OQU1FKTtcbiAgICAgICAgaWYgKCFjb21iYXRQcm94eSB8fCBjb21iYXRQcm94eS5hY3RpdmVQYXJ0aWNpcGFudCAhPT0gXCJwbGF5ZXJcIikge1xuICAgICAgICAgICAgLy8gbm90IHlvdXIgdHVyblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBsYXllckNoYXJhY3RlclByb3h5LmF2YWlsYWJsZUFjdGlvbnMgPD0gMCkge1xuICAgICAgICAgICAgLy8gb3V0IG9mIGFjdGlvbnNcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIFwiT3V0IG9mIGFjdGlvbnNcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2VhcG9uQ2F0ZWdvcnkgPT09IFwicmFuZ2VkXCIpIHtcbiAgICAgICAgICAgIGlmIChjYW5TZWVUYXJnZXQoZ2FtZU1hcFByb3h5LCBwbGF5ZXJDaGFyYWN0ZXJQcm94eSwgdGFyZ2V0Q2hhcmFjdGVyUHJveHkpKSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlJFU09MVkVfUkFOR0VEX0FUVEFDSywgXCJwbGF5ZXJcIiwgaWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFLCBcIk5vIGxpbmUgb2Ygc2lnaHRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWlzVGFyZ2V0QWRqYWNlbnQocGxheWVyQ2hhcmFjdGVyUHJveHksIHRhcmdldENoYXJhY3RlclByb3h5KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGhUb1RhcmdldCA9IG5hdmlnYXRlVG9DaGFyYWN0ZXIocGxheWVyQ2hhcmFjdGVyUHJveHksIHRhcmdldENoYXJhY3RlclByb3h5KTtcbiAgICAgICAgICAgICAgICAvLyBwYXRoIGxlbmd0aCBpbmNsdWRlcyBjdXJyZW50IG5vZGUsIHNvIGRlZHVjdCBvbiB0byB3b3JrIG91dCBhY3R1YWwgbW92ZWFibGUgZGlzdGFuY2VcbiAgICAgICAgICAgICAgICBpZiAocGF0aFRvVGFyZ2V0ICYmIHBhdGhUb1RhcmdldC5sZW5ndGggLSAxIDw9IHBsYXllckNoYXJhY3RlclByb3h5LnZvLmF2YWlsYWJsZU1vdmVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lU3RhdGVQcm94eS5jdXJyZW50QWN0aW9uID09PSAnYXR0YWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHdlYXBvbiB0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTU9WRV9BTE9OR19QQVRIX0FORF9BVFRBQ0ssIFwicGxheWVyXCIsIHRhcmdldENoYXJhY3RlclByb3h5LmlkLCBwYXRoVG9UYXJnZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ09NQkFUX05BVklHQVRFX1RPX05PREUsIFwicGxheWVyXCIsIHBhdGhUb1RhcmdldC5zaGlmdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIFwiQ2Fubm90IHJlYWNoIHRhcmdldFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRBY3Rpb24gPT09ICdhdHRhY2snKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRBY3Rpb24gPT09ICdhdHRhY2snKSB7XG4gICAgICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5SRVNPTFZFX0FUVEFDSywgcGxheWVyQ2hhcmFjdGVyUHJveHkuaWQsIHRhcmdldENoYXJhY3RlclByb3h5LmlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5hdmlnYXRlVG9DaGFyYWN0ZXIocGxheWVyQ2hhcmFjdGVyUHJveHksIHRhcmdldENoYXJhY3RlclByb3h5KSB7XG4gICAgY29uc3QgY29ubmVjdGVkTm9kZXMgPSB0YXJnZXRDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZS5jb25uZWN0ZWROb2RlcztcblxuICAgIGNvbnN0IHVub2NjdXBpZWROb2RlcyA9IGNvbm5lY3RlZE5vZGVzLmZpbHRlcihub2RlID0+ICFub2RlLm9jY3VwaWVkKTtcbiAgICBpZiAodW5vY2N1cGllZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgcGxheWVyTm9kZSA9IHBsYXllckNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlO1xuXG4gICAgICAgIGxldCBzaG9ydGVzdFBhdGggPSBBc3Rhci5jYWxjdWxhdGVQYXRoKHBsYXllck5vZGUsIHVub2NjdXBpZWROb2Rlc1swXSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB1bm9jY3VwaWVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG90aGVyUGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgocGxheWVyTm9kZSwgdW5vY2N1cGllZE5vZGVzW2ldKTtcbiAgICAgICAgICAgIGlmIChvdGhlclBhdGgubGVuZ3RoIDwgc2hvcnRlc3RQYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNob3J0ZXN0UGF0aCA9IG90aGVyUGF0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzaG9ydGVzdFBhdGg7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzVGFyZ2V0QWRqYWNlbnQocGxheWVyQ2hhcmFjdGVyUHJveHksIHRhcmdldENoYXJhY3RlclByb3h5KSB7XG4gICAgY29uc3QgdGFyZ2V0Q3VycnJlbnROb2RlID0gdGFyZ2V0Q2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGU7XG4gICAgY29uc3QgY29ubmVjdGVkTm9kZXMgPSBwbGF5ZXJDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZS5jb25uZWN0ZWROb2RlcztcbiAgICByZXR1cm4gY29ubmVjdGVkTm9kZXMuc29tZShuID0+IG4uZXF1YWxzKHRhcmdldEN1cnJyZW50Tm9kZSkpO1xufVxuXG5mdW5jdGlvbiBjYW5TZWVUYXJnZXQoZ2FtZU1hcFByb3h5LCBwbGF5ZXJDaGFyYWN0ZXJQcm94eSwgdGFyZ2V0Q2hhcmFjdGVyUHJveHkpIHtcbiAgICBjb25zdCBwbGF5ZXJQb2ludCA9IGNlbnRlclBvaW50Q2hhcmFjdGVyUHJveHkocGxheWVyQ2hhcmFjdGVyUHJveHkpO1xuICAgIGNvbnN0IHRhcmdldFBvaW50ID0gY2VudGVyUG9pbnRDaGFyYWN0ZXJQcm94eSh0YXJnZXRDaGFyYWN0ZXJQcm94eSk7XG5cbiAgICByZXR1cm4gIWdhbWVNYXBQcm94eS5yYXlJbnRlcnNlY3RzV2FsbChwbGF5ZXJQb2ludCwgdGFyZ2V0UG9pbnQpO1xufVxuIiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSBcIkBrb3JlZXovcHVyZS1tdmNcIjtcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IFdlYXBvbnNQcm94eSB9IGZyb20gJy4uL21vZGVsL3dlYXBvbnMvV2VhcG9uc1Byb3h5JztcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IFdlYXBvblR5cGVzIH0gZnJvbSAnLi4vZGF0YS9XZWFwb25UeXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQXR0YWNrQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgYXR0YWNrZXJJZCA9IGFyZ3NbMF07XG4gICAgY29uc3QgYXR0YWNrZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgYXR0YWNrZXJJZCk7XG4gICAgY29uc3QgZGVmZW5kZXJJZCA9IGFyZ3NbMV07XG4gICAgY29uc3QgZGVmZW5kZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgZGVmZW5kZXJJZCk7XG5cbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBUkFDVEVSX0xPT0tfQVQgKyBhdHRhY2tlcklkLCBkZWZlbmRlclByb3h5LmN1cnJlbnROb2RlKTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBUkFDVEVSX0xPT0tfQVQgKyBkZWZlbmRlcklkLCBhdHRhY2tlclByb3h5LmN1cnJlbnROb2RlKTtcblxuICAgIGNvbnN0IGF0dGFja2VyUm9sbCA9IHJvbGxBdHRhY2tTa2lsbChhdHRhY2tlclByb3h5LnNraWxsKTtcbiAgICBjb25zdCBkZWZlbmRlclJvbGwgPSByb2xsQXR0YWNrU2tpbGwoZGVmZW5kZXJQcm94eS5za2lsbCk7XG5cbiAgICBjb25zdCB3ZWFwb25zUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShXZWFwb25zUHJveHkuTkFNRSk7XG5cbiAgICAvLyBSZWR1Y2UgYWN0aW9uc1xuICAgIGF0dGFja2VyUHJveHkuYXZhaWxhYmxlQWN0aW9ucyAtPSAxO1xuXG4gICAgLy8gRGV0ZXJtaW5lIHdpbm5lclxuICAgIGlmIChhdHRhY2tlclJvbGwgPT09IGRlZmVuZGVyUm9sbCkge1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRElTUExBWV9BVFRBQ0sgKyBhdHRhY2tlcklkKTtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfQVRUQUNLICsgZGVmZW5kZXJJZCk7XG5cbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNIT1dfVE9BU1RfTUVTU0FHRSwgYEF0dGFjayB0aWVkKCR7YXR0YWNrZXJSb2xsfS8ke2RlZmVuZGVyUm9sbH0pYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGF0dGFja2VyUm9sbCA+IGRlZmVuZGVyUm9sbCkge1xuICAgICAgICAgICAgLy8gQXR0YWNrZXIgd2luc1xuICAgICAgICAgICAgY29uc3QgZGFtYWdlVGllciA9IGRldGVybWluZURhbWFnZVRpZXIoYXR0YWNrZXJSb2xsLCBkZWZlbmRlclJvbGwpO1xuICAgICAgICAgICAgY29uc3QgZGFtYWdlID0gd2VhcG9uc1Byb3h5LmdldERhbWFnZShhdHRhY2tlclByb3h5LmVxdWlwcGVkV2VhcG9uLCBkYW1hZ2VUaWVyKTtcbiAgICAgICAgICAgIGRlZmVuZGVyUHJveHkuYXBwbHlEYW1hZ2UoZGFtYWdlKTtcblxuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfQVRUQUNLICsgYXR0YWNrZXJJZCk7XG5cbiAgICAgICAgICAgIGlmIChkZWZlbmRlclByb3h5LmlzRGVhZCkge1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5LSUxMX0dBTUVfQ0hBUkFDVEVSLCBkZWZlbmRlcklkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfSElUICsgZGVmZW5kZXJJZCk7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNIT1dfVE9BU1RfTUVTU0FHRSwgYCR7YXR0YWNrZXJJZH0gZGFtYWdlcyAke2RlZmVuZGVySWR9IGZvciAke2RhbWFnZX1gKTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB3ZWFwb25DYXRlZ29yeSA9IHdlYXBvbnNQcm94eS5nZXRXZWFwb25DYXRlZ29yeShkZWZlbmRlclByb3h5LmVxdWlwcGVkV2VhcG9uKTtcbiAgICAgICAgICAgIGNvbnN0IGhhc01lbGVlV2VhcG9uID0gd2VhcG9uQ2F0ZWdvcnkgPT09IFwibWVsZWVcIjtcblxuICAgICAgICAgICAgLy8gRGVmZW5kZXIgd2luc1xuICAgICAgICAgICAgY29uc3QgZGFtYWdlVGllciA9IGRldGVybWluZURhbWFnZVRpZXIoZGVmZW5kZXJSb2xsLCBhdHRhY2tlclJvbGwpO1xuICAgICAgICAgICAgY29uc3Qgd2VhcG9uID0gKGhhc01lbGVlV2VhcG9uKSA/IGRlZmVuZGVyUHJveHkuZXF1aXBwZWRXZWFwb24gOiBXZWFwb25UeXBlcy5VTkFSTUVEO1xuICAgICAgICAgICAgY29uc3QgZGFtYWdlID0gd2VhcG9uc1Byb3h5LmdldERhbWFnZSh3ZWFwb24sIGRhbWFnZVRpZXIpO1xuICAgICAgICAgICAgYXR0YWNrZXJQcm94eS5hcHBseURhbWFnZShkYW1hZ2UpO1xuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNIT1dfVE9BU1RfTUVTU0FHRSwgYCR7ZGVmZW5kZXJJZH0gZGFtYWdlcyAke2F0dGFja2VySWR9IGZvciAke2RhbWFnZX1gKTtcblxuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfQVRUQUNLICsgZGVmZW5kZXJJZCk7XG5cbiAgICAgICAgICAgIGlmIChhdHRhY2tlclByb3h5LmlzRGVhZCkge1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5LSUxMX0dBTUVfQ0hBUkFDVEVSLCBhdHRhY2tlcklkKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRElTUExBWV9ISVQgKyBhdHRhY2tlcklkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29tYmF0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShDb21iYXRQcm94eS5OQU1FKTtcbiAgICBpZiAoY29tYmF0UHJveHkgJiYgY29tYmF0UHJveHkuYWN0aXZlUGFydGljaXBhbnQgIT09IFwicGxheWVyXCIpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuREVURVJNSU5FX05FWFRfRU5FTVlfQUNUSU9OLCBhdHRhY2tlcklkKTtcblxuICAgICAgICB9LCAxNTAwKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRldGVybWluZURhbWFnZVRpZXIoaGlnaERhbWFnZSwgbG93RGFtYWdlKSB7XG4gICAgcmV0dXJuIGhpZ2hEYW1hZ2UgLSBsb3dEYW1hZ2U7XG59XG5cbmZ1bmN0aW9uIHJvbGxBdHRhY2tTa2lsbChza2lsbCkge1xuICAgIHJldHVybiBza2lsbCArIHJvbGxEaWNlKCkgKyByb2xsRGljZSgpO1xufVxuXG5mdW5jdGlvbiByb2xsRGljZSgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogNik7XG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJNZWRpYXRvciB9IGZyb20gJy4uL3ZpZXcvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyTWVkaWF0b3InO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuXG5leHBvcnQgZnVuY3Rpb24gbW92ZUFsb25nUGF0aEFuZEF0dGFja0NvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGNvbnN0IGNoYXJhY3RlcklkID0gYXJnc1swXTtcbiAgICBjb25zdCB0YXJnZXRJZCA9IGFyZ3NbMV07XG4gICAgY29uc3QgcGF0aCA9IGFyZ3NbMl07XG5cbiAgICBjb25zdCBjaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgY2hhcmFjdGVySWQpO1xuICAgIGNoYXJhY3RlclByb3h5LnVzZU1vdmVtZW50KHBhdGgubGVuZ3RoIC0gMSk7XG4gICAgY29uc3QgY2hhcmFjdGVyTWVkaWF0b3IgPSBmYWNhZGUucmV0cmlldmVNZWRpYXRvcihHYW1lQ2hhcmFjdGVyTWVkaWF0b3IuTkFNRSArIGNoYXJhY3RlcklkKTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuSElERV9XQUxLQUJMRV9BUkVBKTtcblxuICAgIGNvbnN0IGZpbmlzaE1vdmVQcm9taXNlID0gY2hhcmFjdGVyTWVkaWF0b3IuaGFuZGxlTmF2aWdhdGVBbG9uZ1BhdGhXaXRoUHJvbWlzZShwYXRoKTtcbiAgICBmaW5pc2hNb3ZlUHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlJFU09MVkVfQVRUQUNLLCBjaGFyYWN0ZXJJZCwgdGFyZ2V0SWQpO1xuXG4gICAgfSk7XG59XG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuaW1wb3J0IHsgQ29tYmF0UHJveHkgfSBmcm9tICcuLi9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHknO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBraWxsR2FtZUNoYXJhY3RlckNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGNvbnN0IGNoYXJhY3RlcklkID0gYXJnc1swXTtcbiAgICBjb25zb2xlLmxvZyhgS2lsbCBjaGFyYWN0ZXI6OiAke2NoYXJhY3RlcklkfWApO1xuICAgIGNvbnN0IGNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBjaGFyYWN0ZXJJZCk7XG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfRkxPQVRJTkdfU1RBVFVTLCBcImRlYXRoXCIsIGNoYXJhY3RlclByb3h5KTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRElTUExBWV9ERUFUSCArIGNoYXJhY3RlcklkKTtcblxuXG4gICAgaWYgKGNoYXJhY3RlclByb3h5KSB7XG4gICAgICAgIGNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlLm9jY3VwaWVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgY29tYmF0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShDb21iYXRQcm94eS5OQU1FKTtcbiAgICBpZiAoY29tYmF0UHJveHkpIHtcbiAgICAgICAgY29tYmF0UHJveHkucmVtb3ZlQ2hhcmFjdGVyRnJvbUNvbWJhdChjaGFyYWN0ZXJJZCk7XG4gICAgfVxuXG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IEdhbWVTdGF0ZVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVByb3h5JztcbmltcG9ydCB7IGdhbWVwbGF5TW9kZVR5cGVzIH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVZPJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGVuZENvbWJhdENvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBsb3NpbmdUZWFtID0gYXJnc1swXTtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGlmIChmYWNhZGUuaGFzTWVkaWF0b3IoQ29tYmF0UHJveHkuTkFNRSkpIHtcbiAgICAgICAgZmFjYWRlLnJlbW92ZU1lZGlhdG9yKENvbWJhdFByb3h5Lk5BTUUpO1xuICAgIH1cblxuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ISURFX1dBTEtBQkxFX0FSRUEpO1xuXG5cbiAgICBjb25zdCBnYW1lU3RhdGVQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVTdGF0ZVByb3h5Lk5BTUUpO1xuXG4gICAgaWYgKGxvc2luZ1RlYW0gPT09ICdwbGF5ZXJfdGVhbScpIHtcbiAgICAgICAgZ2FtZVN0YXRlUHJveHkudXBkYXRlR2FtZVN0YXRlVHlwZShnYW1lcGxheU1vZGVUeXBlcy5HQU1FX09WRVIpO1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFLCBgR2FtZSBPdmVyYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2FtZVN0YXRlUHJveHkudXBkYXRlR2FtZVN0YXRlVHlwZShnYW1lcGxheU1vZGVUeXBlcy5FWFBMT1JBVElPTik7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIGBWaWN0b3J5YCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZU5vZGUgfSBmcm9tICcuLi8uLi9jb3JlL0Jhc2VOb2RlJztcbmltcG9ydCB7IEJlaGF2aW91clN0YXR1cyB9IGZyb20gJy4uLy4uL2NvcmUvQmVoYXZpb3VyU3RhdHVzJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGNsYXNzIFJhbmdlQXR0YWNrVGFyZ2V0IGV4dGVuZHMgQmFzZU5vZGUge1xuICAgIHRpY2sodGljaykge1xuICAgICAgICBjb25zdCBmYWNhZGUgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdmYWNhZGUnLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBjb25zdCBhdHRhY2tlcklkID0gdGljay5ibGFja2JvYXJkLmdldCgnY2hhcmFjdGVySWQnLCB0aWNrLnRyZWUuaWQsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgZGVmZW5kZXJJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ3RhcmdldCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuUkVTT0xWRV9SQU5HRURfQVRUQUNLLCBhdHRhY2tlcklkLCBkZWZlbmRlcklkKTtcbiAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5TVUNDRVNTO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VOb2RlIH0gZnJvbSAnLi4vLi4vY29yZS9CYXNlTm9kZSc7XG5pbXBvcnQgeyBCZWhhdmlvdXJTdGF0dXMgfSBmcm9tICcuLi8uLi9jb3JlL0JlaGF2aW91clN0YXR1cyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhcic7XG5cbmV4cG9ydCBjbGFzcyBNYWludGFpbkRpc3RhbmNlRnJvbVRhcmdldCBleHRlbmRzIEJhc2VOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihtaW5EaXN0YW5jZSwgbWF4RGlzdGFuY2UpIHtcbiAgICAgICAgc3VwZXIoW10pO1xuICAgICAgICB0aGlzLm1pbkRpc3RhbmNlID0gbWluRGlzdGFuY2U7XG4gICAgICAgIHRoaXMubWF4RGlzdGFuY2UgPSBtYXhEaXN0YW5jZTtcbiAgICB9XG5cbiAgICB0aWNrKHRpY2spIHtcbiAgICAgICAgY29uc3QgZmFjYWRlID0gdGljay5ibGFja2JvYXJkLmdldCgnZmFjYWRlJywgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVySWQgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdjaGFyYWN0ZXJJZCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuICAgICAgICBjb25zdCB0YXJnZXRJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ3RhcmdldCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IGNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBjaGFyYWN0ZXJJZCk7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlckN1cnJlbnROb2RlID0gY2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGU7XG4gICAgICAgIGNvbnN0IHRhcmdldFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0YXJnZXRJZCk7XG4gICAgICAgIGNvbnN0IHRhcmdldEN1cnJlbnROb2RlID0gdGFyZ2V0UHJveHkuY3VycmVudE5vZGU7XG5cbiAgICAgICAgY29uc3QgbWluRGlzdGFuY2VTcXJ0ID0gTWF0aC5wb3codGhpcy5taW5EaXN0YW5jZSwgMik7XG4gICAgICAgIGNvbnN0IG1heERpc3RhbmNlU3FydCA9IE1hdGgucG93KHRoaXMubWF4RGlzdGFuY2UsIDIpO1xuXG4gICAgICAgIGNvbnN0IG1vdmVQb2ludHNBdmFpbGFibGUgPSBjaGFyYWN0ZXJQcm94eS5hdmFpbGFibGVNb3ZlbWVudDtcbiAgICAgICAgY2hhcmFjdGVyUHJveHkuYXZhaWxhYmxlTW92ZW1lbnQgPSAwO1xuXG4gICAgICAgIC8vIHVzZSB1cCBtb3ZlbWVudCBwb2ludHNcbiAgICAgICAgY29uc3QgZGlzdGFuY2VUb1RhcmdldCA9IGRpc3RhbmNlU3FydCh0YXJnZXRDdXJyZW50Tm9kZSwgY2hhcmFjdGVyQ3VycmVudE5vZGUpO1xuICAgICAgICBpZiAoZGlzdGFuY2VUb1RhcmdldCA+PSBtaW5EaXN0YW5jZVNxcnQgJiYgZGlzdGFuY2VUb1RhcmdldCA8PSBtYXhEaXN0YW5jZVNxcnQpIHtcbiAgICAgICAgICAgIC8vIGFscmVhZHkgd2l0aGluIHJhbmdlLCBnZXQgb24gd2l0aCBpdFxuICAgICAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5GQUlMVVJFO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbW92ZWFibGVOb2RlcyA9IEFzdGFyLmJyZWFkdGhGaXJzdFNlYXJjaChjaGFyYWN0ZXJDdXJyZW50Tm9kZSwgbW92ZVBvaW50c0F2YWlsYWJsZSk7XG4gICAgICAgICAgICBpZiAobW92ZWFibGVOb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlVG9UYXJnZXQgPCBtaW5EaXN0YW5jZVNxcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVG9vIGNsb3NlXG4gICAgICAgICAgICAgICAgICAgIGxldCBub2RlID0gbW92ZWFibGVOb2Rlcy5yZWR1Y2UoKGEsIGIpID0+IGRpc3RhbmNlU3FydCh0YXJnZXRDdXJyZW50Tm9kZSwgYSkgPiBkaXN0YW5jZVNxcnQodGFyZ2V0Q3VycmVudE5vZGUsIGIpID8gYSA6IGIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gQXN0YXIuY2FsY3VsYXRlUGF0aChjaGFyYWN0ZXJDdXJyZW50Tm9kZSwgbm9kZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGggJiYgcGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgZW5kIHBvaW50IGluIGFkamFjZW50IHRvIHRhcmdldFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5BVklHQVRFX0FMT05HX1BBVEggKyBjaGFyYWN0ZXJJZCwgcGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBUb28gZmFyIGF3YXlcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGUgPSBtb3ZlYWJsZU5vZGVzLnJlZHVjZSgoYSwgYikgPT4gZGlzdGFuY2VTcXJ0KHRhcmdldEN1cnJlbnROb2RlLCBhKSA8IGRpc3RhbmNlU3FydCh0YXJnZXRDdXJyZW50Tm9kZSwgYikgPyBhIDogYik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSBBc3Rhci5jYWxjdWxhdGVQYXRoKGNoYXJhY3RlckN1cnJlbnROb2RlLCBub2RlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocGF0aCAmJiBwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBlbmQgcG9pbnQgaW4gYWRqYWNlbnQgdG8gdGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkFWSUdBVEVfQUxPTkdfUEFUSCArIGNoYXJhY3RlcklkLCBwYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBCZWhhdmlvdXJTdGF0dXMuU1VDQ0VTUztcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLkZBSUxVUkU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZGlzdGFuY2VTcXJ0KHAxLCBwMikge1xuICAgIHJldHVybiBNYXRoLnBvdyhwMi54IC0gcDEueCwgMikgKyBNYXRoLnBvdyhwMi55IC0gcDEueSwgMikgKyBNYXRoLnBvdyhwMi56IC0gcDEueiwgMik7XG59XG4iLCJpbXBvcnQgeyBCYXNlTm9kZSB9IGZyb20gJy4uLy4uL2NvcmUvQmFzZU5vZGUnO1xuaW1wb3J0IHsgQmVoYXZpb3VyU3RhdHVzIH0gZnJvbSAnLi4vLi4vY29yZS9CZWhhdmlvdXJTdGF0dXMnO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuXG5leHBvcnQgY2xhc3MgUGlja05leHRBY3Rpb24gZXh0ZW5kcyBCYXNlTm9kZSB7XG4gICAgdGljayh0aWNrKSB7XG4gICAgICAgIGNvbnN0IGZhY2FkZSA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ2ZhY2FkZScsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlcklkID0gdGljay5ibGFja2JvYXJkLmdldCgnY2hhcmFjdGVySWQnLCB0aWNrLnRyZWUuaWQsIGZhbHNlKTtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ERVRFUk1JTkVfTkVYVF9FTkVNWV9BQ1RJT04sIGNoYXJhY3RlcklkKTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlTm9kZSB9IGZyb20gJy4uLy4uL2NvcmUvQmFzZU5vZGUnO1xuaW1wb3J0IHsgQmVoYXZpb3VyU3RhdHVzIH0gZnJvbSAnLi4vLi4vY29yZS9CZWhhdmlvdXJTdGF0dXMnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuaW1wb3J0IHsgR2FtZU1hcFByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZU1hcC9HYW1lTWFwUHJveHknO1xuaW1wb3J0IHsgY2VudGVyUG9pbnRDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL0NoYXJhY3RlckNlbnRlclBvaW50JztcblxuZXhwb3J0IGNsYXNzIENhblNlZVRhcmdldCBleHRlbmRzIEJhc2VOb2RlIHtcbiAgICB0aWNrKHRpY2spIHtcbiAgICAgICAgY29uc3QgZmFjYWRlID0gdGljay5ibGFja2JvYXJkLmdldCgnZmFjYWRlJywgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVySWQgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdjaGFyYWN0ZXJJZCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuICAgICAgICBjb25zdCB0YXJnZXRJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ3RhcmdldCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IGNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBjaGFyYWN0ZXJJZCk7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlckN1cnJlbnROb2RlID0gY2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGU7XG4gICAgICAgIC8vIGZpbmQgZGVzaXJlZCBtb3ZlIHBvc2l0aW9uXG4gICAgICAgIGNvbnN0IHRhcmdldFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0YXJnZXRJZCk7XG4gICAgICAgIGNvbnN0IHRhcmdldE5vZGUgPSB0YXJnZXRQcm94eS5jdXJyZW50Tm9kZTtcblxuICAgICAgICBjb25zdCBnYW1lTWFwUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lTWFwUHJveHkuTkFNRSk7XG5cbiAgICAgICAgLy8gTG9vayB0byB0aGUgY2VudGVyIG9mIGVhY2ggY2hhcmFjdGVyXG4gICAgICAgIGNvbnN0IGZyb21Qb3MgPSBjZW50ZXJQb2ludENoYXJhY3RlclByb3h5KGNoYXJhY3RlclByb3h5KTtcbiAgICAgICAgY29uc3QgdG9Qb3MgPSBjZW50ZXJQb2ludENoYXJhY3RlclByb3h5KHRhcmdldFByb3h5KTtcblxuICAgICAgICBjb25zdCBjYW5TZWVUYXJnZXQgPSAhZ2FtZU1hcFByb3h5LnJheUludGVyc2VjdHNXYWxsKGZyb21Qb3MsIHRvUG9zKTtcbiAgICAgICAgaWYgKGNhblNlZVRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5TVUNDRVNTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIEJlaGF2aW91clN0YXR1cy5GQUlMVVJFO1xuXG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgQmFzZU5vZGUgfSBmcm9tICcuLi8uLi9jb3JlL0Jhc2VOb2RlJztcbmltcG9ydCB7IEJlaGF2aW91clN0YXR1cyB9IGZyb20gJy4uLy4uL2NvcmUvQmVoYXZpb3VyU3RhdHVzJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcbmltcG9ydCB7IEdhbWVNYXBQcm94eSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVNYXAvR2FtZU1hcFByb3h5JztcbmltcG9ydCB7IGNlbnRlclBvaW50Q2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi8uLi8uLi91dGlscy9DaGFyYWN0ZXJDZW50ZXJQb2ludCc7XG5cbmV4cG9ydCBjbGFzcyBNb3ZlVG93YXJkc1RhcmdldFVudGlsVmlzaWJsZSBleHRlbmRzIEJhc2VOb2RlIHtcbiAgICB0aWNrKHRpY2spIHtcbiAgICAgICAgY29uc3QgZmFjYWRlID0gdGljay5ibGFja2JvYXJkLmdldCgnZmFjYWRlJywgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVySWQgPSB0aWNrLmJsYWNrYm9hcmQuZ2V0KCdjaGFyYWN0ZXJJZCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuICAgICAgICBjb25zdCB0YXJnZXRJZCA9IHRpY2suYmxhY2tib2FyZC5nZXQoJ3RhcmdldCcsIHRpY2sudHJlZS5pZCwgZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IGNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBjaGFyYWN0ZXJJZCk7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlckN1cnJlbnROb2RlID0gY2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGU7XG4gICAgICAgIGNvbnN0IHRhcmdldFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0YXJnZXRJZCk7XG4gICAgICAgIGNvbnN0IHRhcmdldE5vZGUgPSB0YXJnZXRQcm94eS5jdXJyZW50Tm9kZTtcbiAgICAgICAgY29uc3QgY29ubmVjdGVkTm9kZXMgPSB0YXJnZXROb2RlLmNvbm5lY3RlZE5vZGVzO1xuXG5cbiAgICAgICAgY29uc3QgZ2FtZU1hcFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZU1hcFByb3h5Lk5BTUUpO1xuXG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY29ubmVjdGVkTm9kZXMuZmlsdGVyKG5vZGUgPT4gIW5vZGUub2NjdXBpZWQpO1xuXG4gICAgICAgIC8vIENoZWNrIHRoZXJlIGlzIGEgbm9kZSB0byBtb3ZlIHRvIFxuICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIEZpbmQgbmVhcmVzdCBub2RlXG4gICAgICAgICAgICBsZXQgbm9kZSA9IHJlc3VsdC5yZWR1Y2UoKGEsIGIpID0+IGRpc3RhbmNlU3FydChjaGFyYWN0ZXJDdXJyZW50Tm9kZSwgYSkgPCBkaXN0YW5jZVNxcnQoY2hhcmFjdGVyQ3VycmVudE5vZGUsIGIpID8gYSA6IGIpO1xuXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gQXN0YXIuY2FsY3VsYXRlUGF0aChjaGFyYWN0ZXJDdXJyZW50Tm9kZSwgbm9kZSk7XG4gICAgICAgICAgICBpZiAocGF0aCAmJiBwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyB0cmltIG1vdmVtZW50XG4gICAgICAgICAgICAgICAgY29uc3Qgdm8gPSBjaGFyYWN0ZXJQcm94eS52bztcbiAgICAgICAgICAgICAgICB3aGlsZSAocGF0aC5sZW5ndGggPiB2by5hdmFpbGFibGVNb3ZlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBwYXRoLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgdG9Qb3MgPSBjZW50ZXJQb2ludENoYXJhY3RlclByb3h5KHRhcmdldFByb3h5KTtcblxuICAgICAgICAgICAgICAgIC8vIEZvbGxvdyBwYXRoIHRvIHNlZSBpZiB0YXJnZXQgaXMgdmlzaWJsZSBmcm9tIGFueSBwb2ludFxuICAgICAgICAgICAgICAgIGxldCBkZWxldGVDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aE5vZGUgPSBwYXRoW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyb21Qb3MgPSBuZXcgcGMuVmVjMyhwYXRoTm9kZS54LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aE5vZGUueSArIGNoYXJhY3RlclByb3h5LmhlaWdodCAqIDAuNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhOb2RlLnopO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhblNlZVRhcmdldCA9ICFnYW1lTWFwUHJveHkucmF5SW50ZXJzZWN0c1dhbGwoZnJvbVBvcywgdG9Qb3MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FuU2VlVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVDb3VudCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFRyaW0gdG8gcG9pbnQgb2YgdmlzaWJpbGl0eVxuICAgICAgICAgICAgICAgIHBhdGguc3BsaWNlKDAsIGRlbGV0ZUNvdW50KTtcblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBlbmQgcG9pbnQgaW4gYWRqYWNlbnQgdG8gdGFyZ2V0XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5BVklHQVRFX0FMT05HX1BBVEggKyBjaGFyYWN0ZXJJZCwgcGF0aCk7XG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUgPSBub2RlO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1c2UgdXAgbW92ZW1lbnQgcG9pbnRzXG4gICAgICAgIGNoYXJhY3RlclByb3h5LmF2YWlsYWJsZU1vdmVtZW50ID0gMDtcblxuICAgICAgICByZXR1cm4gQmVoYXZpb3VyU3RhdHVzLlNVQ0NFU1M7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkaXN0YW5jZVNxcnQocDEsIHAyKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHAyLnggLSBwMS54LCAyKSArIE1hdGgucG93KHAyLnkgLSBwMS55LCAyKTtcbn1cbiIsImltcG9ydCB7IE1hc3Rlck5vZGUgfSBmcm9tICcuLi9jb3JlL01hc3Rlck5vZGUnO1xuaW1wb3J0IHsgQ2hhcmFjdGVyQ29tbWFuZFRyZWUgfSBmcm9tICcuL0NoYXJhY3RlckNvbW1hbmRUcmVlJztcbmltcG9ydCB7IFByaW9yaXR5IH0gZnJvbSAnLi4vY29yZS9Qcmlvcml0eSc7XG5pbXBvcnQgeyBTZXRQbGF5ZXJBc1RhcmdldCB9IGZyb20gJy4uL2JlaGF2aW91cnMvYWN0aW9ucy9TZXRQbGF5ZXJBc1RhcmdldCc7XG5pbXBvcnQgeyBFbmRDb21iYXRUdXJuIH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9hY3Rpb25zL0VuZENvbWJhdFR1cm4nO1xuaW1wb3J0IHsgTWVtU2VxdWVuY2UgfSBmcm9tICcuLi9jb3JlL01lbVNlcXVlbmNlJztcbmltcG9ydCB7IEludmVydGVyIH0gZnJvbSAnLi4vY29yZS9kZWNvcmF0b3JzL0ludmVydGVyJztcbmltcG9ydCB7IElzVGFyZ2V0RGVhZCB9IGZyb20gJy4uL2JlaGF2aW91cnMvY29uZGl0aW9ucy9Jc1RhcmdldERlYWQnO1xuaW1wb3J0IHsgSXNEZWFkIH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9jb25kaXRpb25zL0lzRGVhZCc7XG5pbXBvcnQgeyBIYXNNb3ZlbWVudFJlbWFpbmluZyB9IGZyb20gJy4uL2JlaGF2aW91cnMvY29uZGl0aW9ucy9IYXNNb3ZlbWVudFJlbWFpbmluZyc7XG5pbXBvcnQgeyBIYXNBY3Rpb25zUmVtYWluaW5nIH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9jb25kaXRpb25zL0hhc0FjdGlvbnNSZW1haW5pbmcnO1xuaW1wb3J0IHsgUmFuZ2VBdHRhY2tUYXJnZXQgfSBmcm9tICcuLi9iZWhhdmlvdXJzL2FjdGlvbnMvUmFuZ2VBdHRhY2tUYXJnZXQnO1xuaW1wb3J0IHsgTWFpbnRhaW5EaXN0YW5jZUZyb21UYXJnZXQgfSBmcm9tICcuLi9iZWhhdmlvdXJzL2FjdGlvbnMvTWFpbnRhaW5EaXN0YW5jZUZyb21UYXJnZXQnO1xuaW1wb3J0IHsgUGlja05leHRBY3Rpb24gfSBmcm9tICcuLi9iZWhhdmlvdXJzL2FjdGlvbnMvUGlja05leHRBY3Rpb24nO1xuaW1wb3J0IHsgQ2FuU2VlVGFyZ2V0IH0gZnJvbSAnLi4vYmVoYXZpb3Vycy9jb25kaXRpb25zL0NhblNlZVRhcmdldCc7XG5pbXBvcnQgeyBNb3ZlVG93YXJkc1RhcmdldFVudGlsVmlzaWJsZSB9IGZyb20gJy4uL2JlaGF2aW91cnMvYWN0aW9ucy9Nb3ZlVG93YXJkc1RhcmdldFVudGlsVmlzaWJsZSc7XG5cbmV4cG9ydCBjbGFzcyBCYXNpY1JhbmdlZFRyZWUgZXh0ZW5kcyBDaGFyYWN0ZXJDb21tYW5kVHJlZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ2Jhc2ljUmFuZ2VkVHJlZScpO1xuICAgIH1cblxuICAgIGluaXRpYWxpc2UoKSB7XG4gICAgICAgIHRoaXMudHJlZS5yb290ID0gbmV3IE1hc3Rlck5vZGUoW1xuICAgICAgICAgICAgbmV3IFByaW9yaXR5KFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE1lbVNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTZXRQbGF5ZXJBc1RhcmdldCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEludmVydGVyKFtuZXcgSXNEZWFkKCldKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBJbnZlcnRlcihbbmV3IElzVGFyZ2V0RGVhZCgpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUHJpb3JpdHkoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNZW1TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBIYXNNb3ZlbWVudFJlbWFpbmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgSW52ZXJ0ZXIoW25ldyBDYW5TZWVUYXJnZXQoKV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTW92ZVRvd2FyZHNUYXJnZXRVbnRpbFZpc2libGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBNZW1TZXF1ZW5jZShbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBIYXNNb3ZlbWVudFJlbWFpbmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUHJpb3JpdHkoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1haW50YWluRGlzdGFuY2VGcm9tVGFyZ2V0KDksIDEyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQaWNrTmV4dEFjdGlvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1lbVNlcXVlbmNlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEhhc0FjdGlvbnNSZW1haW5pbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IENhblNlZVRhcmdldCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUmFuZ2VBdHRhY2tUYXJnZXQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IEVuZENvbWJhdFR1cm4oKVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICApXG4gICAgICAgIF0pO1xuICAgIH1cbn0iLCJcbmltcG9ydCB7IEJhc2ljTWVsZWVUcmVlIH0gZnJvbSAnLi4vYmVoYXZpb3VyVHJlZS90cmVlcy9CYXNpY01lbGVlVHJlZSc7XG5pbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmltcG9ydCB7IEJvdEJlaGF2aW91clR5cGVzIH0gZnJvbSAnLi4vYmVoYXZpb3VyVHJlZS9Cb3RCZWhhdmlvdXJUeXBlcyc7XG5pbXBvcnQgeyBCYXNpY1JhbmdlZFRyZWUgfSBmcm9tICcuLi9iZWhhdmlvdXJUcmVlL3RyZWVzL0Jhc2ljUmFuZ2VkVHJlZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmVFbmVteUFjdGlvbkNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuXG4gICAgY29uc3QgZW5lbXlJZCA9IGFyZ3NbMF07XG4gICAgY29uc3QgZW5lbXlQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgZW5lbXlJZCk7XG5cbiAgICBzd2l0Y2ggKGVuZW15UHJveHkuYm90QmVoYXZpb3VyKSB7XG4gICAgICAgIGNhc2UgQm90QmVoYXZpb3VyVHlwZXMuQkFTSUNfTUVMRUU6XG4gICAgICAgICAgICBjb25zdCBiYXNpY01lbGVlVHJlZSA9IG5ldyBCYXNpY01lbGVlVHJlZSgpO1xuICAgICAgICAgICAgYmFzaWNNZWxlZVRyZWUucnVuQ29tbWFuZHMoZmFjYWRlLCBlbmVteUlkKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEJvdEJlaGF2aW91clR5cGVzLkJBU0lDX1JBTkdFRDpcbiAgICAgICAgICAgIGNvbnN0IGJhc2ljUmFuZ2VkVHJlZSA9IG5ldyBCYXNpY1JhbmdlZFRyZWUoKTtcbiAgICAgICAgICAgIGJhc2ljUmFuZ2VkVHJlZS5ydW5Db21tYW5kcyhmYWNhZGUsIGVuZW15SWQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgV2VhcG9uc1Byb3h5IH0gZnJvbSAnLi4vbW9kZWwvd2VhcG9ucy9XZWFwb25zUHJveHknO1xuaW1wb3J0IHsgQ29tYmF0UHJveHkgfSBmcm9tICcuLi9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHknO1xuaW1wb3J0IHsgUHJvamVjdGlsZUNyZWF0b3JNZWRpYXRvciB9IGZyb20gJy4uL3ZpZXcvcHJvamVjdGlsZXMvUHJvamVjdGlsZUNyZWF0b3JNZWRpYXRvcic7XG5pbXBvcnQgeyBHYW1lTWFwUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lTWFwL0dhbWVNYXBQcm94eSc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlUmFuZ2VkQXR0YWNrQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG5cbiAgICAvLyBTY29yZXMgZm9yIGNvbXBhcmlzc29uXG4gICAgbGV0IGF0dGFja2VyU2NvcmUgPSAwO1xuICAgIGxldCBkZWZlbmRlclNjb3JlID0gMDtcblxuICAgIGNvbnN0IGF0dGFja2VySWQgPSBhcmdzWzBdO1xuICAgIGNvbnN0IGF0dGFja2VyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGF0dGFja2VySWQpO1xuICAgIGNvbnN0IGF0dGFja2VyTm9kZSA9IGF0dGFja2VyUHJveHkuY3VycmVudE5vZGU7XG4gICAgbGV0IGRlZmVuZGVySWQgPSBhcmdzWzFdO1xuICAgIGxldCBkZWZlbmRlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBkZWZlbmRlcklkKTtcbiAgICBjb25zdCBkZWZlbmRlck5vZGUgPSBkZWZlbmRlclByb3h5LmN1cnJlbnROb2RlO1xuXG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkNIQVJBQ1RFUl9MT09LX0FUICsgYXR0YWNrZXJJZCwgZGVmZW5kZXJQcm94eS5jdXJyZW50Tm9kZSk7XG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkNIQVJBQ1RFUl9MT09LX0FUICsgZGVmZW5kZXJJZCwgYXR0YWNrZXJQcm94eS5jdXJyZW50Tm9kZSk7XG5cbiAgICBhdHRhY2tlclNjb3JlICs9IHJvbGxBdHRhY2tTa2lsbChhdHRhY2tlclByb3h5LnNraWxsKTtcbiAgICBkZWZlbmRlclNjb3JlICs9IHJvbGxBdHRhY2tTa2lsbChkZWZlbmRlclByb3h5LnNraWxsKTtcblxuICAgIGNvbnN0IHdlYXBvbnNQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KFdlYXBvbnNQcm94eS5OQU1FKTtcbiAgICBjb25zdCBnYW1lTWFwUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lTWFwUHJveHkuTkFNRSk7XG4gICAgY29uc3QgaXNJbkNvdmVyID0gZ2FtZU1hcFByb3h5LmlzSW5Db3ZlcihcbiAgICAgICAgbmV3IHBjLlZlYzMoZGVmZW5kZXJOb2RlLngsIGRlZmVuZGVyTm9kZS55LCBkZWZlbmRlck5vZGUueiksXG4gICAgICAgIG5ldyBwYy5WZWMzKGF0dGFja2VyTm9kZS54LCBhdHRhY2tlck5vZGUueSwgYXR0YWNrZXJOb2RlLnopKTtcblxuICAgIGlmIChpc0luQ292ZXIpIHtcbiAgICAgICAgZGVmZW5kZXJTY29yZSArPSAyO1xuICAgIH1cblxuICAgIGNvbnN0IHByb2plY3RpbGVDcmVhdG9yTWVkaWF0b3IgPSBmYWNhZGUucmV0cmlldmVNZWRpYXRvcihQcm9qZWN0aWxlQ3JlYXRvck1lZGlhdG9yLk5BTUUpO1xuICAgIC8vIFRPRE86IG1ha2UgdGhpcyBtb3JlIHNvcGhpc3RpY2F0ZWRcbiAgICBjb25zdCBwcm9qZWN0aWxlT3JpZ2luID0gbmV3IHBjLlZlYzMoYXR0YWNrZXJQcm94eS5jdXJyZW50Tm9kZS54LFxuICAgICAgICBhdHRhY2tlclByb3h5LmN1cnJlbnROb2RlLnkgKyAxLCBhdHRhY2tlclByb3h5LmN1cnJlbnROb2RlLnopO1xuXG4gICAgY29uc3QgcHJvamVjdGlsZVRhcmdldCA9IG5ldyBwYy5WZWMzKGRlZmVuZGVyUHJveHkuY3VycmVudE5vZGUueCxcbiAgICAgICAgZGVmZW5kZXJQcm94eS5jdXJyZW50Tm9kZS55ICsgMSwgZGVmZW5kZXJQcm94eS5jdXJyZW50Tm9kZS56KTtcblxuICAgIC8vIFJlZHVjZSBhY3Rpb25zXG4gICAgYXR0YWNrZXJQcm94eS5hdmFpbGFibGVBY3Rpb25zIC09IDE7XG5cbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRElTUExBWV9BVFRBQ0sgKyBhdHRhY2tlcklkKTtcbiAgICBwcm9qZWN0aWxlQ3JlYXRvck1lZGlhdG9yLmNyZWF0ZVByb2plY3RpbGUoJ2Nyb3NzYm93X2JvbHQnLCBwcm9qZWN0aWxlT3JpZ2luLCBwcm9qZWN0aWxlVGFyZ2V0KVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgb3V0Y29tZVxuICAgICAgICAgICAgaWYgKGF0dGFja2VyU2NvcmUgPiBkZWZlbmRlclNjb3JlKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB0YXJnZXQgaXMgaW4gbWVsZWUgYW5kIHJvbGwgZm9yIG5ldyB0YXJnZXRcbiAgICAgICAgICAgICAgICBjb25zdCBjb21iYXRQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KENvbWJhdFByb3h5Lk5BTUUpO1xuICAgICAgICAgICAgICAgIGlmIChjb21iYXRQcm94eSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5laWdoYm91cmluZ05vZGVzID0gZGVmZW5kZXJQcm94eS5jdXJyZW50Tm9kZS5jb25uZWN0ZWROb2RlcztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9zc2libGVUYXJnZXRzID0gW2RlZmVuZGVySWRdO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFydGljaXBhbnQgb2YgY29tYmF0UHJveHkucGFydGljaXBhbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0aWNpcGFudFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBwYXJ0aWNpcGFudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcnRpY2lwYW50UHJveHkuaXNEZWFkICYmIG5laWdoYm91cmluZ05vZGVzLnNvbWUobiA9PiBuLmVxdWFscyhwYXJ0aWNpcGFudFByb3h5LmN1cnJlbnROb2RlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZVRhcmdldHMucHVzaChwYXJ0aWNpcGFudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkZWZlbmRlcklkID0gcG9zc2libGVUYXJnZXRzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlVGFyZ2V0cy5sZW5ndGgpXTtcbiAgICAgICAgICAgICAgICAgICAgZGVmZW5kZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgZGVmZW5kZXJJZCk7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAvLyBBdHRhY2tlciB3aW5zXG4gICAgICAgICAgICAgICAgY29uc3QgZGFtYWdlVGllciA9IGRldGVybWluZURhbWFnZVRpZXIoYXR0YWNrZXJTY29yZSwgZGVmZW5kZXJTY29yZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGFtYWdlID0gd2VhcG9uc1Byb3h5LmdldERhbWFnZShhdHRhY2tlclByb3h5LmVxdWlwcGVkV2VhcG9uLCBkYW1hZ2VUaWVyKTtcbiAgICAgICAgICAgICAgICBkZWZlbmRlclByb3h5LmFwcGx5RGFtYWdlKGRhbWFnZSk7XG5cblxuICAgICAgICAgICAgICAgIGlmIChkZWZlbmRlclByb3h5LmlzRGVhZCkge1xuICAgICAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuS0lMTF9HQU1FX0NIQVJBQ1RFUiwgZGVmZW5kZXJJZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfSElUICsgZGVmZW5kZXJJZCk7XG4gICAgICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIGAke2F0dGFja2VySWR9IGRhbWFnZXMgJHtkZWZlbmRlcklkfSBmb3IgJHtkYW1hZ2V9YCk7XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRGVmZW5kZXIgd2luc1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ESVNQTEFZX0ZMT0FUSU5HX1NUQVRVUywgXCJkb2RnZVwiLCBkZWZlbmRlclByb3h5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgY29tYmF0UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShDb21iYXRQcm94eS5OQU1FKTtcbiAgICAgICAgICAgIGlmIChjb21iYXRQcm94eSAmJiBjb21iYXRQcm94eS5hY3RpdmVQYXJ0aWNpcGFudCAhPT0gXCJwbGF5ZXJcIikge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuREVURVJNSU5FX05FWFRfRU5FTVlfQUNUSU9OLCBhdHRhY2tlcklkKTtcblxuICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufVxuXG5mdW5jdGlvbiBkZXRlcm1pbmVEYW1hZ2VUaWVyKGhpZ2hEYW1hZ2UsIGxvd0RhbWFnZSkge1xuICAgIHJldHVybiBoaWdoRGFtYWdlIC0gbG93RGFtYWdlO1xufVxuXG5mdW5jdGlvbiByb2xsQXR0YWNrU2tpbGwoc2tpbGwpIHtcbiAgICByZXR1cm4gc2tpbGwgKyByb2xsRGljZSgpICsgcm9sbERpY2UoKTtcbn1cblxuZnVuY3Rpb24gcm9sbERpY2UoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDYpO1xufSIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5pbXBvcnQgeyBDb21iYXRQcm94eSB9IGZyb20gJy4uL21vZGVsL2NvbWJhdC9Db21iYXRQcm94eSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVpcFdlYXBvbkNvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuXG4gICAgY29uc3QgZ2FtZVN0YXRlUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcbiAgICBpZiAoZ2FtZVN0YXRlUHJveHkuY3VycmVudE1vZGUgPT09IGdhbWVwbGF5TW9kZVR5cGVzLkNPTUJBVCkge1xuICAgICAgICBjb25zdCBjb21iYXRQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KENvbWJhdFByb3h5Lk5BTUUpO1xuICAgICAgICBpZiAoY29tYmF0UHJveHkuYWN0aXZlUGFydGljaXBhbnQgIT09IFwicGxheWVyXCIpIHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX1RPQVNUX01FU1NBR0UsIGBNdXN0IGNoYW5nZSB3ZWFwb24gb24geW91ciB0dXJuYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjaGFyYWN0ZXJJZCA9IGFyZ3NbMF07XG4gICAgY29uc3Qgd2VhcG9uID0gYXJnc1sxXTtcblxuICAgIGNvbnN0IGNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBjaGFyYWN0ZXJJZCk7XG4gICAgY2hhcmFjdGVyUHJveHkuZXF1aXBwZWRXZWFwb24gPSB3ZWFwb247XG5cbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFLCBgJHtjaGFyYWN0ZXJJZH0gZXF1aXBzICR7d2VhcG9ufWApO1xuXG59IiwiaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSAnQGtvcmVlei9wdXJlLW12Yyc7XG5pbXBvcnQgeyBHYW1lTWFwUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lTWFwL0dhbWVNYXBQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyTWVkaWF0b3IgfSBmcm9tICcuLi92aWV3L2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3Rlck1lZGlhdG9yJztcblxuZXhwb3J0IGZ1bmN0aW9uIG5hdmlnYXRlVGhyb3VnaFBvcnRhbENvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuICAgIGNvbnN0IHN0YW5kaW5nUG9zaXRpb24gPSBhcmdzWzBdO1xuICAgIGNvbnN0IGRlc3RpbmF0aW9uU2NlbmUgPSBhcmdzWzFdO1xuICAgIGNvbnN0IGRlc3RpbmF0aW9uUG9ydGFsID0gYXJnc1syXTtcblxuICAgIGNvbnN0IGdhbWVNYXBQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVNYXBQcm94eS5OQU1FKTtcbiAgICBjb25zdCBzdGFuZGluZ05vZGUgPSBnYW1lTWFwUHJveHkuZmluZE5lYXJlc3ROb2RlKHN0YW5kaW5nUG9zaXRpb24pO1xuICAgIGNvbnN0IHBsYXllck1lZGlhdG9yID0gZmFjYWRlLnJldHJpZXZlTWVkaWF0b3IoR2FtZUNoYXJhY3Rlck1lZGlhdG9yLk5BTUUgKyBcInBsYXllclwiKTtcblxuICAgIHBsYXllck1lZGlhdG9yLm1vdmVUb05vZGVXaXRoUHJvbWlzZShzdGFuZGluZ05vZGUpXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkUsIGRlc3RpbmF0aW9uU2NlbmUsIGRlc3RpbmF0aW9uUG9ydGFsKTtcbiAgICAgICAgfSk7XG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVNYXBQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvR2FtZU1hcFByb3h5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFBsYXllckNoYXJhY3RlclRvTWFwQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG5cbiAgICBjb25zdCBwb3J0YWxJZCA9IGFyZ3NbMF07XG4gICAgY29uc3QgYXBwID0gcGMuQXBwbGljYXRpb24uZ2V0QXBwbGljYXRpb24oKTtcbiAgICBjb25zdCBwbGF5ZXJDaGFyYWN0ZXJBc3NldCA9IGFwcC5hc3NldHMuZ2V0KDQwNTIzMzM2KTtcbiAgICBjb25zdCBjb250YWluZXIgPSBhcHAucm9vdC5maW5kQnlOYW1lKFwiV29ybGRPYmplY3RzXCIpO1xuICAgIGNvbnN0IHBsYXllckVudGl0eSA9IHBsYXllckNoYXJhY3RlckFzc2V0LnJlc291cmNlLmluc3RhbnRpYXRlKCk7XG4gICAgY29udGFpbmVyLmFkZENoaWxkKHBsYXllckVudGl0eSk7XG5cbiAgICBjb25zdCBtYXBQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVNYXBQcm94eS5OQU1FKTtcbiAgICBjb25zdCBwb3J0YWwgPSBtYXBQcm94eS5yZXRyaWV2ZVBvcnRhbChwb3J0YWxJZCk7XG4gICAgcGxheWVyRW50aXR5LnNldExvY2FsUG9zaXRpb24ocG9ydGFsLnN0YW5kaW5nUG9pbnQpO1xuXG5cbn0iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3Rlck1lZGlhdG9yIH0gZnJvbSAnLi4vdmlldy9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJNZWRpYXRvcic7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBuYXZpZ2F0ZVRvQ2hhcmFjdGVyQW5kVGFsa0NvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpO1xuXG4gICAgY29uc3QgdGFyZ2V0Q2hhcmFjdGVySWQgPSBhcmdzWzBdO1xuXG4gICAgY29uc3QgcGxheWVyQ2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIFwicGxheWVyXCIpO1xuICAgIGNvbnN0IHRhcmdldENoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0YXJnZXRDaGFyYWN0ZXJJZCk7XG5cbiAgICBjb25zdCBwbGF5ZXJDaGFyYWN0ZXJNZWRpYXRvciA9IGZhY2FkZS5yZXRyaWV2ZU1lZGlhdG9yKEdhbWVDaGFyYWN0ZXJNZWRpYXRvci5OQU1FICsgXCJwbGF5ZXJcIik7XG5cblxuICAgIGNvbnN0IHBhdGhUb1RhcmdldCA9IG5hdmlnYXRlVG9DaGFyYWN0ZXIocGxheWVyQ2hhcmFjdGVyUHJveHksIHRhcmdldENoYXJhY3RlclByb3h5KTtcbiAgICBpZiAocGF0aFRvVGFyZ2V0KSB7XG4gICAgICAgIHBsYXllckNoYXJhY3Rlck1lZGlhdG9yLmhhbmRsZU5hdmlnYXRlQWxvbmdQYXRoV2l0aFByb21pc2UocGF0aFRvVGFyZ2V0KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TVEFSVF9ESUFMT0dVRSwgdGFyZ2V0Q2hhcmFjdGVySWQpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5hdmlnYXRlVG9DaGFyYWN0ZXIocGxheWVyQ2hhcmFjdGVyUHJveHksIHRhcmdldENoYXJhY3RlclByb3h5KSB7XG4gICAgY29uc3QgY29ubmVjdGVkTm9kZXMgPSB0YXJnZXRDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZS5jb25uZWN0ZWROb2RlcztcbiAgICBjb25zdCBwbGF5ZXJOb2RlID0gcGxheWVyQ2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGU7XG5cbiAgICBjb25zdCBpc0FkamFjZW50ID0gY29ubmVjdGVkTm9kZXMuc29tZShuID0+IG4uZXF1YWxzKHBsYXllck5vZGUpKTtcblxuICAgIGlmIChpc0FkamFjZW50KSB7XG4gICAgICAgIC8vIEFscmVhZHkgdGhlcmVcbiAgICAgICAgcmV0dXJuIFtwbGF5ZXJOb2RlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB1bm9jY3VwaWVkTm9kZXMgPSBjb25uZWN0ZWROb2Rlcy5maWx0ZXIobm9kZSA9PiAhbm9kZS5vY2N1cGllZCk7XG4gICAgICAgIGlmICh1bm9jY3VwaWVkTm9kZXMubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgICBsZXQgc2hvcnRlc3RQYXRoID0gQXN0YXIuY2FsY3VsYXRlUGF0aChwbGF5ZXJOb2RlLCB1bm9jY3VwaWVkTm9kZXNbMF0pO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHVub2NjdXBpZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG90aGVyUGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgocGxheWVyTm9kZSwgdW5vY2N1cGllZE5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAoIXNob3J0ZXN0UGF0aCB8fCAob3RoZXJQYXRoICYmIG90aGVyUGF0aC5sZW5ndGggPCBzaG9ydGVzdFBhdGgubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgICAgICBzaG9ydGVzdFBhdGggPSBvdGhlclBhdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc2hvcnRlc3RQYXRoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufSIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBTdG9yeVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvc3RvcnlQcm94eS9TdG9yeVByb3h5JztcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0RGlhbG9ndWVDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBnYW1lc3RhdGVQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVTdGF0ZVByb3h5Lk5BTUUpO1xuICAgIGNvbnN0IHRhcmdldENoYXJhY3RlcklkID0gYXJnc1swXTtcblxuICAgIGNvbnN0IHN0b3J5UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShTdG9yeVByb3h5Lk5BTUUpO1xuXG4gICAgY29uc3QgcGxheWVyQ2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIFwicGxheWVyXCIpXG4gICAgY29uc3QgdGFyZ2V0Q2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHRhcmdldENoYXJhY3RlcklkKTtcbiAgICBjb25zdCBkaWFsb2d1ZVRyZWUgPSB0YXJnZXRDaGFyYWN0ZXJQcm94eS5kaWFsb2d1ZVRyZWU7XG4gICAgY29uc3Qgc3RvcnlUcmVlID0gc3RvcnlQcm94eS5zdGFydERpYWxvZ3VlVHJlZShkaWFsb2d1ZVRyZWUpO1xuXG4gICAgZ2FtZXN0YXRlUHJveHkudXBkYXRlR2FtZVN0YXRlVHlwZShnYW1lcGxheU1vZGVUeXBlcy5ESUFMT0dVRSk7XG5cbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBUkFDVEVSX0xPT0tfQVQgKyBcInBsYXllclwiLCB0YXJnZXRDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSk7XG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkNIQVJBQ1RFUl9MT09LX0FUICsgdGFyZ2V0Q2hhcmFjdGVySWQsIHBsYXllckNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlKTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19ESUFMT0dVRV9QQU5FTCk7XG5cbiAgICBjb25zdCBvcGVuaW5nU3RlcCA9IHN0b3J5UHJveHkuZ2V0Q3VycmVudE5vZGVTdGVwKCk7XG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfRElBTE9HVUVfU1RFUCwge1xuICAgICAgICB0cmVlSWQ6IGRpYWxvZ3VlVHJlZSxcbiAgICAgICAgc3RlcDogb3BlbmluZ1N0ZXBcbiAgICB9KTtcbn0iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcbmltcG9ydCB7IFN0b3J5UHJveHkgfSBmcm9tICcuLi9tb2RlbC9zdG9yeVByb3h5L1N0b3J5UHJveHknO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY29udGludWVEaWFsb2d1ZVRleHRDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBzdG9yeVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoU3RvcnlQcm94eS5OQU1FKTtcbiAgICBjb25zdCBuZXh0U3RlcCA9IHN0b3J5UHJveHkuY29udGludWVDdXJyZW50Tm9kZVN0ZXAoKTtcbiAgICBpZiAobmV4dFN0ZXApIHtcblxuICAgICAgICBpZiAobmV4dFN0ZXAuY2hvaWNlcykge1xuICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkhJREVfRElBTE9HVUVfQ09OVElOVUVfQlVUVE9OKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TSE9XX0RJQUxPR1VFX0NPTlRJTlVFX0JVVFRPTik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dFN0ZXAubm90aWZpY2F0aW9ucykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBub3RpZmljYXRpb24gb2YgbmV4dFN0ZXAubm90aWZpY2F0aW9ucykge1xuICAgICAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbi5uYW1lLCAuLi5ub3RpZmljYXRpb24uYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRElTUExBWV9ESUFMT0dVRV9TVEVQLCB7XG4gICAgICAgICAgICB0cmVlSWQ6IHN0b3J5UHJveHkuY3VycmVudFRyZWUsXG4gICAgICAgICAgICBzdGVwOiBuZXh0U3RlcFxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRU5EX0RJQUxPR1VFKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSAnQGtvcmVlei9wdXJlLW12Yyc7XG5pbXBvcnQgeyBTdG9yeVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvc3RvcnlQcm94eS9TdG9yeVByb3h5JztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdERpYWxvZ3VlQ2hvaWNlQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgY2hvaWNlSW5kZXggPSBhcmdzWzBdO1xuICAgIGNvbnN0IHN0b3J5UHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShTdG9yeVByb3h5Lk5BTUUpO1xuICAgIGNvbnN0IHNlbGVjdGVkQ2hvaWNlID0gc3RvcnlQcm94eS5zZWxlY3RDaG9pY2UoY2hvaWNlSW5kZXgpO1xuXG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkNMRUFSX0RJQUxPR1VFX0NIT0lDRVMpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgIHRpdGxlOiBcIllPVVwiLFxuICAgICAgICB0ZXh0OiBzZWxlY3RlZENob2ljZS50ZXh0LFxuICAgICAgICB0aXRsZUNvbG91cjogJyNEQjgzMUMnXG4gICAgfVxuXG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfRElBTE9HVUVfU1RFUCwge1xuICAgICAgICB0cmVlSWQ6IHN0b3J5UHJveHkuY3VycmVudFRyZWUsXG4gICAgICAgIHN0ZXA6IHJlc3BvbnNlXG4gICAgfSk7XG5cbiAgICBpZiAoc2VsZWN0ZWRDaG9pY2UudGVzdCkge1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuUkVTT0xWRV9ESUFMT0dVRV9TS0lMTF9URVNULCBzZWxlY3RlZENob2ljZS50ZXN0KTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZWxlY3RlZENob2ljZS5nb3RvKSB7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuR09fVE9fRElBTE9HVUVfTk9ERSwgc2VsZWN0ZWRDaG9pY2UuZ290byk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSAnQGtvcmVlei9wdXJlLW12Yyc7XG5pbXBvcnQgeyBTdG9yeVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvc3RvcnlQcm94eS9TdG9yeVByb3h5JztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdvVG9EaWFsb2d1ZU5vZGVDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBzdG9yeVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoU3RvcnlQcm94eS5OQU1FKTtcbiAgICBjb25zdCBuZXdOb2RlID0gYXJnc1swXTtcbiAgICBzdG9yeVByb3h5LmdvVG9Ob2RlKG5ld05vZGUpO1xuICAgIGNvbnN0IGN1cnJlbnRTdGVwID0gc3RvcnlQcm94eS5nZXRDdXJyZW50Tm9kZVN0ZXAoKTtcblxuICAgIGlmIChjdXJyZW50U3RlcCkge1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19ESUFMT0dVRV9DT05USU5VRV9CVVRUT04pO1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuRElTUExBWV9ESUFMT0dVRV9TVEVQLCB7XG4gICAgICAgICAgICB0cmVlSWQ6IHN0b3J5UHJveHkuY3VycmVudFRyZWUsXG4gICAgICAgICAgICBzdGVwOiBjdXJyZW50U3RlcFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2coXCIqKioqKlwiKTtcbiAgICAgICAgY29uc29sZS5sb2coY3VycmVudFN0ZXApO1xuXG4gICAgICAgIGlmIChjdXJyZW50U3RlcC5ub3RpZmljYXRpb25zKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5vdGlmaWNhdGlvbiBvZiBjdXJyZW50U3RlcC5ub3RpZmljYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFNIT09UIENPTU1BTkQ6ICR7bm90aWZpY2F0aW9uLm5hbWV9YCk7XG4gICAgICAgICAgICAgICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLm5hbWUsIC4uLm5vdGlmaWNhdGlvbi5hcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5FTkRfRElBTE9HVUUpO1xuICAgIH1cbn0iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk8nO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5kRGlhbG9ndWVDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBnYW1lc3RhdGVQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVTdGF0ZVByb3h5Lk5BTUUpO1xuICAgIGdhbWVzdGF0ZVByb3h5LnVwZGF0ZUdhbWVTdGF0ZVR5cGUoZ2FtZXBsYXlNb2RlVHlwZXMuRVhQTE9SQVRJT04pO1xuXG5cbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuSElERV9ESUFMT0dVRV9QQU5FTCk7XG5cbn1cbiIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyTWVkaWF0b3IgfSBmcm9tICcuLi92aWV3L2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3Rlck1lZGlhdG9yJztcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcblxuZXhwb3J0IGZ1bmN0aW9uIG5hdmlnYXRlVG9DaGFyYWN0ZXJBbmRBdHRhY2tDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcblxuICAgIGNvbnN0IHRhcmdldENoYXJhY3RlcklkID0gYXJnc1swXTtcblxuICAgIGNvbnN0IHBsYXllckNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBcInBsYXllclwiKTtcbiAgICBjb25zdCB0YXJnZXRDaGFyYWN0ZXJQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgdGFyZ2V0Q2hhcmFjdGVySWQpO1xuXG4gICAgY29uc3QgcGxheWVyQ2hhcmFjdGVyTWVkaWF0b3IgPSBmYWNhZGUucmV0cmlldmVNZWRpYXRvcihHYW1lQ2hhcmFjdGVyTWVkaWF0b3IuTkFNRSArIFwicGxheWVyXCIpO1xuXG5cbiAgICBjb25zdCBwYXRoVG9UYXJnZXQgPSBuYXZpZ2F0ZVRvQ2hhcmFjdGVyKHBsYXllckNoYXJhY3RlclByb3h5LCB0YXJnZXRDaGFyYWN0ZXJQcm94eSk7XG4gICAgaWYgKHBhdGhUb1RhcmdldCkge1xuICAgICAgICBwbGF5ZXJDaGFyYWN0ZXJNZWRpYXRvci5oYW5kbGVOYXZpZ2F0ZUFsb25nUGF0aFdpdGhQcm9taXNlKHBhdGhUb1RhcmdldCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU1RBUlRfQ09NQkFULCB0YXJnZXRDaGFyYWN0ZXJJZCk7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuUkVTT0xWRV9BVFRBQ0ssIFwicGxheWVyXCIsIHRhcmdldENoYXJhY3RlcklkKTtcblxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5hdmlnYXRlVG9DaGFyYWN0ZXIocGxheWVyQ2hhcmFjdGVyUHJveHksIHRhcmdldENoYXJhY3RlclByb3h5KSB7XG4gICAgY29uc3QgY29ubmVjdGVkTm9kZXMgPSB0YXJnZXRDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZS5jb25uZWN0ZWROb2RlcztcbiAgICBjb25zdCBwbGF5ZXJOb2RlID0gcGxheWVyQ2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGU7XG5cbiAgICBjb25zdCBpc0FkamFjZW50ID0gY29ubmVjdGVkTm9kZXMuc29tZShuID0+IG4uZXF1YWxzKHBsYXllck5vZGUpKTtcblxuICAgIGlmIChpc0FkamFjZW50KSB7XG4gICAgICAgIC8vIEFscmVhZHkgdGhlcmVcbiAgICAgICAgcmV0dXJuIFtwbGF5ZXJOb2RlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB1bm9jY3VwaWVkTm9kZXMgPSBjb25uZWN0ZWROb2Rlcy5maWx0ZXIobm9kZSA9PiAhbm9kZS5vY2N1cGllZCk7XG4gICAgICAgIGlmICh1bm9jY3VwaWVkTm9kZXMubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgICBsZXQgc2hvcnRlc3RQYXRoID0gQXN0YXIuY2FsY3VsYXRlUGF0aChwbGF5ZXJOb2RlLCB1bm9jY3VwaWVkTm9kZXNbMF0pO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHVub2NjdXBpZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG90aGVyUGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgocGxheWVyTm9kZSwgdW5vY2N1cGllZE5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAob3RoZXJQYXRoLmxlbmd0aCA8IHNob3J0ZXN0UGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvcnRlc3RQYXRoID0gb3RoZXJQYXRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNob3J0ZXN0UGF0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn0iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlR2FtZXBsYXlBY3Rpb25Db21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBuZXdBY3Rpb24gPSBhcmdzWzBdO1xuICAgIGNvbnN0IGdhbWVTdGF0ZVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZVN0YXRlUHJveHkuTkFNRSk7XG4gICAgZ2FtZVN0YXRlUHJveHkuY3VycmVudEFjdGlvbiA9IG5ld0FjdGlvbjtcblxufSIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZURpYWxvZ3VlU2tpbGxUZXN0Q29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG4gICAgY29uc3QgdGVzdCA9IGFyZ3NbMF07XG4gICAgY29uc3QgY2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIFwicGxheWVyXCIpO1xuXG4gICAgY29uc3QgcGxheWVyU2tpbGwgPSBjaGFyYWN0ZXJQcm94eS5nZXRTa2lsbFRvdGFsKHRlc3Quc2tpbGwpXG5cbiAgICAvLyBSb2xsIGRpY2VcbiAgICBjb25zdCBkaWUxID0gcm9sbERpY2UoKTtcbiAgICBjb25zdCBkaWUyID0gcm9sbERpY2UoKTtcblxuICAgIGNvbnN0IHRvdGFsUm9sbCA9IGRpZTEgKyBkaWUyO1xuXG4gICAgY29uc3Qgc3VjY2VzcyA9IHBsYXllclNraWxsID49IHRvdGFsUm9sbDtcblxuICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5ESVNQTEFZX0RJQUxPR1VFX1NLSUxMX1RFU1QsIHRlc3Quc2tpbGwsIHBsYXllclNraWxsLCBkaWUxLCBkaWUyLCBzdWNjZXNzKTtcblxuICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBTdWNjZWVkZWQgJHt0ZXN0LnNraWxsfSB3aXRoIGEgJHtwbGF5ZXJTa2lsbH0gdnMgJHtkaWUxfSske2RpZTJ9YCk7XG4gICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5HT19UT19ESUFMT0dVRV9OT0RFLCB0ZXN0LnN1Y2Nlc3MuZ290byk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhgRmFpbGVkICR7dGVzdC5za2lsbH0gd2l0aCBhICR7cGxheWVyU2tpbGx9IHZzICR7ZGllMX0rJHtkaWUyfWApO1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuR09fVE9fRElBTE9HVUVfTk9ERSwgdGVzdC5mYWlsdXJlLmdvdG8pO1xuXG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIHJvbGxEaWNlKCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA2KTtcbn0iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgSW52ZW50b3J5UHJveHkgfSBmcm9tICcuLi9tb2RlbC9pbnZlbnRvcnkvSW52ZW50b3J5UHJveHknO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xpY2tJbnZlbnRvcnlCdXR0b25Db21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBpbnZlbnRvcnlQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEludmVudG9yeVByb3h5Lk5BTUUpO1xuXG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfSU5WRU5UT1JZX1BBTkVMLCBpbnZlbnRvcnlQcm94eS5pbnZlbnRvcnlJdGVtcyk7XG59XG4iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgSW52ZW50b3J5UHJveHkgfSBmcm9tICcuLi9tb2RlbC9pbnZlbnRvcnkvSW52ZW50b3J5UHJveHknO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVvcmRlckludmVudG9yeUl0ZW1Db21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBjb25zdCBpbnZlbnRvcnlQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEludmVudG9yeVByb3h5Lk5BTUUpO1xuXG4gICAgY29uc3Qgb3JpZ2luYWxJbmRleCA9IGFyZ3NbMF07XG4gICAgY29uc3QgbmV3SW5kZXggPSBhcmdzWzFdO1xuXG4gICAgaW52ZW50b3J5UHJveHkucmVvcmRlckludmVudG9yeUl0ZW0ob3JpZ2luYWxJbmRleCwgbmV3SW5kZXgpO1xuXG4gICAgZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkRJU1BMQVlfSU5WRU5UT1JZX1BBTkVMLCBpbnZlbnRvcnlQcm94eS5pbnZlbnRvcnlJdGVtcyk7XG59XG4iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBwYXJzZUdhbWVNYXBDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL1BhcnNlR2FtZU1hcENvbW1hbmQnO1xuaW1wb3J0IHsgc3RhcnR1cENvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvU3RhcnR1cENvbW1hbmQnO1xuaW1wb3J0IHsgY2hhbmdlU2NlbmVDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0NoYW5nZVNjZW5lQ29tbWFuZCc7XG5pbXBvcnQgeyBzdGFydENvbWJhdENvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvU3RhcnRDb21iYXRDb21tYW5kJztcbmltcG9ydCB7IG5leHRDb21iYXRUdXJuQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9OZXh0Q29tYmF0VHVybkNvbW1hbmQnO1xuaW1wb3J0IHsgbmV4dENvbWJhdFJvdW5kQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9OZXh0Q29tYmF0Um91bmRDb21tYW5kJztcbmltcG9ydCB7IGVuZENvbWJhdFR1cm5Db21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0VuZENvbWJhdFR1cm5Db21tYW5kJztcbmltcG9ydCB7IGVuZW15VHVybkNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvRW5lbXlUdXJuQ29tbWFuZCc7XG5pbXBvcnQgeyBzZWxlY3RlZE5vZGVDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL1NlbGVjdGVkTm9kZUNvbW1hbmQnO1xuaW1wb3J0IHsgY29tYmF0TmF2aWdhdGVUb05vZGVDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0NvbWJhdE5hdmlnYXRlVG9Ob2RlQ29tbWFuZCc7XG5pbXBvcnQgeyBzaG93V2Fsa2FibGVBcmVhQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9TaG93V2Fsa2FibGVBcmVhQ29tbWFuZCc7XG5pbXBvcnQgeyBoaWRlV2Fsa2FibGVBcmVhQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9IaWRlV2Fsa2FibGVBcmVhQ29tbWFuZCc7XG5pbXBvcnQgeyBhd2FpdFBsYXllckNvbWJhdElucHV0Q29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9Bd2FpdFBsYXllckNvbWJhdElucHV0Q29tbWFuZCc7XG5pbXBvcnQgeyBlbmRNb3ZlbWVudENvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvRW5kTW92ZW1lbnRDb21tYW5kJztcbmltcG9ydCB7IHNlbGVjdGVkR2FtZUNoYXJhY3RlckNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvU2VsZWN0ZWRHYW1lQ2hhcmFjdGVyQ29tbWFuZCc7XG5pbXBvcnQgeyByZXNvbHZlQXR0YWNrQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9SZXNvbHZlQXR0YWNrQ29tbWFuZCc7XG5pbXBvcnQgeyBtb3ZlQWxvbmdQYXRoQW5kQXR0YWNrQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9Nb3ZlQWxvbmdQYXRoQW5kQXR0YWNrQ29tbWFuZCc7XG5pbXBvcnQgeyBraWxsR2FtZUNoYXJhY3RlckNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvS2lsbEdhbWVDaGFyYWN0ZXJDb21tYW5kJztcbmltcG9ydCB7IGVuZENvbWJhdENvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvRW5kQ29tYmF0Q29tbWFuZCc7XG5pbXBvcnQgeyBkZXRlcm1pbmVFbmVteUFjdGlvbkNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvRGV0ZXJtaW5lRW5lbXlBY3Rpb25Db21tYW5kJztcbmltcG9ydCB7IHJlc29sdmVSYW5nZWRBdHRhY2tDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL1Jlc29sdmVSYW5nZWRBdHRhY2tDb21tYW5kJztcbmltcG9ydCB7IGVxdWlwV2VhcG9uQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9FcXVpcFdlYXBvbkNvbW1hbmQnO1xuaW1wb3J0IHsgbmF2aWdhdGVUaHJvdWdoUG9ydGFsQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9OYXZpZ2F0ZVRocm91Z2hQb3J0YWxDb21tYW5kJztcbmltcG9ydCB7IGFkZFBsYXllckNoYXJhY3RlclRvTWFwQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9BZGRQbGF5ZXJDaGFyYWN0ZXJUb01hcENvbW1hbmQnO1xuaW1wb3J0IHsgbmF2aWdhdGVUb0NoYXJhY3RlckFuZFRhbGtDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL05hdmlnYXRlVG9DaGFyYWN0ZXJBbmRUYWxrJztcbmltcG9ydCB7IHN0YXJ0RGlhbG9ndWVDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL1N0YXJ0RGlhbG9ndWVDb21tYW5kJztcbmltcG9ydCB7IGNvbnRpbnVlRGlhbG9ndWVUZXh0Q29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9Db250aW51ZURpYWxvZ3VlVGV4dENvbW1hbmQnO1xuaW1wb3J0IHsgc2VsZWN0RGlhbG9ndWVDaG9pY2VDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL1NlbGVjdERpYWxvZ3VlQ2hvaWNlQ29tbWFuZCc7XG5pbXBvcnQgeyBnb1RvRGlhbG9ndWVOb2RlQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9Hb1RvRGlhbG9ndWVOb2RlQ29tbWFuZCc7XG5pbXBvcnQgeyBlbmREaWFsb2d1ZUNvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvRW5kRGlhbG9ndWVDb21tYW5kJztcbmltcG9ydCB7IG5hdmlnYXRlVG9DaGFyYWN0ZXJBbmRBdHRhY2tDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL05hdmlnYXRlVG9DaGFyYWN0ZXJBbmRBdHRhY2tDb21tYW5kJztcbmltcG9ydCB7IGNoYW5nZUdhbWVwbGF5QWN0aW9uQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9DaGFuZ2VHYW1lcGxheUFjdGlvbkNvbW1hbmQnO1xuaW1wb3J0IHsgcmVzb2x2ZURpYWxvZ3VlU2tpbGxUZXN0Q29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9SZXNvbHZlRGlhbG9ndWVTa2lsbFRlc3RDb21tYW5kJztcbmltcG9ydCB7IGNsaWNrSW52ZW50b3J5QnV0dG9uQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9DbGlja0ludmVudG9yeUJ1dHRvbkNvbW1hbmQnO1xuaW1wb3J0IHsgcmVvcmRlckludmVudG9yeUl0ZW1Db21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL1Jlb3JkZXJJbnZlbnRvcnlJdGVtQ29tbWFuZCc7XG5cbmV4cG9ydCBjbGFzcyBHYW1lRmFjYWRlIGV4dGVuZHMgRmFjYWRlIHtcbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2Uoa2V5KSB7XG4gICAgICAgIGlmICghRmFjYWRlLmluc3RhbmNlTWFwW2tleV0pIHtcbiAgICAgICAgICAgIEZhY2FkZS5pbnN0YW5jZU1hcFtrZXldID0gbmV3IEdhbWVGYWNhZGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRmFjYWRlLmluc3RhbmNlTWFwW2tleV07XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBLRVkoKSB7IHJldHVybiBcIkNhY29nZW5cIiB9O1xuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiQ2Fjb2dlbkZhY2FkZVwiIH07XG4gICAgc3RhdGljIGdldCBTVEFSVFVQKCkgeyByZXR1cm4gR2FtZUZhY2FkZS5OQU1FICsgXCJTdGFydFVwXCIgfTtcblxuICAgIHN0YXJ0dXAoZ2FtZSkge1xuICAgICAgICB0aGlzLnNlbmROb3RpZmljYXRpb24oR2FtZUZhY2FkZS5TVEFSVFVQLCBnYW1lKTtcbiAgICB9XG5cbiAgICBzZW5kTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3VwZXIuc2VuZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplQ29udHJvbGxlcigpIHtcbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZUNvbnRyb2xsZXIoKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUZhY2FkZS5TVEFSVFVQLCBzdGFydHVwQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkUsIGNoYW5nZVNjZW5lQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5QQVJTRV9HQU1FTUFQLCBwYXJzZUdhbWVNYXBDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLlNUQVJUX0NPTUJBVCwgc3RhcnRDb21iYXRDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLk5FWFRfQ09NQkFUX1RVUk4sIG5leHRDb21iYXRUdXJuQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5ORVhUX0NPTUJBVF9ST1VORCwgbmV4dENvbWJhdFJvdW5kQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5FTkRfQ09NQkFUX1RVUk4sIGVuZENvbWJhdFR1cm5Db21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkVORU1ZX1RVUk4sIGVuZW15VHVybkNvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuU0VMRUNURURfTk9ERSwgc2VsZWN0ZWROb2RlQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5DT01CQVRfTkFWSUdBVEVfVE9fTk9ERSwgY29tYmF0TmF2aWdhdGVUb05vZGVDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkRFVEVSTUlORV9ORVhUX0VORU1ZX0FDVElPTiwgZGV0ZXJtaW5lRW5lbXlBY3Rpb25Db21tYW5kKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuU0hPV19XQUxLQUJMRV9BUkVBLCBzaG93V2Fsa2FibGVBcmVhQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5ISURFX1dBTEtBQkxFX0FSRUEsIGhpZGVXYWxrYWJsZUFyZWFDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkFXQUlUX1BMQVlFUl9DT01CQVRfSU5QVVQsIGF3YWl0UGxheWVyQ29tYmF0SW5wdXRDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkZJTklTSEVEX01PVkUsIGVuZE1vdmVtZW50Q29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5TRUxFQ1RfR0FNRV9DSEFSQUNURVIsIHNlbGVjdGVkR2FtZUNoYXJhY3RlckNvbW1hbmQpO1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5SRVNPTFZFX0FUVEFDSywgcmVzb2x2ZUF0dGFja0NvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuUkVTT0xWRV9SQU5HRURfQVRUQUNLLCByZXNvbHZlUmFuZ2VkQXR0YWNrQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5NT1ZFX0FMT05HX1BBVEhfQU5EX0FUVEFDSywgbW92ZUFsb25nUGF0aEFuZEF0dGFja0NvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuTkFWSUdBVEVfVE9fQ0hBUkFDVEVSX0FORF9BVFRBQ0ssIG5hdmlnYXRlVG9DaGFyYWN0ZXJBbmRBdHRhY2tDb21tYW5kKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuS0lMTF9HQU1FX0NIQVJBQ1RFUiwga2lsbEdhbWVDaGFyYWN0ZXJDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkVORF9DT01CQVQsIGVuZENvbWJhdENvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuRVFVSVBfV0VBUE9OLCBlcXVpcFdlYXBvbkNvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuTkFWSUdBVEVfVEhST1VHSF9QT1JUQUwsIG5hdmlnYXRlVGhyb3VnaFBvcnRhbENvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuQUREX1BMQVlFUl9DSEFSQUNURVJfVE9fTUFQLCBhZGRQbGF5ZXJDaGFyYWN0ZXJUb01hcENvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuTkFWSUdBVEVfVE9fQ0hBUkFDVEVSX0FORF9UQUxLLCBuYXZpZ2F0ZVRvQ2hhcmFjdGVyQW5kVGFsa0NvbW1hbmQpXG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5TVEFSVF9ESUFMT0dVRSwgc3RhcnREaWFsb2d1ZUNvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuQ09OVElOVUVfRElBTE9HVUVfTk9ERSwgY29udGludWVEaWFsb2d1ZVRleHRDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLlNFTEVDVF9ESUFMT0dVRV9DSE9JQ0UsIHNlbGVjdERpYWxvZ3VlQ2hvaWNlQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5HT19UT19ESUFMT0dVRV9OT0RFLCBnb1RvRGlhbG9ndWVOb2RlQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5FTkRfRElBTE9HVUUsIGVuZERpYWxvZ3VlQ29tbWFuZCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5HQU1FUExBWV9BQ1RJT05fQ0hBTkdFRCwgY2hhbmdlR2FtZXBsYXlBY3Rpb25Db21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLlJFU09MVkVfRElBTE9HVUVfU0tJTExfVEVTVCwgcmVzb2x2ZURpYWxvZ3VlU2tpbGxUZXN0Q29tbWFuZCk7XG5cbiAgICAgICAgLy8gSW52ZW50b3J5IGNvbW1hbmRzXG4gICAgICAgIHRoaXMucmVnaXN0ZXJDb21tYW5kKEdhbWVDb21tYW5kcy5DTElDS19JTlZFTlRPUllfQlVUVE9OLCBjbGlja0ludmVudG9yeUJ1dHRvbkNvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuUkVPUkRFUl9JTlZFVE9SWV9JVEVNLCByZW9yZGVySW52ZW50b3J5SXRlbUNvbW1hbmQpO1xuICAgIH1cblxufSIsImV4cG9ydCBjbGFzcyBCb3RCZWhhdmlvdXJUeXBlcyB7XG4gICAgc3RhdGljIGdldCBOT05FKCkgeyByZXR1cm4gMCB9O1xuICAgIHN0YXRpYyBnZXQgQkFTSUNfTUVMRUUoKSB7IHJldHVybiAxIH07XG4gICAgc3RhdGljIGdldCBCQVNJQ19SQU5HRUQoKSB7IHJldHVybiAyIH07XG5cbn1cblxuZXhwb3J0IGNvbnN0IGJvdEJlaGF2aW91ckVudW1zID0gW1xuICAgIHsgTk9ORTogQm90QmVoYXZpb3VyVHlwZXMuTk9ORSB9LFxuICAgIHsgQkFTSUNfTUVMRUU6IEJvdEJlaGF2aW91clR5cGVzLkJBU0lDX01FTEVFIH0sXG4gICAgeyBCQVNJQ19SQU5HRUQ6IEJvdEJlaGF2aW91clR5cGVzLkJBU0lDX1JBTkdFRCB9LFxuXSIsImV4cG9ydCBjbGFzcyBHYW1lQ29tbWFuZHMge1xuICAgIHN0YXRpYyBnZXQgQ0hBTkdFX1NDRU5FKCkgeyByZXR1cm4gXCJDSEFOR0VfU0NFTkVcIiB9O1xuICAgIHN0YXRpYyBnZXQgQ0hBTkdFX1NDRU5FX0NPTVBMRVRFKCkgeyByZXR1cm4gXCJDSEFOR0VfU0NFTkVfQ09NUExFVEVcIiB9O1xuICAgIHN0YXRpYyBnZXQgQVBQX0lOSVRJQUxJU0VEKCkgeyByZXR1cm4gXCJBUFBfSU5JVElBTElTRURcIiB9O1xuICAgIHN0YXRpYyBnZXQgUEFSU0VfR0FNRU1BUCgpIHsgcmV0dXJuIFwiUEFSU0VfR0FNRU1BUFwiIH07XG4gICAgc3RhdGljIGdldCBNQVBfR1JJRF9DUkVBVEVEKCkgeyByZXR1cm4gXCJNQVBfR1JJRF9DUkVBVEVEXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgTkFWSUdBVEVfVE9fTk9ERSgpIHsgcmV0dXJuIFwiTkFWSUdBVEVfVE9fTk9ERVwiIH07XG4gICAgc3RhdGljIGdldCBOQVZJR0FURV9UT19XQVlQT0lOVCgpIHsgcmV0dXJuIFwiTkFWSUdBVEVfVE9fV0FZUE9JTlRcIiB9O1xuICAgIHN0YXRpYyBnZXQgTkFWSUdBVEVfVEhST1VHSF9QT1JUQUwoKSB7IHJldHVybiBcIk5BVklHQVRFX1RIUk9VR0hfUE9SVEFMXCIgfTtcbiAgICBzdGF0aWMgZ2V0IENPTUJBVF9OQVZJR0FURV9UT19OT0RFKCkgeyByZXR1cm4gXCJDT01CQVRfTkFWSUdBVEVfVE9fTk9ERVwiIH07XG4gICAgc3RhdGljIGdldCBTRVRfQ0FNRVJBX1RBUkdFVCgpIHsgcmV0dXJuIFwiU0VUX0NBTUVSQV9UQVJHRVRcIiB9O1xuICAgIHN0YXRpYyBnZXQgSU5QVVRfRFJBR19NT1VTRSgpIHsgcmV0dXJuIFwiSU5QVVRfRFJBR19NT1VTRVwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IE1PVkVEX1RPX05PREUoKSB7IHJldHVybiBcIk1PVkVEX1RPX05PREVcIiB9O1xuICAgIHN0YXRpYyBnZXQgRklOSVNIRURfTU9WRSgpIHsgcmV0dXJuIFwiRklOSVNIRURfTU9WRVwiIH07XG4gICAgc3RhdGljIGdldCBTVEFSVF9DT01CQVQoKSB7IHJldHVybiBcIlNUQVJUX0NPTUJBVFwiIH07XG4gICAgc3RhdGljIGdldCBTSE9XX1RPQVNUX01FU1NBR0UoKSB7IHJldHVybiBcIlNIT1dfVE9BU1RfTUVTU0FHRVwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IE5FWFRfQ09NQkFUX1RVUk4oKSB7IHJldHVybiBcIk5FWFRfQ09NQkFUX1RVUk5cIiB9O1xuICAgIHN0YXRpYyBnZXQgTkVYVF9DT01CQVRfUk9VTkQoKSB7IHJldHVybiBcIk5FWFRfQ09NQkFUX1JPVU5EXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgRU5EX0NPTUJBVCgpIHsgcmV0dXJuIFwiRU5EX0NPTUJBVFwiIH07XG4gICAgc3RhdGljIGdldCBFTkRfQ09NQkFUX1RVUk4oKSB7IHJldHVybiBcIkVORF9DT01CQVRfVFVSTlwiIH07XG4gICAgc3RhdGljIGdldCBFTkVNWV9UVVJOKCkgeyByZXR1cm4gXCJFTkVNWV9UVVJOXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFNFTEVDVEVEX05PREUoKSB7IHJldHVybiBcIlNFTEVDVEVEX05PREVcIiB9O1xuICAgIHN0YXRpYyBnZXQgREVURVJNSU5FX05FWFRfRU5FTVlfQUNUSU9OKCkgeyByZXR1cm4gXCJERVRFUk1JTkVfTkVYVF9FTkVNWV9BQ1RJT05cIiB9O1xuXG4gICAgc3RhdGljIGdldCBOQVZJR0FURV9BTE9OR19QQVRIKCkgeyByZXR1cm4gXCJOQVZJR0FURV9BTE9OR19QQVRIXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgU0hPV19XQUxLQUJMRV9BUkVBKCkgeyByZXR1cm4gXCJTSE9XX1dBTEtBQkxFX0FSRUFcIiB9O1xuICAgIHN0YXRpYyBnZXQgSElERV9XQUxLQUJMRV9BUkVBKCkgeyByZXR1cm4gXCJISURFX1dBTEtBQkxFX0FSRUFcIiB9O1xuXG5cbiAgICBzdGF0aWMgZ2V0IEVORF9NT1ZFTUVOVCgpIHsgcmV0dXJuIFwiRU5EX01PVkVNRU5UXCIgfTtcbiAgICBzdGF0aWMgZ2V0IEFXQUlUX1BMQVlFUl9DT01CQVRfSU5QVVQoKSB7IHJldHVybiBcIkFXQUlUX1BMQVlFUl9DT01CQVRfSU5QVVRcIiB9O1xuICAgIHN0YXRpYyBnZXQgU0VUX0NIQVJBQ1RFUl9UT19OT0RFKCkgeyByZXR1cm4gXCJTRVRfQ0hBUkFDVEVSX1RPX05PREVcIiB9O1xuXG4gICAgc3RhdGljIGdldCBTRUxFQ1RfR0FNRV9DSEFSQUNURVIoKSB7IHJldHVybiBcIlNFTEVDVF9HQU1FX0NIQVJBQ1RFUlwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IFRPR0dMRV9CVVRUT04oKSB7IHJldHVybiBcIlRPR0dMRV9CVVRUT05cIiB9O1xuXG4gICAgc3RhdGljIGdldCBVU0VfUExBWUVSX0FDVElPTigpIHsgcmV0dXJuIFwiVVNFX1BMQVlFUl9BQ1RJT05cIiB9O1xuXG4gICAgc3RhdGljIGdldCBSRVNPTFZFX0FUVEFDSygpIHsgcmV0dXJuIFwiUkVTT0xWRV9BVFRBQ0tcIiB9O1xuICAgIHN0YXRpYyBnZXQgUkVTT0xWRV9SQU5HRURfQVRUQUNLKCkgeyByZXR1cm4gXCJSRVNPTFZFX1JBTkdFRF9BVFRBQ0tcIiB9O1xuICAgIHN0YXRpYyBnZXQgTU9WRV9BTE9OR19QQVRIX0FORF9BVFRBQ0soKSB7IHJldHVybiBcIk1PVkVfQUxPTkdfUEFUSF9BTkRfQVRUQUNLXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgVVBEQVRFX1NUQU1JTkEoKSB7IHJldHVybiBcIlVQREFURV9TVEFNSU5BXCIgfTtcbiAgICBzdGF0aWMgZ2V0IERJU1BMQVlfREVBVEgoKSB7IHJldHVybiBcIkRJU1BMQVlfREVBVEhcIiB9O1xuICAgIHN0YXRpYyBnZXQgRElTUExBWV9BVFRBQ0soKSB7IHJldHVybiBcIkRJU1BMQVlfQVRUQUNLXCIgfTtcbiAgICBzdGF0aWMgZ2V0IERJU1BMQVlfSElUKCkgeyByZXR1cm4gXCJESVNQTEFZX0hJVFwiIH07XG4gICAgc3RhdGljIGdldCBLSUxMX0dBTUVfQ0hBUkFDVEVSKCkgeyByZXR1cm4gXCJLSUxMX0dBTUVfQ0hBUkFDVEVSXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgQ0hBUkFDVEVSX0xPT0tfQVQoKSB7IHJldHVybiBcIkNIQVJBQ1RFUl9MT09LX0FUXCIgfTtcbiAgICBzdGF0aWMgZ2V0IENIQU5HRV9TVEFNSU5BKCkgeyByZXR1cm4gXCJDSEFOR0VfU1RBTUlOQVwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IEVRVUlQX1dFQVBPTigpIHsgcmV0dXJuIFwiRVFVSVBfV0VBUE9OXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFVTRV9BQ1RJT04oKSB7IHJldHVybiBcIlVTRV9BQ1RJT05cIiB9O1xuXG4gICAgc3RhdGljIGdldCBESVNQTEFZX0ZMT0FUSU5HX1NUQVRVUygpIHsgcmV0dXJuIFwiRElTUExBWV9GTE9BVElOR19TVEFUVVNcIiB9O1xuICAgIHN0YXRpYyBnZXQgQUREX1BMQVlFUl9DSEFSQUNURVJfVE9fTUFQKCkgeyByZXR1cm4gXCJBRERfUExBWUVSX0NIQVJBQ1RFUl9UT19NQVBcIiB9O1xuXG4gICAgc3RhdGljIGdldCBOQVZJR0FURV9UT19DSEFSQUNURVJfQU5EX1RBTEsoKSB7IHJldHVybiBcIk5BVklHQVRFX1RPX0NIQVJBQ1RFUl9BTkRfVEFMS1wiIH07XG4gICAgc3RhdGljIGdldCBOQVZJR0FURV9UT19DSEFSQUNURVJfQU5EX0FUVEFDSygpIHsgcmV0dXJuIFwiTkFWSUdBVEVfVE9fQ0hBUkFDVEVSX0FORF9BVFRBQ0tcIiB9O1xuICAgIHN0YXRpYyBnZXQgU0hPV19ESUFMT0dVRV9QQU5FTCgpIHsgcmV0dXJuIFwiU0hPV19ESUFMT0dVRV9QQU5FTFwiIH07XG4gICAgc3RhdGljIGdldCBISURFX0RJQUxPR1VFX1BBTkVMKCkgeyByZXR1cm4gXCJISURFX0RJQUxPR1VFX1BBTkVMXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgU0hPV19ESUFMT0dVRV9DT05USU5VRV9CVVRUT04oKSB7IHJldHVybiBcIlNIT1dfRElBTE9HVUVfQ09OVElOVUVfQlVUVE9OXCIgfTtcbiAgICBzdGF0aWMgZ2V0IEhJREVfRElBTE9HVUVfQ09OVElOVUVfQlVUVE9OKCkgeyByZXR1cm4gXCJISURFX0RJQUxPR1VFX0NPTlRJTlVFX0JVVFRPTlwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IERJU1BMQVlfRElBTE9HVUVfU1RFUCgpIHsgcmV0dXJuIFwiRElTUExBWV9ESUFMT0dVRV9TVEVQXCIgfTtcbiAgICBzdGF0aWMgZ2V0IERJU1BMQVlfRElBTE9HVUVfU0tJTExfVEVTVCgpIHsgcmV0dXJuIFwiRElTUExBWV9ESUFMT0dVRV9TS0lMTF9URVNUXCIgfTtcblxuICAgIHN0YXRpYyBnZXQgQ09OVElOVUVfRElBTE9HVUVfTk9ERSgpIHsgcmV0dXJuIFwiQ09OVElOVUVfRElBTE9HVUVfTk9ERVwiIH07XG4gICAgc3RhdGljIGdldCBTRUxFQ1RfRElBTE9HVUVfQ0hPSUNFKCkgeyByZXR1cm4gXCJTRUxFQ1RfRElBTE9HVUVfQ0hPSUNFXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFJFU09MVkVfRElBTE9HVUVfU0tJTExfVEVTVCgpIHsgcmV0dXJuIFwiUkVTT0xWRV9ESUFMT0dVRV9TS0lMTF9URVNUXCIgfTtcbiAgICBzdGF0aWMgZ2V0IENMRUFSX0RJQUxPR1VFX0NIT0lDRVMoKSB7IHJldHVybiBcIkNMRUFSX0RJQUxPR1VFX0NIT0lDRVNcIiB9O1xuICAgIHN0YXRpYyBnZXQgR09fVE9fRElBTE9HVUVfTk9ERSgpIHsgcmV0dXJuIFwiR09fVE9fRElBTE9HVUVfTk9ERVwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IFNUQVJUX0RJQUxPR1VFKCkgeyByZXR1cm4gXCJTVEFSVF9ESUFMT0dVRVwiIH07XG4gICAgc3RhdGljIGdldCBFTkRfRElBTE9HVUUoKSB7IHJldHVybiBcIkVORF9ESUFMT0dVRVwiIH07XG5cblxuICAgIHN0YXRpYyBnZXQgR0FNRVBMQVlfQUNUSU9OX0NIQU5HRUQoKSB7IHJldHVybiBcIkdBTUVQTEFZX0FDVElPTl9DSEFOR0VEXCIgfTtcblxuICAgIC8vIEludmVudG9yeSBDb21tYW5kc1xuICAgIHN0YXRpYyBnZXQgQ0xJQ0tfSU5WRU5UT1JZX0JVVFRPTigpIHsgcmV0dXJuIFwiQ0xJQ0tfSU5WRU5UT1JZX0JVVFRPTlwiIH07XG4gICAgc3RhdGljIGdldCBESVNQTEFZX0lOVkVOVE9SWV9QQU5FTCgpIHsgcmV0dXJuIFwiRElTUExBWV9JTlZFTlRPUllfUEFORUxcIiB9O1xuICAgIHN0YXRpYyBnZXQgUkVPUkRFUl9JTlZFVE9SWV9JVEVNKCkgeyByZXR1cm4gXCJSRU9SREVSX0lOVkVUT1JZX0lURU1cIiB9O1xuXG59XG4iLCJleHBvcnQgY2xhc3MgV2VhcG9uVHlwZXMge1xuICAgIC8vIE1FTEVFXG4gICAgc3RhdGljIGdldCBTV09SRCgpIHsgcmV0dXJuIFwic3dvcmRcIiB9O1xuICAgIHN0YXRpYyBnZXQgQVhFKCkgeyByZXR1cm4gXCJheGVcIiB9O1xuICAgIHN0YXRpYyBnZXQgS05JRkUoKSB7IHJldHVybiBcImtuaWZlXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFNUQUZGKCkgeyByZXR1cm4gXCJzdGFmZlwiIH07XG4gICAgc3RhdGljIGdldCBIQU1NRVIoKSB7IHJldHVybiBcImhhbW1lclwiIH07XG4gICAgc3RhdGljIGdldCBTUEVBUigpIHsgcmV0dXJuIFwic3BlYXJcIiB9O1xuICAgIHN0YXRpYyBnZXQgTUFDRSgpIHsgcmV0dXJuIFwibWFjZVwiIH07XG4gICAgc3RhdGljIGdldCBQT0xFQVJNKCkgeyByZXR1cm4gXCJwb2xlYXJtXCIgfTtcbiAgICBzdGF0aWMgZ2V0IE1BVUwoKSB7IHJldHVybiBcIm1hdWxcIiB9O1xuICAgIHN0YXRpYyBnZXQgR1JFQVRTV09SRCgpIHsgcmV0dXJuIFwiZ3JlYXRzd29yZFwiIH07XG4gICAgc3RhdGljIGdldCBDTFVCKCkgeyByZXR1cm4gXCJjbHViXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFVOQVJNRUQoKSB7IHJldHVybiBcInVuYXJtZWRcIiB9O1xuICAgIHN0YXRpYyBnZXQgU0hJRUxEKCkgeyByZXR1cm4gXCJzaGllbGRcIiB9O1xuXG4gICAgLy8gUkFOR0VEXG4gICAgc3RhdGljIGdldCBGVVNJTCgpIHsgcmV0dXJuIFwiZnVzaWxcIiB9O1xuICAgIHN0YXRpYyBnZXQgQk9XKCkgeyByZXR1cm4gXCJib3dcIiB9O1xuICAgIHN0YXRpYyBnZXQgQ1JPU1NCT1coKSB7IHJldHVybiBcImNyb3NzYm93XCIgfTtcbiAgICBzdGF0aWMgZ2V0IFBJU1RPTEVUKCkgeyByZXR1cm4gXCJwaXN0b2xldFwiIH07XG59XG5cbmV4cG9ydCBjb25zdCB3ZWFwb25FbnVtcyA9IE9iamVjdC5lbnRyaWVzKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKFdlYXBvblR5cGVzKSlcbiAgICAuZmlsdGVyKChba2V5LCBkZXNjcmlwdG9yXSkgPT4gdHlwZW9mIGRlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nKVxuICAgIC5tYXAoKFtrZXldKSA9PiB7XG4gICAgICAgIHJldHVybiB7IFtrZXldOiBXZWFwb25UeXBlc1trZXldIH07XG4gICAgfSk7IiwiZXhwb3J0IGNsYXNzIENvbWJhdFZPIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJ0aWNpcGFudHMsIHRlYW1zKSB7XG4gICAgICAgIHRoaXMucGFydGljaXBhbnRzID0gcGFydGljaXBhbnRzO1xuICAgICAgICB0aGlzLnJvdW5kSW5pdGlhdGl2ZSA9IFtdO1xuICAgICAgICB0aGlzLmFjdGl2ZVBhcnRpY2lwYW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnRlYW1zID0gdGVhbXM7XG4gICAgfVxuXG4gICAgZ2V0IG5leHRUdXJuQ2hhcmFjdGVySWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvdW5kSW5pdGlhdGl2ZVswXTtcbiAgICB9XG59IiwiY29uc3QgeyBQcm94eSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuY29uc3QgeyBHYW1lQ2hhcmFjdGVyVk8gfSA9IHJlcXVpcmUoJy4vR2FtZUNoYXJhY3RlclZPJyk7XG5cblxuZXhwb3J0IGNsYXNzIEdhbWVDaGFyYWN0ZXJQcm94eSBleHRlbmRzIFByb3h5IHtcbiAgICBnZXQgdm8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGEoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJHYW1lQ2hhcmFjdGVyUHJveHlfXCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgICAgICBzdXBlcihHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHBhcmFtcy5pZCwgbmV3IEdhbWVDaGFyYWN0ZXJWTyhwYXJhbXMpKTtcbiAgICB9XG5cbiAgICByZXNldENvbWJhdFR1cm5TdGF0ZSgpIHtcbiAgICAgICAgdGhpcy52by5hdmFpbGFibGVNb3ZlbWVudCA9IHRoaXMudm8ubWF4TW92ZW1lbnQ7XG4gICAgICAgIHRoaXMudm8uYXZhaWxhYmxlQWN0aW9ucyA9IHRoaXMudm8ubWF4QWN0aW9uc1BlclR1cm47XG4gICAgfVxuXG4gICAgdXNlTW92ZW1lbnQoY29zdCkge1xuICAgICAgICB0aGlzLnZvLmF2YWlsYWJsZU1vdmVtZW50IC09IGNvc3Q7XG4gICAgfVxuXG4gICAgYXBwbHlEYW1hZ2UoZGFtYW5nZSkge1xuICAgICAgICB0aGlzLnZvLmN1cnJlbnRTdGFtaW5hIC09IGRhbWFuZ2U7XG4gICAgICAgIHRoaXMudm8uY3VycmVudFN0YW1pbmEgPSBNYXRoLm1heCgwLCB0aGlzLnZvLmN1cnJlbnRTdGFtaW5hKTtcblxuICAgICAgICBpZiAodGhpcy52by5jdXJyZW50U3RhbWluYSA+IDApIHtcbiAgICAgICAgICAgIC8vIEFsaXZlXG4gICAgICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5VUERBVEVfU1RBTUlOQSArIHRoaXMuaWQsXG4gICAgICAgICAgICAgICAgdGhpcy52by5jdXJyZW50U3RhbWluYSwgdGhpcy52by5tYXhpbXVtU3RhbWluYSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBEZWFkXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJHt0aGlzLmlkfSBkaWVkYCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5DSEFOR0VfU1RBTUlOQSArIHRoaXMuaWQsIHRoaXMudm8uY3VycmVudFN0YW1pbmEsIHRoaXMudm8ubWF4U3RhbWluYSk7XG4gICAgfVxuXG4gICAgZ2V0U2tpbGxUb3RhbChza2lsbEtleSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgU2tpbGwgJHtza2lsbEtleX1gKTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy52by5hZHZhbmNlZFNraWxscyk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMudm8uYWR2YW5jZWRTa2lsbHMuZ2V0KHNraWxsS2V5KSk7XG4gICAgICAgIGlmICh0aGlzLnZvLmFkdmFuY2VkU2tpbGxzLmhhcyhza2lsbEtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNraWxsICsgdGhpcy52by5hZHZhbmNlZFNraWxscy5nZXQoc2tpbGxLZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2tpbGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmlkO1xuICAgIH1cblxuICAgIGdldCBkaWFsb2d1ZVRyZWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmRpYWxvZ3VlVHJlZTtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudE5vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmN1cnJlbnROb2RlO1xuICAgIH1cblxuICAgIHNldCBjdXJyZW50Tm9kZSh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy52by5jdXJyZW50Tm9kZSkge1xuICAgICAgICAgICAgdGhpcy52by5jdXJyZW50Tm9kZS5vY2N1cGllZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52by5jdXJyZW50Tm9kZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnZvLmN1cnJlbnROb2RlLm9jY3VwaWVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXQgY29tYmF0R3JvdXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmNvbWJhdEdyb3VwO1xuICAgIH1cblxuICAgIGdldCBpc05QQygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uaXNOUEM7XG4gICAgfVxuXG4gICAgZ2V0IGF2YWlsYWJsZU1vdmVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5hdmFpbGFibGVNb3ZlbWVudDtcbiAgICB9XG5cbiAgICBzZXQgYXZhaWxhYmxlTW92ZW1lbnQodmFsdWUpIHtcbiAgICAgICAgdGhpcy52by5hdmFpbGFibGVNb3ZlbWVudCA9IHZhbHVlO1xuICAgIH1cblxuICAgIGdldCBhdmFpbGFibGVBY3Rpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5hdmFpbGFibGVBY3Rpb25zO1xuICAgIH1cblxuICAgIHNldCBhdmFpbGFibGVBY3Rpb25zKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudm8uYXZhaWxhYmxlQWN0aW9ucyA9IHZhbHVlO1xuICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5VU0VfQUNUSU9OICsgdGhpcy5pZCxcbiAgICAgICAgICAgIHRoaXMuYXZhaWxhYmxlQWN0aW9ucywgdGhpcy5tYXhBY3Rpb25zUGVyVHVybik7XG4gICAgfVxuXG4gICAgZ2V0IG1heEFjdGlvbnNQZXJUdXJuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5tYXhBY3Rpb25zUGVyVHVybjtcbiAgICB9XG5cbiAgICBnZXQgc2tpbGwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLnNraWxsO1xuICAgIH1cblxuICAgIGdldCBjdXJyZW50U3RhbWluYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uY3VycmVudFN0YW1pbmE7XG4gICAgfVxuXG4gICAgZ2V0IGN1cnJlbnRMdWNrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5jdXJyZW50U3RhbWluYTtcbiAgICB9XG5cbiAgICBnZXQgaXNEZWFkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52by5jdXJyZW50U3RhbWluYSA8PSAwO1xuICAgIH1cblxuICAgIGdldCBib3RCZWhhdmlvdXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmJvdEJlaGF2aW91cjtcbiAgICB9XG5cbiAgICBnZXQgZXF1aXBwZWRXZWFwb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmVxdWlwcGVkV2VhcG9uO1xuICAgIH1cblxuICAgIHNldCBlcXVpcHBlZFdlYXBvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLnZvLmVxdWlwcGVkV2VhcG9uID0gdmFsdWU7XG4gICAgfVxuXG4gICAgZ2V0IGhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uaGVpZ2h0O1xuICAgIH1cblxufVxuIiwiZXhwb3J0IGNsYXNzIEdhbWVDaGFyYWN0ZXJWTyB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgICAgIHRoaXMuaWQgPSBwYXJhbXMuaWQ7XG4gICAgICAgIHRoaXMuaXNOUEMgPSBwYXJhbXMuaXNOUEM7XG4gICAgICAgIHRoaXMuY29tYmF0R3JvdXAgPSBwYXJhbXMuY29tYmF0R3JvdXAgfHwgW107XG4gICAgICAgIHRoaXMuZGlhbG9ndWVUcmVlID0gcGFyYW1zLmRpYWxvZ3VlVHJlZSB8fCB0aGlzLmlkO1xuICAgICAgICB0aGlzLmN1cnJlbnROb2RlID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIFRyb2lrYSBzdGF0c1xuICAgICAgICB0aGlzLmluaXRpYXRpdmUgPSBwYXJhbXMuaW5pdGlhdGl2ZSB8fCAyO1xuICAgICAgICB0aGlzLm1heE1vdmVtZW50ID0gcGFyYW1zLm1heE1vdmVtZW50IHx8IDY7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gcGFyYW1zLmhlaWdodCB8fCAxLjg7XG4gICAgICAgIHRoaXMubWF4QWN0aW9uc1BlclR1cm4gPSAxO1xuICAgICAgICB0aGlzLmF2YWlsYWJsZUFjdGlvbnMgPSB0aGlzLm1heEFjdGlvbnNQZXJUdXJuO1xuICAgICAgICB0aGlzLmF2YWlsYWJsZU1vdmVtZW50ID0gdGhpcy5tYXhNb3ZlbWVudDtcblxuICAgICAgICB0aGlzLnNraWxsID0gcGFyYW1zLnNraWxsIHx8IDE7XG5cbiAgICAgICAgdGhpcy5tYXhTdGFtaW5hID0gcGFyYW1zLm1heFN0YW1pbmEgfHwgMTtcbiAgICAgICAgdGhpcy5jdXJyZW50U3RhbWluYSA9IHRoaXMubWF4U3RhbWluYTtcblxuICAgICAgICB0aGlzLm1heEx1Y2sgPSBwYXJhbXMubWF4THVjayB8fCAxO1xuICAgICAgICB0aGlzLmN1cnJlbnRMdWNrID0gdGhpcy5tYXhMdWNrO1xuXG4gICAgICAgIHRoaXMuYWR2YW5jZWRTa2lsbHMgPSBwYXJhbXMuYWR2YW5jZWRTa2lsbHMgfHwgbmV3IE1hcCgpO1xuXG4gICAgICAgIHRoaXMuYm90QmVoYXZpb3VyID0gcGFyYW1zLmJvdEJlaGF2aW91ciB8fCAwO1xuXG4gICAgICAgIHRoaXMuZXF1aXBwZWRXZWFwb24gPSBwYXJhbXMuZXF1aXBwZWRXZWFwb24gfHwgXCJ1bmFybWVkXCI7XG5cbiAgICB9XG59IiwiY29uc3QgeyBQcm94eSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgQXN0YXIgfSBmcm9tICcuL25hdmlnYXRpb24vQXN0YXInO1xuaW1wb3J0IHsgZ2V0QWRqYWNlbnRQb2ludHMgfSBmcm9tICcuLi8uLi91dGlscy9BZGphY2VudFBvaW50cyc7XG5jb25zdCB7IEdhbWVNYXBWTyB9ID0gcmVxdWlyZSgnLi9HYW1lTWFwVk8nKTtcblxuZXhwb3J0IGNsYXNzIEdhbWVNYXBQcm94eSBleHRlbmRzIFByb3h5IHtcbiAgICBnZXQgdm8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGEoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJHYW1lTWFwUHJveHlcIiB9O1xuXG4gICAgY29uc3RydWN0b3IobWFwR3JpZCwgd2FsbEJvdW5kaW5nQm94ZXMsIGNvdmVyLCBwb3J0YWxzLCBuYXZHcmlkKSB7XG4gICAgICAgIHN1cGVyKEdhbWVNYXBQcm94eS5OQU1FKTtcblxuICAgICAgICB0aGlzLnNldERhdGEoe1xuICAgICAgICAgICAgbWFwR3JpZDogbWFwR3JpZCxcbiAgICAgICAgICAgIHdhbGxCb3VuZGluZ0JveGVzOiB3YWxsQm91bmRpbmdCb3hlcyxcbiAgICAgICAgICAgIGNvdmVyOiBjb3ZlcixcbiAgICAgICAgICAgIHBvcnRhbHM6IHBvcnRhbHMsXG4gICAgICAgICAgICBuYXZpZ2F0aW9uR3JpZDogbmF2R3JpZFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKCkge1xuXG4gICAgfVxuXG4gICAgZmluZE5lYXJlc3ROb2RlKHRhcmdldFBvaW50KSB7XG4gICAgICAgIGNvbnN0IG1hcEdyaWQgPSB0aGlzLnZvLm1hcEdyaWQ7XG5cbiAgICAgICAgbGV0IG5lYXJlc3ROb2RlID0gbWFwR3JpZFswXTtcbiAgICAgICAgbGV0IGRpc3RTcXJ0VG9OZWFyZXN0Tm9kZSA9IEFzdGFyLmdldERpc3RTcXVhcmVkKG5lYXJlc3ROb2RlLCB0YXJnZXRQb2ludCk7XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBtYXBHcmlkKSB7XG4gICAgICAgICAgICBjb25zdCBkaXN0VG9Ob2RlID0gQXN0YXIuZ2V0RGlzdFNxdWFyZWQobm9kZSwgdGFyZ2V0UG9pbnQpO1xuXG4gICAgICAgICAgICBpZiAoZGlzdFRvTm9kZSA8IGRpc3RTcXJ0VG9OZWFyZXN0Tm9kZSkge1xuICAgICAgICAgICAgICAgIGRpc3RTcXJ0VG9OZWFyZXN0Tm9kZSA9IGRpc3RUb05vZGU7XG4gICAgICAgICAgICAgICAgbmVhcmVzdE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5lYXJlc3ROb2RlO1xuICAgIH1cblxuICAgIGZpbmROZWFyZXN0V2F5cG9pbnQodGFyZ2V0UG9pbnQpIHtcbiAgICAgICAgY29uc3QgbmF2R3JpZCA9IHRoaXMudm8ubmF2aWdhdGlvbkdyaWQ7XG5cbiAgICAgICAgbGV0IG5lYXJlc3ROb2RlID0gbmF2R3JpZFswXTtcbiAgICAgICAgbGV0IGRpc3RTcXJ0VG9OZWFyZXN0Tm9kZSA9IEFzdGFyLmdldERpc3RTcXVhcmVkKG5lYXJlc3ROb2RlLCB0YXJnZXRQb2ludCk7XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBuYXZHcmlkKSB7XG4gICAgICAgICAgICBjb25zdCBkaXN0VG9Ob2RlID0gQXN0YXIuZ2V0RGlzdFNxdWFyZWQobm9kZSwgdGFyZ2V0UG9pbnQpO1xuXG4gICAgICAgICAgICBpZiAoZGlzdFRvTm9kZSA8IGRpc3RTcXJ0VG9OZWFyZXN0Tm9kZSkge1xuICAgICAgICAgICAgICAgIGRpc3RTcXJ0VG9OZWFyZXN0Tm9kZSA9IGRpc3RUb05vZGU7XG4gICAgICAgICAgICAgICAgbmVhcmVzdE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5lYXJlc3ROb2RlO1xuICAgIH1cblxuICAgIHJheUludGVyc2VjdHNXYWxsKGZyb20sIHRvKSB7XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gZnJvbS5kaXN0YW5jZSh0byk7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRvLmNsb25lKCkuc3ViKGZyb20uY2xvbmUoKSkubm9ybWFsaXplKCk7XG4gICAgICAgIGNvbnN0IHJheSA9IG5ldyBwYy5SYXkoZnJvbSwgZGlyZWN0aW9uKTtcblxuICAgICAgICBjb25zdCBtYXBXYWxscyA9IHRoaXMudm8ud2FsbEJvdW5kaW5nQm94ZXM7XG4gICAgICAgIGZvciAoY29uc3Qgd2FsbCBvZiBtYXBXYWxscykge1xuICAgICAgICAgICAgY29uc3QgaGl0UG9zaXRpb24gPSBuZXcgcGMuVmVjMygpO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gd2FsbC5pbnRlcnNlY3RzUmF5KHJheSwgaGl0UG9zaXRpb24pO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlVG9IaXQgPSBoaXRQb3NpdGlvbi5kaXN0YW5jZShmcm9tKTtcblxuICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZVRvSGl0IDwgZGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGdldCBjb3ZlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uY292ZXI7XG4gICAgfVxuXG5cbiAgICBpc0luQ292ZXIodGFyZ2V0UG9pbnQsIGF0dGFja2luZ0Zyb20pIHtcbiAgICAgICAgY29uc3QgYWRqYWNlbnRDb3ZlclBvaW50cyA9IFtdO1xuICAgICAgICBjb25zdCBhZGphY2VudFBvaW50cyA9IGdldEFkamFjZW50UG9pbnRzKHRhcmdldFBvaW50KTtcblxuICAgICAgICBmb3IgKGNvbnN0IGFkamFjZW50UG9pbnQgb2YgYWRqYWNlbnRQb2ludHMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoaW5nTm9kZSA9IHRoaXMuY292ZXIuZmluZCgoY292ZXJQb2ludCkgPT4gYWRqYWNlbnRQb2ludC5lcXVhbHMoY292ZXJQb2ludCkpO1xuICAgICAgICAgICAgaWYgKG1hdGNoaW5nTm9kZSkge1xuICAgICAgICAgICAgICAgIGFkamFjZW50Q292ZXJQb2ludHMucHVzaChhZGphY2VudFBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhZGphY2VudENvdmVyUG9pbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlVG9UYXJnZXQgPSB0YXJnZXRQb2ludC5kaXN0YW5jZShhdHRhY2tpbmdGcm9tKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYWRqYWNlbnRDb3ZlclBvaW50IG9mIGFkamFjZW50Q292ZXJQb2ludHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXN0YW5jZVRvQ292ZXIgPSBhZGphY2VudENvdmVyUG9pbnQuZGlzdGFuY2UoYXR0YWNraW5nRnJvbSk7XG4gICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlVG9Db3ZlciA8IGRpc3RhbmNlVG9UYXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0cmlldmVQb3J0YWwocG9ydGFsSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8ucG9ydGFscy5nZXQocG9ydGFsSWQpO1xuICAgIH1cblxuICAgIGhhc1ZhbGlkTGluZShub2RlQSwgbm9kZUIpIHtcbiAgICAgICAgY29uc3QgbGluZSA9IEFzdGFyLmNhbGN1bGF0ZUJyZXNlbmhhbUxpbmUobm9kZUEueCwgbm9kZUEueiwgbm9kZUIueCwgbm9kZUIueik7XG4gICAgICAgIHJldHVybiBBc3Rhci5jaGVja1ZhbGlkTGluZShsaW5lLCB0aGlzLnZvLm1hcEdyaWQpO1xuICAgIH1cblxuICAgIGhhc1ZhbGlkTm9kZShub2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLm1hcEdyaWQuc29tZShuID0+IG4uZXF1YWxzKG5vZGUpKTtcblxuICAgIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRBZGphY2VudFBvaW50cyhwb2ludCkge1xuICAgIGNvbnN0IHBvaW50cyA9IFtdXG4gICAgLy9Ob3J0aFxuICAgIHBvaW50cy5wdXNoKG5ldyBwYy5WZWMzKHBvaW50LngsIHBvaW50LnksIHBvaW50LnogLSAxKSk7XG4gICAgLy9FYXN0XG4gICAgcG9pbnRzLnB1c2gobmV3IHBjLlZlYzMocG9pbnQueCArIDEsIHBvaW50LnksIHBvaW50LnopKTtcbiAgICAvL1dlc3RcbiAgICBwb2ludHMucHVzaChuZXcgcGMuVmVjMyhwb2ludC54IC0gMSwgcG9pbnQueSwgcG9pbnQueikpO1xuICAgIC8vU291dGhcbiAgICBwb2ludHMucHVzaChuZXcgcGMuVmVjMyhwb2ludC54LCBwb2ludC55LCBwb2ludC56ICsgMSkpO1xuXG4gICAgcmV0dXJuIHBvaW50cztcbn0iLCJleHBvcnQgY2xhc3MgR2FtZU1hcFZPIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tYXBHcmlkID0gW107XG4gICAgfVxufSIsImV4cG9ydCBjbGFzcyBQcmlvcml0eVF1ZXVlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgfVxuXG4gICAgcHVzaCh2YWx1ZSwgcHJpb3JpdHkgPSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBwcmlvcml0eTogcHJpb3JpdHlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcG9wKCkge1xuICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICBsZXQgbWluID0gSW5maW5pdHk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcHJpb3JpdHkgPSB0aGlzLmRhdGFbaV0ucHJpb3JpdHk7XG4gICAgICAgICAgICBpZiAoTWF0aC5taW4obWluLCBwcmlvcml0eSkgPT09IHByaW9yaXR5KSB7XG4gICAgICAgICAgICAgICAgbWluID0gcHJpb3JpdHk7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuc3BsaWNlKGluZGV4LCAxKVswXS52YWx1ZTtcbiAgICB9XG5cbiAgICBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aFxuICAgIH1cblxuICAgIGVtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aCA9PT0gMDtcbiAgICB9XG59IiwiaW1wb3J0IHsgUHJpb3JpdHlRdWV1ZSB9IGZyb20gJy4vUHJpb3JpdHlRdWV1ZSc7XG5cbmV4cG9ydCBjbGFzcyBBc3RhciB7XG4gICAgc3RhdGljIGJyZWFkdGhGaXJzdFNlYXJjaChzdGFydCwgcmFuZ2VMaW1pdCkge1xuICAgICAgICBsZXQgZnJvbnRpZXIgPSBbXTtcbiAgICAgICAgY29uc3Qgc2VhcmNoZWRBcmVhID0gW107XG4gICAgICAgIGZyb250aWVyLnB1c2goc3RhcnQpO1xuXG4gICAgICAgIGNvbnN0IGNhbWVGcm9tID0gbmV3IE1hcCgpO1xuICAgICAgICBjYW1lRnJvbS5zZXQoc3RhcnQsIHN0YXJ0KTtcblxuICAgICAgICBsZXQgcmFuZ2UgPSAwO1xuXG4gICAgICAgIHdoaWxlIChmcm9udGllci5sZW5ndGggPiAwICYmIHJhbmdlIDwgcmFuZ2VMaW1pdCkge1xuICAgICAgICAgICAgY29uc3QgbmV3RnJvbnRpZXIgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY3VycmVudCBvZiBmcm9udGllcikge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudC5jb25uZWN0ZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gY3VycmVudC5jb25uZWN0ZWROb2Rlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgZGlzdFZhbHVlID0gdGhpcy5nZXREaXN0U3F1YXJlZChuZXh0LCBjdXJyZW50KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHQub2NjdXBpZWQgJiYgKCFjYW1lRnJvbS5oYXMobmV4dCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdGcm9udGllci5wdXNoKG5leHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoZWRBcmVhLnB1c2gobmV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW1lRnJvbS5zZXQobmV4dCwgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZyb250aWVyID0gbmV3RnJvbnRpZXI7XG5cbiAgICAgICAgICAgIHJhbmdlKys7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VhcmNoZWRBcmVhO1xuICAgIH1cblxuXG4gICAgc3RhdGljIGNhbGN1bGF0ZVBhdGgoc3RhcnQsIGdvYWwpIHtcbiAgICAgICAgY29uc3QgZnJvbnRpZXIgPSBuZXcgUHJpb3JpdHlRdWV1ZSgpO1xuICAgICAgICBmcm9udGllci5wdXNoKHN0YXJ0LCAwKTtcblxuICAgICAgICBjb25zdCBjYW1lRnJvbSA9IG5ldyBNYXAoKTtcbiAgICAgICAgY29uc3QgY29zdFNvRmFyID0gbmV3IE1hcCgpO1xuXG4gICAgICAgIGNhbWVGcm9tLnNldChzdGFydCwgc3RhcnQpO1xuICAgICAgICBjb3N0U29GYXIuc2V0KHN0YXJ0LCAwKTtcblxuICAgICAgICB3aGlsZSAoIWZyb250aWVyLmVtcHR5KCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBmcm9udGllci5wb3AoKTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnQuZXF1YWxzKGdvYWwpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudC5jb25uZWN0ZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBjdXJyZW50LmNvbm5lY3RlZE5vZGVzW2ldO1xuICAgICAgICAgICAgICAgIC8vIGNvbnN0IGRpc3RWYWx1ZSA9IHRoaXMuZ2V0RGlzdFNxdWFyZWQobmV4dCwgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3Q29zdCA9IGNvc3RTb0Zhci5nZXQoY3VycmVudCkgKyAxO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFuZXh0Lm9jY3VwaWVkICYmICghY29zdFNvRmFyLmhhcyhuZXh0KSB8fCBuZXdDb3N0IDwgY29zdFNvRmFyLmdldChuZXh0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29zdFNvRmFyLnNldChuZXh0LCBuZXdDb3N0KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByaW9yaXR5ID0gbmV3Q29zdCArIHRoaXMuaGV1cmlzdGljKG5leHQsIGdvYWwpO1xuICAgICAgICAgICAgICAgICAgICBmcm9udGllci5wdXNoKG5leHQsIHByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgY2FtZUZyb20uc2V0KG5leHQsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGN1cnJlbnQgPSBnb2FsO1xuICAgICAgICBsZXQgcGF0aElzQnJva2VuID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHBhdGggPSBbXTtcbiAgICAgICAgcGF0aC5wdXNoKGN1cnJlbnQpO1xuXG4gICAgICAgIHdoaWxlICghY3VycmVudC5lcXVhbHMoc3RhcnQpICYmICFwYXRoSXNCcm9rZW4pIHtcbiAgICAgICAgICAgIGlmIChjYW1lRnJvbS5oYXMoY3VycmVudCkgfHwgIWN1cnJlbnQuZXF1YWxzKGdvYWwpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGNhbWVGcm9tLmdldChjdXJyZW50KTtcbiAgICAgICAgICAgICAgICBwYXRoLnB1c2goY3VycmVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhdGhJc0Jyb2tlbiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGF0aElzQnJva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9wYXRoLnB1c2goc3RhcnQpO1xuICAgICAgICAgICAgLy8gcGF0aC5yZXZlcnNlKCk7XG4gICAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBjYWxjdWxhdGVXYXlwb2ludHNQYXRoKHN0YXJ0LCBnb2FsKSB7XG4gICAgICAgIGNvbnN0IGZyb250aWVyID0gbmV3IFByaW9yaXR5UXVldWUoKTtcbiAgICAgICAgZnJvbnRpZXIucHVzaChzdGFydCwgMCk7XG5cbiAgICAgICAgY29uc3QgY2FtZUZyb20gPSBuZXcgTWFwKCk7XG4gICAgICAgIGNvbnN0IGNvc3RTb0ZhciA9IG5ldyBNYXAoKTtcblxuICAgICAgICBjYW1lRnJvbS5zZXQoc3RhcnQsIHN0YXJ0KTtcbiAgICAgICAgY29zdFNvRmFyLnNldChzdGFydCwgMCk7XG5cbiAgICAgICAgd2hpbGUgKCFmcm9udGllci5lbXB0eSgpKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gZnJvbnRpZXIucG9wKCk7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50LmVxdWFscyhnb2FsKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnQuY29ubmVjdGVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gY3VycmVudC5jb25uZWN0ZWROb2Rlc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXN0VmFsdWUgPSB0aGlzLmdldERpc3RTcXVhcmVkKG5leHQsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Nvc3QgPSBjb3N0U29GYXIuZ2V0KGN1cnJlbnQpICsgZGlzdFZhbHVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFuZXh0Lm9jY3VwaWVkICYmICghY29zdFNvRmFyLmhhcyhuZXh0KSB8fCBuZXdDb3N0IDwgY29zdFNvRmFyLmdldChuZXh0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29zdFNvRmFyLnNldChuZXh0LCBuZXdDb3N0KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByaW9yaXR5ID0gbmV3Q29zdCArIHRoaXMuaGV1cmlzdGljKG5leHQsIGdvYWwpO1xuICAgICAgICAgICAgICAgICAgICBmcm9udGllci5wdXNoKG5leHQsIHByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgY2FtZUZyb20uc2V0KG5leHQsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGN1cnJlbnQgPSBnb2FsO1xuICAgICAgICBsZXQgcGF0aElzQnJva2VuID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHBhdGggPSBbXTtcbiAgICAgICAgcGF0aC5wdXNoKGN1cnJlbnQpO1xuXG4gICAgICAgIHdoaWxlICghY3VycmVudC5lcXVhbHMoc3RhcnQpICYmICFwYXRoSXNCcm9rZW4pIHtcbiAgICAgICAgICAgIGlmIChjYW1lRnJvbS5oYXMoY3VycmVudCkgfHwgIWN1cnJlbnQuZXF1YWxzKGdvYWwpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGNhbWVGcm9tLmdldChjdXJyZW50KTtcbiAgICAgICAgICAgICAgICBwYXRoLnB1c2goY3VycmVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhdGhJc0Jyb2tlbiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGF0aElzQnJva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9wYXRoLnB1c2goc3RhcnQpO1xuICAgICAgICAgICAgLy8gcGF0aC5yZXZlcnNlKCk7XG4gICAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXREaXN0U3F1YXJlZChwdDEsIHB0Mikge1xuICAgICAgICByZXR1cm4gKChwdDEueCAtIHB0Mi54KSAqIChwdDEueCAtIHB0Mi54KVxuICAgICAgICAgICAgKyAocHQxLnkgLSBwdDIueSkgKiAocHQxLnkgLSBwdDIueSlcbiAgICAgICAgICAgICsgKHB0MS56IC0gcHQyLnopICogKHB0MS56IC0gcHQyLnopKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaGV1cmlzdGljKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGEueCAtIGIueCkgKyBNYXRoLmFicyhhLnkgLSBiLnkpICsgTWF0aC5hYnMoYS56IC0gYi56KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgY2FsY3VsYXRlQnJlc2VuaGFtTGluZSh4MCwgejAsIHgxLCB6MSkge1xuICAgICAgICBsZXQgZHggPSB4MSAtIHgwO1xuICAgICAgICBsZXQgZHkgPSB6MSAtIHowO1xuICAgICAgICBsZXQgbnggPSBNYXRoLmFicyhkeCk7XG4gICAgICAgIGxldCBueSA9IE1hdGguYWJzKGR5KTtcblxuICAgICAgICBjb25zdCBzaWduX3ggPSBkeCA+IDAgPyAxIDogLTE7XG4gICAgICAgIGNvbnN0IHNpZ25feSA9IGR5ID4gMCA/IDEgOiAtMTtcblxuXG4gICAgICAgIGNvbnN0IHAgPSB7IHg6IHgwLCB5OiAwLCB6OiB6MCB9O1xuICAgICAgICBjb25zdCBwb2ludHMgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpeCA9IDAsIGl5ID0gMDsgaXggPCBueCB8fCBpeSA8IG55Oykge1xuICAgICAgICAgICAgaWYgKCgwLjUgKyBpeCkgLyBueCA8ICgwLjUgKyBpeSkgLyBueSkge1xuICAgICAgICAgICAgICAgIC8vIG5leHQgc3RlcCBpcyBob3Jpem9udGFsXG4gICAgICAgICAgICAgICAgcC54ICs9IHNpZ25feDtcbiAgICAgICAgICAgICAgICBpeCsrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBuZXh0IHN0ZXAgaXMgdmVydGljYWxcbiAgICAgICAgICAgICAgICBwLnogKz0gc2lnbl95O1xuICAgICAgICAgICAgICAgIGl5Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7IHg6IHAueCwgeTogMCwgejogcC56IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBvaW50cztcblxuICAgIH1cblxuICAgIHN0YXRpYyBjaGVja1ZhbGlkTGluZShsaW5lLCBtYXApIHtcbiAgICAgICAgbGV0IGlzVmFsaWRMaW5lID0gdHJ1ZTtcbiAgICAgICAgZm9yIChjb25zdCBwb2ludCBvZiBsaW5lKSB7XG4gICAgICAgICAgICBpZiAoIW1hcC5zb21lKG4gPT4gbi5lcXVhbHMocG9pbnQpKSkge1xuICAgICAgICAgICAgICAgIGlzVmFsaWRMaW5lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXNWYWxpZExpbmU7XG4gICAgfVxufSIsImNvbnN0IHsgUHJveHkgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgR2FtZVN0YXRlVk8gfSA9IHJlcXVpcmUoJy4vR2FtZVN0YXRlVk8nKTtcblxuXG5leHBvcnQgY2xhc3MgR2FtZVN0YXRlUHJveHkgZXh0ZW5kcyBQcm94eSB7XG4gICAgZ2V0IHZvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRhKCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiR2FtZVN0YXRlUHJveHlcIiB9O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKEdhbWVTdGF0ZVByb3h5Lk5BTUUsIG5ldyBHYW1lU3RhdGVWTygpKTtcbiAgICB9XG5cbiAgICB1cGRhdGVHYW1lU3RhdGVUeXBlKG5ld1N0YXRlVHlwZSkge1xuICAgICAgICB0aGlzLnZvLmdhbWVwbGF5TW9kZSA9IG5ld1N0YXRlVHlwZTtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudE1vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZvLmdhbWVwbGF5TW9kZTtcbiAgICB9XG5cbiAgICBnZXQgY3VycmVudEFjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudm8uc2VsZWN0ZWRBY3Rpb247XG4gICAgfVxuXG4gICAgc2V0IGN1cnJlbnRBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy52by5zZWxlY3RlZEFjdGlvbiA9IHZhbHVlO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBnYW1lcGxheU1vZGVUeXBlcyA9IHtcbiAgICBFWFBMT1JBVElPTjogJ0VYUExPUkFUSU9OJyxcbiAgICBDT01CQVQ6ICdDT01CQVQnLFxuICAgIERJQUxPR1VFOiAnRElBTE9HVUUnLFxuICAgIEdBTUVfT1ZFUjogJ0dBTUVfT1ZFUicsXG5cbn1cblxuZXhwb3J0IGNsYXNzIEdhbWVTdGF0ZVZPIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5nYW1lcGxheU1vZGUgPSBnYW1lcGxheU1vZGVUeXBlcy5FWFBMT1JBVElPTjtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEFjdGlvbiA9IFwibm9uZVwiO1xuICAgIH1cbn0iLCJleHBvcnQgY2xhc3MgSW52ZW50b3J5SXRlbSB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgc2l6ZSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBJbnZlbnRvcnlJdGVtIH0gZnJvbSBcIi4vaXRlbXMvSW52ZW50b3J5SXRlbVwiO1xuXG5leHBvcnQgY2xhc3MgSW52ZW50b3J5Vk8ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmludmVudG9yeUl0ZW1zID0gW107XG5cbiAgICAgICAgdGhpcy5hZGRJdGVtKFwiVGVzdCBPbmVcIik7XG4gICAgICAgIHRoaXMuYWRkSXRlbShcIlRlc3QgVHdvXCIpO1xuICAgICAgICB0aGlzLmFkZEl0ZW0oXCJUZXN0IFRocmVlXCIpO1xuICAgICAgICB0aGlzLmFkZEl0ZW0oXCJUZXN0IEZvdXJcIik7XG4gICAgICAgIHRoaXMuYWRkSXRlbShcIlRlc3QgRml2ZVwiLCAzKTtcblxuICAgIH1cblxuICAgIGFkZEl0ZW0oaXRlbU5hbWUsIHNpemUgPSAxKSB7XG4gICAgICAgIHRoaXMuaW52ZW50b3J5SXRlbXMucHVzaChcbiAgICAgICAgICAgIG5ldyBJbnZlbnRvcnlJdGVtKGl0ZW1OYW1lLCBzaXplKVxuICAgICAgICApO1xuICAgIH1cbn0iLCJcbmV4cG9ydCBjbGFzcyBTdG9yeVZPIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIH1cbn0iLCJcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVNYXBQcm94eSB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVNYXAvR2FtZU1hcFByb3h5JztcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIEdhbWVDaGFyYWN0ZXJNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkdhbWVDaGFyYWN0ZXJNZWRpYXRvcl9cIiB9O1xuXG4gICAgY29uc3RydWN0b3IoaWQsIHZpZXdDb21wb25lbnQsIHByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zKSB7XG4gICAgICAgIHN1cGVyKEdhbWVDaGFyYWN0ZXJNZWRpYXRvci5OQU1FICsgaWQpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG5cbiAgICAgICAgbGV0IG5vdGlmaWNhdGlvbnMgPSBbXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FX0NPTVBMRVRFLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX05PREUgKyB0aGlzLmlkLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX1dBWVBPSU5UICsgdGhpcy5pZCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5OQVZJR0FURV9BTE9OR19QQVRIICsgdGhpcy5pZCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5TRVRfQ0hBUkFDVEVSX1RPX05PREUgKyB0aGlzLmlkLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkRJU1BMQVlfREVBVEggKyB0aGlzLmlkLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkRJU1BMQVlfQVRUQUNLICsgdGhpcy5pZCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5ESVNQTEFZX0hJVCArIHRoaXMuaWQsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuQ0hBUkFDVEVSX0xPT0tfQVQgKyB0aGlzLmlkLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLlNUQVJUX0NPTUJBVCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5NQVBfR1JJRF9DUkVBVEVEXG5cbiAgICAgICAgXTtcblxuICAgICAgICBub3RpZmljYXRpb25zID0gbm90aWZpY2F0aW9ucy5jb25jYXQocHJlcmVnaXN0ZXJlZE5vdGlmaWNhdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbnMpO1xuXG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vbigndXBkYXRlQ3VycmVudE5vZGUnLCB0aGlzLnVwZGF0ZUN1cnJlbnROb2RlLCB0aGlzKTtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdmaW5pc2hlZE1vdmUnLCB0aGlzLmhhbmRsZUZpbmlzaGVkTW9kZSwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9mZigndXBkYXRlQ3VycmVudE5vZGUnLCB0aGlzLnVwZGF0ZUN1cnJlbnROb2RlLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vZmYoJ2ZpbmlzaGVkTW92ZScsIHRoaXMuaGFuZGxlRmluaXNoZWRNb2RlLCB0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLnZpZXdDb21wb25lbnQpIHtcbiAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5maXJlKG5vdGlmaWNhdGlvbk5hbWUsIHRoaXMuaWQsIC4uLmFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBzY3JpcHRLZXkgaW4gdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdCkge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHQsIHNjcmlwdEtleSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY3JpcHRDb21wb25lbnQgPSB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0W3NjcmlwdEtleV07XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNjcmlwdENvbXBvbmVudC5oYW5kbGVOb3RpZmljYXRpb24gPT09ICdmdW5jdGlvbicpIHtcblxuICAgICAgICAgICAgICAgICAgICBzY3JpcHRDb21wb25lbnQuaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIHRoaXMuaWQsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuU1RBUlRfQ09NQkFUOlxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlU3RhcnRDb21iYXQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLk1BUF9HUklEX0NSRUFURUQ6XG4gICAgICAgICAgICAgICAgY29uc3QgZ2FtZU1hcFByb3h5ID0gdGhpcy5mYWNhZGUucmV0cmlldmVQcm94eShHYW1lTWFwUHJveHkuTkFNRSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2FtZUNoYXJhY3RlclByb3h5ID0gdGhpcy5mYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHRoaXMuaWQpO1xuICAgICAgICAgICAgICAgIGdhbWVDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IGdhbWVNYXBQcm94eS5maW5kTmVhcmVzdE5vZGUodGhpcy52aWV3Q29tcG9uZW50LmdldExvY2FsUG9zaXRpb24oKSk7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX05PREUgKyB0aGlzLmlkOlxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlTmF2aWdhdGVUb05vZGUoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5OQVZJR0FURV9UT19XQVlQT0lOVCArIHRoaXMuaWQ6XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVOYXZpZ2F0ZVRvV2F5cG9pbnQoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5OQVZJR0FURV9BTE9OR19QQVRIICsgdGhpcy5pZDpcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU5hdmlnYXRlQWxvbmdQYXRoKGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuU0VUX0NIQVJBQ1RFUl9UT19OT0RFICsgdGhpcy5pZDpcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVNldENoYXJhY3RlclRvTm9kZShhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkNIQVJBQ1RFUl9MT09LX0FUICsgdGhpcy5pZDpcbiAgICAgICAgICAgICAgICBjb25zdCBsb29rUG9pbnQgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5sb29rQXRQb2ludChsb29rUG9pbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuRElTUExBWV9ERUFUSCArIHRoaXMuaWQ6XG4gICAgICAgICAgICAgICAgY29uc3QgaGl0Ym94ID0gdGhpcy52aWV3Q29tcG9uZW50LmZpbmRCeU5hbWUoXCJIaXRib3hcIik7XG4gICAgICAgICAgICAgICAgaWYgKGhpdGJveCkge1xuICAgICAgICAgICAgICAgICAgICBoaXRib3guZmlyZSgnc3RvcExpc3RlbmluZycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uYW5pbWF0ZURlYXRoKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5ESVNQTEFZX0FUVEFDSyArIHRoaXMuaWQ6XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLmFuaW1hdGVBdHRhY2soKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkRJU1BMQVlfSElUICsgdGhpcy5pZDpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uYW5pbWF0ZUhpdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlTmF2aWdhdGVUb05vZGUodGFyZ2V0Tm9kZSkge1xuICAgICAgICBjb25zdCBnYW1lTWFwUHJveHkgPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVNYXBQcm94eS5OQU1FKTtcbiAgICAgICAgY29uc3QgZ2FtZUNoYXJhY3RlclByb3h5ID0gdGhpcy5mYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHRoaXMuaWQpO1xuXG4gICAgICAgIGdhbWVDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IGdhbWVNYXBQcm94eS5maW5kTmVhcmVzdE5vZGUodGhpcy52aWV3Q29tcG9uZW50LmdldExvY2FsUG9zaXRpb24oKSk7XG5cbiAgICAgICAgY29uc3QgcGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgoZ2FtZUNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlLCB0YXJnZXROb2RlKTtcbiAgICAgICAgaWYgKHBhdGggJiYgcGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uc2V0UGF0aChwYXRoKTtcbiAgICAgICAgICAgIGdhbWVDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IHRhcmdldE5vZGU7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGhhbmRsZU5hdmlnYXRlVG9XYXlwb2ludCh0YXJnZXROb2RlKSB7XG4gICAgICAgIGNvbnN0IGdhbWVNYXBQcm94eSA9IHRoaXMuZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZU1hcFByb3h5Lk5BTUUpO1xuICAgICAgICBjb25zdCBnYW1lQ2hhcmFjdGVyUHJveHkgPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgdGhpcy5pZCk7XG5cbiAgICAgICAgZ2FtZUNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlID0gZ2FtZU1hcFByb3h5LmZpbmROZWFyZXN0Tm9kZSh0aGlzLnZpZXdDb21wb25lbnQuZ2V0TG9jYWxQb3NpdGlvbigpKTtcbiAgICAgICAgY29uc3QgY3VycmVudE5vZGUgPSBnYW1lQ2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGU7XG5cbiAgICAgICAgY29uc3QgbmVhcmVzdFdheXBvaW50ID0gZ2FtZU1hcFByb3h5LmZpbmROZWFyZXN0V2F5cG9pbnQodGhpcy52aWV3Q29tcG9uZW50LmdldExvY2FsUG9zaXRpb24oKSk7XG4gICAgICAgIGNvbnN0IG5lYXJlc3RUYXJnZXRXYXlwb2ludCA9IGdhbWVNYXBQcm94eS5maW5kTmVhcmVzdFdheXBvaW50KHRhcmdldE5vZGUpO1xuXG4gICAgICAgIC8qY29uc3QgcGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVdheXBvaW50c1BhdGgobmVhcmVzdFdheXBvaW50LCBuZWFyZXN0VGFyZ2V0V2F5cG9pbnQpO1xuICAgICAgICBpZiAocGF0aCAmJiBwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBoYXNMaW5lVG9Qb2ludCA9IHRydWU7XG4gICAgICAgICAgICB3aGlsZSAocGF0aC5sZW5ndGggPiAwICYmIGhhc0xpbmVUb1BvaW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGdhbWVNYXBQcm94eS5oYXNWYWxpZExpbmUocGF0aFtwYXRoLmxlbmd0aCAtIDFdLCBjdXJyZW50Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBoYXNMaW5lVG9Qb2ludCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIC8vIFNlZSBpZiBlbmQgb2YgcGF0aCBjYW4gYmUgdHJpbW1lZFxuICAgICAgICAgICAgICAgIGlmIChnYW1lTWFwUHJveHkuaGFzVmFsaWRMaW5lKHBhdGhbMV0sIHRhcmdldE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhdGguc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhdGgudW5zaGlmdCh0YXJnZXROb2RlKTtcblxuICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnNldFBhdGgocGF0aCk7XG4gICAgICAgICAgICBnYW1lQ2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUgPSB0YXJnZXROb2RlO1xuICAgICAgICB9Ki9cblxuICAgICAgICAvLyBJcyBzdHJhaWdodCBsaW5lP1xuICAgICAgICBpZiAoZ2FtZU1hcFByb3h5Lmhhc1ZhbGlkTGluZShjdXJyZW50Tm9kZSwgdGFyZ2V0Tm9kZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBbdGFyZ2V0Tm9kZSwgY3VycmVudE5vZGVdO1xuICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnNldFBhdGgocGF0aCk7XG4gICAgICAgICAgICBnYW1lQ2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUgPSB0YXJnZXROb2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVdheXBvaW50c1BhdGgobmVhcmVzdFdheXBvaW50LCBuZWFyZXN0VGFyZ2V0V2F5cG9pbnQpO1xuICAgICAgICAgICAgaWYgKHBhdGggJiYgcGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTZWUgaWYgZW5kIG9mIHBhdGggY2FuIGJlIHRyaW1tZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdhbWVNYXBQcm94eS5oYXNWYWxpZExpbmUocGF0aFsxXSwgdGFyZ2V0Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBoYXNMaW5lVG9Qb2ludCA9IHRydWU7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHBhdGgubGVuZ3RoID4gMSAmJiBoYXNMaW5lVG9Qb2ludCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZU1hcFByb3h5Lmhhc1ZhbGlkTGluZShwYXRoW3BhdGgubGVuZ3RoIC0gMl0sIGN1cnJlbnROb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0xpbmVUb1BvaW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIHBhdGgudW5zaGlmdCh0YXJnZXROb2RlKTtcblxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5zZXRQYXRoKHBhdGgpO1xuICAgICAgICAgICAgICAgIGdhbWVDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IHRhcmdldE5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVOYXZpZ2F0ZUFsb25nUGF0aChwYXRoKSB7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5zZXRQYXRoKHBhdGgpO1xuICAgIH1cblxuICAgIG1vdmVUb05vZGVXaXRoUHJvbWlzZSh0YXJnZXROb2RlKSB7XG4gICAgICAgIGNvbnN0IGdhbWVNYXBQcm94eSA9IHRoaXMuZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZU1hcFByb3h5Lk5BTUUpO1xuXG4gICAgICAgIGNvbnN0IGdhbWVDaGFyYWN0ZXJQcm94eSA9IHRoaXMuZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0aGlzLmlkKTtcblxuICAgICAgICBpZiAoIWdhbWVDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSkge1xuICAgICAgICB9XG4gICAgICAgIGdhbWVDaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZSA9IGdhbWVNYXBQcm94eS5maW5kTmVhcmVzdE5vZGUodGhpcy52aWV3Q29tcG9uZW50LmdldExvY2FsUG9zaXRpb24oKSk7XG5cblxuICAgICAgICBjb25zdCBwYXRoID0gQXN0YXIuY2FsY3VsYXRlUGF0aChnYW1lQ2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUsIHRhcmdldE5vZGUpO1xuICAgICAgICBpZiAocGF0aCAmJiBwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5zZXRQYXRoKHBhdGgpO1xuICAgICAgICAgICAgZ2FtZUNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQub24oJ2ZpbmlzaGVkTW92ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdjYW5jZWxNb3ZlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGhhbmRsZU5hdmlnYXRlQWxvbmdQYXRoV2l0aFByb21pc2UocGF0aCkge1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uc2V0UGF0aChwYXRoKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdmaW5pc2hlZE1vdmUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vbignY2FuY2VsTW92ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGVDdXJyZW50Tm9kZShuZXdOb2RlKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk1PVkVEX1RPX05PREUgKyB0aGlzLmlkLCBuZXdOb2RlKTtcblxuICAgIH1cblxuICAgIGhhbmRsZUZpbmlzaGVkTW9kZShuZXdOb2RlKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkZJTklTSEVEX01PVkUsIHRoaXMuaWQsIG5ld05vZGUpO1xuICAgIH1cblxuICAgIGxvb2tGb3JDaGFyYWN0ZXIoaWQsIG5vZGUpIHtcbiAgICAgICAgZm9yIChjb25zdCBzZWFyY2hOb2RlIG9mIHRoaXMuc2VhcmNoQXJlYSkge1xuICAgICAgICAgICAgaWYgKHNlYXJjaE5vZGUuZXF1YWxzKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLmxvb2tBdFBvaW50KG5vZGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNUQVJUX0NPTUJBVCwgdGhpcy52aWV3Q29tcG9uZW50LCBbaWRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZVN0YXJ0Q29tYmF0KCkge1xuICAgICAgICBjb25zdCBnYW1lQ2hhcmFjdGVyVk8gPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgdGhpcy5pZCkudm87XG5cbiAgICAgICAgLy8gdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnN0b3BNb3ZlbWVudChnYW1lQ2hhcmFjdGVyVk8uY3VycmVudE5vZGUpO1xuICAgIH1cblxuICAgIGhhbmRsZVNldENoYXJhY3RlclRvTm9kZShub2RlKSB7XG4gICAgICAgIGNvbnN0IGdhbWVDaGFyYWN0ZXJQcm94eSA9IHRoaXMuZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0aGlzLmlkKTtcbiAgICAgICAgZ2FtZUNoYXJhY3RlclByb3h5LmN1cnJlbnROb2RlID0gbm9kZTtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnN0b3BNb3ZlbWVudChub2RlKTtcbiAgICB9XG59XG4iLCJcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIFByb2plY3RpbGVDcmVhdG9yTWVkaWF0b3IgZXh0ZW5kcyBNZWRpYXRvciB7XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJQcm9qZWN0aWxlQ3JlYXRvck1lZGlhdG9yXCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKHZpZXdDb21wb25lbnQpIHtcbiAgICAgICAgc3VwZXIoUHJvamVjdGlsZUNyZWF0b3JNZWRpYXRvci5OQU1FKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24oW1xuXG4gICAgICAgIF0pO1xuXG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVQcm9qZWN0aWxlKHR5cGUsIG9yaWdpblBvaW50LCB0YXJnZXRQb2ludCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnUHJvamVjdGlsZUNyZWF0b3JDb21wb25lbnQnXS5jcmVhdGVQcm9qZWN0aWxlKHR5cGUsIG9yaWdpblBvaW50LCB0YXJnZXRQb2ludCk7XG4gICAgfVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5jb25zdCB7IEdhbWVGYWNhZGUgfSA9IHJlcXVpcmUoJy4uL0dhbWVGYWNhZGUnKTtcblxuZXhwb3J0IGNvbnN0IENhY29nZW5HYW1lID0gcGMuY3JlYXRlU2NyaXB0KCdDYWNvZ2VuR2FtZScpO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuQ2Fjb2dlbkdhbWUucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkFQUF9JTklUSUFMSVNFRCk7XG4gICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FLCBcIlBvcnQgVGFyaW5nb1wiLCBcImVudHJhbmNlXCIpO1xufTtcblxuLy8gdXBkYXRlIGNvZGUgY2FsbGVkIGV2ZXJ5IGZyYW1lXG5DYWNvZ2VuR2FtZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGR0KSB7XG5cbn07IiwiaW1wb3J0IHsgTmF2aWdhdGlvbk5vZGUgfSBmcm9tIFwiLi4vLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL05hdmlnYXRpb25Ob2RlXCI7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhcic7XG5cbmV4cG9ydCBjb25zdCBOYXZpZ2F0aW9uQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdOYXZpZ2F0aW9uQ29tcG9uZW50Jyk7XG5cbk5hdmlnYXRpb25Db21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJjb25uZWN0ZWRDb21wb25lbnRzXCIsIHtcbiAgICB0eXBlOiBcImVudGl0eVwiLFxuICAgIGFycmF5OiB0cnVlLFxuICAgIHRpdGxlOiBcIkNvbm5lY3RlZCBDb21wb25lbnRzXCJcbn0pO1xuXG5OYXZpZ2F0aW9uQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxTY2FsZSgpO1xuICAgIGNvbnN0IGhhbGZFeHRlbnRzID0gbmV3IHBjLlZlYzMoc2NhbGUueCAvIDIsIDAuMDUsIHNjYWxlLnogLyAyKTtcbiAgICB0aGlzLmFhYmIgPSBuZXcgcGMuQm91bmRpbmdCb3godGhpcy5lbnRpdHkuZ2V0UG9zaXRpb24oKSwgaGFsZkV4dGVudHMpO1xuICAgIHRoaXMuYXBwLm9uKCdwaWNrZXI6cmF5Y2FzdCcsIHRoaXMuaGFuZGxlUmF5Q2FzdCwgdGhpcyk7XG5cbiAgICB0aGlzLmVudGl0eS5maW5kQnlOYW1lKCdQbGFuZScpLmVuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmVudGl0eS5vbmNlKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgICB0aGlzLmFwcC5vZmYoJ3BpY2tlcjpyYXljYXN0JywgdGhpcy5oYW5kbGVSYXlDYXN0LCB0aGlzKTtcbiAgICB9KTtcbn1cblxuTmF2aWdhdGlvbkNvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlUmF5Q2FzdCA9IGZ1bmN0aW9uIChyYXksIHNjcmVlblBvcykge1xuICAgIGNvbnN0IGhpdFBvc2l0aW9uID0gbmV3IHBjLlZlYzMoKTtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLmFhYmIuaW50ZXJzZWN0c1JheShyYXksIGhpdFBvc2l0aW9uKTtcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIHRoaXMuYXBwLmZpcmUoJ3BpY2tlcjpyZXN1bHQnLCB0aGlzLmVudGl0eSwgaGl0UG9zaXRpb24sIHNjcmVlblBvcyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8TmF2aWdhdGlvbk5vZGU+fSBub2RlR3JpZCAtIEFycmF5IG9mIG5vZGVzIHJlcHJlc2VudGluZyBwb2ludHMgb24gdGhlIGdyaWQuXG4gKi9cbk5hdmlnYXRpb25Db21wb25lbnQucHJvdG90eXBlLnNldEdyaWQgPSBmdW5jdGlvbiAobm9kZUdyaWQpIHtcbiAgICB0aGlzLm5vZGVHcmlkID0gbm9kZUdyaWQ7XG59XG5cbk5hdmlnYXRpb25Db21wb25lbnQucHJvdG90eXBlLmdldEdyaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZUdyaWQ7XG59XG5cbk5hdmlnYXRpb25Db21wb25lbnQucHJvdG90eXBlLmdldE5lYXJlc3ROb2RlID0gZnVuY3Rpb24gKHRhcmdldFBvaW50KSB7XG4gICAgbGV0IG5lYXJlc3ROb2RlID0gdGhpcy5ub2RlR3JpZFswXTtcbiAgICBsZXQgZGlzdFNxcnRUb05lYXJlc3ROb2RlID0gQXN0YXIuZ2V0RGlzdFNxdWFyZWQobmVhcmVzdE5vZGUsIHRhcmdldFBvaW50KTtcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcy5ub2RlR3JpZCkge1xuICAgICAgICBjb25zdCBkaXN0VG9Ob2RlID0gQXN0YXIuZ2V0RGlzdFNxdWFyZWQobm9kZSwgdGFyZ2V0UG9pbnQpO1xuXG4gICAgICAgIGlmIChkaXN0VG9Ob2RlIDwgZGlzdFNxcnRUb05lYXJlc3ROb2RlKSB7XG4gICAgICAgICAgICBkaXN0U3FydFRvTmVhcmVzdE5vZGUgPSBkaXN0VG9Ob2RlO1xuICAgICAgICAgICAgbmVhcmVzdE5vZGUgPSBub2RlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZWFyZXN0Tm9kZTtcbn1cbiIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gXCJAa29yZWV6L3B1cmUtbXZjXCI7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi4vLi4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tIFwiLi4vLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHlcIjtcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJNZWRpYXRvciB9IGZyb20gJy4vR2FtZUNoYXJhY3Rlck1lZGlhdG9yJztcbmltcG9ydCB7IGJvdEJlaGF2aW91ckVudW1zIH0gZnJvbSAnLi4vLi4vYmVoYXZpb3VyVHJlZS9Cb3RCZWhhdmlvdXJUeXBlcyc7XG5pbXBvcnQgeyB3ZWFwb25FbnVtcyB9IGZyb20gXCIuLi8uLi9kYXRhL1dlYXBvblR5cGVzXCI7XG5pbXBvcnQgeyBHYW1lTWFwUHJveHkgfSBmcm9tICcuLi8uLi9tb2RlbC9nYW1lTWFwL0dhbWVNYXBQcm94eSc7XG5cbmV4cG9ydCBjb25zdCBHYW1lQ2hhcmFjdGVyQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdHYW1lQ2hhcmFjdGVyQ29tcG9uZW50Jyk7XG5cbmNvbnN0IHN0YXRzU2NoZW1hID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogJ3NraWxsJyxcbiAgICAgICAgdGl0bGU6ICdTa2lsbCcsXG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICBkZWZhdWx0OiAxXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdtYXhTdGFtaW5hJyxcbiAgICAgICAgdGl0bGU6ICdTdGFtaW5hJyxcbiAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgIGRlZmF1bHQ6IDFcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdtYXhMdWNrJyxcbiAgICAgICAgdGl0bGU6ICdMdWNrJyxcbiAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgIGRlZmF1bHQ6IDFcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdpbml0aWF0aXZlJyxcbiAgICAgICAgdGl0bGU6ICdJbml0aWF0aXZlJyxcbiAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgIGRlZmF1bHQ6IDJcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdtYXhNb3ZlbWVudCcsXG4gICAgICAgIHRpdGxlOiAnTW92ZW1lbnQnLFxuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgZGVmYXVsdDogNlxuICAgIH1cbl07XG5cbmNvbnN0IGFkdmFuY2VkU2tpbGxzU2NoZW1hID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogJ3NraWxsTmFtZScsXG4gICAgICAgIHRpdGxlOiAnU2tpbGwgTmFtZScsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdza2lsbFZhbHVlJyxcbiAgICAgICAgdGl0bGU6ICdTa2lsbCBWYWx1ZScsXG4gICAgICAgIHR5cGU6ICdudW1iZXInXG4gICAgfVxuXTtcblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImNoYXJhY3RlcklkXCIsIHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIHRpdGxlOiBcIkNoYXJhY3RlciBJZFwiXG59KTtcblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImNoYXJhY3RlclNwZWVkXCIsIHtcbiAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIHRpdGxlOiBcIkNoYXJhY3RlciBTcGVlZFwiLFxuICAgIGRlZmF1bHQ6IDRcbn0pO1xuXG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJjaGFyYWN0ZXJIZWlnaHRcIiwge1xuICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgdGl0bGU6IFwiQ2hhcmFjdGVyIEhlaWdodFwiLFxuICAgIGRlZmF1bHQ6IDEuOFxufSk7XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJpc05QQ1wiLCB7XG4gICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgdGl0bGU6IFwiaXMgTlBDXCIsXG4gICAgZGVmYXVsdDogdHJ1ZVxufSk7XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJzdGF0c092ZXJyaWRlc1wiLCB7XG4gICAgdHlwZTogXCJqc29uXCIsXG4gICAgdGl0bGU6IFwiU3RhdHMgT3ZlcnJpZGVzXCIsXG4gICAgc2NoZW1hOiBzdGF0c1NjaGVtYVxufSk7XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJhZHZhbmNlZFNraWxsc1wiLCB7XG4gICAgdHlwZTogXCJqc29uXCIsXG4gICAgdGl0bGU6IFwiQWR2YW5jZWQgU2tpbGxzXCIsXG4gICAgc2NoZW1hOiBhZHZhbmNlZFNraWxsc1NjaGVtYSxcbiAgICBhcnJheTogdHJ1ZVxufSk7XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJjb21iYXRHcm91cE5hbWVcIiwge1xuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgdGl0bGU6IFwiQ29tYmF0IEdyb3VwIE5hbWVcIlxufSk7XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJkaWFsb2d1ZVRyZWVOYW1lXCIsIHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIHRpdGxlOiBcIkRpYWxvZ3VlIFRyZWUgTmFtZVwiXG59KTtcblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImJvdEJlaGF2aW91clwiLCB7XG4gICAgdHlwZTogXCJudW1iZXJcIixcbiAgICB0aXRsZTogXCJCb3QgQmVoYXZpb3VyXCIsXG4gICAgZW51bTogYm90QmVoYXZpb3VyRW51bXMsXG4gICAgZGVmYXVsdDogMFxufSk7XG5cblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImVxdWlwcGVkV2VhcG9uXCIsIHtcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIHRpdGxlOiBcIkVxdWlwcGVkIFdlYXBvblwiLFxuICAgIGVudW06IHdlYXBvbkVudW1zLFxuICAgIGRlZmF1bHQ6IFwidW5hcm1lZFwiXG59KTtcblxuXG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLnByZXJlZ2lzdGVyTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xuICAgIGlmICghdGhpcy5wcmVyZWdpc3RlcmVkTm90aWZpY2F0aW9ucykge1xuICAgICAgICB0aGlzLnByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zID0gW107XG4gICAgfVxuXG4gICAgdGhpcy5wcmVyZWdpc3RlcmVkTm90aWZpY2F0aW9ucy5wdXNoKG5vdGlmaWNhdGlvbik7XG59XG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5wb3N0SW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLm1vdmVtZW50UGF0aCA9IFtdO1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcblxuXG4gICAgaWYgKCF0aGlzLnByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zKSB7XG4gICAgICAgIHRoaXMucHJlcmVnaXN0ZXJlZE5vdGlmaWNhdGlvbnMgPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0c092ZXJyaWRlcyA9IHRoaXMuc3RhdHNPdmVycmlkZXM7XG4gICAgY29uc3QgcHJveHlQYXJhbXMgPSB7XG4gICAgICAgIGlkOiB0aGlzLmNoYXJhY3RlcklkLFxuICAgICAgICBpc05QQzogdGhpcy5pc05QQyxcbiAgICAgICAgaGVpZ2h0OiB0aGlzLmNoYXJhY3RlckhlaWdodCxcbiAgICAgICAgYWR2YW5jZWRTa2lsbHM6IGFkdmFuY2VkU2tpbGxzU2NoZW1hVG9NYXAodGhpcy5hZHZhbmNlZFNraWxscyksXG4gICAgICAgIGVxdWlwcGVkV2VhcG9uOiB0aGlzLmVxdWlwcGVkV2VhcG9uLFxuICAgICAgICAuLi5zdGF0c092ZXJyaWRlcyxcbiAgICAgICAgYm90QmVoYXZpb3VyOiB0aGlzLmJvdEJlaGF2aW91cixcbiAgICAgICAgZGlhbG9ndWVUcmVlOiB0aGlzLmRpYWxvZ3VlVHJlZU5hbWVcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuY29tYmF0R3JvdXBOYW1lICYmIHRoaXMuY29tYmF0R3JvdXBOYW1lICE9PSBcIlwiKSB7XG4gICAgICAgIGNvbnN0IGNvbXJhZGVFbnRpdGllcyA9IHRoaXMuYXBwLnJvb3QuZmluZEJ5VGFnKGBjb21iYXRHcm91cDoke3RoaXMuY29tYmF0R3JvdXBOYW1lfWApO1xuXG4gICAgICAgIGNvbnN0IGNvbWJhdEdyb3VwID0gW107XG4gICAgICAgIGZvciAoY29uc3QgY29tcmFkZUVudGl0eSBvZiBjb21yYWRlRW50aXRpZXMpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZSBkaXNhYmxlZCBlbnRpdGllc1xuICAgICAgICAgICAgaWYgKGNvbXJhZGVFbnRpdHkuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXJhZGVJZCA9IGNvbXJhZGVFbnRpdHkuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uY2hhcmFjdGVySWQ7XG4gICAgICAgICAgICAgICAgY29tYmF0R3JvdXAucHVzaChjb21yYWRlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb3h5UGFyYW1zLmNvbWJhdEdyb3VwID0gY29tYmF0R3JvdXA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKEdhbWVDaGFyYWN0ZXJNZWRpYXRvci5OQU1FICsgdGhpcy5jaGFyYWN0ZXJJZCkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoR2FtZUNoYXJhY3Rlck1lZGlhdG9yLk5BTUUgKyB0aGlzLmNoYXJhY3RlcklkKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0aGlzLmNoYXJhY3RlcklkKSkge1xuICAgICAgICAvLyB0aGlzLmZhY2FkZS5yZW1vdmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIHRoaXMuY2hhcmFjdGVySWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlclByb3h5ID0gbmV3IEdhbWVDaGFyYWN0ZXJQcm94eShwcm94eVBhcmFtcyk7XG4gICAgICAgIC8vIFNldCBjdXJyZW50IG5vZGUgaWYgZ2FtZSBjaGFyYWN0ZXIgd2FzIGNyZWF0ZWQgYWZ0ZXIgdGhlIG1hcFxuICAgICAgICBjb25zdCBnYW1lTWFwUHJveHkgPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVNYXBQcm94eS5OQU1FKTtcbiAgICAgICAgaWYgKGdhbWVNYXBQcm94eSkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudE5vZGUgPSBnYW1lTWFwUHJveHkuZmluZE5lYXJlc3ROb2RlKHRoaXMuZW50aXR5LmdldFBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgY2hhcmFjdGVyUHJveHkuY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyUHJveHkoY2hhcmFjdGVyUHJveHkpO1xuICAgIH1cblxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgR2FtZUNoYXJhY3Rlck1lZGlhdG9yKHRoaXMuY2hhcmFjdGVySWQsIHRoaXMuZW50aXR5LCB0aGlzLnByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zKSk7XG5cbiAgICB0aGlzLnZlaGljbGUgPSB0aGlzLmVudGl0eS5zY3JpcHRbJ1ZlaGljbGVDb21wb25lbnQnXTtcbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ucGxheSgnaWRsZS5nbGInLCAwLjEpO1xuXG59O1xuXG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLnNldFBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xuICAgIGlmICh0aGlzLm1vdmVtZW50UGF0aCAmJiB0aGlzLm1vdmVtZW50UGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuZW50aXR5LmZpcmUoJ2NhbmNlbE1vdmUnKTtcbiAgICB9XG4gICAgdGhpcy5tb3ZlbWVudFBhdGggPSBwYXRoO1xuXG4gICAgdGhpcy5lbnRpdHkuYW5pbWF0aW9uLmxvb3AgPSB0cnVlO1xuICAgIHRoaXMuZW50aXR5LmFuaW1hdGlvbi5wbGF5KCd3YWxrLmdsYicsIDAuMSk7XG59O1xuXG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5zdG9wTW92ZW1lbnQgPSBmdW5jdGlvbiAoY3VycmVudE5vZGUpIHtcbiAgICB0aGlzLm1vdmVtZW50UGF0aCA9IFtdO1xuICAgIHRoaXMuZW50aXR5LnNldExvY2FsUG9zaXRpb24oY3VycmVudE5vZGUueCwgY3VycmVudE5vZGUueSwgY3VycmVudE5vZGUueik7XG5cbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ubG9vcCA9IHRydWU7XG4gICAgdGhpcy5lbnRpdHkuYW5pbWF0aW9uLnBsYXkoJ2lkbGUuZ2xiJywgMC4xKTtcbn07XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkdCkge1xuICAgIHRoaXMubW92ZUFsb25nUGF0aChkdCk7XG59XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLm1vdmVBbG9uZ1BhdGggPSBmdW5jdGlvbiAoZHQpIHtcblxuICAgIGlmICh0aGlzLm1vdmVtZW50UGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG5leHRQYXRoUG9pbnQgPSB0aGlzLm1vdmVtZW50UGF0aFt0aGlzLm1vdmVtZW50UGF0aC5sZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3QgbG9jYWxQb3MgPSB0aGlzLmVudGl0eS5nZXRMb2NhbFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IG5vZGVQb2ludCA9IG5ldyBwYy5WZWMzKG5leHRQYXRoUG9pbnQueCwgbmV4dFBhdGhQb2ludC55LCBuZXh0UGF0aFBvaW50LnopO1xuXG5cbiAgICAgICAgY29uc3QgZGlzdGFuY2VUb05leHRQYXRoID0gbG9jYWxQb3MuZGlzdGFuY2Uobm9kZVBvaW50KTtcbiAgICAgICAgaWYgKGRpc3RhbmNlVG9OZXh0UGF0aCA8PSAoZHQgKiB0aGlzLmNoYXJhY3RlclNwZWVkKSkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudE5vZGUgPSB0aGlzLm1vdmVtZW50UGF0aC5wb3AoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMubW92ZW1lbnRQYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW50aXR5LmZpcmUoJ2ZpbmlzaGVkTW92ZScsIGN1cnJlbnROb2RlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ubG9vcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5lbnRpdHkuYW5pbWF0aW9uLnBsYXkoJ2lkbGUuZ2xiJywgMC4xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW50aXR5LmZpcmUoJ3VwZGF0ZUN1cnJlbnROb2RlJywgY3VycmVudE5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMubW92ZW1lbnRQYXRoLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZlaGljbGUuc2Vlayhub2RlUG9pbnQsIGR0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy52ZWhpY2xlLmFycml2ZShub2RlUG9pbnQsIGR0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudmVoaWNsZS5wcm9jZXNzVmVsb2NpdHkoZHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5sb29rQXRQb2ludCA9IGZ1bmN0aW9uIChwb2ludCkge1xuICAgIGNvbnN0IGxvY2FsUG9zID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpO1xuXG4gICAgY29uc3QgZHggPSBwb2ludC54IC0gbG9jYWxQb3MueDtcbiAgICBjb25zdCBkeiA9IHBvaW50LnogLSBsb2NhbFBvcy56O1xuICAgIGNvbnN0IGFuZ2xlVG9EZXN0ID0gTWF0aC5hdGFuMihkeCwgZHopICogMTgwIC8gTWF0aC5QSTtcbiAgICB0aGlzLmVudGl0eS5zZXRFdWxlckFuZ2xlcygwLCBhbmdsZVRvRGVzdCwgMCk7XG59XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLmFuaW1hdGVEZWF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ubG9vcCA9IGZhbHNlO1xuICAgIHRoaXMuZW50aXR5LmFuaW1hdGlvbi5wbGF5KCdkaWUuZ2xiJywgMC4xKTtcbn1cblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5wcm90b3R5cGUuYW5pbWF0ZUhpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ubG9vcCA9IGZhbHNlO1xuICAgIHRoaXMuZW50aXR5LmFuaW1hdGlvbi5wbGF5KCdoaXQuZ2xiJywgMC4xKTtcbn1cblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5wcm90b3R5cGUuYW5pbWF0ZUF0dGFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ubG9vcCA9IGZhbHNlO1xuICAgIHRoaXMuZW50aXR5LmFuaW1hdGlvbi5wbGF5KCdhdHRhY2suZ2xiJywgMC4xKTtcbn1cblxuZnVuY3Rpb24gYWR2YW5jZWRTa2lsbHNTY2hlbWFUb01hcChhZHZhbmNlZFNraWxsc1NjaGVtYSkge1xuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcblxuICAgIGZvciAoY29uc3Qgc2tpbGxPYmplY3Qgb2YgYWR2YW5jZWRTa2lsbHNTY2hlbWEpIHtcbiAgICAgICAgbWFwLnNldChza2lsbE9iamVjdC5za2lsbE5hbWUsIHNraWxsT2JqZWN0LnNraWxsVmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBtYXA7XG59IiwiZXhwb3J0IGNvbnN0IEFncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdBZ3JvR2FtZUNoYXJhY3RlckNvbXBvbmVudCcpO1xuaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSAnQGtvcmVlei9wdXJlLW12Yyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi4vLi4vLi4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5pbXBvcnQgeyBHYW1lTWFwUHJveHkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lTWFwL0dhbWVNYXBQcm94eSc7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhcic7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5cbkFncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKFwic2lnaHRSYW5nZVwiLCB7XG4gICAgdHlwZTogXCJudW1iZXJcIixcbiAgICB0aXRsZTogXCJTaWdodCBSYW5nZVwiLFxuICAgIGRlZmF1bHQ6IDVcbn0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbnRpdHkuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10ucHJlcmVnaXN0ZXJOb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk1BUF9HUklEX0NSRUFURUQpO1xuICAgIHRoaXMuZW50aXR5LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnByZXJlZ2lzdGVyTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5NT1ZFRF9UT19OT0RFICsgXCJwbGF5ZXJcIik7XG5cbiAgICB0aGlzLmVudGl0eS5vbihHYW1lQ29tbWFuZHMuTUFQX0dSSURfQ1JFQVRFRCwgdGhpcy5oYW5kbGVNYXBHcmlkQ3JlYXRlZCwgdGhpcyk7XG4gICAgdGhpcy5lbnRpdHkub24oR2FtZUNvbW1hbmRzLk1PVkVEX1RPX05PREUgKyBcInBsYXllclwiLCB0aGlzLmhhbmRsZU1vdmVkVG9Ob2RlLCB0aGlzKTtcbiAgICBjb25zb2xlLmxvZygnV2FpdCBmb3IgaW5pdGlhbCcpO1xufTtcblxuQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZU1hcEdyaWRDcmVhdGVkID0gZnVuY3Rpb24gKGlkLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICB0aGlzLmNoYXJhY3RlclByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBpZCk7XG59XG5cbkFncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVNb3ZlZFRvTm9kZSA9IGZ1bmN0aW9uIChpZCwgdGFyZ2V0Tm9kZSkge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgY29uc3QgZ2FtZVN0YXRlID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZVN0YXRlUHJveHkuTkFNRSkudm87XG5cbiAgICAvLyBJZ25vcmUgaWYgdGhlIHBsYXllciBpc24ndCBleHBsb3JpbmdcbiAgICBpZiAoZ2FtZVN0YXRlLmdhbWVwbGF5TW9kZSAhPT0gZ2FtZXBsYXlNb2RlVHlwZXMuRVhQTE9SQVRJT04gfHwgdGhpcy5jaGFyYWN0ZXJQcm94eS5pc0RlYWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGN1cnJlbnROb2RlID0gdGhpcy5jaGFyYWN0ZXJQcm94eS5jdXJyZW50Tm9kZTtcbiAgICBjb25zdCBjaGFyYWN0ZXJQb2ludCA9IG5ldyBwYy5WZWMzKGN1cnJlbnROb2RlLngsIGN1cnJlbnROb2RlLnksIGN1cnJlbnROb2RlLnopO1xuICAgIGNvbnN0IHRhcmdldFBvaW50ID0gbmV3IHBjLlZlYzModGFyZ2V0Tm9kZS54LCB0YXJnZXROb2RlLnksIHRhcmdldE5vZGUueik7XG5cbiAgICBpZiAoY2hhcmFjdGVyUG9pbnQuZGlzdGFuY2UodGFyZ2V0UG9pbnQpIDw9IHRoaXMuc2lnaHRSYW5nZSkge1xuICAgICAgICAvLyBNaWdodCBiZSBzZWVuIC0gY2hlY2sgZm9yIHdhbGxzXG4gICAgICAgIGNvbnN0IGdhbWVNYXBQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVNYXBQcm94eS5OQU1FKTtcbiAgICAgICAgY2hhcmFjdGVyUG9pbnQueSArPSB0aGlzLmNoYXJhY3RlclByb3h5LmhlaWdodDtcblxuICAgICAgICBpZiAoIWdhbWVNYXBQcm94eS5yYXlJbnRlcnNlY3RzV2FsbChjaGFyYWN0ZXJQb2ludCwgdGFyZ2V0UG9pbnQpKSB7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0VUX0NIQVJBQ1RFUl9UT19OT0RFICsgXCJwbGF5ZXJcIiwgdGFyZ2V0Tm9kZSk7XG4gICAgICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU1RBUlRfQ09NQkFULCBpZCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIFRvYXN0TWVzc2FnZU1lZGlhdG9yIGV4dGVuZHMgTWVkaWF0b3Ige1xuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiVG9hc3RNZXNzYWdlTWVkaWF0b3JcIiB9O1xuXG4gICAgY29uc3RydWN0b3Iodmlld0NvbXBvbmVudCkge1xuICAgICAgICBzdXBlcihUb2FzdE1lc3NhZ2VNZWRpYXRvci5OQU1FKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24oW1xuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLlNIT1dfVE9BU1RfTUVTU0FHRVxuICAgICAgICBdKTtcblxuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50O1xuICAgIH1cblxuICAgIG9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKSB7XG4gICAgICAgIHN1cGVyLm9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKTtcbiAgICB9XG5cbiAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgICAgICBzd2l0Y2ggKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLlNIT1dfVE9BU1RfTUVTU0FHRTpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydUb2FzdE1lc3NhZ2VDb21wb25lbnQnXS5hZGRNZXNzYWdlKGFyZ3NbMF0pO1xuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gXCIuLi8uLi9HYW1lRmFjYWRlXCI7XG5pbXBvcnQgeyBUb2FzdE1lc3NhZ2VNZWRpYXRvciB9IGZyb20gXCIuL1RvYXN0TWVzc2FnZU1lZGlhdG9yXCI7XG5cbmV4cG9ydCBjb25zdCBUb2FzdE1lc3NhZ2VDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ1RvYXN0TWVzc2FnZUNvbXBvbmVudCcpO1xuXG5Ub2FzdE1lc3NhZ2VDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2xhYmVsRW50aXR5JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdMYWJlbCBFbnRpdHknIH0pO1xuVG9hc3RNZXNzYWdlQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdtZXNzYWdlVGltZScsIHsgdHlwZTogJ251bWJlcicsIGRlZmF1bHQ6IDUsIHRpdGxlOiAnTWVzc2FnZSBUaW1lJyB9KTtcblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcblRvYXN0TWVzc2FnZUNvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKFRvYXN0TWVzc2FnZU1lZGlhdG9yLk5BTUUpKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnJlbW92ZU1lZGlhdG9yKFRvYXN0TWVzc2FnZU1lZGlhdG9yLk5BTUUpO1xuICAgIH1cblxuICAgIHRoaXMubWVzc2FnZVF1ZXVlID0gW107XG4gICAgdGhpcy5jdXJyZW50VGltZW91dCA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyTWVkaWF0b3IobmV3IFRvYXN0TWVzc2FnZU1lZGlhdG9yKHRoaXMuZW50aXR5KSk7XG59O1xuXG5Ub2FzdE1lc3NhZ2VDb21wb25lbnQucHJvdG90eXBlLmFkZE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLm1lc3NhZ2VRdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlUXVldWUucHVzaChtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5zaG93TmV4dE1lc3NhZ2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1lc3NhZ2VRdWV1ZS5wdXNoKG1lc3NhZ2UpO1xuICAgIH1cbn1cblxuXG5Ub2FzdE1lc3NhZ2VDb21wb25lbnQucHJvdG90eXBlLnNob3dOZXh0TWVzc2FnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5tZXNzYWdlUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBuZXh0TWVzc2FnZSA9IHRoaXMubWVzc2FnZVF1ZXVlWzBdO1xuXG4gICAgICAgIHRoaXMubGFiZWxFbnRpdHkuZWxlbWVudC50ZXh0ID0gbmV4dE1lc3NhZ2U7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VRdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgdGhpcy5zaG93TmV4dE1lc3NhZ2UoKTtcbiAgICAgICAgfSwgdGhpcy5tZXNzYWdlVGltZSAqIDEwMDApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGFiZWxFbnRpdHkuZWxlbWVudC50ZXh0ID0gXCJcIjtcblxuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgU2V0Q2FtZXJhVGFyZ2V0Q29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdTZXRDYW1lcmFUYXJnZXRDb21wb25lbnQnKTtcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4uLy4uLy4uL0dhbWVGYWNhZGUnO1xuXG4vLyBwb3N0SW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcblNldENhbWVyYVRhcmdldENvbXBvbmVudC5wcm90b3R5cGUucG9zdEluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0VUX0NBTUVSQV9UQVJHRVQsIHRoaXMuZW50aXR5KTtcbn07XG4iLCJcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIElucHV0TGF5ZXJNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIklucHV0TGF5ZXJNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKElucHV0TGF5ZXJNZWRpYXRvci5OQU1FKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24oW1xuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkNIQU5HRV9TQ0VORV9DT01QTEVURVxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50ID0gdmlld0NvbXBvbmVudDtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdwaWNrZXI6Z2FtZUNoYXJhY3RlcicsIHRoaXMuaGFuZGxlUGlja2VyR2FtZUNoYXJhY3RlciwgdGhpcyk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vbigncGlja2VyOm5hdmlnYXRpb24nLCB0aGlzLmhhbmRsZVBpY2tlck5hdmlnYXRpb24sIHRoaXMpO1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQub24oJ3Njcm9sbGluZycsIHRoaXMuaGFuZGxlU2Nyb2xsaW5nLCB0aGlzKTtcblxuICAgIH1cblxuICAgIG9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKSB7XG4gICAgICAgIHN1cGVyLm9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKTtcbiAgICB9XG5cbiAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgICAgICBzd2l0Y2ggKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkNIQU5HRV9TQ0VORV9DT01QTEVURTpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZVBpY2tlckdhbWVDaGFyYWN0ZXIoY2hhcmFjdGVyRW50aXR5KSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNFTEVDVF9HQU1FX0NIQVJBQ1RFUiwgY2hhcmFjdGVyRW50aXR5KTtcbiAgICB9XG5cbiAgICBoYW5kbGVQaWNrZXJOYXZpZ2F0aW9uKG5vZGUpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0VMRUNURURfTk9ERSwgbm9kZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlU2Nyb2xsaW5nKGRpcmVjdGlvbikge1xuICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5JTlBVVF9EUkFHX01PVVNFLCBkaXJlY3Rpb24pO1xuXG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IEdhbWVDYW1lcmEgPSBwYy5jcmVhdGVTY3JpcHQoJ0dhbWVDYW1lcmEnKTtcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4uLy4uL0dhbWVGYWNhZGUnO1xuaW1wb3J0IHsgR2FtZUNhbWVyYU1lZGlhdG9yIH0gZnJvbSAnLi9HYW1lQ2FtZXJhTWVkaWF0b3InO1xuXG5HYW1lQ2FtZXJhLmF0dHJpYnV0ZXMuYWRkKCdkaXN0YW5jZScsIHsgdHlwZTogJ251bWJlcicsIGRlZmF1bHQ6IDEwMCwgdGl0bGU6ICdEaXN0YW5jZScgfSk7XG5HYW1lQ2FtZXJhLmF0dHJpYnV0ZXMuYWRkKCdkcmFnTXVsdGlwbGllclgnLCB7IHR5cGU6ICdudW1iZXInLCBkZWZhdWx0OiAwLjUsIHRpdGxlOiAnRHJhZyBNdWx0aXBsaWVyJyB9KTtcbkdhbWVDYW1lcmEuYXR0cmlidXRlcy5hZGQoJ2RyYWdNdWx0aXBsaWVyWScsIHsgdHlwZTogJ251bWJlcicsIGRlZmF1bHQ6IDAuNSwgdGl0bGU6ICdEcmFnIE11bHRpcGxpZXInIH0pO1xuXG5HYW1lQ2FtZXJhLmF0dHJpYnV0ZXMuYWRkKCd2ZXJ0aWNhbFNjcm9sbCcsIHsgdHlwZTogJ2Jvb2xlYW4nLCBkZWZhdWx0OiBmYWxzZSwgdGl0bGU6ICdWZXJ0aWNhbCBTY3JvbGwnIH0pO1xuR2FtZUNhbWVyYS5hdHRyaWJ1dGVzLmFkZCgnbWluQ2FtZXJhSGVpZ2h0JywgeyB0eXBlOiAnbnVtYmVyJywgZGVmYXVsdDogNSwgdGl0bGU6ICdNaW4gQ2FtZXJhIEhlaWdodCcgfSk7XG5HYW1lQ2FtZXJhLmF0dHJpYnV0ZXMuYWRkKCdtYXhDYW1lcmFIZWlnaHQnLCB7IHR5cGU6ICdudW1iZXInLCBkZWZhdWx0OiAxMDAsIHRpdGxlOiAnTWF4IENhbWVyYSBIZWlnaHQnIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuR2FtZUNhbWVyYS5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKEdhbWVDYW1lcmFNZWRpYXRvci5OQU1FKSkge1xuICAgICAgICB0aGlzLmZhY2FkZS5yZW1vdmVNZWRpYXRvcihHYW1lQ2FtZXJhTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgR2FtZUNhbWVyYU1lZGlhdG9yKHRoaXMuZW50aXR5KSk7XG5cbn07XG5cbkdhbWVDYW1lcmEucHJvdG90eXBlLnNldENhbWVyYVRhcmdldCA9IGZ1bmN0aW9uIChjYW1lcmFUYXJnZXQpIHtcbiAgICB0aGlzLmNhbWVyYVRhcmdldCA9IGNhbWVyYVRhcmdldDtcbiAgICB0aGlzLnJvdGF0aW9uID0gdGhpcy5lbnRpdHkuZ2V0RXVsZXJBbmdsZXMoKS55O1xuICAgIHRoaXMuY2FtZXJhSGVpZ2h0ID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpLnk7XG59XG5cbkdhbWVDYW1lcmEucHJvdG90eXBlLmhhbmRsZURyYWcgPSBmdW5jdGlvbiAoZGlyZWN0aW9uKSB7XG4gICAgdGhpcy5yb3RhdGlvbiArPSBkaXJlY3Rpb24ueCAqIHRoaXMuZHJhZ011bHRpcGxpZXJYO1xuXG4gICAgaWYgKHRoaXMudmVydGljYWxTY3JvbGwpIHtcbiAgICAgICAgbGV0IG5ld0NhbWVyYUhlaWdodCA9IHRoaXMuY2FtZXJhSGVpZ2h0IC0gKGRpcmVjdGlvbi55ICogdGhpcy5kcmFnTXVsdGlwbGllclkpO1xuICAgICAgICBuZXdDYW1lcmFIZWlnaHQgPSBwYy5tYXRoLmNsYW1wKG5ld0NhbWVyYUhlaWdodCwgdGhpcy5taW5DYW1lcmFIZWlnaHQsIHRoaXMubWF4Q2FtZXJhSGVpZ2h0KTtcbiAgICAgICAgdGhpcy5jYW1lcmFIZWlnaHQgPSBuZXdDYW1lcmFIZWlnaHQ7XG4gICAgfVxufVxuXG5HYW1lQ2FtZXJhLnByb3RvdHlwZS5nZXRUYXJnZXRDYW1lcmFQb3NpdGlvbiA9IGZ1bmN0aW9uIChmb2N1c1BvaW50KSB7XG4gICAgY29uc3QgY2FtZXJhUG9zaXRpb24gPSB0aGlzLmVudGl0eS5nZXRMb2NhbFBvc2l0aW9uKClcblxuICAgIGNvbnN0IHRhcmdldFggPSBNYXRoLnNpbigodGhpcy5yb3RhdGlvbikgKiBNYXRoLlBJIC8gMTgwKSAqIHRoaXMuZGlzdGFuY2U7XG4gICAgY29uc3QgdGFyZ2V0WiA9IE1hdGguY29zKCh0aGlzLnJvdGF0aW9uKSAqIE1hdGguUEkgLyAxODApICogdGhpcy5kaXN0YW5jZTtcblxuICAgIHJldHVybiBuZXcgcGMuVmVjMyhmb2N1c1BvaW50LnggKyB0YXJnZXRYLCBjYW1lcmFQb3NpdGlvbi55LCBmb2N1c1BvaW50LnogKyB0YXJnZXRaKTtcbn1cblxuLy8gdXBkYXRlIGNvZGUgY2FsbGVkIGV2ZXJ5IGZyYW1lXG5HYW1lQ2FtZXJhLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICBpZiAodGhpcy5jYW1lcmFUYXJnZXQpIHtcbiAgICAgICAgY29uc3QgY2FtZXJhVGFyZ2V0UG9zaXRpb24gPSB0aGlzLmNhbWVyYVRhcmdldC5nZXRMb2NhbFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IHRhcmdldFBvc2l0aW9uID0gdGhpcy5nZXRUYXJnZXRDYW1lcmFQb3NpdGlvbihjYW1lcmFUYXJnZXRQb3NpdGlvbik7XG5cbiAgICAgICAgY29uc3QgY3VycmVudFBvcyA9IHRoaXMuZW50aXR5LmdldExvY2FsUG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgdHdlZW5YID0gKHRhcmdldFBvc2l0aW9uLnggKyBjdXJyZW50UG9zLnggKiA5KSAvIDEwO1xuICAgICAgICBjb25zdCB0d2VlblkgPSAodGhpcy5jYW1lcmFIZWlnaHQgKyBjdXJyZW50UG9zLnkgKiA5KSAvIDEwO1xuICAgICAgICBjb25zdCB0d2VlblogPSAodGFyZ2V0UG9zaXRpb24ueiArIGN1cnJlbnRQb3MueiAqIDkpIC8gMTA7XG5cbiAgICAgICAgdGhpcy5lbnRpdHkuc2V0TG9jYWxQb3NpdGlvbih0d2VlblgsIHR3ZWVuWSwgdHdlZW5aKTtcblxuICAgICAgICB0aGlzLmVudGl0eS5sb29rQXQoY2FtZXJhVGFyZ2V0UG9zaXRpb24pO1xuICAgIH1cblxufTtcbiIsIlxuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUNhbWVyYSB9IGZyb20gJy4vR2FtZUNhbWVyYSc7XG5jb25zdCB7IE1lZGlhdG9yIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBjbGFzcyBHYW1lQ2FtZXJhTWVkaWF0b3IgZXh0ZW5kcyBNZWRpYXRvciB7XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJHYW1lQ2FtZXJhTWVkaWF0b3JcIiB9O1xuXG4gICAgY29uc3RydWN0b3Iodmlld0NvbXBvbmVudCkge1xuICAgICAgICBzdXBlcihHYW1lQ2FtZXJhTWVkaWF0b3IuTkFNRSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKFtcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkVfQ09NUExFVEUsIEdhbWVDb21tYW5kcy5JTlBVVF9EUkFHX01PVVNFLCBHYW1lQ29tbWFuZHMuU0VUX0NBTUVSQV9UQVJHRVRcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG5cbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5TRVRfQ0FNRVJBX1RBUkdFVDpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2FtZXJhJ10uc2V0Q2FtZXJhVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuSU5QVVRfRFJBR19NT1VTRTpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2FtZXJhJ10uaGFuZGxlRHJhZyhhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gXCJAa29yZWV6L3B1cmUtbXZjXCI7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi4vLi4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBJbnB1dExheWVyTWVkaWF0b3IgfSBmcm9tICcuL0lucHV0TGF5ZXJNZWRpYXRvcic7XG5pbXBvcnQgeyBHYW1lQ2FtZXJhTWVkaWF0b3IgfSBmcm9tICcuLi9nYW1lQ2FtZXJhL0dhbWVDYW1lcmFNZWRpYXRvcic7XG5cbmV4cG9ydCBjb25zdCBJbnB1dExheWVyQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdJbnB1dExheWVyQ29tcG9uZW50Jyk7XG5cbklucHV0TGF5ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJjYW1lcmFFbnRpdHlcIiwge1xuICAgIHR5cGU6IFwiZW50aXR5XCIsXG4gICAgdGl0bGU6IFwiQ2FtZXJhIEVudGl0eVwiXG59KTtcblxuSW5wdXRMYXllckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImRyYWdUaW1lXCIsIHtcbiAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIHRpdGxlOiBcIkRyYWcgVGltZVwiLFxuICAgIGRlZmF1bHQ6IDAuNFxufSk7XG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIGlmICh0aGlzLmZhY2FkZS5oYXNNZWRpYXRvcihJbnB1dExheWVyTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoSW5wdXRMYXllck1lZGlhdG9yLk5BTUUpO1xuICAgIH1cblxuICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyTWVkaWF0b3IobmV3IElucHV0TGF5ZXJNZWRpYXRvcih0aGlzLmVudGl0eSkpO1xuICAgIHRoaXMucmF5ID0gbmV3IHBjLlJheSgpO1xuICAgIHRoaXMuaW5wdXRRdWV1ZSA9IFtdO1xuXG4gICAgLy8gRHJhZyBwcm9wZXJ0aWVzXG4gICAgdGhpcy5hcHAubW91c2UuZGlzYWJsZUNvbnRleHRNZW51KCk7XG4gICAgdGhpcy5jbGlja0Rvd25TdGFydCA9IDA7XG4gICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG5cbiAgICB0aGlzLmFwcC5vbigncGlja2VyOnJlc3VsdCcsIHRoaXMuaGFuZGxlUGlja2VyUmVzdWx0LCB0aGlzKTtcblxuICAgIGlmICh0aGlzLmFwcC5tb3VzZSkge1xuICAgICAgICB0aGlzLmFwcC5tb3VzZS5vbihwYy5FVkVOVF9NT1VTRU1PVkUsIHRoaXMub25Nb3VzZU1vdmUsIHRoaXMpO1xuICAgICAgICB0aGlzLmVudGl0eS5lbGVtZW50Lm9uKHBjLkVWRU5UX01PVVNFRE9XTiwgdGhpcy5vbk1vdXNlRG93biwgdGhpcyk7XG4gICAgICAgIHRoaXMuYXBwLm1vdXNlLm9uKHBjLkVWRU5UX01PVVNFVVAsIHRoaXMub25Nb3VzZVVwLCB0aGlzKTtcblxuICAgICAgICB0aGlzLmVudGl0eS5vbmNlKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcHAubW91c2Uub2ZmKHBjLkVWRU5UX01PVVNFTU9WRSwgdGhpcy5vbk1vdXNlTW92ZSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLmFwcC5tb3VzZS5vZmYocGMuRVZFTlRfTU9VU0VVUCwgdGhpcy5vbk1vdXNlVXAsIHRoaXMpO1xuXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFwcC50b3VjaCkge1xuICAgICAgICB0aGlzLmFwcC50b3VjaC5vbihwYy5FVkVOVF9UT1VDSE1PVkUsICh0b3VjaEV2dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbk1vdXNlTW92ZSh0b3VjaEV2dC50b3VjaGVzWzBdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lbnRpdHkuZWxlbWVudC5vbihwYy5FVkVOVF9UT1VDSFNUQVJULCAodG91Y2hFdnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25Nb3VzZURvd24odG91Y2hFdnQudG91Y2hlc1swXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24ocGMuRVZFTlRfVE9VQ0hFTkQsICh0b3VjaEV2dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbk1vdXNlVXAoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG59XG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLm9uTW91c2VEb3duID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7XG4gICAgdGhpcy5jbGlja0Rvd25TdGFydCA9IERhdGUubm93KCk7XG4gICAgdGhpcy5jbGlja1N0YXJ0UG9pbnQgPSB7IHg6IGV2dC54LCB5OiBldnQueSB9O1xufVxuXG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLm9uTW91c2VNb3ZlID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIGlmICh0aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gbmV3IHBjLlZlYzIodGhpcy5jbGlja1N0YXJ0UG9pbnQueCAtIGV2dC54LCB0aGlzLmNsaWNrU3RhcnRQb2ludC55IC0gZXZ0LnkpO1xuICAgICAgICB0aGlzLmVudGl0eS5maXJlKCdzY3JvbGxpbmcnLCBkaXJlY3Rpb24pO1xuICAgICAgICB0aGlzLmNsaWNrU3RhcnRQb2ludCA9IHsgeDogZXZ0LngsIHk6IGV2dC55IH07XG4gICAgfVxufVxuXG5JbnB1dExheWVyQ29tcG9uZW50LnByb3RvdHlwZS5vbk1vdXNlVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG5cbiAgICBpZiAoRGF0ZS5ub3coKSAtIHRoaXMuY2xpY2tEb3duU3RhcnQgPCAodGhpcy5kcmFnVGltZSAqIDEwMDApKSB7XG4gICAgICAgIGlmICh0aGlzLmNsaWNrU3RhcnRQb2ludCkge1xuICAgICAgICAgICAgLy8gdGhpcy5lbnRpdHkuZmlyZSgndmFsaWRDbGljaycsIHRoaXMuY2xpY2tTdGFydFBvaW50KTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUmF5Y2FzdENvbGxpc2lvbnModGhpcy5jbGlja1N0YXJ0UG9pbnQueCwgdGhpcy5jbGlja1N0YXJ0UG9pbnQueSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZVJheWNhc3RDb2xsaXNpb25zID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICBjb25zdCBjYW1lcmFFbnRpdHkgPSB0aGlzLmNhbWVyYUVudGl0eTtcbiAgICBjb25zdCBjYW1lcmFDb21wb25lbnQgPSB0aGlzLmNhbWVyYUVudGl0eS5jYW1lcmE7XG4gICAgY2FtZXJhQ29tcG9uZW50LnNjcmVlblRvV29ybGQoeCwgeSwgY2FtZXJhQ29tcG9uZW50LmZhckNsaXAsIHRoaXMucmF5LmRpcmVjdGlvbik7XG4gICAgdGhpcy5yYXkub3JpZ2luLmNvcHkoY2FtZXJhRW50aXR5LmdldFBvc2l0aW9uKCkpO1xuICAgIHRoaXMucmF5LmRpcmVjdGlvbi5zdWIodGhpcy5yYXkub3JpZ2luKS5ub3JtYWxpemUoKTtcblxuICAgIHRoaXMuYXBwLmZpcmUoJ3BpY2tlcjpyYXljYXN0JywgdGhpcy5yYXksIHsgeCwgeSB9KTtcbn1cblxuSW5wdXRMYXllckNvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlUGlja2VyUmVzdWx0ID0gZnVuY3Rpb24gKHBpY2tlZEVudGl0eSwgaGl0UG9zaXRpb24sIHNjcmVlblBvcykge1xuICAgIHRoaXMuaW5wdXRRdWV1ZS5wdXNoKHtcbiAgICAgICAgZW50aXR5OiBwaWNrZWRFbnRpdHksXG4gICAgICAgIGhpdFBvc2l0aW9uOiBoaXRQb3NpdGlvbixcbiAgICAgICAgc2NyZWVuUG9zaXRpb246IHNjcmVlblBvc1xuICAgIH0pO1xufVxuXG5JbnB1dExheWVyQ29tcG9uZW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICB0aGlzLnByb2Nlc3NJbnB1dFF1ZXVlKCk7XG59XG5cblxuSW5wdXRMYXllckNvbXBvbmVudC5wcm90b3R5cGUucHJvY2Vzc0lucHV0UXVldWUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICBpZiAodGhpcy5pbnB1dFF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IGhpZ2hlc3RQcmlvcml0eVBpY2sgPSB0aGlzLmlucHV0UXVldWVbMF07XG4gICAgICAgIGxldCBoaWdoZXN0UHJpb3JpdHkgPSAtMTtcbiAgICAgICAgLy8gRmluZCBoaWdoZXN0IHByaW9yaXR5XG4gICAgICAgIGZvciAoY29uc3QgcGljayBvZiB0aGlzLmlucHV0UXVldWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHBpY2tQcmlvcml0eSA9IGdldFByaW9yaXR5KHBpY2suZW50aXR5KVxuICAgICAgICAgICAgaWYgKHBpY2tQcmlvcml0eSA+IGhpZ2hlc3RQcmlvcml0eSkge1xuICAgICAgICAgICAgICAgIGhpZ2hlc3RQcmlvcml0eVBpY2sgPSBwaWNrO1xuICAgICAgICAgICAgICAgIGhpZ2hlc3RQcmlvcml0eSA9IHBpY2tQcmlvcml0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW5wdXRRdWV1ZSA9IFtdO1xuXG4gICAgICAgIGlmIChoaWdoZXN0UHJpb3JpdHlQaWNrLmVudGl0eS50YWdzLmhhcygnZ2FtZUNoYXJhY3RlcicpKSB7XG4gICAgICAgICAgICB0aGlzLnBpY2tlZEdhbWVDaGFyYWN0ZXIoaGlnaGVzdFByaW9yaXR5UGljay5lbnRpdHksIGhpZ2hlc3RQcmlvcml0eVBpY2suaGl0UG9zaXRpb24pXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGlnaGVzdFByaW9yaXR5UGljay5lbnRpdHkudGFncy5oYXMoJ25hdmlnYXRpb24nKSkge1xuICAgICAgICAgICAgdGhpcy5waWNrZWROYXZpZ2F0aW9uKGhpZ2hlc3RQcmlvcml0eVBpY2suZW50aXR5LCBoaWdoZXN0UHJpb3JpdHlQaWNrLmhpdFBvc2l0aW9uKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhpZ2hlc3RQcmlvcml0eVBpY2suZW50aXR5LnRhZ3MuaGFzKCdwb3J0YWwnKSkge1xuICAgICAgICAgICAgdGhpcy5waWNrZWRQb3J0YWwoaGlnaGVzdFByaW9yaXR5UGljay5lbnRpdHksIGhpZ2hlc3RQcmlvcml0eVBpY2suaGl0UG9zaXRpb24pXG4gICAgICAgIH1cblxuICAgIH1cbn1cblxuSW5wdXRMYXllckNvbXBvbmVudC5wcm90b3R5cGUucGlja2VkR2FtZUNoYXJhY3RlciA9IGZ1bmN0aW9uIChwaWNrZWRFbnRpdHksIGhpdFBvc2l0aW9uKSB7XG4gICAgdGhpcy5lbnRpdHkuZmlyZSgncGlja2VyOmdhbWVDaGFyYWN0ZXInLCBwaWNrZWRFbnRpdHkpO1xufVxuXG5JbnB1dExheWVyQ29tcG9uZW50LnByb3RvdHlwZS5waWNrZWROYXZpZ2F0aW9uID0gZnVuY3Rpb24gKHBpY2tlZEVudGl0eSwgaGl0UG9zaXRpb24pIHtcbiAgICBjb25zdCBuYXZDb21wID0gcGlja2VkRW50aXR5LnNjcmlwdFsnTmF2aWdhdGlvbkNvbXBvbmVudCddO1xuICAgIGNvbnN0IG5lYXJlc3ROb2RlID0gbmF2Q29tcC5nZXROZWFyZXN0Tm9kZShoaXRQb3NpdGlvbik7XG4gICAgdGhpcy5lbnRpdHkuZmlyZSgncGlja2VyOm5hdmlnYXRpb24nLCBuZWFyZXN0Tm9kZSk7XG59XG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLnBpY2tlZFBvcnRhbCA9IGZ1bmN0aW9uIChwaWNrZWRFbnRpdHksIGhpdFBvc2l0aW9uKSB7XG4gICAgcGlja2VkRW50aXR5LmZpcmUoJ3BpY2tlcjpwb3J0YWwnKTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJpb3JpdHkoZW50aXR5KSB7XG4gICAgaWYgKGVudGl0eS50YWdzLmhhcygnZ2FtZUNoYXJhY3RlcicpKSB7XG4gICAgICAgIHJldHVybiAzO1xuICAgIH1cblxuICAgIGlmIChlbnRpdHkudGFncy5oYXMoJ3BvcnRhbCcpKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgIH1cblxuICAgIGlmIChlbnRpdHkudGFncy5oYXMoJ25hdmlnYXRpb24nKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG59IiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBQbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudCB9IGZyb20gJy4vUGxheWVyQ29tYmF0UGFuZWxDb21wb25lbnQnO1xuaW1wb3J0IHsgSW5wdXRMYXllckNvbXBvbmVudCB9IGZyb20gJy4uL2lucHV0TGF5ZXIvSW5wdXRMYXllckNvbXBvbmVudCc7XG5jb25zdCB7IE1lZGlhdG9yIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBjbGFzcyBQbGF5ZXJDb21iYXRQYW5lbE1lZGlhdG9yIGV4dGVuZHMgTWVkaWF0b3Ige1xuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiUGxheWVyQ29tYmF0UGFuZWxNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKFBsYXllckNvbWJhdFBhbmVsTWVkaWF0b3IuTkFNRSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKFtcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkVfQ09NUExFVEUsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuQVdBSVRfUExBWUVSX0NPTUJBVF9JTlBVVCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5FTkRfQ09NQkFUX1RVUk4sXG4gICAgICAgIF0pO1xuXG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG5cbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdjbGljazplbmRUdXJuJywgdGhpcy5oYW5kbGVFbmRUdXJuLCB0aGlzKTtcbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkVfQ09NUExFVEU6XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkFXQUlUX1BMQVlFUl9DT01CQVRfSU5QVVQ6XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuRU5EX0NPTUJBVF9UVVJOOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVFbmRUdXJuKGV2dCkge1xuICAgICAgICB0aGlzLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkVORF9DT01CQVRfVFVSTik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSBcIkBrb3JlZXovcHVyZS1tdmNcIjtcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tIFwiLi4vLi4vR2FtZUZhY2FkZVwiO1xuaW1wb3J0IHsgUGxheWVyQ29tYmF0UGFuZWxNZWRpYXRvciB9IGZyb20gXCIuL1BsYXllckNvbWJhdFBhbmVsTWVkaWF0b3JcIjtcblxuZXhwb3J0IGNvbnN0IFBsYXllckNvbWJhdFBhbmVsQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdQbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudCcpO1xuXG5QbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnZW5kVHVybkJ1dHRvbicsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnRW5kIFR1cm4gYnV0dG9uJyB9KTtcblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcblBsYXllckNvbWJhdFBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG5QbGF5ZXJDb21iYXRQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoUGxheWVyQ29tYmF0UGFuZWxNZWRpYXRvci5OQU1FKSkge1xuICAgICAgICB0aGlzLmZhY2FkZS5yZW1vdmVNZWRpYXRvcihQbGF5ZXJDb21iYXRQYW5lbE1lZGlhdG9yLk5BTUUpO1xuICAgIH1cblxuICAgIHRoaXMubWVzc2FnZVF1ZXVlID0gW107XG4gICAgdGhpcy5jdXJyZW50VGltZW91dCA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyTWVkaWF0b3IobmV3IFBsYXllckNvbWJhdFBhbmVsTWVkaWF0b3IodGhpcy5lbnRpdHkpKTtcblxuICAgIHRoaXMuZW5kVHVybkJ1dHRvbi5lbGVtZW50Lm9uKCdjbGljaycsIHRoaXMuY2xpY2tFbmRUdXJuLCB0aGlzKTtcbn07XG5cblBsYXllckNvbWJhdFBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5jbGlja0VuZFR1cm4gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgdGhpcy5lbnRpdHkuZmlyZSgnY2xpY2s6ZW5kVHVybicpO1xufVxuIiwiZXhwb3J0IGNvbnN0IEhpdGJveENvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnSGl0Ym94Q29tcG9uZW50Jyk7XG5cblxuSGl0Ym94Q29tcG9uZW50LnByb3RvdHlwZS5wb3N0SW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBzY2FsZSA9IHRoaXMuZW50aXR5LmdldExvY2FsU2NhbGUoKTtcbiAgICBjb25zdCBoYWxmRXh0ZW50cyA9IG5ldyBwYy5WZWMzKHNjYWxlLnggLyAyLCBzY2FsZS55IC8gMiwgc2NhbGUueiAvIDIpO1xuICAgIHRoaXMuYWFiYiA9IG5ldyBwYy5Cb3VuZGluZ0JveCh0aGlzLmVudGl0eS5nZXRQb3NpdGlvbigpLCBoYWxmRXh0ZW50cyk7XG4gICAgdGhpcy5hcHAub24oJ3BpY2tlcjpyYXljYXN0JywgdGhpcy5oYW5kbGVSYXlDYXN0LCB0aGlzKTtcblxuICAgIHRoaXMuZW50aXR5Lm9uKCdzdG9wTGlzdGVuaW5nJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmFwcC5vZmYoJ3BpY2tlcjpyYXljYXN0JywgdGhpcy5oYW5kbGVSYXlDYXN0LCB0aGlzKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZW50aXR5Lm9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgICB0aGlzLmFwcC5vZmYoJ3BpY2tlcjpyYXljYXN0JywgdGhpcy5oYW5kbGVSYXlDYXN0LCB0aGlzKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZW50aXR5Lm1vZGVsLmVuYWJsZWQgPSBmYWxzZTtcblxufVxuXG5IaXRib3hDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZVJheUNhc3QgPSBmdW5jdGlvbiAocmF5LCBzY3JlZW5Qb3MpIHtcbiAgICBjb25zdCBoaXRQb3NpdGlvbiA9IG5ldyBwYy5WZWMzKCk7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5hYWJiLmludGVyc2VjdHNSYXkocmF5LCBoaXRQb3NpdGlvbik7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgICB0aGlzLmFwcC5maXJlKCdwaWNrZXI6cmVzdWx0JywgdGhpcy5lbnRpdHkucGFyZW50LCBoaXRQb3NpdGlvbiwgc2NyZWVuUG9zKTtcbiAgICB9XG59XG5cbkhpdGJveENvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGR0KSB7XG4gICAgdGhpcy5hYWJiLmNlbnRlci5jb3B5KHRoaXMuZW50aXR5LmdldFBvc2l0aW9uKCkpO1xufVxuIiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5jb25zdCB7IE1lZGlhdG9yIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBjbGFzcyBBY3Rpb25QYW5lbE1lZGlhdG9yIGV4dGVuZHMgTWVkaWF0b3Ige1xuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiQWN0aW9uUGFuZWxNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKEFjdGlvblBhbmVsTWVkaWF0b3IuTkFNRSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKFtcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5TRVRfUExBWUVSX0FDVElPTiwgR2FtZUNvbW1hbmRzLlRPR0dMRV9CVVRUT04sXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuVVNFX1BMQVlFUl9BQ1RJT05cbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG5cbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdjbGljazpmaXJlQ29tbWFuZCcsIHRoaXMuaGFuZGxlRmlyZUNvbW1hbmQsIHRoaXMpO1xuXG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuVE9HR0xFX0JVVFRPTjpcbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb25OYW1lID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydBY3Rpb25QYW5lbENvbXBvbmVudCddLnNlbGVjdEFjdGlvbihhY3Rpb25OYW1lKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLlVTRV9QTEFZRVJfQUNUSU9OOlxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVGaXJlQ29tbWFuZChjb21tYW5kTmFtZSwgLi4uYXJncykge1xuICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKGNvbW1hbmROYW1lLCAuLi5hcmdzKTtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgQWN0aW9uQnV0dG9uQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdBY3Rpb25CdXR0b25Db21wb25lbnQnKTtcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuXG5jb25zdCBjb21tYW5kU2NoZW1hID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogJ2NvbW1hbmROYW1lJyxcbiAgICAgICAgdGl0bGU6ICdDb21tYW5kIG5hbWUnLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJ1xuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnY29tbWFuZEFyZ3MnLFxuICAgICAgICB0aXRsZTogJ0NvbW1hbmQgYXJndW1lbnRzJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsIGFycmF5OiB0cnVlXG4gICAgfVxuXTtcblxuQWN0aW9uQnV0dG9uQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdoaWdobGlnaHRFbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0hpZ2hsaWdodCBFbnRpdHknIH0pO1xuQWN0aW9uQnV0dG9uQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdpY29uRW50aXR5JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdJY29uIEVudGl0eScgfSk7XG5BY3Rpb25CdXR0b25Db21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2NvbW1hbmRzJywgeyB0eXBlOiAnanNvbicsIHNjaGVtYTogY29tbWFuZFNjaGVtYSwgdGl0bGU6ICdDb21tYW5kIG5hbWUnLCBhcnJheTogdHJ1ZSB9KTs7XG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5BY3Rpb25CdXR0b25Db21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5oaWdobGlnaHRFbnRpdHkuZW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuZW50aXR5Lm9uKCdzZWxlY3Q6YWN0aW9uJywgdGhpcy5oYW5kbGVDaGFuZ2VBY3Rpb24sIHRoaXMpO1xuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24oJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljaywgdGhpcyk7XG59O1xuXG5BY3Rpb25CdXR0b25Db21wb25lbnQucHJvdG90eXBlLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIGZvciAoY29uc3QgY29tbWFuZCBvZiB0aGlzLmNvbW1hbmRzKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmROYW1lID0gY29tbWFuZC5jb21tYW5kTmFtZTtcbiAgICAgICAgY29uc3QgY29tbWFuZEFyZ3MgPSBjb21tYW5kLmNvbW1hbmRBcmdzO1xuICAgICAgICB0aGlzLmVudGl0eS5wYXJlbnQuZmlyZSgnY2xpY2s6ZmlyZUNvbW1hbmQnLCBjb21tYW5kTmFtZSwgLi4uY29tbWFuZEFyZ3MpO1xuXG4gICAgfVxufVxuXG5BY3Rpb25CdXR0b25Db21wb25lbnQucHJvdG90eXBlLmhhbmRsZUNoYW5nZUFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICBpZiAodGhpcy5lbnRpdHkubmFtZSA9PT0gYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0RW50aXR5LmVuYWJsZWQgPSAhdGhpcy5oaWdobGlnaHRFbnRpdHkuZW5hYmxlZDtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0RW50aXR5LmVuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG59IiwiZXhwb3J0IGNvbnN0IEFjdGlvblBhbmVsQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdBY3Rpb25QYW5lbENvbXBvbmVudCcpO1xuaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSAnQGtvcmVlei9wdXJlLW12Yyc7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi4vLi4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBBY3Rpb25QYW5lbE1lZGlhdG9yIH0gZnJvbSAnLi9BY3Rpb25QYW5lbE1lZGlhdG9yJztcbmltcG9ydCB7IEFjdGlvbkJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vQWN0aW9uQnV0dG9uQ29tcG9uZW50JztcblxuQWN0aW9uUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2FjdGlvbkJ1dHRvbnMnLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0FjdGlvbiBCdXR0b25zJywgYXJyYXk6IHRydWUgfSk7XG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5BY3Rpb25QYW5lbENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKEFjdGlvblBhbmVsTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoQWN0aW9uUGFuZWxNZWRpYXRvci5OQU1FKTtcbiAgICB9XG5cbiAgICB0aGlzLmZhY2FkZS5yZWdpc3Rlck1lZGlhdG9yKG5ldyBBY3Rpb25QYW5lbE1lZGlhdG9yKHRoaXMuZW50aXR5KSk7XG59XG5cbkFjdGlvblBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5zZWxlY3RBY3Rpb24gPSBmdW5jdGlvbiAoYWN0aW9uTmFtZSkge1xuICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIHRoaXMuYWN0aW9uQnV0dG9ucykge1xuICAgICAgICBidXR0b24uZmlyZSgnc2VsZWN0OmFjdGlvbicsIGFjdGlvbk5hbWUpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBVSVN0b3BQcm9wYWdhdGlvbiA9IHBjLmNyZWF0ZVNjcmlwdCgnVUlTdG9wUHJvcGFnYXRpb24nKTtcblxuVUlTdG9wUHJvcGFnYXRpb24ucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbnRpdHkuZWxlbWVudC5vbihwYy5FVkVOVF9NT1VTRURPV04sIChldnQpID0+IHtcbiAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5lbnRpdHkuZWxlbWVudC5vbihwYy5FVkVOVF9NT1VTRURPV04sIChldnQpID0+IHtcbiAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5lbnRpdHkuZWxlbWVudC5vbihwYy5FVkVOVF9UT1VDSFNUQVJULCAoZXZ0KSA9PiB7XG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24ocGMuRVZFTlRfVE9VQ0hNT1ZFLCAoZXZ0KSA9PiB7XG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24ocGMuRVZFTlRfVE9VQ0hFTkQsIChldnQpID0+IHtcbiAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0pO1xufVxuXG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gXCIuLi8uLi9HYW1lRmFjYWRlXCI7XG5pbXBvcnQgeyBQcm9qZWN0aWxlQ3JlYXRvck1lZGlhdG9yIH0gZnJvbSBcIi4vUHJvamVjdGlsZUNyZWF0b3JNZWRpYXRvclwiO1xuXG5leHBvcnQgY29uc3QgUHJvamVjdGlsZUNyZWF0b3JDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ1Byb2plY3RpbGVDcmVhdG9yQ29tcG9uZW50Jyk7XG5cbmNvbnN0IHByb2plY3RpbGVTY2hlbWEgPSBbXG4gICAge1xuICAgICAgICBuYW1lOiAncHJvamVjdGlsZU5hbWUnLFxuICAgICAgICB0aXRsZTogJ1Byb2plY3RpbGUgTmFtZScsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdwcm9qZWN0aWxlVGVtcGxhdGUnLFxuICAgICAgICB0aXRsZTogJ1Byb2plY3RpbGUgVGVtcGxhdGUnLFxuICAgICAgICB0eXBlOiAnYXNzZXQnXG4gICAgfVxuXTtcblxuUHJvamVjdGlsZUNyZWF0b3JDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJwcm9qZWN0aWxlVHlwZXNcIiwge1xuICAgIHR5cGU6IFwianNvblwiLFxuICAgIHRpdGxlOiBcIlByb2plY3RpbGUgVHlwZXNcIixcbiAgICBzY2hlbWE6IHByb2plY3RpbGVTY2hlbWEsXG4gICAgYXJyYXk6IHRydWVcbn0pO1xuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcblByb2plY3RpbGVDcmVhdG9yQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoUHJvamVjdGlsZUNyZWF0b3JNZWRpYXRvci5OQU1FKSkge1xuICAgICAgICB0aGlzLmZhY2FkZS5yZW1vdmVNZWRpYXRvcihQcm9qZWN0aWxlQ3JlYXRvck1lZGlhdG9yLk5BTUUpO1xuICAgIH1cbiAgICB0aGlzLmZhY2FkZS5yZWdpc3Rlck1lZGlhdG9yKG5ldyBQcm9qZWN0aWxlQ3JlYXRvck1lZGlhdG9yKHRoaXMuZW50aXR5KSk7XG59O1xuXG5cblByb2plY3RpbGVDcmVhdG9yQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVQcm9qZWN0aWxlID0gZnVuY3Rpb24gKHByb2plY3RpbGVOYW1lLCBvcmlnaW5Qb2ludCwgdGFyZ2V0UG9pbnQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHByb2plY3RpbGVTY2hlbWUgPSB0aGlzLnByb2plY3RpbGVUeXBlcy5maW5kKHNjaGVtZSA9PiBzY2hlbWUucHJvamVjdGlsZU5hbWUgPT09IHByb2plY3RpbGVOYW1lKTtcbiAgICAgICAgaWYgKHByb2plY3RpbGVTY2hlbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Byb2plY3RpbGUgPSBwcm9qZWN0aWxlU2NoZW1lLnByb2plY3RpbGVUZW1wbGF0ZS5yZXNvdXJjZS5pbnN0YW50aWF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5lbnRpdHkuYWRkQ2hpbGQobmV3UHJvamVjdGlsZSk7XG4gICAgICAgICAgICBuZXdQcm9qZWN0aWxlLm9uY2UoJ3Byb2plY3RpbGVBcnJpdmVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbmV3UHJvamVjdGlsZS5zY3JpcHRbJ1Byb2plY3RpbGVDb21wb25lbnQnXS5zZXRUYXJnZXQob3JpZ2luUG9pbnQsIHRhcmdldFBvaW50KTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBjcmVhdGUgcHJvamVjdGlsZSBcIiR7cHJvamVjdGlsZU5hbWV9XCJgKTtcbiAgICAgICAgfVxuICAgIH0pO1xufSIsIlxuXG5leHBvcnQgY29uc3QgUHJvamVjdGlsZUNvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnUHJvamVjdGlsZUNvbXBvbmVudCcpO1xuXG5Qcm9qZWN0aWxlQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKFwicHJvamVjdGlsZVNwZWVkXCIsIHtcbiAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIHRpdGxlOiBcIlByb2plY3RpbGUgU3BlZWRcIixcbiAgICBkZWZhdWx0OiA4XG59KTtcblxuXG5Qcm9qZWN0aWxlQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXG59XG5cblByb2plY3RpbGVDb21wb25lbnQucHJvdG90eXBlLnNldFRhcmdldCA9IGZ1bmN0aW9uIChvcmlnaW5Qb2ludCwgdGFyZ2V0UG9pbnQpIHtcbiAgICB0aGlzLmVudGl0eS5zZXRMb2NhbFBvc2l0aW9uKG9yaWdpblBvaW50LngsIG9yaWdpblBvaW50LnksIG9yaWdpblBvaW50LnopO1xuICAgIHRoaXMudGFyZ2V0UG9pbnQgPSB0YXJnZXRQb2ludDtcbiAgICB0aGlzLmxvb2tBdFBvaW50KHRoaXMudGFyZ2V0UG9pbnQpO1xuXG59XG5cblByb2plY3RpbGVDb21wb25lbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkdCkge1xuICAgIGlmICh0aGlzLnRhcmdldFBvaW50KSB7XG4gICAgICAgIGNvbnN0IGxvY2FsUG9zID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpO1xuICAgICAgICBjb25zdCBuZXdQb3NpdGlvbiA9IG5ldyBwYy5WZWMzKCk7XG4gICAgICAgIGNvbnN0IHNwZWVkID0gbmV3IHBjLlZlYzMoZHQgKiB0aGlzLnByb2plY3RpbGVTcGVlZCwgZHQgKiB0aGlzLnByb2plY3RpbGVTcGVlZCwgZHQgKiB0aGlzLnByb2plY3RpbGVTcGVlZCk7XG4gICAgICAgIG5ld1Bvc2l0aW9uLnN1YjIodGhpcy50YXJnZXRQb2ludC5jbG9uZSgpLCBsb2NhbFBvcyk7XG4gICAgICAgIG5ld1Bvc2l0aW9uLm5vcm1hbGl6ZSgpO1xuICAgICAgICBuZXdQb3NpdGlvbi5tdWwoc3BlZWQpO1xuICAgICAgICBuZXdQb3NpdGlvbi5hZGQobG9jYWxQb3MpO1xuXG4gICAgICAgIHRoaXMuZW50aXR5LnNldExvY2FsUG9zaXRpb24obmV3UG9zaXRpb24pO1xuXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlVG9OZXh0UGF0aCA9IG5ld1Bvc2l0aW9uLmRpc3RhbmNlKHRoaXMudGFyZ2V0UG9pbnQpO1xuICAgICAgICBpZiAoZGlzdGFuY2VUb05leHRQYXRoIDw9IChkdCAqIHRoaXMucHJvamVjdGlsZVNwZWVkKSkge1xuICAgICAgICAgICAgdGhpcy5lbnRpdHkuZmlyZSgncHJvamVjdGlsZUFycml2ZWQnKTtcbiAgICAgICAgICAgIHRoaXMuZW50aXR5LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5Qcm9qZWN0aWxlQ29tcG9uZW50LnByb3RvdHlwZS5sb29rQXRQb2ludCA9IGZ1bmN0aW9uIChwb2ludCkge1xuICAgIGNvbnN0IGxvY2FsUG9zID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpO1xuXG4gICAgY29uc3QgZHggPSBwb2ludC54IC0gbG9jYWxQb3MueDtcbiAgICBjb25zdCBkeiA9IHBvaW50LnogLSBsb2NhbFBvcy56O1xuICAgIGNvbnN0IGFuZ2xlVG9EZXN0ID0gTWF0aC5hdGFuMihkeCwgZHopICogMTgwIC8gTWF0aC5QSTtcbiAgICB0aGlzLmVudGl0eS5zZXRFdWxlckFuZ2xlcygwLCBhbmdsZVRvRGVzdCwgMCk7XG59IiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBTdGFtaW5hQmFyQ29tcG9uZW50IH0gZnJvbSAnLi9TdGFtaW5hQmFyQ29tcG9uZW50JztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIFN0YW1pbmFCYXJNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIlN0YW1pbmFCYXJNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKFN0YW1pbmFCYXJNZWRpYXRvci5OQU1FKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24oW1xuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkNIQU5HRV9TVEFNSU5BICsgXCJwbGF5ZXJcIlxuICAgICAgICBdKTtcblxuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50O1xuICAgIH1cblxuICAgIG9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKSB7XG4gICAgICAgIHN1cGVyLm9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKTtcbiAgICB9XG5cbiAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgICAgICBzd2l0Y2ggKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkNIQU5HRV9TVEFNSU5BICsgXCJwbGF5ZXJcIjpcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdTdGFtaW5hID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXhTdGFtaW5hID0gYXJnc1sxXTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0W1wiU3RhbWluYUJhckNvbXBvbmVudFwiXS51cGRhdGVTdGFtaW5hKG5ld1N0YW1pbmEsIG1heFN0YW1pbmEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxufVxuIiwiaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSBcIkBrb3JlZXovcHVyZS1tdmNcIjtcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tIFwiLi4vLi4vR2FtZUZhY2FkZVwiO1xuaW1wb3J0IHsgU3RhbWluYUJhck1lZGlhdG9yIH0gZnJvbSBcIi4vU3RhbWluYUJhck1lZGlhdG9yXCI7XG5cbmV4cG9ydCBjb25zdCBTdGFtaW5hQmFyQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdTdGFtaW5hQmFyQ29tcG9uZW50Jyk7XG5cblN0YW1pbmFCYXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJiYXJFbnRpdHlcIiwge1xuICAgIHR5cGU6IFwiZW50aXR5XCIsXG4gICAgdGl0bGU6IFwiQmFyIEVudGl0eVwiXG59KTtcblxuU3RhbWluYUJhckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcInN0YW1pbmFMYWJlbFwiLCB7XG4gICAgdHlwZTogXCJlbnRpdHlcIixcbiAgICB0aXRsZTogXCJTdGFtaW5hIExhYmVsXCJcbn0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuU3RhbWluYUJhckNvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKFN0YW1pbmFCYXJNZWRpYXRvci5OQU1FKSkge1xuICAgICAgICB0aGlzLmZhY2FkZS5yZW1vdmVNZWRpYXRvcihTdGFtaW5hQmFyTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyTWVkaWF0b3IobmV3IFN0YW1pbmFCYXJNZWRpYXRvcih0aGlzLmVudGl0eSkpO1xuXG4gICAgdGhpcy5iYXJFbnRpdHlNYXhXaWR0aCA9IHRoaXMuYmFyRW50aXR5LmVsZW1lbnQud2lkdGg7XG59O1xuXG5cblN0YW1pbmFCYXJDb21wb25lbnQucHJvdG90eXBlLnVwZGF0ZVN0YW1pbmEgPSBmdW5jdGlvbiAoY3VycmVudFN0YW1pbmEsIG1heFN0YW1pbmEpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHBjLm1hdGguY2xhbXAoY3VycmVudFN0YW1pbmEgLyBtYXhTdGFtaW5hLCAwLCAxKTtcbiAgICBjb25zdCB3aWR0aCA9IHBjLm1hdGgubGVycCgwLCB0aGlzLmJhckVudGl0eU1heFdpZHRoLCB2YWx1ZSk7XG4gICAgLy8gc2V0IHRoZSB3aWR0aCBvZiB0aGUgZmlsbCBpbWFnZSBlbGVtZW50XG4gICAgdGhpcy5iYXJFbnRpdHkuZWxlbWVudC53aWR0aCA9IHdpZHRoO1xuXG4gICAgLy8gU2V0IHRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudCdzIHJlY3QgKHJlY3QueikgdG8gYmUgdGhlIHNhbWVcbiAgICAvLyB2YWx1ZSBhcyBvdXIgMC0xIHByb2dyZXNzLlxuICAgIC8vIFRoaXMgaXMgc28gdGhhdCB0aGUgZmlsbCBpbWFnZSB3aWxsIG9ubHkgc2hvdyB0aGUgcG9ydGlvblxuICAgIC8vIG9mIHRoZSB0ZXh0dXJlIHRoYXQgaXMgdmlzaWJsZVxuICAgIHRoaXMuYmFyRW50aXR5LmVsZW1lbnQucmVjdC56ID0gdmFsdWU7XG4gICAgLy8gZm9yY2UgcmVjdCB1cGRhdGVcbiAgICB0aGlzLmJhckVudGl0eS5lbGVtZW50LnJlY3QgPSB0aGlzLmJhckVudGl0eS5lbGVtZW50LnJlY3Q7XG5cbiAgICB0aGlzLnN0YW1pbmFMYWJlbC5lbGVtZW50LnRleHQgPSBgJHtjdXJyZW50U3RhbWluYX0vJHttYXhTdGFtaW5hfWA7XG59IiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi8uLi9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5jb25zdCB7IE1lZGlhdG9yIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBjbGFzcyBBY3Rpb25zUmVtYWluaW5nUGFuZWxNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkFjdGlvbnNSZW1haW5pbmdQYW5lbE1lZGlhdG9yXCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKHZpZXdDb21wb25lbnQpIHtcbiAgICAgICAgc3VwZXIoQWN0aW9uc1JlbWFpbmluZ1BhbmVsTWVkaWF0b3IuTkFNRSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKFtcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkVfQ09NUExFVEUsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuQVdBSVRfUExBWUVSX0NPTUJBVF9JTlBVVCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5FTkRfQ09NQkFUX1RVUk4sXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuVVNFX0FDVElPTiArIFwicGxheWVyXCJcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FX0NPTVBMRVRFOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5BV0FJVF9QTEFZRVJfQ09NQkFUX0lOUFVUOlxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYXllclByb3h5ID0gdGhpcy5mYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIFwicGxheWVyXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF2YWlsYWJsZUFjdGlvbnMgPSBwbGF5ZXJQcm94eS5hdmFpbGFibGVBY3Rpb25zO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1heEFjdGlvbnMgPSBwbGF5ZXJQcm94eS5tYXhBY3Rpb25zUGVyVHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydBY3Rpb25zUmVtYWluaW5nUGFuZWxDb21wb25lbnQnXS5zaG93QXZhaWxhYmxlQWN0aW9uKGF2YWlsYWJsZUFjdGlvbnMsIG1heEFjdGlvbnMpO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLlVTRV9BQ1RJT04gKyBcInBsYXllclwiOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0FjdGlvbnNSZW1haW5pbmdQYW5lbENvbXBvbmVudCddLnNob3dBdmFpbGFibGVBY3Rpb24oYXJnc1swXSwgYXJnc1sxXSk7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkVORF9DT01CQVRfVFVSTjpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IEFjdGlvbnNSZW1haW5pbmdQYW5lbENvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnQWN0aW9uc1JlbWFpbmluZ1BhbmVsQ29tcG9uZW50Jyk7XG5pbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tICcuLi8uLi9HYW1lRmFjYWRlJztcbmltcG9ydCB7IEFjdGlvbnNSZW1haW5pbmdQYW5lbE1lZGlhdG9yIH0gZnJvbSAnLi9BY3Rpb25zUmVtYWluaW5nUGFuZWxNZWRpYXRvcic7XG5cbkFjdGlvbnNSZW1haW5pbmdQYW5lbENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgncGlwVGVtcGxhdGUnLCB7IHR5cGU6ICdhc3NldCcsIHRpdGxlOiAnUGlwIFRlbXBsYXRlJyB9KTtcblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcbkFjdGlvbnNSZW1haW5pbmdQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKEFjdGlvbnNSZW1haW5pbmdQYW5lbE1lZGlhdG9yLk5BTUUpKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnJlbW92ZU1lZGlhdG9yKEFjdGlvbnNSZW1haW5pbmdQYW5lbE1lZGlhdG9yLk5BTUUpO1xuICAgIH1cblxuICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyTWVkaWF0b3IobmV3IEFjdGlvbnNSZW1haW5pbmdQYW5lbE1lZGlhdG9yKHRoaXMuZW50aXR5KSk7XG5cbiAgICB0aGlzLnBpcHMgPSBbXTtcbn1cblxuQWN0aW9uc1JlbWFpbmluZ1BhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5zaG93QXZhaWxhYmxlQWN0aW9uID0gZnVuY3Rpb24gKGF2YWlsYWJsZUFjdGlvbnMsIG1heEFjdGlvbnMpIHtcbiAgICB3aGlsZSAodGhpcy5waXBzLmxlbmd0aCA8IG1heEFjdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVQaXAoKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGlwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSA8IGF2YWlsYWJsZUFjdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMucGlwc1tpXS5maXJlKCd0b2dnbGVQaXAnLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGlwc1tpXS5maXJlKCd0b2dnbGVQaXAnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuQWN0aW9uc1JlbWFpbmluZ1BhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVQaXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgbmV3UGlwID0gdGhpcy5waXBUZW1wbGF0ZS5yZXNvdXJjZS5pbnN0YW50aWF0ZSgpO1xuICAgIHRoaXMuZW50aXR5LmFkZENoaWxkKG5ld1BpcCk7XG4gICAgdGhpcy5waXBzLnB1c2gobmV3UGlwKTtcbn1cbiIsImV4cG9ydCBjb25zdCBBY3Rpb25zUmVtYWluaW5nUGlwQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdBY3Rpb25zUmVtYWluaW5nUGlwQ29tcG9uZW50Jyk7XG5cbkFjdGlvbnNSZW1haW5pbmdQaXBDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3BpcEZyb250JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdQaXAgZnJvbnQnIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuQWN0aW9uc1JlbWFpbmluZ1BpcENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVudGl0eS5vbigndG9nZ2xlUGlwJywgKHNob3cpID0+IHtcbiAgICAgICAgdGhpcy5waXBGcm9udC5lbmFibGVkID0gc2hvdztcbiAgICB9KTtcbn1cbiIsIlxuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuY29uc3QgeyBNZWRpYXRvciB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuXG5leHBvcnQgY2xhc3MgRmxvYXRpbmdTdGF0dXNDcmVhdG9yTWVkaWF0b3IgZXh0ZW5kcyBNZWRpYXRvciB7XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJGbG9hdGluZ1N0YXR1c0NyZWF0b3JNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKEZsb2F0aW5nU3RhdHVzQ3JlYXRvck1lZGlhdG9yLk5BTUUpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZU5vdGlmaWNhdGlvbihbXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuRElTUExBWV9GTE9BVElOR19TVEFUVVNcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG5cbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5ESVNQTEFZX0ZMT0FUSU5HX1NUQVRVUzpcbiAgICAgICAgICAgICAgICBjb25zdCBzY3JpcHRDb21wID0gdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnRmxvYXRpbmdTdGF0dXNDcmVhdG9yQ29tcG9uZW50J107XG4gICAgICAgICAgICAgICAgY29uc3QgZmxvYXRlck5hbWUgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFByb3h5ID0gYXJnc1sxXTtcblxuICAgICAgICAgICAgICAgIHNjcmlwdENvbXAuZGlzcGxheVN0YXR1cyhmbG9hdGVyTmFtZSwgdGFyZ2V0UHJveHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IFRlbXBvcmFyeUZsb2F0aW5nU3RhdHVzQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdUZW1wb3JhcnlGbG9hdGluZ1N0YXR1c0NvbXBvbmVudCcpO1xuXG4vLyBUZW1wb3JhcnlGbG9hdGluZ1N0YXR1c0NvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnbWF4Q2FtZXJhSGVpZ2h0JywgeyB0eXBlOiAnbnVtYmVyJywgZGVmYXVsdDogMTAwLCB0aXRsZTogJ01heCBDYW1lcmEgSGVpZ2h0JyB9KTtcblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcblRlbXBvcmFyeUZsb2F0aW5nU3RhdHVzQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkgeyB9O1xuXG5UZW1wb3JhcnlGbG9hdGluZ1N0YXR1c0NvbXBvbmVudC5wcm90b3R5cGUuc2V0V29ybGRQb3NpdGlvbiA9IGZ1bmN0aW9uICh3b3JsZFBvc2l0aW9uLCBjYW1lcmEsIHNjcmVlbikge1xuICAgIHRoaXMuZW50aXR5LmVuYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMud29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb247XG4gICAgdGhpcy5kZXZpY2UgPSB0aGlzLmFwcC5ncmFwaGljc0RldmljZTtcbiAgICB0aGlzLmNhbWVyYUVudGl0eSA9IGNhbWVyYTtcbiAgICB0aGlzLnNjcmVlbkVudGl0eSA9IHNjcmVlbjtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmVudGl0eS5kZXN0cm95KCk7XG4gICAgfSwgMTAwMCk7XG59XG5cbi8vIHVwZGF0ZSBjb2RlIGNhbGxlZCBldmVyeSBmcmFtZVxuVGVtcG9yYXJ5RmxvYXRpbmdTdGF0dXNDb21wb25lbnQucHJvdG90eXBlLnBvc3RVcGRhdGUgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMud29ybGRTcGFjZVRvU2NyZWVuU3BhY2UodGhpcy53b3JsZFBvc2l0aW9uLmNsb25lKCkpO1xuICAgIGlmIChwb3NpdGlvbikge1xuICAgICAgICB0aGlzLmVudGl0eS5zZXRMb2NhbFBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICB9XG59O1xuXG5UZW1wb3JhcnlGbG9hdGluZ1N0YXR1c0NvbXBvbmVudC5wcm90b3R5cGUud29ybGRTcGFjZVRvU2NyZWVuU3BhY2UgPSBmdW5jdGlvbiAocG9zKSB7XG4gICAgaWYgKHRoaXMuZGV2aWNlICYmIHRoaXMuY2FtZXJhRW50aXR5ICYmIHRoaXMuc2NyZWVuRW50aXR5KSB7XG4gICAgICAgIGNvbnN0IHdvcmxkUG9zID0gcG9zLmNsb25lKCk7XG4gICAgICAgIGNvbnN0IHNjcmVlblBvcyA9IG5ldyBwYy5WZWMzKCk7XG4gICAgICAgIC8vIGdldCBzY3JlZW4gc3BhY2UgY28tb3JkXG4gICAgICAgIHRoaXMuY2FtZXJhRW50aXR5LmNhbWVyYS53b3JsZFRvU2NyZWVuKHdvcmxkUG9zLCBzY3JlZW5Qb3MpO1xuICAgICAgICBjb25zdCBwaXhlbFJhdGlvID0gdGhpcy5hcHAuZ3JhcGhpY3NEZXZpY2UubWF4UGl4ZWxSYXRpbztcbiAgICAgICAgc2NyZWVuUG9zLnggKj0gcGl4ZWxSYXRpbztcbiAgICAgICAgc2NyZWVuUG9zLnkgKj0gcGl4ZWxSYXRpbztcblxuICAgICAgICBjb25zdCBzY3JlZW5Db21wID0gdGhpcy5zY3JlZW5FbnRpdHkuc2NyZWVuO1xuXG4gICAgICAgIGNvbnN0IHJhdGlvU2NhbGUgPSBzY3JlZW5Db21wLnNjYWxlO1xuICAgICAgICBjb25zdCB4ID0gKHNjcmVlblBvcy54IC8gcmF0aW9TY2FsZSk7XG4gICAgICAgIGNvbnN0IHkgPSAodGhpcy5kZXZpY2UuaGVpZ2h0IC0gc2NyZWVuUG9zLnkpIC8gcmF0aW9TY2FsZTtcblxuICAgICAgICByZXR1cm4gbmV3IHBjLlZlYzMoeCwgeSwgMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcblxufSIsImV4cG9ydCBjb25zdCBGbG9hdGluZ1N0YXR1c0NyZWF0b3JDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ0Zsb2F0aW5nU3RhdHVzQ3JlYXRvckNvbXBvbmVudCcpO1xuaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSAnQGtvcmVlei9wdXJlLW12Yyc7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi4vLi4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBGbG9hdGluZ1N0YXR1c0NyZWF0b3JNZWRpYXRvciB9IGZyb20gJy4vRmxvYXRpbmdTdGF0dXNDcmVhdG9yTWVkaWF0b3InO1xuaW1wb3J0IHsgVGVtcG9yYXJ5RmxvYXRpbmdTdGF0dXNDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvVGVtcG9yYXJ5RmxvYXRpbmdTdGF0dXNDb21wb25lbnQnO1xuXG5jb25zdCBmbG9hdGluZ1N0YXR1c1NjaGVtYSA9IFtcbiAgICB7XG4gICAgICAgIG5hbWU6ICduYW1lJyxcbiAgICAgICAgdGl0bGU6ICdOYW1lJyxcbiAgICAgICAgdHlwZTogJ3N0cmluZydcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ3RlbXBsYXRlJyxcbiAgICAgICAgdGl0bGU6ICdUZW1wbGF0ZScsXG4gICAgICAgIHR5cGU6ICdhc3NldCdcbiAgICB9XG5dO1xuXG5GbG9hdGluZ1N0YXR1c0NyZWF0b3JDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3NjcmVlbkVudGl0eScsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnU2NyZWVuIEVudGl0eScgfSk7XG5GbG9hdGluZ1N0YXR1c0NyZWF0b3JDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2NhbWVyYUVudGl0eScsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnQ2FtZXJhIEVudGl0eScgfSk7XG5GbG9hdGluZ1N0YXR1c0NyZWF0b3JDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2Zsb2F0aW5nU3RhdHVzZXMnLCB7IHR5cGU6ICdqc29uJywgc2NoZW1hOiBmbG9hdGluZ1N0YXR1c1NjaGVtYSwgdGl0bGU6ICdGbG9hdGluZyBTdGF0dXNlcycsIGFycmF5OiB0cnVlIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuRmxvYXRpbmdTdGF0dXNDcmVhdG9yQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoRmxvYXRpbmdTdGF0dXNDcmVhdG9yTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoRmxvYXRpbmdTdGF0dXNDcmVhdG9yTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgRmxvYXRpbmdTdGF0dXNDcmVhdG9yTWVkaWF0b3IodGhpcy5lbnRpdHkpKTtcblxufTtcblxuRmxvYXRpbmdTdGF0dXNDcmVhdG9yQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwbGF5U3RhdHVzID0gZnVuY3Rpb24gKG5hbWUsIHRhcmdldFByb3h5LCAuLi5hcmdzKSB7XG4gICAgY29uc3Qgc2NoZW1lID0gdGhpcy5mbG9hdGluZ1N0YXR1c2VzLmZpbmQoKG90aGVyU2NoZW1lKSA9PiBvdGhlclNjaGVtZS5uYW1lID09PSBuYW1lKTtcbiAgICBpZiAoc2NoZW1lKSB7XG4gICAgICAgIC8vIFxuICAgICAgICBjb25zdCB0YXJnZXROb2RlID0gdGFyZ2V0UHJveHkuY3VycmVudE5vZGU7XG4gICAgICAgIGNvbnN0IHRhcmdldFBvcyA9IG5ldyBwYy5WZWMzKHRhcmdldE5vZGUueCwgdGFyZ2V0Tm9kZS55ICsgdGFyZ2V0UHJveHkuaGVpZ2h0LCB0YXJnZXROb2RlLnopO1xuICAgICAgICBjb25zdCBuZXdTdGF0dXMgPSBzY2hlbWUudGVtcGxhdGUucmVzb3VyY2UuaW5zdGFudGlhdGUoKTtcbiAgICAgICAgbmV3U3RhdHVzLnNjcmlwdFsnVGVtcG9yYXJ5RmxvYXRpbmdTdGF0dXNDb21wb25lbnQnXS5zZXRXb3JsZFBvc2l0aW9uKHRhcmdldFBvcyxcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhRW50aXR5LCB0aGlzLnNjcmVlbkVudGl0eSk7XG4gICAgICAgIHRoaXMuZW50aXR5LnBhcmVudC5hZGRDaGlsZChuZXdTdGF0dXMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY3JlYXRlIGZsb2F0aW5nIHN0YXR1czogJHtuYW1lfWApO1xuICAgIH1cblxufVxuIiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5jb25zdCB7IE1lZGlhdG9yIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBjbGFzcyBQb3J0YWxNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIlBvcnRhbE1lZGlhdG9yXCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKHZpZXdDb21wb25lbnQpIHtcbiAgICAgICAgc3VwZXIoUG9ydGFsTWVkaWF0b3IuTkFNRSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKFtcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkVfQ09NUExFVEUsXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50O1xuXG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vbigncGlja2VyOnBvcnRhbCcsIHRoaXMuc2VsZWN0ZWRQb3J0YWwsIHRoaXMpO1xuXG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuU0VUX0NBTUVSQV9UQVJHRVQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxlY3RlZFBvcnRhbCgpIHtcbiAgICAgICAgY29uc3QgZ2FtZVN0YXRlUHJveHkgPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVTdGF0ZVByb3h5Lk5BTUUpO1xuICAgICAgICBjb25zdCBwb3J0YWxDb21wb25lbnQgPSB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydQb3J0YWxDb21wb25lbnQnXTtcbiAgICAgICAgY29uc3QgZGVzdGluYXRpb25TY2VuZSA9IHBvcnRhbENvbXBvbmVudC5kZXN0aW5hdGlvblNjZW5lO1xuICAgICAgICBjb25zdCBkZXN0aW5hdGlvblBvcnRhbCA9IHBvcnRhbENvbXBvbmVudC5kZXN0aW5hdGlvblBvcnRhbDtcbiAgICAgICAgY29uc3Qgc3RhbmRpbmdQb3NpdGlvbiA9IHBvcnRhbENvbXBvbmVudC5zdGFuZGluZ1BvaW50LmdldFBvc2l0aW9uKCk7XG5cbiAgICAgICAgaWYgKGdhbWVTdGF0ZVByb3h5LmN1cnJlbnRNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5FWFBMT1JBVElPTikge1xuICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkFWSUdBVEVfVEhST1VHSF9QT1JUQUwsXG4gICAgICAgICAgICAgICAgc3RhbmRpbmdQb3NpdGlvbiwgZGVzdGluYXRpb25TY2VuZSwgZGVzdGluYXRpb25Qb3J0YWwpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IFBvcnRhbENvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnUG9ydGFsQ29tcG9uZW50Jyk7XG5pbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tICcuLi8uLi9HYW1lRmFjYWRlJztcbmltcG9ydCB7IFBvcnRhbE1lZGlhdG9yIH0gZnJvbSAnLi9Qb3J0YWxNZWRpYXRvcic7XG5cblBvcnRhbENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgncG9ydGFsSWQnLCB7IHR5cGU6ICdzdHJpbmcnLCB0aXRsZTogJ1BvcnRhbCBJZCcgfSk7XG5Qb3J0YWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2Rlc3RpbmF0aW9uU2NlbmUnLCB7IHR5cGU6ICdzdHJpbmcnLCB0aXRsZTogJ0Rlc3RpbmF0aW9uIFNjZW5lJyB9KTtcblBvcnRhbENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnZGVzdGluYXRpb25Qb3J0YWwnLCB7IHR5cGU6ICdzdHJpbmcnLCB0aXRsZTogJ0Rlc3RpbmF0aW9uIFBvcnRhbCcgfSk7XG5Qb3J0YWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2hpdGJveCcsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnSGl0Ym94JyB9KTtcblBvcnRhbENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnc3RhbmRpbmdQb2ludCcsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnU3RhbmRpbmcgUG9pbnQnIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuUG9ydGFsQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoUG9ydGFsTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoUG9ydGFsTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgUG9ydGFsTWVkaWF0b3IodGhpcy5lbnRpdHkpKTtcblxuICAgIHRoaXMuc3RhbmRpbmdQb2ludC5tb2RlbC5lbmFibGVkID0gZmFsc2U7XG5cbn07XG4iLCJcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIERpYWxvZ3VlUGFuZWxNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkRpYWxvZ3VlUGFuZWxNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKERpYWxvZ3VlUGFuZWxNZWRpYXRvci5OQU1FKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24oW1xuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLlNIT1dfRElBTE9HVUVfUEFORUwsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuSElERV9ESUFMT0dVRV9QQU5FTCxcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5ESVNQTEFZX0RJQUxPR1VFX1NURVAsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuRElTUExBWV9ESUFMT0dVRV9TS0lMTF9URVNULFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkNMRUFSX0RJQUxPR1VFX0NIT0lDRVMsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuU0hPV19ESUFMT0dVRV9DT05USU5VRV9CVVRUT04sXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuSElERV9ESUFMT0dVRV9DT05USU5VRV9CVVRUT05cbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG5cbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdjbGlja2VkOmNvbnRpbnVlJywgdGhpcy5oYW5kbGVDbGlja0NvbnRpbnVlLCB0aGlzKTtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdjbGlja2VkOmNob2ljZScsIHRoaXMuaGFuZGxlQ2xpY2tDaG9pY2UsIHRoaXMpO1xuXG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuU0hPV19ESUFMT0dVRV9QQU5FTDpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5ISURFX0RJQUxPR1VFX1BBTkVMOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0RpYWxvZ3VlUGFuZWxDb21wb25lbnQnXS5jbGVhclBhbmVsKCk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkRJU1BMQVlfRElBTE9HVUVfU1RFUDpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydEaWFsb2d1ZVBhbmVsQ29tcG9uZW50J10uY3JlYXRlU3RlcChhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkRJU1BMQVlfRElBTE9HVUVfU0tJTExfVEVTVDpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydEaWFsb2d1ZVBhbmVsQ29tcG9uZW50J10uY3JlYXRlU2tpbGxUZXN0KC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuQ0xFQVJfRElBTE9HVUVfQ0hPSUNFUzpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydEaWFsb2d1ZVBhbmVsQ29tcG9uZW50J10uY2xlYXJEaWFsb2d1ZUNob2ljZXMoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLlNIT1dfRElBTE9HVUVfQ09OVElOVUVfQlVUVE9OOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0RpYWxvZ3VlUGFuZWxDb21wb25lbnQnXS5zZXRDb250aW51ZUJ1dHRvbih0cnVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkhJREVfRElBTE9HVUVfQ09OVElOVUVfQlVUVE9OOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ0RpYWxvZ3VlUGFuZWxDb21wb25lbnQnXS5zZXRDb250aW51ZUJ1dHRvbihmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUNsaWNrQ29udGludWUoKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkNPTlRJTlVFX0RJQUxPR1VFX05PREUpO1xuICAgIH1cblxuICAgIGhhbmRsZUNsaWNrQ2hvaWNlKGluZGV4KSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNFTEVDVF9ESUFMT0dVRV9DSE9JQ0UsIGluZGV4KTtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgRGlhbG9ndWVQYW5lbENvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnRGlhbG9ndWVQYW5lbENvbXBvbmVudCcpO1xuaW1wb3J0IHsgRmFjYWRlIH0gZnJvbSAnQGtvcmVlei9wdXJlLW12Yyc7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi4vLi4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBEaWFsb2d1ZVBhbmVsTWVkaWF0b3IgfSBmcm9tICcuL0RpYWxvZ3VlUGFuZWxNZWRpYXRvcic7XG5cbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3Njcm9sbGJhclZpZXdFbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ1Njcm9sbGJhciBWaWV3JyB9KTtcbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2NvbnRlbnRFbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0NvbnRlbnQgRW50aXR5JyB9KTtcbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2ZlZWRFbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0ZlZWQgRW50aXR5JyB9KTtcbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2NvbnRlbnRIZWlnaHQnLCB7IHR5cGU6ICdudW1iZXInLCB0aXRsZTogJ0NvbnRlbnQgSGVpZ2h0JywgZGVmYXVsdDogNTIwIH0pO1xuXG5EaWFsb2d1ZVBhbmVsQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCd0ZXh0RW50cnlUZW1wbGF0ZScsIHsgdHlwZTogJ2Fzc2V0JywgdGl0bGU6ICdUZXh0IEVudHJ5IEFzc2V0JyB9KTtcbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2Nob2ljZUVudHJ5VGVtcGxhdGUnLCB7IHR5cGU6ICdhc3NldCcsIHRpdGxlOiAnQ2hvaWNlIEVudHJ5IEFzc2V0JyB9KTtcbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3NraWxsVGVzdEVudHJ5VGVtcGxhdGUnLCB7IHR5cGU6ICdhc3NldCcsIHRpdGxlOiAnU2tpbGwgVGVzdCBFbnRyeSBBc3NldCcgfSk7XG5cbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2NvbnRpbnVlQnV0dG9uRW50aXR5JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdDb250aW51ZSBCdXR0b24nIH0pO1xuXG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5EaWFsb2d1ZVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoRGlhbG9ndWVQYW5lbE1lZGlhdG9yLk5BTUUpKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnJlbW92ZU1lZGlhdG9yKERpYWxvZ3VlUGFuZWxNZWRpYXRvci5OQU1FKTtcbiAgICB9XG5cbiAgICB0aGlzLmZhY2FkZS5yZWdpc3Rlck1lZGlhdG9yKG5ldyBEaWFsb2d1ZVBhbmVsTWVkaWF0b3IodGhpcy5lbnRpdHkpKTtcblxuICAgIHRoaXMuZW50aXR5LmVuYWJsZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuY2hvaWNlcyA9IFtdO1xuXG4gICAgdGhpcy5jb250aW51ZUJ1dHRvbkVudGl0eS5lbGVtZW50Lm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5lbnRpdHkuZmlyZSgnY2xpY2tlZDpjb250aW51ZScpO1xuICAgIH0sIHRoaXMpO1xuXG59O1xuXG5EaWFsb2d1ZVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVTdGVwID0gZnVuY3Rpb24gKHN0ZXBEYXRhKSB7XG4gICAgdGhpcy5jcmVhdGVUZXh0KHN0ZXBEYXRhLnN0ZXApO1xuXG4gICAgaWYgKHN0ZXBEYXRhLnN0ZXAuY2hvaWNlcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ZXBEYXRhLnN0ZXAuY2hvaWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2hvaWNlID0gc3RlcERhdGEuc3RlcC5jaG9pY2VzW2ldO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVDaG9pY2UoaSwgY2hvaWNlLnRleHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5EaWFsb2d1ZVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gZnVuY3Rpb24gKHN0ZXBEYXRhKSB7XG4gICAgY29uc3QgbmV3VGV4dCA9IHRoaXMudGV4dEVudHJ5VGVtcGxhdGUucmVzb3VyY2UuaW5zdGFudGlhdGUoKTtcbiAgICBuZXdUZXh0LnNjcmlwdFtcIkRpYWxvZ3VlVGV4dENvbXBvbmVudFwiXS5zZXR1cChzdGVwRGF0YSk7XG4gICAgdGhpcy5mZWVkRW50aXR5LmFkZENoaWxkKG5ld1RleHQpO1xuICAgIHRoaXMucmVzaXplVG9Db250ZW50cygpO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyVmlld0VudGl0eS5zY3JvbGxiYXIudmFsdWUgPSAxO1xuICAgIH0sIDUwKTtcbn1cblxuRGlhbG9ndWVQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlQ2hvaWNlID0gZnVuY3Rpb24gKGluZGV4LCB0ZXh0KSB7XG4gICAgY29uc3QgbmV3Q2hvaWNlID0gdGhpcy5jaG9pY2VFbnRyeVRlbXBsYXRlLnJlc291cmNlLmluc3RhbnRpYXRlKCk7XG4gICAgbmV3Q2hvaWNlLnNjcmlwdFtcIkRpYWxvZ3VlQ2hvaWNlQ29tcG9uZW50XCJdLnNldHVwKGluZGV4LCB0ZXh0KTtcbiAgICBuZXdDaG9pY2UuZWxlbWVudC50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLmZlZWRFbnRpdHkuYWRkQ2hpbGQobmV3Q2hvaWNlKTtcbiAgICB0aGlzLmNob2ljZXMucHVzaChuZXdDaG9pY2UpO1xuXG4gICAgbmV3Q2hvaWNlLm9uKCdjbGljaycsIHRoaXMuaGFuZGxlU2VsZWN0Q2hvaWNlLCB0aGlzKTtcblxuICAgIHRoaXMucmVzaXplVG9Db250ZW50cygpO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2Nyb2xsYmFyVmlld0VudGl0eS5zY3JvbGxiYXIudmFsdWUgPSAxO1xuICAgIH0sIDUwKTtcbn1cblxuRGlhbG9ndWVQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuY3JlYXRlU2tpbGxUZXN0ID0gZnVuY3Rpb24gKHNraWxsTmFtZSwgc2tpbGxWYWx1ZSwgZGllMSwgZGllMiwgd2FzU3VjY2Vzcykge1xuICAgIGNvbnN0IG5ld1NraWxsVGVzdCA9IHRoaXMuc2tpbGxUZXN0RW50cnlUZW1wbGF0ZS5yZXNvdXJjZS5pbnN0YW50aWF0ZSgpO1xuICAgIG5ld1NraWxsVGVzdC5zY3JpcHRbXCJEaWFsb2d1ZVNraWxsVGVzdENvbXBvbmVudFwiXS5zZXR1cChza2lsbE5hbWUsIHNraWxsVmFsdWUsIGRpZTEsIGRpZTIsIHdhc1N1Y2Nlc3MpO1xuICAgIHRoaXMuZmVlZEVudGl0eS5hZGRDaGlsZChuZXdTa2lsbFRlc3QpO1xuXG4gICAgdGhpcy5yZXNpemVUb0NvbnRlbnRzKCk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5zY3JvbGxiYXJWaWV3RW50aXR5LnNjcm9sbGJhci52YWx1ZSA9IDE7XG4gICAgfSwgNTApO1xufVxuXG5EaWFsb2d1ZVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5jbGVhckRpYWxvZ3VlQ2hvaWNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKGNvbnN0IGNob2ljZSBvZiB0aGlzLmNob2ljZXMpIHtcbiAgICAgICAgY2hvaWNlLm9mZignY2xpY2snLCB0aGlzLmhhbmRsZVNlbGVjdENob2ljZSwgdGhpcyk7XG4gICAgICAgIGNob2ljZS5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgdGhpcy5jaG9pY2VzID0gW107XG59XG5cbkRpYWxvZ3VlUGFuZWxDb21wb25lbnQucHJvdG90eXBlLmNsZWFyUGFuZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgd2hpbGUgKHRoaXMuZmVlZEVudGl0eS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuZmVlZEVudGl0eS5jaGlsZHJlblswXS5kZXN0cm95KCk7XG4gICAgfVxufVxuXG5EaWFsb2d1ZVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVTZWxlY3RDaG9pY2UgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICB0aGlzLmVudGl0eS5maXJlKCdjbGlja2VkOmNob2ljZScsIGluZGV4KTtcbn1cblxuRGlhbG9ndWVQYW5lbENvbXBvbmVudC5wcm90b3R5cGUucmVzaXplVG9Db250ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgc3BhY2luZ1ZlcnRpY2FsID0gdGhpcy5mZWVkRW50aXR5LmxheW91dGdyb3VwLnNwYWNpbmcueTtcbiAgICBsZXQgaGVpZ2h0ID0gMDtcblxuICAgIGZvciAoY29uc3QgZmVlZENoaWxkIG9mIHRoaXMuZmVlZEVudGl0eS5jaGlsZHJlbikge1xuICAgICAgICBoZWlnaHQgKz0gZmVlZENoaWxkLmVsZW1lbnQuaGVpZ2h0O1xuICAgICAgICBoZWlnaHQgKz0gc3BhY2luZ1ZlcnRpY2FsO1xuICAgIH1cblxuICAgIHRoaXMuY29udGVudEVudGl0eS5lbGVtZW50LmhlaWdodCA9IE1hdGgubWF4KHRoaXMuY29udGVudEhlaWdodCwgaGVpZ2h0KTtcbn1cblxuRGlhbG9ndWVQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuc2V0Q29udGludWVCdXR0b24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLmNvbnRpbnVlQnV0dG9uRW50aXR5LmVuYWJsZWQgPSB2YWx1ZTtcbn1cbiIsImV4cG9ydCBjb25zdCBEaWFsb2d1ZUNob2ljZUNvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnRGlhbG9ndWVDaG9pY2VDb21wb25lbnQnKTtcblxuRGlhbG9ndWVDaG9pY2VDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2luZGV4RW50aXR5JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdJbmRleCBFbnRpdHknIH0pO1xuRGlhbG9ndWVDaG9pY2VDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2xhYmVsRW50aXR5JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdMYWJlbCBFbnRpdHknIH0pO1xuXG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5EaWFsb2d1ZUNob2ljZUNvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblxufVxuXG5EaWFsb2d1ZUNob2ljZUNvbXBvbmVudC5wcm90b3R5cGUuc2V0dXAgPSBmdW5jdGlvbiAoaW5kZXgsIGxhYmVsKSB7XG4gICAgdGhpcy5pbmRleEVudGl0eS5lbGVtZW50LnRleHQgPSAoaW5kZXggKyAxKSArIFwiLlwiO1xuICAgIHRoaXMubGFiZWxFbnRpdHkuZWxlbWVudC50ZXh0ID0gbGFiZWw7XG5cbiAgICB0aGlzLmVudGl0eS5lbGVtZW50LmhlaWdodCA9IHRoaXMubGFiZWxFbnRpdHkuZWxlbWVudC5oZWlnaHQ7XG5cbiAgICB0aGlzLmVudGl0eS5lbGVtZW50Lm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5lbnRpdHkuZmlyZSgnY2xpY2snLCBpbmRleClcbiAgICB9KTtcbn1cblxuRGlhbG9ndWVDaG9pY2VDb21wb25lbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkdCkge1xuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQuaGVpZ2h0ID0gdGhpcy5sYWJlbEVudGl0eS5lbGVtZW50LmhlaWdodDtcblxufVxuIiwiZXhwb3J0IGNvbnN0IERlZmF1bHRBbmltYXRpb25Db21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ0RlZmF1bHRBbmltYXRpb25Db21wb25lbnQnKTtcblxuRGVmYXVsdEFuaW1hdGlvbkNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImFuaW1hdGlvbk5hbWVcIiwge1xuICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgdGl0bGU6IFwiQW5pbWF0aW9uIE5hbWVcIlxufSk7XG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5EZWZhdWx0QW5pbWF0aW9uQ29tcG9uZW50LnByb3RvdHlwZS5wb3N0SW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVudGl0eS5hbmltYXRpb24ubG9vcCA9IHRydWU7XG4gICAgdGhpcy5lbnRpdHkuYW5pbWF0aW9uLnBsYXkodGhpcy5hbmltYXRpb25OYW1lLCAwLjEpO1xufSIsImV4cG9ydCBjb25zdCBEaWFsb2d1ZVRleHRDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ0RpYWxvZ3VlVGV4dENvbXBvbmVudCcpO1xuXG5EaWFsb2d1ZVRleHRDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3dpdGhJbWFnZVdpZHRoJywgeyB0eXBlOiAnbnVtYmVyJywgdGl0bGU6ICdXaXRoIEltYWdlIFdpZHRoJywgZGVmYXVsdDogMzQwIH0pO1xuRGlhbG9ndWVUZXh0Q29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCd3aXRob3V0SW1hZ2VXaWR0aCcsIHsgdHlwZTogJ251bWJlcicsIHRpdGxlOiAnV2l0aCBJbWFnZSBXaWR0aCcsIGRlZmF1bHQ6IDM2MCB9KTtcblxuRGlhbG9ndWVUZXh0Q29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCd0ZXh0Q29udGFpbmVyJywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdUZXh0IENvbnRhaW5lcicgfSk7XG5EaWFsb2d1ZVRleHRDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3RpdGxlRW50aXR5JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdUaXRsZSBFbnRpdHknIH0pO1xuRGlhbG9ndWVUZXh0Q29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdib2R5RW50aXR5JywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdCb2R5IEVudGl0eScgfSk7XG5cbkRpYWxvZ3VlVGV4dENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgndGh1bWJuYWlsQ29udGFpbmVyJywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdUaHVtYm5haWwgQ29udGFpbmVyJyB9KTtcbkRpYWxvZ3VlVGV4dENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgndGh1bWJuYWlsSW1hZ2UnLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ1RodW1ibmFpbCBJbWFnZScgfSk7XG5cblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcbkRpYWxvZ3VlVGV4dENvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblxufVxuXG5EaWFsb2d1ZVRleHRDb21wb25lbnQucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24gKHN0ZXBEYXRhKSB7XG4gICAgaWYgKHN0ZXBEYXRhLnRpdGxlKSB7XG4gICAgICAgIHRoaXMudGl0bGVFbnRpdHkuZWxlbWVudC50ZXh0ID0gc3RlcERhdGEudGl0bGU7XG5cbiAgICAgICAgaWYgKHN0ZXBEYXRhLnRpdGxlQ29sb3VyKSB7XG4gICAgICAgICAgICB0aGlzLnRpdGxlRW50aXR5LmVsZW1lbnQuY29sb3IuZnJvbVN0cmluZyhzdGVwRGF0YS50aXRsZUNvbG91cik7XG5cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGl0bGVFbnRpdHkuZW5hYmxlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzdGVwRGF0YS50aHVtYm5haWwpIHtcbiAgICAgICAgdGhpcy50ZXh0Q29udGFpbmVyLmVsZW1lbnQud2lkdGggPSB0aGlzLndpdGhJbWFnZVdpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGV4dENvbnRhaW5lci5lbGVtZW50LndpZHRoID0gdGhpcy53aXRob3V0SW1hZ2VXaWR0aDtcbiAgICAgICAgdGhpcy50aHVtYm5haWxDb250YWluZXIuZW5hYmxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5ib2R5RW50aXR5LmVsZW1lbnQudGV4dCA9IHN0ZXBEYXRhLnRleHQ7XG4gICAgLy8gdGhpcy5lbnRpdHkuZWxlbWVudC5oZWlnaHQgPSB0aGlzLmxhYmVsRW50aXR5LmVsZW1lbnQuaGVpZ2h0O1xufVxuXG5EaWFsb2d1ZVRleHRDb21wb25lbnQucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBtaW5IZWlnaHQgPSAodGhpcy50aHVtYm5haWxDb250YWluZXIuZW5hYmxlKSA/IHRoaXMudGh1bWJuYWlsQ29udGFpbmVyLmVsZW1lbnQuaGVpZ2h0IDogMDtcbiAgICBsZXQgaGVpZ2h0ID0gMDtcbiAgICBsZXQgc3BhY2luZyA9IHRoaXMudGV4dENvbnRhaW5lci5sYXlvdXRncm91cC5zcGFjaW5nLnk7XG4gICAgZm9yIChjb25zdCB0ZXh0Q2hpbGQgb2YgdGhpcy50ZXh0Q29udGFpbmVyLmNoaWxkcmVuKSB7XG4gICAgICAgIGhlaWdodCArPSB0ZXh0Q2hpbGQuZWxlbWVudC5oZWlnaHQgKyBzcGFjaW5nO1xuICAgIH1cblxuXG4gICAgaWYgKCF0aGlzLnRpdGxlRW50aXR5LmVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5ib2R5RW50aXR5LmVsZW1lbnQud2lkdGggPSB0aGlzLndpdGhJbWFnZVdpZHRoO1xuXG4gICAgfVxuXG4gICAgdGhpcy5lbnRpdHkuZWxlbWVudC5oZWlnaHQgPSBNYXRoLm1heChtaW5IZWlnaHQsIGhlaWdodCk7XG5cbn1cblxuRGlhbG9ndWVUZXh0Q29tcG9uZW50LnByb3RvdHlwZS5wb3N0SW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNldEhlaWdodCgpO1xuXG59XG5cbkRpYWxvZ3VlVGV4dENvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGR0KSB7XG4gICAgLy90aGlzLmVudGl0eS5lbGVtZW50LmhlaWdodCA9IHRoaXMubGFiZWxFbnRpdHkuZWxlbWVudC5oZWlnaHQ7XG5cbn1cbiIsIlxuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuY29uc3QgeyBNZWRpYXRvciB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuXG5leHBvcnQgY2xhc3MgQXR0YWNrQnV0dG9uTWVkaWF0b3IgZXh0ZW5kcyBNZWRpYXRvciB7XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJBdHRhY2tCdXR0b25NZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKEF0dGFja0J1dHRvbk1lZGlhdG9yLk5BTUUpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZU5vdGlmaWNhdGlvbihbXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuR0FNRVBMQVlfQUNUSU9OX0NIQU5HRURcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG5cbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdjbGljazp0b2dnbGVBdHRhY2snLCB0aGlzLmhhbmRsZVRvZ2dsZUF0dGFjaywgdGhpcyk7XG5cbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5HQU1FUExBWV9BQ1RJT05fQ0hBTkdFRDpcbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb25OYW1lID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uTmFtZSA9PT0gXCJhdHRhY2tcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydBdHRhY2tCdXR0b25Db21wb25lbnQnXS50b2dnbGVIaWdobGlnaHQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFsnQXR0YWNrQnV0dG9uQ29tcG9uZW50J10udG9nZ2xlSGlnaGxpZ2h0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVUb2dnbGVBdHRhY2soYXR0YWNrRW5hYmxlZCkge1xuICAgICAgICBpZiAoYXR0YWNrRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuR0FNRVBMQVlfQUNUSU9OX0NIQU5HRUQsIFwiYXR0YWNrXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuR0FNRVBMQVlfQUNUSU9OX0NIQU5HRUQsIFwiaW50ZXJhY3RcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgQXR0YWNrQnV0dG9uQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdBdHRhY2tCdXR0b25Db21wb25lbnQnKTtcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4uLy4uLy4uL0dhbWVGYWNhZGUnO1xuaW1wb3J0IHsgQXR0YWNrQnV0dG9uTWVkaWF0b3IgfSBmcm9tICcuL0F0dGFja0J1dHRvbk1lZGlhdG9yJztcblxuQXR0YWNrQnV0dG9uQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdoaWdobGlnaHRFbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0hpZ2hsaWdodCBFbnRpdHknIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuQXR0YWNrQnV0dG9uQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoQXR0YWNrQnV0dG9uTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoQXR0YWNrQnV0dG9uTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgQXR0YWNrQnV0dG9uTWVkaWF0b3IodGhpcy5lbnRpdHkpKTtcblxuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24oJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljaywgdGhpcyk7XG59O1xuXG5BdHRhY2tCdXR0b25Db21wb25lbnQucHJvdG90eXBlLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIHRoaXMuZW50aXR5LmZpcmUoJ2NsaWNrOnRvZ2dsZUF0dGFjaycsICF0aGlzLmhpZ2hsaWdodEVudGl0eS5lbmFibGVkKTtcbn1cblxuQXR0YWNrQnV0dG9uQ29tcG9uZW50LnByb3RvdHlwZS50b2dnbGVIaWdobGlnaHQgPSBmdW5jdGlvbiAoaXNFbmFibGVkKSB7XG4gICAgdGhpcy5oaWdobGlnaHRFbnRpdHkuZW5hYmxlZCA9IGlzRW5hYmxlZDtcbn0iLCJleHBvcnQgY29uc3QgVmVoaWNsZUNvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnVmVoaWNsZUNvbXBvbmVudCcpO1xuXG5WZWhpY2xlQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKFwibWFzc1wiLCB7XG4gICAgdHlwZTogXCJudW1iZXJcIixcbiAgICB0aXRsZTogXCJNYXNzXCIsXG4gICAgZGVmYXVsdDogM1xufSk7XG5cblZlaGljbGVDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJtYXhTcGVlZFwiLCB7XG4gICAgdHlwZTogXCJudW1iZXJcIixcbiAgICB0aXRsZTogXCJNYXggU3BlZWRcIixcbiAgICBkZWZhdWx0OiA1XG59KTtcblxuVmVoaWNsZUNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcIm1heEZvcmNlXCIsIHtcbiAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIHRpdGxlOiBcIk1heCBGb3JjZVwiLFxuICAgIGRlZmF1bHQ6IDAuNVxufSk7XG5cblZlaGljbGVDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJhcnJpdmVUaHJlc2hvbGRcIiwge1xuICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgdGl0bGU6IFwiQXJyaXZhbCBUaHJlc2hvbGRcIixcbiAgICBkZWZhdWx0OiAxXG59KTtcblxuVmVoaWNsZUNvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnZlbG9jaXR5ID0gbmV3IHBjLlZlYzMoKTtcbiAgICB0aGlzLnN0ZWVyaW5nRm9yY2UgPSBuZXcgcGMuVmVjMygpO1xufVxuXG5cblZlaGljbGVDb21wb25lbnQucHJvdG90eXBlLnByb2Nlc3NWZWxvY2l0eSA9IGZ1bmN0aW9uIChkdCkge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5lbnRpdHkuZ2V0UG9zaXRpb24oKTtcblxuICAgIHRoaXMuc3RlZXJpbmdGb3JjZSA9IGNsYW1wVmVjMyh0aGlzLnN0ZWVyaW5nRm9yY2UsICh0aGlzLm1heEZvcmNlKSk7XG4gICAgdGhpcy5zdGVlcmluZ0ZvcmNlID0gdGhpcy5zdGVlcmluZ0ZvcmNlLnNjYWxlKDEgLyAodGhpcy5tYXNzKSk7XG4gICAgdGhpcy52ZWxvY2l0eSA9IHRoaXMudmVsb2NpdHkuYWRkKHRoaXMuc3RlZXJpbmdGb3JjZSk7XG4gICAgdGhpcy52ZWxvY2l0eSA9IGNsYW1wVmVjMyh0aGlzLnZlbG9jaXR5LCAodGhpcy5tYXhTcGVlZCAqIGR0KSk7XG5cbiAgICB0aGlzLnN0ZWVyaW5nRm9yY2UgPSBuZXcgcGMuVmVjMygpO1xuXG4gICAgdGhpcy5lbnRpdHkuc2V0TG9jYWxQb3NpdGlvbihwb3NpdGlvbi5hZGQodGhpcy52ZWxvY2l0eSkpO1xuXG4gICAgY29uc3QgeVJvdGF0aW9uID0gZ2V0QW5nbGUodGhpcy52ZWxvY2l0eSkgKiAxODAgLyBNYXRoLlBJO1xuICAgIHRoaXMuZW50aXR5LnNldEV1bGVyQW5nbGVzKDAsIHlSb3RhdGlvbiwgMCk7XG59XG5cblxuVmVoaWNsZUNvbXBvbmVudC5wcm90b3R5cGUuc2VlayA9IGZ1bmN0aW9uICh0YXJnZXQsIGR0KSB7XG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLmVudGl0eS5nZXRMb2NhbFBvc2l0aW9uKCk7XG4gICAgbGV0IGRlc2lyZWRWZWxvY2l0eSA9IHRhcmdldC5jbG9uZSgpLnN1Yihwb3NpdGlvbik7XG4gICAgZGVzaXJlZFZlbG9jaXR5ID0gZGVzaXJlZFZlbG9jaXR5Lm5vcm1hbGl6ZSgpXG4gICAgZGVzaXJlZFZlbG9jaXR5LnNjYWxlKHRoaXMubWF4U3BlZWQgKiBkdCk7XG4gICAgY29uc3QgZm9yY2UgPSBkZXNpcmVkVmVsb2NpdHkuc3ViKHRoaXMudmVsb2NpdHkpO1xuICAgIHRoaXMuc3RlZXJpbmdGb3JjZSA9IHRoaXMuc3RlZXJpbmdGb3JjZS5hZGQoZm9yY2UpO1xufVxuXG5WZWhpY2xlQ29tcG9uZW50LnByb3RvdHlwZS5hcnJpdmUgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLmVudGl0eS5nZXRQb3NpdGlvbigpO1xuICAgIGxldCBkZXNpcmVkVmVsb2NpdHkgPSB0YXJnZXQuY2xvbmUoKS5zdWIocG9zaXRpb24pLm5vcm1hbGl6ZSgpLnNjYWxlKHRoaXMubWF4U3BlZWQpO1xuICAgIGNvbnN0IGRpc3RhbmNlVG9UYXJnZXQgPSBwb3NpdGlvbi5kaXN0YW5jZSh0YXJnZXQpO1xuXG4gICAgaWYgKGRpc3RhbmNlVG9UYXJnZXQgPiB0aGlzLmFycml2YWxUaHJlc2hvbGQpIHtcbiAgICAgICAgZGVzaXJlZFZlbG9jaXR5ID0gZGVzaXJlZFZlbG9jaXR5LnNjYWxlKHRoaXMubWF4U3BlZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRlc2lyZWRWZWxvY2l0eSA9IGRlc2lyZWRWZWxvY2l0eS5zY2FsZSgodGhpcy5tYXhTcGVlZCAqIGRpc3RhbmNlVG9UYXJnZXQgLyB0aGlzLmFycml2ZVRocmVzaG9sZCkpO1xuXG4gICAgfVxuICAgIGNvbnN0IGZvcmNlID0gZGVzaXJlZFZlbG9jaXR5LnN1Yih0aGlzLnZlbG9jaXR5KTtcbiAgICB0aGlzLnN0ZWVyaW5nRm9yY2UgPSB0aGlzLnN0ZWVyaW5nRm9yY2UuYWRkKGZvcmNlKTtcbn1cblxuZnVuY3Rpb24gY2xhbXBWZWMzKHZlYzMsIG1heFZhbHVlKSB7XG4gICAgaWYgKHZlYzMubGVuZ3RoKCkgPCBtYXhWYWx1ZSkge1xuICAgICAgICByZXR1cm4gdmVjMztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmVjMy5ub3JtYWxpemUoKS5zY2FsZShtYXhWYWx1ZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRBbmdsZSh2ZWMzKSB7XG4gICAgcmV0dXJuIE1hdGguYXRhbjIodmVjMy54LCB2ZWMzLnopO1xufSIsImV4cG9ydCBjb25zdCBTY3JlZW5SZXNpemVDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ1NjcmVlblJlc2l6ZUNvbXBvbmVudCcpO1xuXG5TY3JlZW5SZXNpemVDb21wb25lbnQucHJvdG90eXBlLndpbmRvdyA9IHdpbmRvdztcblxuU2NyZWVuUmVzaXplQ29tcG9uZW50LnByb3RvdHlwZS5wb3N0SW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLm9uUmVzaXplKCk7XG5cbiAgICB0aGlzLndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm9uUmVzaXplLmJpbmQodGhpcyksIGZhbHNlKTtcbn1cblxuXG5TY3JlZW5SZXNpemVDb21wb25lbnQucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGdyYXBoaWNzRGV2aWNlID0gdGhpcy5hcHAuZ3JhcGhpY3NEZXZpY2U7XG4gICAgLy8gRmxpcCBibGVuZFxuICAgIGlmIChncmFwaGljc0RldmljZS53aWR0aCA8IGdyYXBoaWNzRGV2aWNlLmhlaWdodCkge1xuICAgICAgICB0aGlzLmVudGl0eS5zY3JlZW4uc2NhbGVCbGVuZCA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbnRpdHkuc2NyZWVuLnNjYWxlQmxlbmQgPSAwO1xuICAgIH1cblxuICAgIHRoaXMuZW50aXR5LnNjcmVlbi5yZWZlcmVuY2VSZXNvbHV0aW9uID0gbmV3IHBjLlZlYzIoZ3JhcGhpY3NEZXZpY2Uud2lkdGgsIGdyYXBoaWNzRGV2aWNlLmhlaWdodCk7XG5cbn0iLCJleHBvcnQgY29uc3QgRGlhbG9ndWVTa2lsbFRlc3RDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ0RpYWxvZ3VlU2tpbGxUZXN0Q29tcG9uZW50Jyk7XG5cbkRpYWxvZ3VlU2tpbGxUZXN0Q29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdza2lsbE5hbWVMYWJlbCcsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnU2tpbGwgTmFtZSBMYWJlbCcgfSk7XG5EaWFsb2d1ZVNraWxsVGVzdENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnc2tpbGxWYWx1ZUxhYmVsJywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdTa2lsbCBWYWx1ZSBMYWJlbCcgfSk7XG5EaWFsb2d1ZVNraWxsVGVzdENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnZGllMUxhYmVsJywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdEaWUgMSBMYWJlbCcgfSk7XG5EaWFsb2d1ZVNraWxsVGVzdENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnZGllMkxhYmVsJywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdEaWUgMiBMYWJlbCcgfSk7XG5EaWFsb2d1ZVNraWxsVGVzdENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnc3VjY2Vzc0xhYmVsJywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdTdWNjZXNzIExhYmVsJyB9KTtcbkRpYWxvZ3VlU2tpbGxUZXN0Q29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdmYWlsdXJlTGFiZWwnLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0ZhaWx1cmUgTGFiZWwnIH0pO1xuXG5cblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcbkRpYWxvZ3VlU2tpbGxUZXN0Q29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXG59XG5cbkRpYWxvZ3VlU2tpbGxUZXN0Q29tcG9uZW50LnByb3RvdHlwZS5zZXR1cCA9IGZ1bmN0aW9uIChza2lsbE5hbWUsIHNraWxsVmFsdWUsIGRpZTEsIGRpZTIsIHdhc1N1Y2Nlc3MpIHtcbiAgICB0aGlzLnNraWxsTmFtZUxhYmVsLmVsZW1lbnQudGV4dCA9IHNraWxsTmFtZTtcbiAgICB0aGlzLnNraWxsVmFsdWVMYWJlbC5lbGVtZW50LnRleHQgPSBza2lsbFZhbHVlO1xuICAgIHRoaXMuZGllMUxhYmVsLmVsZW1lbnQudGV4dCA9IGRpZTE7XG4gICAgdGhpcy5kaWUyTGFiZWwuZWxlbWVudC50ZXh0ID0gZGllMjtcbiAgICB0aGlzLnN1Y2Nlc3NMYWJlbC5lbmFibGVkID0gd2FzU3VjY2VzcztcbiAgICB0aGlzLmZhaWx1cmVMYWJlbC5lbmFibGVkID0gIXdhc1N1Y2Nlc3M7XG59XG4iLCJleHBvcnQgY29uc3QgSW52ZW50b3J5SXRlbUNvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnSW52ZW50b3J5SXRlbUNvbXBvbmVudCcpO1xuXG5JbnZlbnRvcnlJdGVtQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdsYWJlbEVudGl0eScsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnTGFiZWwgRW50aXR5JyB9KTtcbkludmVudG9yeUl0ZW1Db21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ3Nsb3RIZWlnaHQnLCB7IHR5cGU6ICdudW1iZXInLCB0aXRsZTogJ1Nsb3QgSGVpZ2h0JywgZGVmYXVsdDogNDQgfSk7XG5cblxuSW52ZW50b3J5SXRlbUNvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9oYW5kbGVEcmFnSGVscGVyID0gbmV3IHBjLkVsZW1lbnREcmFnSGVscGVyKHRoaXMuZW50aXR5LmVsZW1lbnQsICd5Jyk7XG4gICAgdGhpcy5faGFuZGxlRHJhZ0hlbHBlci5vbignZHJhZzpzdGFydCcsIHRoaXMub25IYW5kbGVEcmFnLCB0aGlzKTtcbiAgICB0aGlzLl9oYW5kbGVEcmFnSGVscGVyLm9uKCdkcmFnOm1vdmUnLCB0aGlzLm9uSGFuZGxlTW92ZSwgdGhpcyk7XG4gICAgdGhpcy5faGFuZGxlRHJhZ0hlbHBlci5vbignZHJhZzplbmQnLCB0aGlzLm9uSGFuZGxlRHJvcCwgdGhpcyk7XG59XG5cbkludmVudG9yeUl0ZW1Db21wb25lbnQucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24gKG5hbWUsIHNpemUpIHtcbiAgICB0aGlzLmxhYmVsRW50aXR5LmVsZW1lbnQudGV4dCA9IG5hbWU7XG4gICAgdGhpcy5lbnRpdHkuZWxlbWVudC5oZWlnaHQgPSB0aGlzLnNsb3RIZWlnaHQgKiBzaXplO1xuXG59XG5cblxuSW52ZW50b3J5SXRlbUNvbXBvbmVudC5wcm90b3R5cGUub25IYW5kbGVEcmFnID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW50aXR5LnBhcmVudC5maXJlKCdkcmFnOml0ZW0nLCB0aGlzLmVudGl0eSk7XG59XG5cbkludmVudG9yeUl0ZW1Db21wb25lbnQucHJvdG90eXBlLm9uSGFuZGxlTW92ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuZW50aXR5LnBhcmVudC5maXJlKCdtb3ZlOml0ZW0nLCB0aGlzLmVudGl0eSwgdmFsdWUpO1xufVxuXG5JbnZlbnRvcnlJdGVtQ29tcG9uZW50LnByb3RvdHlwZS5vbkhhbmRsZURyb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbnRpdHkucGFyZW50LmZpcmUoJ2Ryb3A6aXRlbScsIHRoaXMuZW50aXR5KTtcbn0iLCJcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tICcuLi8uLi9HYW1lRmFjYWRlJztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIEludmVudG9yeVBhbmVsTWVkaWF0b3IgZXh0ZW5kcyBNZWRpYXRvciB7XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJJbnZlbnRvcnlQYW5lbE1lZGlhdG9yXCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKHZpZXdDb21wb25lbnQpIHtcbiAgICAgICAgc3VwZXIoSW52ZW50b3J5UGFuZWxNZWRpYXRvci5OQU1FKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24oW1xuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkRJU1BMQVlfSU5WRU5UT1JZX1BBTkVMXG4gICAgICAgIF0pO1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50O1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQub24oJ3Jlb3JkZXJJdGVtJywgdGhpcy5oYW5kZVJlb3JkZXJJdGVtLCB0aGlzKTtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LmVuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5ESVNQTEFZX0lOVkVOVE9SWV9QQU5FTDpcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtcyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LnNjcmlwdFtcIkludmVudG9yeVBhbmVsQ29tcG9uZW50XCJdLmRpc3BsYXlJdGVtcyhpdGVtcyk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50LmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGVSZW9yZGVySXRlbShvcmlnaW5hbEluZGV4LCBuZXdJbmRleCkge1xuICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5SRU9SREVSX0lOVkVUT1JZX0lURU0sIG9yaWdpbmFsSW5kZXgsIG5ld0luZGV4KTtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgSW52ZW50b3J5UGFuZWxDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ0ludmVudG9yeVBhbmVsQ29tcG9uZW50Jyk7XG5pbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tICcuLi8uLi9HYW1lRmFjYWRlJztcbmltcG9ydCB7IEludmVudG9yeVBhbmVsTWVkaWF0b3IgfSBmcm9tICcuL0ludmVudG9yeVBhbmVsTWVkaWF0b3InO1xuXG5JbnZlbnRvcnlQYW5lbENvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnc2xvdENvbnRhaW5lcicsIHsgdHlwZTogJ2VudGl0eScsIHRpdGxlOiAnU2xvdCBDb250YWluZXInIH0pO1xuSW52ZW50b3J5UGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2l0ZW1Db250YWluZXInLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0l0ZW0gQ29udGFpbmVyJyB9KTtcbkludmVudG9yeVBhbmVsQ29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCdzZXBhcmF0b3JIaWdobGlnaHQnLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ1NlcGFyYXRvciBIaWdobGlnaHQnIH0pO1xuSW52ZW50b3J5UGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2Nsb3NlQnV0dG9uJywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdDbG9zZSBCdXR0b24nIH0pO1xuSW52ZW50b3J5UGFuZWxDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ2l0ZW1Bc3NldCcsIHsgdHlwZTogJ2Fzc2V0JywgdGl0bGU6ICdJdGVtIEFzc2V0JyB9KTtcblxuSW52ZW50b3J5UGFuZWxDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIGlmICh0aGlzLmZhY2FkZS5oYXNNZWRpYXRvcihJbnZlbnRvcnlQYW5lbE1lZGlhdG9yLk5BTUUpKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnJlbW92ZU1lZGlhdG9yKEludmVudG9yeVBhbmVsTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgSW52ZW50b3J5UGFuZWxNZWRpYXRvcih0aGlzLmVudGl0eSkpO1xuICAgIHRoaXMuaXRlbUNvbnRhaW5lci5vbignZHJhZzppdGVtJywgdGhpcy5oYW5kbGVJdGVtRHJhZywgdGhpcyk7XG4gICAgdGhpcy5pdGVtQ29udGFpbmVyLm9uKCdtb3ZlOml0ZW0nLCB0aGlzLmhhbmRsZUl0ZW1Nb3ZlLCB0aGlzKTtcbiAgICB0aGlzLml0ZW1Db250YWluZXIub24oJ2Ryb3A6aXRlbScsIHRoaXMuaGFuZGxlSXRlbURyb3AsIHRoaXMpO1xuICAgIHRoaXMuY2xvc2VCdXR0b24uZWxlbWVudC5vbignY2xpY2snLCB0aGlzLmhhbmRsZUNsb3NlLCB0aGlzKTtcblxuICAgIHRoaXMuc2VwYXJhdG9ySGlnaGxpZ2h0LmVuYWJsZWQgPSBmYWxzZTtcbn1cblxuSW52ZW50b3J5UGFuZWxDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZUl0ZW1EcmFnID0gZnVuY3Rpb24gKGRyYWdnZWRFbnRpdHkpIHtcbiAgICB0aGlzLnNlcGFyYXRvckhpZ2hsaWdodC5lbmFibGVkID0gdHJ1ZTtcbiAgICB0aGlzLnNldEhpZ2hsaWdodFBvc2l0aW9uKGRyYWdnZWRFbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpKTtcbn1cblxuSW52ZW50b3J5UGFuZWxDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZUl0ZW1Nb3ZlID0gZnVuY3Rpb24gKGRyYWdnaW5nRW50aXR5LCB2YWx1ZSkge1xuICAgIHRoaXMuc2V0SGlnaGxpZ2h0UG9zaXRpb24odmFsdWUpO1xufVxuXG5JbnZlbnRvcnlQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuc2V0SGlnaGxpZ2h0UG9zaXRpb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0U2xvdEluZGV4KHZhbHVlKTtcbiAgICBjb25zdCBzZXBhcmF0b3JQb3MgPSB0aGlzLmdldFNlcGFyYXRvclBvc2l0aW9uKGluZGV4KTtcbiAgICB0aGlzLnNlcGFyYXRvckhpZ2hsaWdodC5zZXRMb2NhbFBvc2l0aW9uKHNlcGFyYXRvclBvcyk7XG59XG5cbkludmVudG9yeVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVJdGVtRHJvcCA9IGZ1bmN0aW9uIChkcm9wcGVkRW50aXR5KSB7XG4gICAgdGhpcy5zZXBhcmF0b3JIaWdobGlnaHQuZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgY29uc3QgY3VycmVudEluZGV4ID0gdGhpcy5nZXRJbmRleE9mSXRlbShkcm9wcGVkRW50aXR5KTtcbiAgICBjb25zdCBzbG90SW5kZXggPSB0aGlzLmdldFNsb3RJbmRleChkcm9wcGVkRW50aXR5LmdldExvY2FsUG9zaXRpb24oKSk7XG5cbiAgICB0aGlzLmVudGl0eS5maXJlKCdyZW9yZGVySXRlbScsIGN1cnJlbnRJbmRleCwgc2xvdEluZGV4KTtcbn1cblxuSW52ZW50b3J5UGFuZWxDb21wb25lbnQucHJvdG90eXBlLmdldFNsb3RJbmRleCA9IGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgIGxldCBzbG90SW5kZXggPSAwO1xuICAgIGNvbnN0IHBvc1kgPSBwb3NpdGlvbi55O1xuICAgIGNvbnN0IGJvdHRvbVNsb3RJbmRleCA9IHRoaXMuc2xvdENvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGJvdHRvbVNsb3QgPSB0aGlzLnNsb3RDb250YWluZXIuY2hpbGRyZW5bYm90dG9tU2xvdEluZGV4XTtcblxuICAgIGlmIChwb3NZIDwgYm90dG9tU2xvdC5nZXRMb2NhbFBvc2l0aW9uKCkueSkge1xuICAgICAgICBzbG90SW5kZXggPSBib3R0b21TbG90SW5kZXg7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zbG90Q29udGFpbmVyLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNsb3QgPSB0aGlzLnNsb3RDb250YWluZXIuY2hpbGRyZW5baV07XG4gICAgICAgIGNvbnN0IHNsb3RZID0gc2xvdC5nZXRMb2NhbFBvc2l0aW9uKCkueTtcblxuICAgICAgICBpZiAocG9zWSA+PSBzbG90WSAmJiBwb3NZIDwgc2xvdFkgKyBzbG90LmVsZW1lbnQuaGVpZ2h0KSB7XG4gICAgICAgICAgICBzbG90SW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNsb3RJbmRleDtcbn1cblxuSW52ZW50b3J5UGFuZWxDb21wb25lbnQucHJvdG90eXBlLmdldFNlcGFyYXRvclBvc2l0aW9uID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgY29uc3Qgc2xvdEVudGl0eSA9IHRoaXMuc2xvdENvbnRhaW5lci5jaGlsZHJlbltpbmRleF07XG5cbiAgICByZXR1cm4gbmV3IHBjLlZlYzMoc2xvdEVudGl0eS5nZXRMb2NhbFBvc2l0aW9uKCkueCxcbiAgICAgICAgc2xvdEVudGl0eS5nZXRMb2NhbFBvc2l0aW9uKCkueSxcbiAgICAgICAgc2xvdEVudGl0eS5nZXRMb2NhbFBvc2l0aW9uKCkueik7XG59XG5cbkludmVudG9yeVBhbmVsQ29tcG9uZW50LnByb3RvdHlwZS5nZXRJbmRleE9mSXRlbSA9IGZ1bmN0aW9uIChpdGVtRW50aXR5KSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbUNvbnRhaW5lci5jaGlsZHJlbi5pbmRleE9mKGl0ZW1FbnRpdHkpO1xufVxuXG5JbnZlbnRvcnlQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW50aXR5LmVuYWJsZWQgPSBmYWxzZTtcbn1cblxuSW52ZW50b3J5UGFuZWxDb21wb25lbnQucHJvdG90eXBlLmRpc3BsYXlJdGVtcyA9IGZ1bmN0aW9uIChpdGVtcykge1xuICAgIHRoaXMuY2xlYXJQYW5lbCgpO1xuXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgIGNvbnN0IG5ld0l0ZW1Db21wb25lbnQgPSB0aGlzLml0ZW1Bc3NldC5yZXNvdXJjZS5pbnN0YW50aWF0ZSgpO1xuICAgICAgICBuZXdJdGVtQ29tcG9uZW50LnNjcmlwdFtcIkludmVudG9yeUl0ZW1Db21wb25lbnRcIl0uc2V0dXAoaXRlbS5uYW1lLCBpdGVtLnNpemUpO1xuICAgICAgICB0aGlzLml0ZW1Db250YWluZXIuYWRkQ2hpbGQobmV3SXRlbUNvbXBvbmVudCk7XG4gICAgfVxufVxuXG5JbnZlbnRvcnlQYW5lbENvbXBvbmVudC5wcm90b3R5cGUuY2xlYXJQYW5lbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB3aGlsZSAodGhpcy5pdGVtQ29udGFpbmVyLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5pdGVtQ29udGFpbmVyLmNoaWxkcmVuWzBdO1xuICAgICAgICBlbnRpdHkuZGVzdHJveSgpO1xuICAgIH1cbn0iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuY29uc3QgeyBQdXJlTVZDIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi9HYW1lRmFjYWRlJztcbmltcG9ydCB7IENhY29nZW5HYW1lIH0gZnJvbSAnLi92aWV3L0NhY29nZW5HYW1lJztcblxuaW1wb3J0IHsgTmF2aWdhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9uYXZpZ2F0aW9uL05hdmlnYXRpb25Db21wb25lbnQnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlckNvbXBvbmVudCB9IGZyb20gJy4vdmlldy9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnO1xuaW1wb3J0IHsgQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvZ2FtZUNoYXJhY3Rlci9hZ2dyby9BZ3JvR2FtZUNoYXJhY3RlckNvbXBvbmVudCc7XG5pbXBvcnQgeyBUb2FzdE1lc3NhZ2VDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvdG9hc3RNZXNzYWdlL1RvYXN0TWVzc2FnZUNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZXRDYW1lcmFUYXJnZXRDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvZ2FtZUNoYXJhY3Rlci9zZXRDYW1lcmFUYXJnZXQvU2V0Q2FtZXJhVGFyZ2V0Q29tcG9uZW50JztcbmltcG9ydCB7IFBsYXllckNvbWJhdFBhbmVsQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L3BsYXllckNvbWJhdFBhbmVsL1BsYXllckNvbWJhdFBhbmVsQ29tcG9uZW50JztcbmltcG9ydCB7IEhpdGJveENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9jb2xsaXNpb24vSGl0Ym94Q29tcG9uZW50JztcbmltcG9ydCB7IEFjdGlvblBhbmVsQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2FjdGlvblBhbmVsL0FjdGlvblBhbmVsQ29tcG9uZW50JztcbmltcG9ydCB7IFVJU3RvcFByb3BhZ2F0aW9uIH0gZnJvbSAnLi9jb21wb25lbnRzL1VJU3RvcFByb3BhZ2F0aW9uJztcbmltcG9ydCB7IFByb2plY3RpbGVDcmVhdG9yQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L3Byb2plY3RpbGVzL1Byb2plY3RpbGVDcmVhdG9yQ29tcG9uZW50JztcbmltcG9ydCB7IFByb2plY3RpbGVDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvcHJvamVjdGlsZXMvUHJvamVjdGlsZUNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdGFtaW5hQmFyQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L3N0YW1pbmFCYXIvU3RhbWluYUJhckNvbXBvbmVudCc7XG5pbXBvcnQgeyBBY3Rpb25zUmVtYWluaW5nUGFuZWxDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvYWN0aW9uc1JlbWFpbmluZ1BhbmVsL0FjdGlvbnNSZW1haW5pbmdQYW5lbENvbXBvbmVudCc7XG5pbXBvcnQgeyBBY3Rpb25zUmVtYWluaW5nUGlwQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2FjdGlvbnNSZW1haW5pbmdQYW5lbC9BY3Rpb25zUmVtYWluaW5nUGlwQ29tcG9uZW50JztcbmltcG9ydCB7IEZsb2F0aW5nU3RhdHVzQ3JlYXRvckNvbXBvbmVudCB9IGZyb20gJy4vdmlldy9mbG9hdGluZ1N0YXR1cy9GbG9hdGluZ1N0YXR1c0NyZWF0b3JDb21wb25lbnQnO1xuaW1wb3J0IHsgUG9ydGFsQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L3BvcnRhbC9Qb3J0YWxDb21wb25lbnQnO1xuaW1wb3J0IHsgRGlhbG9ndWVQYW5lbENvbXBvbmVudCB9IGZyb20gJy4vdmlldy9kaWFsb2d1ZVBhbmVsL0RpYWxvZ3VlUGFuZWxDb21wb25lbnQnO1xuaW1wb3J0IHsgRGlhbG9ndWVDaG9pY2VDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvZGlhbG9ndWVQYW5lbC9EaWFsb2d1ZUNob2ljZUNvbXBvbmVudCc7XG5pbXBvcnQgeyBEZWZhdWx0QW5pbWF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2dhbWVDaGFyYWN0ZXIvZGVmYXVsdEFuaW0vRGVmYXVsdEFuaW1hdGlvbkNvbXBvbmVudCc7XG5pbXBvcnQgeyBEaWFsb2d1ZVRleHRDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvZGlhbG9ndWVQYW5lbC9EaWFsb2d1ZVRleHRDb21wb25lbnQnO1xuaW1wb3J0IHsgQXR0YWNrQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2FjdGlvblBhbmVsL2F0dGFja0J1dHRvbi9BdHRhY2tCdXR0b25Db21wb25lbnQnO1xuaW1wb3J0IHsgVmVoaWNsZUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy92ZWhpY2xlL1ZlaGljbGVDb21wb25lbnQnO1xuaW1wb3J0IHsgU2NyZWVuUmVzaXplQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3NjcmVlblJlc2l6ZS9TY3JlZW5SZXNpemVDb21wb25lbnQnO1xuaW1wb3J0IHsgRGlhbG9ndWVTa2lsbFRlc3RDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvZGlhbG9ndWVQYW5lbC9EaWFsb2d1ZVNraWxsVGVzdENvbXBvbmVudCc7XG5pbXBvcnQgeyBJbnZlbnRvcnlJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2ludmVudG9yeVBhbmVsL0ludmVudG9yeUl0ZW1Db21wb25lbnQnO1xuaW1wb3J0IHsgSW52ZW50b3J5UGFuZWxDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvaW52ZW50b3J5UGFuZWwvSW52ZW50b3J5UGFuZWxDb21wb25lbnQnO1xuXG5jbGFzcyBNYWluIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgUHVyZU1WQy5kZWJ1ZyA9IHRydWU7XG4gICAgICAgIEZhY2FkZS5nZXRJbnN0YW5jZSA9IEdhbWVGYWNhZGUuZ2V0SW5zdGFuY2U7XG4gICAgICAgIGNvbnNvbGUubG9nKEZhY2FkZSk7XG5cbiAgICAgICAgdGhpcy5mYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgICAgICB0aGlzLmZhY2FkZS5zdGFydHVwKHRoaXMpO1xuICAgIH1cbn1cblxuY29uc3QgbWFpbiA9IG5ldyBNYWluKCk7Il0sInNvdXJjZVJvb3QiOiIifQ==