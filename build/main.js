(()=>{"use strict";var t={382:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=i(542),n=i(999),r=function(){function t(e){if(this.commandMap={},t.instanceMap[e])throw new Error("controller key for this Multiton key already constructed");this.multitonKey=e,this.logger=o.PureMVC.debug?o.PureMVC.logCommand:o.PureMVC.logNone,this.initializeController()}return t.removeController=function(t){delete this.instanceMap[t]},t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.prototype.registerCommand=function(t,e){this.commandMap[t]||this.view.registerObserver(t,this.executeCommand,this),this.commandMap[t]=e},t.prototype.hasCommand=function(t){return void 0!==this.commandMap[t]},t.prototype.removeCommand=function(t){this.hasCommand(t)&&(this.view.removeObserver(t,this.executeCommand,this),delete this.commandMap[t])},t.prototype.initializeController=function(){this.view=n.View.getInstance(this.multitonKey)},t.prototype.executeCommand=function(e){for(var i=[],o=1;o<arguments.length;o++)i[o-1]=arguments[o];var n=this.commandMap[e];n&&(this.logger(t._consoleArgs,e,n.name),n.apply(void 0,[this.multitonKey,e].concat(i)))},t._consoleArgs=["","background: #3F234E","background: #6E2994","color: #D4BFE0; background: #8724BD;","background: #6E2994","background: #3F234E"],t.instanceMap={},t}();e.Controller=r},222:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=i(382),n=i(433),r=i(542),a=i(999),s=function(){function t(e){if(t.instanceMap[e])throw new Error("Facade instance for this Multiton key already constructed!");this.logger=r.PureMVC.debug?r.PureMVC.logNotification:r.PureMVC.logNone,this.initializeNotifier(e),this.initializeFacade()}return t.getInstance=function(e){return e?(t.instanceMap[e]||(t.instanceMap[e]=new t(e)),t.instanceMap[e]):null},t.hasCore=function(t){return void 0!==this.instanceMap[t]},t.removeCore=function(t){this.instanceMap[t]&&(n.Model.removeModel(t),a.View.removeView(t),o.Controller.removeController(t),delete this.instanceMap[t])},t.prototype.initializeFacade=function(){this.initializeModel(),this.initializeController(),this.initializeView()},t.prototype.registerCommand=function(t,e){this.controller.registerCommand(t,e)},t.prototype.removeCommand=function(t){this.controller.removeCommand(t)},t.prototype.hasCommand=function(t){return this.controller.hasCommand(t)},t.prototype.registerProxy=function(t){this.model.registerProxy(t)},t.prototype.retrieveProxy=function(t){return this.model.retrieveProxy(t)},t.prototype.removeProxy=function(t){return this.model?this.model.removeProxy(t):null},t.prototype.hasProxy=function(t){return this.model.hasProxy(t)},t.prototype.registerMediator=function(t){this.view.registerMediator(t)},t.prototype.retrieveMediator=function(t){return this.view.retrieveMediator(t)},t.prototype.removeMediator=function(t){return this.view.removeMediator(t)},t.prototype.sleepMediator=function(t){return this.view.sleepMediator(t)},t.prototype.awakeMediator=function(t){return this.view.awakeMediator(t)},t.prototype.hasMediator=function(t){return this.view.hasMediator(t)},t.prototype.sendNotification=function(e){for(var i,o=[],n=1;n<arguments.length;n++)o[n-1]=arguments[n];this.logger.apply(this,[t._consoleArgs,e].concat(o)),(i=this.view).notifyObservers.apply(i,[e].concat(o))},t.prototype.initializeNotifier=function(t){this.multitonKey=t},t.prototype.initializeController=function(){this.controller||(this.controller=o.Controller.getInstance(this.multitonKey))},t.prototype.initializeModel=function(){this.model||(this.model=n.Model.getInstance(this.multitonKey))},t.prototype.initializeView=function(){this.view||(this.view=a.View.getInstance(this.multitonKey))},t._consoleArgs=["","background: #757130","background: #DED434","color: #2F2E15; background: #FFF325;","background: #DED434","background: #757130"],t.instanceMap={},t}();e.Facade=s},651:function(t,e,i){var o,n=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),a=i(542),s=function(t){function e(e,i){var o=t.call(this)||this;return o.logger=a.PureMVC.debug?a.PureMVC.logMediator:a.PureMVC.logNone,o.mediatorName=e||"Mediator",o.viewComponent=i,o.sleeping=!0,o.subscribedNotifications=[],o.notificationSubscriptionChange=null,o}return n(e,t),Object.defineProperty(e.prototype,"notifications",{get:function(){return this.subscribedNotifications},enumerable:!0,configurable:!0}),e.prototype.getMediatorName=function(){return this.mediatorName},e.prototype.setViewComponent=function(t){this.viewComponent=t},e.prototype.getViewComponent=function(){return this.viewComponent},e.prototype.onRegister=function(t){this.notificationSubscriptionChange=t,this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.notificationSubscriptionChange=null,this.logger(e._consoleArgs,this.constructor.name,"remove")},e.prototype.onSleep=function(){this.sleeping=!0,this.logger(e._consoleArgs,this.constructor.name,"sleep")},e.prototype.onAwake=function(){this.sleeping=!1,this.logger(e._consoleArgs,this.constructor.name,"awake")},Object.defineProperty(e.prototype,"isSleeping",{get:function(){return this.sleeping},enumerable:!0,configurable:!0}),e.prototype.subscribeNotification=function(t){this.changeSubscription(t,this.addSubscription)},e.prototype.unsubscribeNotification=function(t){this.changeSubscription(t,this.removeSubscription)},e.prototype.changeSubscription=function(t,e){var i=this,o=this.notifications.slice(),n=!1;t instanceof Array?t.forEach((function(t){n=e.call(i,t)||n})):n=e.call(this,t),n&&this.notificationSubscriptionChange&&this.notificationSubscriptionChange(this,o)},e.prototype.addSubscription=function(t){return-1===this.notifications.indexOf(t)&&(this.notifications.push(t),!0)},e.prototype.removeSubscription=function(t){var e=this.notifications.indexOf(t);return-1!==e&&(this.notifications.splice(e,1),!0)},e._consoleArgs=["","background: #2A3351","background: #364D98","color: #F4F6FE; background: #3656C1;","background: #364D98","background: #2A3351"],e}(r.Notifier);e.Mediator=s},433:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(e){if(this.proxyMap={},t.instanceMap[e])throw new Error("Model instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeModel()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeModel=function(t){delete this.instanceMap[t]},t.prototype.registerProxy=function(t){t.initializeNotifier(this.multitonKey),this.proxyMap[t.getProxyName()]=t,t.onRegister()},t.prototype.retrieveProxy=function(t){return this.proxyMap[t]},t.prototype.hasProxy=function(t){return void 0!==this.proxyMap[t]},t.prototype.removeProxy=function(t){if(this.proxyMap[t]){var e=this.proxyMap[t];return e.onRemove(),delete this.proxyMap[t],e}return null},t.prototype.initializeModel=function(){},t.instanceMap={},t}();e.Model=i},117:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=i(222),n=function(){function t(){}return t.prototype.initializeNotifier=function(t){this.multitonKey=t,this.facade=this.getFacade()},t.prototype.sendNotification=function(t){for(var e,i=[],o=1;o<arguments.length;o++)i[o-1]=arguments[o];this.facade&&(e=this.facade).sendNotification.apply(e,[t].concat(i))},t.prototype.getFacade=function(){if(null===this.multitonKey)throw new Error("multitonKey for this Notifier not yet initialized!");return o.Facade.getInstance(this.multitonKey)},t}();e.Notifier=n},413:function(t,e,i){var o,n=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),a=i(542),s=function(t){function e(e,i){var o=t.call(this)||this;return o.proxyName=e||"Proxy",o.logger=a.PureMVC.debug?a.PureMVC.logProxy:a.PureMVC.logNone,i&&o.setData(i),o}return n(e,t),e.prototype.getProxyName=function(){return this.proxyName},e.prototype.setData=function(t){this.data=t},e.prototype.getData=function(){return this.data},e.prototype.onRegister=function(){this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.logger(e._consoleArgs,this.constructor.name,"remove")},e._consoleArgs=["","background: #295A34","background: #2FAA4A","color: #102415; background: #27D04C;","background: #2FAA4A","background: #295A34"],e}(r.Notifier);e.Proxy=s},542:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.logCommand=function(t,e,i){t[0]="%c %c %c "+e+" =>  "+i+" %c %c ",console.log.apply(console,t)},t.logNotification=function(t,e){for(var i=[],o=2;o<arguments.length;o++)i[o-2]=arguments[o];t[0]="%c %c %c "+e+": args [ "+i+" ] %c %c ",console.log.apply(console,t)},t.logMediator=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logProxy=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logNone=function(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i]},t.debug=!0,t}();e.PureMVC=i},999:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=i(729),n=function(){function t(e){if(this.mediatorMap={},this.eventEmitter=new o,t.instanceMap[e])throw new Error("View instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeView()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeView=function(t){delete this.instanceMap[t]},t.prototype.removeObserver=function(t,e,i){this.eventEmitter.removeListener(t,e,i)},t.prototype.registerObserver=function(t,e,i){this.eventEmitter.on(t,e,i)},t.prototype.notifyObservers=function(t){for(var e,i=[],o=1;o<arguments.length;o++)i[o-1]=arguments[o];(e=this.eventEmitter).emit.apply(e,[t,t].concat(i))},t.prototype.registerMediator=function(t){this.mediatorMap[t.getMediatorName()]||(t.initializeNotifier(this.multitonKey),this.mediatorMap[t.getMediatorName()]=t,this.registerObservers(t),t.onRegister(this.onMediatorNotificationSubscriptionChange.bind(this)),t.onAwake())},t.prototype.awakeMediator=function(t){var e=this.mediatorMap[t];if(e){if(!e.isSleeping)return e;this.registerObservers(e),e.onAwake()}return e},t.prototype.retrieveMediator=function(t){return this.mediatorMap[t]},t.prototype.removeMediator=function(t){var e=this.mediatorMap[t];return e&&(this.removeObservers(e),delete this.mediatorMap[t],e.onSleep(),e.onRemove()),e},t.prototype.sleepMediator=function(t){var e=this.mediatorMap[t];if(e){if(e.isSleeping)return e;this.removeObservers(e),e.onSleep()}return e},t.prototype.hasMediator=function(t){return void 0!==this.mediatorMap[t]},t.prototype.initializeView=function(){},t.prototype.removeObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var o=0,n=i;o<n.length;o++){var r=n[o];this.removeObserver(r,t.handleNotification,t)}},t.prototype.registerObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var o=0,n=i;o<n.length;o++){var r=n[o];this.registerObserver(r,t.handleNotification,t)}},t.prototype.onMediatorNotificationSubscriptionChange=function(t,e){this.removeObservers(t,e),this.registerObservers(t)},t.instanceMap={},t}();e.View=n},710:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=i(382);e.Controller=o.Controller;var n=i(222);e.Facade=n.Facade;var r=i(651);e.Mediator=r.Mediator;var a=i(433);e.Model=a.Model;var s=i(117);e.Notifier=s.Notifier;var c=i(413);e.Proxy=c.Proxy;var h=i(542);e.PureMVC=h.PureMVC;var p=i(999);e.View=p.View},729:t=>{var e=Object.prototype.hasOwnProperty,i="~";function o(){}function n(t,e,i){this.fn=t,this.context=e,this.once=i||!1}function r(t,e,o,r,a){if("function"!=typeof o)throw new TypeError("The listener must be a function");var s=new n(o,r||t,a),c=i?i+e:e;return t._events[c]?t._events[c].fn?t._events[c]=[t._events[c],s]:t._events[c].push(s):(t._events[c]=s,t._eventsCount++),t}function a(t,e){0==--t._eventsCount?t._events=new o:delete t._events[e]}function s(){this._events=new o,this._eventsCount=0}Object.create&&(o.prototype=Object.create(null),(new o).__proto__||(i=!1)),s.prototype.eventNames=function(){var t,o,n=[];if(0===this._eventsCount)return n;for(o in t=this._events)e.call(t,o)&&n.push(i?o.slice(1):o);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(t)):n},s.prototype.listeners=function(t){var e=i?i+t:t,o=this._events[e];if(!o)return[];if(o.fn)return[o.fn];for(var n=0,r=o.length,a=new Array(r);n<r;n++)a[n]=o[n].fn;return a},s.prototype.listenerCount=function(t){var e=i?i+t:t,o=this._events[e];return o?o.fn?1:o.length:0},s.prototype.emit=function(t,e,o,n,r,a){var s=i?i+t:t;if(!this._events[s])return!1;var c,h,p=this._events[s],u=arguments.length;if(p.fn){switch(p.once&&this.removeListener(t,p.fn,void 0,!0),u){case 1:return p.fn.call(p.context),!0;case 2:return p.fn.call(p.context,e),!0;case 3:return p.fn.call(p.context,e,o),!0;case 4:return p.fn.call(p.context,e,o,n),!0;case 5:return p.fn.call(p.context,e,o,n,r),!0;case 6:return p.fn.call(p.context,e,o,n,r,a),!0}for(h=1,c=new Array(u-1);h<u;h++)c[h-1]=arguments[h];p.fn.apply(p.context,c)}else{var d,l=p.length;for(h=0;h<l;h++)switch(p[h].once&&this.removeListener(t,p[h].fn,void 0,!0),u){case 1:p[h].fn.call(p[h].context);break;case 2:p[h].fn.call(p[h].context,e);break;case 3:p[h].fn.call(p[h].context,e,o);break;case 4:p[h].fn.call(p[h].context,e,o,n);break;default:if(!c)for(d=1,c=new Array(u-1);d<u;d++)c[d-1]=arguments[d];p[h].fn.apply(p[h].context,c)}}return!0},s.prototype.on=function(t,e,i){return r(this,t,e,i,!1)},s.prototype.once=function(t,e,i){return r(this,t,e,i,!0)},s.prototype.removeListener=function(t,e,o,n){var r=i?i+t:t;if(!this._events[r])return this;if(!e)return a(this,r),this;var s=this._events[r];if(s.fn)s.fn!==e||n&&!s.once||o&&s.context!==o||a(this,r);else{for(var c=0,h=[],p=s.length;c<p;c++)(s[c].fn!==e||n&&!s[c].once||o&&s[c].context!==o)&&h.push(s[c]);h.length?this._events[r]=1===h.length?h[0]:h:a(this,r)}return this},s.prototype.removeAllListeners=function(t){var e;return t?(e=i?i+t:t,this._events[e]&&a(this,e)):(this._events=new o,this._eventsCount=0),this},s.prototype.off=s.prototype.removeListener,s.prototype.addListener=s.prototype.on,s.prefixed=i,s.EventEmitter=s,t.exports=s},755:(t,e,i)=>{i.r(e),i.d(e,{GameFacade:()=>x});var o=i(68);class n{constructor(t,e,i){this.x=t,this.y=e,this.z=i,this.connectedNodes=[],this.occupied=!1}isConnected(t){return void 0!==this.connectedNodes.find((e=>e.x===t.x&&e.y===t.y&&e.z===t.z))}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}equalsPoint(t,e,i){return this.x===t&&this.y===e&&this.z===i}addConnectedNode(t){this.isConnected(t)||this.connectedNodes.push(t)}disconnectedNode(t){const e=this.connectedNodes.findIndex((e=>e.equals(t)));this.connectedNodes.splice(e,1)}}i(434);var r=i(917);pc.createScript("GameMapComponent").prototype.initialize=function(){},i(203);const{Mediator:a}=i(710);class s extends a{static get NAME(){return"GameMapMediator"}constructor(t){super(s.NAME),this.subscribeNotification([o.i.CHANGE_SCENE_COMPLETE])}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case o.i.CHANGE_SCENE_COMPLETE:this.facade.retrieveProxy(r.u.NAME).vo,pc.Application.getApplication()}}}var c=i(99);const{GameMediator:h}=i(23),{Facade:p}=i(710);function u(t,e){console.log("Parse map");const i=pc.Application.getApplication().root.findByTag("navigation_floor");let n=[];const r=[];for(const t of i){const e=t.script.NavigationComponent;r.push(e);const i=d(t);e.setGrid(i)}for(const t of r)for(const e of t.connectedComponents){const i=e.script.NavigationComponent;l(t.getGrid(),i.getGrid()),n=n.concat(t.getGrid())}p.getInstance(t).registerProxy(new c.h(n)),p.getInstance(t).registerMediator(new s),p.getInstance(t).sendNotification(o.i.MAP_GRID_CREATED)}function d(t){const e=[],i=t.getLocalPosition(),o=t.getLocalScale(),r=Math.round(o.x),a=Math.round(o.z),s=Math.round(i.x-r/2),c=i.y,h=Math.round(i.z-a/2);for(let t=h;t<h+a;t++)for(let i=s;i<s+r;i++){const o=new n(i,c,t);e.push(o)}for(const t of e)for(const i of e)(i.equalsPoint(t.x-1,t.y,t.z)||i.equalsPoint(t.x+1,t.y,t.z)||i.equalsPoint(t.x,t.y,t.z-1)||i.equalsPoint(t.x,t.y,t.z+1))&&t.addConnectedNode(i);return e}function l(t,e){for(const i of t)for(const t of e)(t.equalsPoint(i.x-1,i.y,i.z)||t.equalsPoint(i.x+1,i.y,i.z)||t.equalsPoint(i.x,i.y,i.z-1)||t.equalsPoint(i.x,i.y,i.z+1))&&i.addConnectedNode(t)}const{Facade:f}=i(710);function y(t,e){f.getInstance(t).registerProxy(new r.u)}const{Facade:g}=i(710);function m(t,e,...i){const n=pc.Application.getApplication(),r=i[0];console.log("Changing scene "+r);const a=n.root.findByName("Root"),s=n.scenes.find(r);n.scenes.loadSceneHierarchy(s.url,(function(e,i){e?console.error(e):a&&a.destroy(),g.getInstance(t).sendNotification(o.i.CHANGE_SCENE_COMPLETE,r),g.getInstance(t).sendNotification(o.i.PARSE_GAMEMAP,r)}))}var M=i(758),v=i(448);const{Facade:N}=i(710);function E(t,e,...i){const n=i[0],a=N.getInstance(t);a.sendNotification(o.i.SHOW_TOAST_MESSAGE,"Start Combat"),a.retrieveProxy(r.u.NAME).updateGameStateType(v.gameplayModeTypes.COMBAT);const s=["player"].concat(n),c=new M.F(s);a.registerProxy(c),a.sendNotification(o.i.NEXT_COMBAT_ROUND)}const{Facade:C}=i(710);function A(t,e,...i){const o=C.getInstance(t),n=o.retrieveProxy(r.u.NAME),a=o.retrieveProxy(M.F.NAME);n.vo.gameplayMode===v.gameplayModeTypes.COMBAT&&a.nextTurn()}const{Facade:_}=i(710);function T(t,e,...i){const n=_.getInstance(t),a=n.retrieveProxy(r.u.NAME),s=n.retrieveProxy(M.F.NAME);a.vo.gameplayMode===v.gameplayModeTypes.COMBAT&&(s.nextRound(),n.sendNotification(o.i.NEXT_COMBAT_TURN,s.vo.nextTurnCharacterId))}const{Facade:P}=i(710);function b(t,e,...i){setTimeout((()=>{const e=P.getInstance(t),i=e.retrieveProxy(M.F.NAME);e.sendNotification(o.i.NEXT_COMBAT_TURN,i.nextTurnCharacterId)}),500)}const{Facade:O}=i(710);class x extends O{static getInstance(t){return O.instanceMap[t]||(O.instanceMap[t]=new x(t)),O.instanceMap[t]}static get KEY(){return"Cacogen"}static get NAME(){return"CacogenFacade"}static get STARTUP(){return x.NAME+"StartUp"}startup(t){this.sendNotification(x.STARTUP,t)}sendNotification(t,...e){super.sendNotification(t,...e)}initializeController(){super.initializeController(),this.registerCommand(x.STARTUP,y),this.registerCommand(o.i.CHANGE_SCENE,m),this.registerCommand(o.i.PARSE_GAMEMAP,u),this.registerCommand(o.i.START_COMBAT,E),this.registerCommand(o.i.NEXT_COMBAT_TURN,A),this.registerCommand(o.i.NEXT_COMBAT_ROUND,T),this.registerCommand(o.i.END_COMBAT_TURN,b)}}},68:(t,e,i)=>{i.d(e,{i:()=>o});class o{static get CHANGE_SCENE(){return"CHANGE_SCENE"}static get CHANGE_SCENE_COMPLETE(){return"CHANGE_SCENE_COMPLETE"}static get APP_INITIALISED(){return"APP_INITIALISED"}static get PARSE_GAMEMAP(){return"PARSE_GAMEMAP"}static get MAP_GRID_CREATED(){return"MAP_GRID_CREATED"}static get NAVIGATE_TO_NODE(){return"NAVIGATE_TO_NODE"}static get SET_CAMERA_TARGET(){return"SET_CAMERA_TARGET"}static get INPUT_DRAG_MOUSE(){return"INPUT_DRAG_MOUSE"}static get PC_MOVED_TO_NODE(){return"PC_MOVED_TO_NODE"}static get PC_FINISHED_MOVE(){return"PC_FINISHED_MOVE"}static get START_COMBAT(){return"START_COMBAT"}static get SHOW_TOAST_MESSAGE(){return"SHOW_TOAST_MESSAGE"}static get NEXT_COMBAT_TURN(){return"NEXT_COMBAT_TURN"}static get NEXT_COMBAT_ROUND(){return"NEXT_COMBAT_ROUND"}static get END_COMBAT_TURN(){return"END_COMBAT_TURN"}static get AWAIT_PLAYER_COMBAT_INPUT(){return"AWAIT_PLAYER_COMBAT_INPUT"}}},758:(t,e,i)=>{i.d(e,{F:()=>c});var o=i(68);function n(t){let e=t.length,i=void 0,o=-1;for(;0!==e;)o=Math.floor(Math.random()*e),e-=1,i=t[e],t[e]=t[o],t[o]=i;return t}var r=i(958);const{Proxy:a}=i(710),{CombatVO:s}=i(201);class c extends a{get vo(){return this.getData()}static get NAME(){return"CombatProxy"}constructor(t){super(c.NAME,new s(t))}onRegister(){const t=this.vo.participants;this.participantProxies=new Map;for(const e of t){const t=this.facade.retrieveProxy(r.b.NAME+e);this.participantProxies.set(e,t)}}nextTurn(){const t=this.vo.roundInitiative;if(t&&t.length>0){const e=t.shift();if(this.vo.activeParticipant=e,console.log("Current turn:: "+e),"end_round"!==e){this.facade.sendNotification(o.i.SHOW_TOAST_MESSAGE,"Turn "+e);const t=this.participantProxies.get(e);t.resetCombatTurnState(),"player"===e?this.facade.sendNotification(o.i.AWAIT_PLAYER_COMBAT_INPUT,t):setTimeout((()=>{this.facade.sendNotification(o.i.END_COMBAT_TURN)}),3e3)}else this.facade.sendNotification(o.i.SHOW_TOAST_MESSAGE,"End round"),setTimeout((()=>{this.facade.sendNotification(o.i.NEXT_COMBAT_ROUND)}),3e3)}}nextRound(){console.log("/////////////////"),console.log("//  New round  //"),console.log("/////////////////");const t=[];for(const[e,i]of this.participantProxies.entries()){const o=i.vo;for(let i=0;i<o.initiative;i++)t.push(e)}t.push("end_round");let e=n(t);for(;"end_round"===e[0];)e=n(e);this.vo.roundInitiative=e}get nextTurnCharacterId(){return this.vo.nextTurnCharacterId}get activeParticipant(){return this.vo.activeParticipant}set activeParticipant(t){this.vo.activeParticipant=t}}},201:(t,e,i)=>{i.r(e),i.d(e,{CombatVO:()=>o});class o{constructor(t){this.participants=t,this.roundInitiative=[],this.activeParticipant=void 0}get nextTurnCharacterId(){return this.roundInitiative[0]}}},958:(t,e,i)=>{i.d(e,{b:()=>r});const{Proxy:o}=i(710),{GameCharacterVO:n}=i(940);class r extends o{get vo(){return this.getData()}static get NAME(){return"GameCharacterProxy_"}constructor(t){super(r.NAME+t,new n(t))}resetCombatTurnState(){this.vo.availableMovement=this.vo.maxMovement}}},940:(t,e,i)=>{i.r(e),i.d(e,{GameCharacterVO:()=>o});class o{constructor(t){this.id=t,this.currentNode=void 0,this.agroArea=void 0,this.roundInitiative=[],this.initiative=2,this.maxMovement=6,this.availableMovement=this.maxMovement}}},99:(t,e,i)=>{i.d(e,{h:()=>a});var o=i(434);const{Proxy:n}=i(710),{GameMapVO:r}=i(438);class a extends n{get vo(){return this.getData()}static get NAME(){return"GameMapProxy"}constructor(t){super(a.NAME),this.setData({mapGrid:t})}onRegister(){}findNearestNode(t){const e=this.vo.mapGrid;let i=e[0],n=o.q.getDistSquared(i,t);for(const r of e){const e=o.q.getDistSquared(r,t);e<n&&(n=e,i=r)}return i}}},438:(t,e,i)=>{i.r(e),i.d(e,{GameMapVO:()=>o});class o{constructor(){this.mapGrid=[]}}},434:(t,e,i)=>{i.d(e,{q:()=>n});class o{constructor(){this.data=[]}push(t,e=0){return this.data.push({value:t,priority:e})}pop(){let t=0,e=1/0;for(let i=0;i<this.data.length;i++){let o=this.data[i].priority;Math.min(e,o)===o&&(e=o,t=i)}return this.data.splice(t,1)[0].value}size(){return this.data.length}empty(){return 0===this.data.length}}class n{static breadthFirstSearch(t,e){let i=[];const o=[];i.push(t);const n=new Map;n.set(t,t);let r=0;for(;i.length>0&&r<e;){const t=[];for(const e of i)for(let i=0;i<e.connectedNodes.length;i++){const r=e.connectedNodes[i];r.occupied||n.has(r)||(t.push(r),o.push(r),n.set(r,e))}i=t,r++}return o}static calculatePath(t,e){const i=new o;i.push(t,0);const n=new Map,r=new Map;for(n.set(t,t),r.set(t,0);!i.empty();){const t=i.pop();if(t.equals(e))break;for(let o=0;o<t.connectedNodes.length;o++){const a=t.connectedNodes[o],s=r.get(t)+1;if(!a.occupied&&(!r.has(a)||s<r.get(a))){r.set(a,s);let o=s+this.heuristic(a,e);i.push(a,o),n.set(a,t)}}}let a=e,s=!1;const c=[];for(c.push(a);!a.equals(t)&&!s;)n.has(a)||!a.equals(e)?(a=n.get(a),c.push(a)):s=!0;return s?void 0:c}static getDistSquared(t,e){return(t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y)+(t.z-e.z)*(t.z-e.z)}static heuristic(t,e){return Math.abs(t.x-e.x)+Math.abs(t.y-e.y)+Math.abs(t.z-e.z)}}},917:(t,e,i)=>{i.d(e,{u:()=>r});const{Proxy:o}=i(710),{GameStateVO:n}=i(448);class r extends o{get vo(){return this.getData()}static get NAME(){return"GameStateProxy"}constructor(){super(r.NAME,new n)}updateGameStateType(t){this.vo.gameplayMode=t}}},448:(t,e,i)=>{i.r(e),i.d(e,{gameplayModeTypes:()=>o,GameStateVO:()=>n});const o={EXPLORATION:"EXPLORATION",COMBAT:"COMBAT",DIALOGUE:"DIALOGUE"};class n{constructor(){this.gameplayMode=o.EXPLORATION}}},23:(t,e,i)=>{i.r(e),i.d(e,{GameMediator:()=>r});var o=i(68);const{Mediator:n}=i(710);class r extends n{static get NAME(){return"GameMediator"}constructor(){console.log("Register mediator - GameMediator");const t=pc.Application.getApplication();super(r.NAME,t),this.subscribeNotification(o.i.APP_INITIALISED)}handleNotification(t,...e){switch(t){case o.i.APP_INITIALISED:}}}},203:(t,e,i)=>{var o=i(710),n=i(755),r=i(68);i(917);const{Mediator:a}=i(710);class s extends a{static get NAME(){return"InputLayerMediator"}constructor(t){super(s.NAME),this.subscribeNotification([r.i.CHANGE_SCENE_COMPLETE]),this.viewComponent=t,this.viewComponent.on("picker:navigation",this.handlePickerNavigation,this),this.viewComponent.on("scrolling",this.handleScrolling,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case r.i.CHANGE_SCENE_COMPLETE:}}handlePickerNavigation(t){this.facade.sendNotification(r.i.NAVIGATE_TO_NODE,t)}handleScrolling(t){this.facade.sendNotification(r.i.INPUT_DRAG_MOUSE,t)}}const c=pc.createScript("GameCamera");c.attributes.add("distance",{type:"number",default:100,title:"Distance"}),c.attributes.add("dragMultiplierX",{type:"number",default:.5,title:"Drag Multiplier"}),c.attributes.add("dragMultiplierY",{type:"number",default:.5,title:"Drag Multiplier"}),c.attributes.add("minCameraHeight",{type:"number",default:5,title:"Min Camera Height"}),c.attributes.add("maxCameraHeight",{type:"number",default:100,title:"Max Camera Height"}),c.prototype.initialize=function(){this.facade=o.Facade.getInstance(n.GameFacade.KEY),this.facade.hasMediator(p.NAME)&&this.facade.removeMediator(p.NAME),this.facade.registerMediator(new p(this.entity))},c.prototype.setCameraTarget=function(t){this.cameraTarget=t,this.rotation=this.entity.getEulerAngles().y,this.cameraHeight=this.entity.getLocalPosition().y},c.prototype.handleDrag=function(t){this.rotation+=t.x*this.dragMultiplierX;let e=this.cameraHeight-t.y*this.dragMultiplierY;e=pc.math.clamp(e,this.minCameraHeight,this.maxCameraHeight),this.cameraHeight=e},c.prototype.getTargetCameraPosition=function(t){const e=this.entity.getLocalPosition(),i=Math.sin(this.rotation*Math.PI/180)*this.distance,o=Math.cos(this.rotation*Math.PI/180)*this.distance;return new pc.Vec3(t.x+i,e.y,t.z+o)},c.prototype.update=function(t){if(this.cameraTarget){const t=this.cameraTarget.getLocalPosition(),e=this.getTargetCameraPosition(t),i=this.entity.getLocalPosition(),o=(e.x+9*i.x)/10,n=(this.cameraHeight+9*i.y)/10,r=(e.z+9*i.z)/10;this.entity.setLocalPosition(o,n,r),this.entity.lookAt(t)}};const{Mediator:h}=i(710);class p extends h{static get NAME(){return"GameCameraMediator"}constructor(t){super(p.NAME),this.subscribeNotification([r.i.CHANGE_SCENE_COMPLETE,r.i.INPUT_DRAG_MOUSE,r.i.SET_CAMERA_TARGET]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case r.i.SET_CAMERA_TARGET:this.viewComponent.script.GameCamera.setCameraTarget(e[0]);break;case r.i.INPUT_DRAG_MOUSE:this.viewComponent.script.GameCamera.handleDrag(e[0])}}}const u=pc.createScript("InputLayerComponent");u.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),u.attributes.add("dragTime",{type:"number",title:"Drag Time",default:.4}),u.prototype.initialize=function(){this.facade=o.Facade.getInstance(n.GameFacade.KEY),this.facade.hasMediator(s.NAME)&&this.facade.removeMediator(s.NAME),this.facade.registerMediator(new s(this.entity)),this.ray=new pc.Ray,this.app.mouse.disableContextMenu(),this.clickDownStart=0,this.isDragging=!1,this.app.on("picker:result",this.handlePickerResult,this),this.app.mouse.on(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.entity.element.on(pc.EVENT_MOUSEDOWN,this.onMouseDown,this),this.app.mouse.on(pc.EVENT_MOUSEUP,this.onMouseUp,this),this.entity.once("destroy",(()=>{this.app.mouse.off(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.app.mouse.off(pc.EVENT_MOUSEUP,this.onMouseUp,this)}))},u.prototype.onMouseDown=function(t){this.isDragging=!0,this.clickDownStart=Date.now(),this.clickStartPoint={x:t.x,y:t.y}},u.prototype.onMouseMove=function(t){if(this.isDragging){const e=new pc.Vec2(this.clickStartPoint.x-t.x,this.clickStartPoint.y-t.y);this.entity.fire("scrolling",e),this.clickStartPoint={x:t.x,y:t.y}}},u.prototype.onMouseUp=function(){this.isDragging=!1,Date.now()-this.clickDownStart<1e3*this.dragTime&&this.clickStartPoint&&this.handleRaycastCollisions(this.clickStartPoint.x,this.clickStartPoint.y)},u.prototype.handleRaycastCollisions=function(t,e){const i=this.cameraEntity,o=this.cameraEntity.camera;o.screenToWorld(t,e,o.farClip,this.ray.direction),this.ray.origin.copy(i.getPosition()),this.ray.direction.sub(this.ray.origin).normalize(),this.app.fire("picker:raycast",this.ray,{x:t,y:e})},u.prototype.handlePickerResult=function(t,e,i){if(t.tags.has("navigation")){const i=t.script.NavigationComponent.getNearestNode(e);this.entity.fire("picker:navigation",i)}}}},e={};function i(o){if(e[o])return e[o].exports;var n=e[o]={exports:{}};return t[o].call(n.exports,n,n.exports,i),n.exports}i.d=(t,e)=>{for(var o in e)i.o(e,o)&&!i.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t=i(755),e=i(68);const{Facade:o}=i(710),{GameFacade:n}=i(755),r=pc.createScript("CacogenGame");r.prototype.initialize=function(){this.facade=o.getInstance(n.KEY),this.facade.sendNotification(e.i.APP_INITIALISED),this.facade.sendNotification(e.i.CHANGE_SCENE,"Map1")},r.prototype.update=function(t){};var a=i(434);const s=pc.createScript("NavigationComponent");s.attributes.add("connectedComponents",{type:"entity",array:!0,title:"Connected Components"}),s.prototype.initialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,.05,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.findByName("Plane").enabled=!1},s.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity,i,e)},s.prototype.setGrid=function(t){this.nodeGrid=t},s.prototype.getGrid=function(){return this.nodeGrid},s.prototype.getNearestNode=function(t){let e=this.nodeGrid[0],i=a.q.getDistSquared(e,t);for(const o of this.nodeGrid){const n=a.q.getDistSquared(o,t);n<i&&(i=n,e=o)}return e};var c=i(710),h=i(958),p=i(99),u=i(917);const{Mediator:d}=i(710);class l extends d{static get NAME(){return"GameCharacterMediator_"}constructor(t,i,o){super(l.NAME+t),this.id=t;let n=[e.i.CHANGE_SCENE_COMPLETE,e.i.NAVIGATE_TO_NODE,e.i.START_COMBAT];n=n.concat(o),this.subscribeNotification(n),this.viewComponent=i,this.viewComponent.on("updateCurrentNode",this.updateCurrentNode,this),this.viewComponent.on("finishedMove",this.handleFinishedMode,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){this.viewComponent&&this.viewComponent.fire(t,this.id,...i);for(const e in this.viewComponent.script)if(Object.hasOwnProperty.call(this.viewComponent.script,e)){const o=this.viewComponent.script[e];"function"==typeof o.handleNotification&&o.handleNotification(t,this.id,...i)}switch(t){case e.i.START_COMBAT:this.handleStartCombat()}}updateCurrentNode(t){}handleFinishedMode(t){this.facade.sendNotification(e.i.PC_FINISHED_MOVE,t)}lookForCharacter(t,i){for(const o of this.searchArea)o.equals(i)&&(this.viewComponent.script.GameCharacterComponent.lookAtPoint(i),this.facade.sendNotification(e.i.START_COMBAT,this.viewComponent,[t]))}handleStartCombat(){}}const f=pc.createScript("GameCharacterComponent");f.attributes.add("characterId",{type:"string",title:"Character Id"}),f.attributes.add("characterSpeed",{type:"number",title:"Character Speed",default:4}),f.prototype.preregisterNotification=function(t){this.preregisteredNotifications||(this.preregisteredNotifications=[]),this.preregisteredNotifications.push(t)},f.prototype.postInitialize=function(){this.movementPath=[],this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(l.NAME+this.characterId)&&this.facade.removeMediator(l.NAME+this.characterId),this.preregisteredNotifications||(this.preregisteredNotifications=[]),this.facade.registerProxy(new h.b(this.characterId)),this.facade.registerMediator(new l(this.characterId,this.entity,this.preregisteredNotifications))},f.prototype.setPath=function(t){this.movementPath=t},f.prototype.stopMovement=function(t){this.movementPath=[],this.entity.setLocalPosition(t.x,t.y,t.z)},f.prototype.update=function(t){this.moveAlongPath(t)},f.prototype.moveAlongPath=function(t){if(this.movementPath.length>0){const e=this.movementPath[this.movementPath.length-1],i=this.entity.getLocalPosition(),o=new pc.Vec3,n=new pc.Vec3(t*this.characterSpeed,t*this.characterSpeed,t*this.characterSpeed),r=new pc.Vec3(e.x,e.y,e.z);if(o.sub2(r,i),o.normalize(),o.mul(n),o.add(i),this.entity.setLocalPosition(o),this.lookAtPoint(e),o.distance(r)<.15){const t=this.movementPath.pop();this.entity.fire("updateCurrentNode",t),0===this.movementPath.length&&this.entity.fire("finishedMove",t)}}},f.prototype.lookAtPoint=function(t){const e=this.entity.getLocalPosition(),i=t.x-e.x,o=t.z-e.z,n=180*Math.atan2(i,o)/Math.PI;this.entity.setEulerAngles(0,n,0)};var y=i(448);const g=pc.createScript("AgroGameCharacterComponent");g.attributes.add("sightRange",{type:"number",title:"Sight Range",default:5}),g.prototype.initialize=function(){this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MAP_GRID_CREATED),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.PC_MOVED_TO_NODE),this.entity.on(e.i.MAP_GRID_CREATED,this.handleMapGridCreated,this),this.entity.on(e.i.PC_MOVED_TO_NODE,this.handleMovedToNode,this)},g.prototype.handleMapGridCreated=function(e,...i){const o=c.Facade.getInstance(t.GameFacade.KEY),n=o.retrieveProxy(h.b.NAME+e).vo;if(!n.currentNode){const t=o.retrieveProxy(p.h.NAME);n.currentNode=t.findNearestNode(this.entity.getLocalPosition()),n.currentNode.occupied=!0,n.agroArea=a.q.breadthFirstSearch(n.currentNode,this.sightRange)}},g.prototype.handleMovedToNode=function(i,o,n){const r=c.Facade.getInstance(t.GameFacade.KEY),a=r.retrieveProxy(h.b.NAME+i).vo;if(r.retrieveProxy(u.u.NAME).vo.gameplayMode===y.gameplayModeTypes.EXPLORATION)for(const t of a.agroArea)t.equals(n)&&(this.entity.script.GameCharacterComponent.lookAtPoint(n),r.sendNotification(e.i.NAVIGATE_TO_NODE,n),r.sendNotification(e.i.START_COMBAT,i))};const{Mediator:m}=i(710);class M extends m{static get NAME(){return"ToastMessageMediator"}constructor(t){super(M.NAME),this.subscribeNotification([e.i.SHOW_TOAST_MESSAGE]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SHOW_TOAST_MESSAGE:this.viewComponent.script.ToastMessageComponent.addMessage(i[0])}}}const v=pc.createScript("ToastMessageComponent");v.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),v.attributes.add("messageTime",{type:"number",default:5,title:"Message Time"}),v.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(M.NAME)&&this.facade.removeMediator(M.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new M(this.entity))},v.prototype.addMessage=function(t){0===this.messageQueue.length?(this.messageQueue.push(t),this.showNextMessage()):this.messageQueue.push(t)},v.prototype.showNextMessage=function(){if(this.messageQueue.length>0){const t=this.messageQueue[0];this.labelEntity.element.text=t,setTimeout((()=>{this.messageQueue.shift(),this.showNextMessage()}),1e3*this.messageTime)}else this.labelEntity.element.text=""};const N=pc.createScript("NavigateToNodeComponent");N.prototype.initialize=function(){this.entity.script.GameCharacterComponent.preregisterNotification(e.i.NAVIGATE_TO_NODE),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.START_COMBAT),this.entity.on(e.i.NAVIGATE_TO_NODE,this.handleNavigateToNode,this),this.entity.on(e.i.START_COMBAT,this.handleStartCombat,this),this.entity.on("updateCurrentNode",this.updateCurrentNode,this)},N.prototype.handleNavigateToNode=function(e,...i){const o=i[0],n=c.Facade.getInstance(t.GameFacade.KEY);if(n.retrieveProxy(u.u.NAME).vo.gameplayMode===y.gameplayModeTypes.EXPLORATION){const t=n.retrieveProxy(p.h.NAME),i=n.retrieveProxy(h.b.NAME+e).vo;i.currentNode||(i.currentNode=t.findNearestNode(this.entity.getLocalPosition()));const r=a.q.calculatePath(i.currentNode,o);r&&r.length>0&&(this.entity.script.GameCharacterComponent.setPath(r),i.currentNode=o)}},N.prototype.updateCurrentNode=function(i){const o=this.entity.script.GameCharacterComponent.characterId;c.Facade.getInstance(t.GameFacade.KEY).sendNotification(e.i.PC_MOVED_TO_NODE,o,i)},N.prototype.handleStartCombat=function(){const e=this.entity.script.GameCharacterComponent.characterId,i=c.Facade.getInstance(t.GameFacade.KEY).retrieveProxy(h.b.NAME+e).vo;this.entity.script.GameCharacterComponent.stopMovement(i.currentNode)},pc.createScript("SetCameraTargetComponent").prototype.postInitialize=function(){c.Facade.getInstance(t.GameFacade.KEY).sendNotification(e.i.SET_CAMERA_TARGET,this.entity)};var E=i(758);const C=pc.createScript("PlayerCombatInputComponent");C.attributes.add("moveTileTemplate",{type:"asset",title:"Move tile template"}),C.attributes.add("tileContainer",{type:"entity",title:"Tile Container"}),C.prototype.initialize=function(){this.entity.script.GameCharacterComponent.preregisterNotification(e.i.AWAIT_PLAYER_COMBAT_INPUT),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.NAVIGATE_TO_NODE),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.PC_FINISHED_MOVE),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.END_COMBAT_TURN),this.moveableNodes=[],this.displayTiles=[]},C.prototype.handleNotification=function(t,i,...o){switch(console.log("EVENT "+t),t){case e.i.AWAIT_PLAYER_COMBAT_INPUT:this.awaitPlayerInput(i,...o);break;case e.i.END_COMBAT_TURN:this.handleEndCombatTurn(i,...o);break;case e.i.NAVIGATE_TO_NODE:this.handleNavigateToNode(i,...o);break;case e.i.PC_FINISHED_MOVE:this.handleFinishedMove(i,...o)}},C.prototype.awaitPlayerInput=function(t,...e){this.destroyDisplayTiles(),this.showMoveableTiles(t)},C.prototype.handleNavigateToNode=function(e,...i){const o=i[0],n=c.Facade.getInstance(t.GameFacade.KEY),r=n.retrieveProxy(u.u.NAME).vo,a=n.retrieveProxy(h.b.NAME+e);if(n.retrieveProxy(E.F.NAME)&&r.gameplayMode===y.gameplayModeTypes.COMBAT)for(const t of this.moveableNodes)t.equals(o)&&this.handleValidMove(a,o)},C.prototype.destroyDisplayTiles=function(){for(const t of this.displayTiles)t.destroy()},C.prototype.handleFinishedMove=function(e,i){const o=c.Facade.getInstance(t.GameFacade.KEY),n=(o.retrieveProxy(u.u.NAME).vo,o.retrieveProxy(E.F.NAME));n&&"player"===n.activeParticipant&&(this.destroyDisplayTiles(),this.showMoveableTiles(e))},C.prototype.handleValidMove=function(t,i){const o=t.vo,n=a.q.calculatePath(o.currentNode,i);n&&n.length>0&&(o.availableMovement-=n.length-1,o.currentNode=i,this.destroyDisplayTiles(),this.entity.off(e.i.NAVIGATE_TO_NODE,this.handleNavigateToNode,this),this.entity.on(e.i.PC_FINISHED_MOVE,this.handleFinishedMove,this),this.entity.script.GameCharacterComponent.setPath(n))},C.prototype.showMoveableTiles=function(e){const i=c.Facade.getInstance(t.GameFacade.KEY).retrieveProxy(h.b.NAME+e).vo;this.moveableNodes=a.q.breadthFirstSearch(i.currentNode,i.availableMovement),this.displayTiles=[];for(const t of this.moveableNodes){const e=this.moveTileTemplate.resource.instantiate();e.setLocalPosition(t.x,t.y,t.z),this.tileContainer.addChild(e),this.displayTiles.push(e)}},C.prototype.handleEndCombatTurn=function(t,...e){this.destroyDisplayTiles()},i(203);const{Mediator:A}=i(710);class _ extends A{static get NAME(){return"PlayerCombatPanelMediator"}constructor(t){super(_.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.AWAIT_PLAYER_COMBAT_INPUT,e.i.END_COMBAT_TURN]),this.viewComponent=t,this.viewComponent.on("click:endTurn",this.handleEndTurn,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:this.viewComponent.enabled=!1;break;case e.i.AWAIT_PLAYER_COMBAT_INPUT:this.viewComponent.enabled=!0;break;case e.i.END_COMBAT_TURN:this.viewComponent.enabled=!1}}handleEndTurn(t){this.sendNotification(e.i.END_COMBAT_TURN)}}const T=pc.createScript("PlayerCombatPanelComponent");T.attributes.add("endTurnButton",{type:"entity",title:"End Turn button"}),T.prototype.initialize=function(){},T.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(_.NAME)&&this.facade.removeMediator(_.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new _(this.entity)),this.endTurnButton.element.on("click",this.clickEndTurn,this)},T.prototype.clickEndTurn=function(t){this.entity.fire("click:endTurn")};const{Facade:P}=i(710),{PureMVC:b}=i(710);new class{constructor(){console.log("Main start"),b.debug=!0,P.getInstance=t.GameFacade.getInstance,console.log(P),this.facade=P.getInstance(t.GameFacade.KEY),this.facade.startup(this)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,