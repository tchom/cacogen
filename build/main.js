(()=>{"use strict";var t={382:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(542),o=i(999),s=function(){function t(e){if(this.commandMap={},t.instanceMap[e])throw new Error("controller key for this Multiton key already constructed");this.multitonKey=e,this.logger=n.PureMVC.debug?n.PureMVC.logCommand:n.PureMVC.logNone,this.initializeController()}return t.removeController=function(t){delete this.instanceMap[t]},t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.prototype.registerCommand=function(t,e){this.commandMap[t]||this.view.registerObserver(t,this.executeCommand,this),this.commandMap[t]=e},t.prototype.hasCommand=function(t){return void 0!==this.commandMap[t]},t.prototype.removeCommand=function(t){this.hasCommand(t)&&(this.view.removeObserver(t,this.executeCommand,this),delete this.commandMap[t])},t.prototype.initializeController=function(){this.view=o.View.getInstance(this.multitonKey)},t.prototype.executeCommand=function(e){for(var i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];var o=this.commandMap[e];o&&(this.logger(t._consoleArgs,e,o.name),o.apply(void 0,[this.multitonKey,e].concat(i)))},t._consoleArgs=["","background: #3F234E","background: #6E2994","color: #D4BFE0; background: #8724BD;","background: #6E2994","background: #3F234E"],t.instanceMap={},t}();e.Controller=s},222:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(382),o=i(433),s=i(542),r=i(999),a=function(){function t(e){if(t.instanceMap[e])throw new Error("Facade instance for this Multiton key already constructed!");this.logger=s.PureMVC.debug?s.PureMVC.logNotification:s.PureMVC.logNone,this.initializeNotifier(e),this.initializeFacade()}return t.getInstance=function(e){return e?(t.instanceMap[e]||(t.instanceMap[e]=new t(e)),t.instanceMap[e]):null},t.hasCore=function(t){return void 0!==this.instanceMap[t]},t.removeCore=function(t){this.instanceMap[t]&&(o.Model.removeModel(t),r.View.removeView(t),n.Controller.removeController(t),delete this.instanceMap[t])},t.prototype.initializeFacade=function(){this.initializeModel(),this.initializeController(),this.initializeView()},t.prototype.registerCommand=function(t,e){this.controller.registerCommand(t,e)},t.prototype.removeCommand=function(t){this.controller.removeCommand(t)},t.prototype.hasCommand=function(t){return this.controller.hasCommand(t)},t.prototype.registerProxy=function(t){this.model.registerProxy(t)},t.prototype.retrieveProxy=function(t){return this.model.retrieveProxy(t)},t.prototype.removeProxy=function(t){return this.model?this.model.removeProxy(t):null},t.prototype.hasProxy=function(t){return this.model.hasProxy(t)},t.prototype.registerMediator=function(t){this.view.registerMediator(t)},t.prototype.retrieveMediator=function(t){return this.view.retrieveMediator(t)},t.prototype.removeMediator=function(t){return this.view.removeMediator(t)},t.prototype.sleepMediator=function(t){return this.view.sleepMediator(t)},t.prototype.awakeMediator=function(t){return this.view.awakeMediator(t)},t.prototype.hasMediator=function(t){return this.view.hasMediator(t)},t.prototype.sendNotification=function(e){for(var i,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];this.logger.apply(this,[t._consoleArgs,e].concat(n)),(i=this.view).notifyObservers.apply(i,[e].concat(n))},t.prototype.initializeNotifier=function(t){this.multitonKey=t},t.prototype.initializeController=function(){this.controller||(this.controller=n.Controller.getInstance(this.multitonKey))},t.prototype.initializeModel=function(){this.model||(this.model=o.Model.getInstance(this.multitonKey))},t.prototype.initializeView=function(){this.view||(this.view=r.View.getInstance(this.multitonKey))},t._consoleArgs=["","background: #757130","background: #DED434","color: #2F2E15; background: #FFF325;","background: #DED434","background: #757130"],t.instanceMap={},t}();e.Facade=a},651:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var s=i(117),r=i(542),a=function(t){function e(e,i){var n=t.call(this)||this;return n.logger=r.PureMVC.debug?r.PureMVC.logMediator:r.PureMVC.logNone,n.mediatorName=e||"Mediator",n.viewComponent=i,n.sleeping=!0,n.subscribedNotifications=[],n.notificationSubscriptionChange=null,n}return o(e,t),Object.defineProperty(e.prototype,"notifications",{get:function(){return this.subscribedNotifications},enumerable:!0,configurable:!0}),e.prototype.getMediatorName=function(){return this.mediatorName},e.prototype.setViewComponent=function(t){this.viewComponent=t},e.prototype.getViewComponent=function(){return this.viewComponent},e.prototype.onRegister=function(t){this.notificationSubscriptionChange=t,this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.notificationSubscriptionChange=null,this.logger(e._consoleArgs,this.constructor.name,"remove")},e.prototype.onSleep=function(){this.sleeping=!0,this.logger(e._consoleArgs,this.constructor.name,"sleep")},e.prototype.onAwake=function(){this.sleeping=!1,this.logger(e._consoleArgs,this.constructor.name,"awake")},Object.defineProperty(e.prototype,"isSleeping",{get:function(){return this.sleeping},enumerable:!0,configurable:!0}),e.prototype.subscribeNotification=function(t){this.changeSubscription(t,this.addSubscription)},e.prototype.unsubscribeNotification=function(t){this.changeSubscription(t,this.removeSubscription)},e.prototype.changeSubscription=function(t,e){var i=this,n=this.notifications.slice(),o=!1;t instanceof Array?t.forEach((function(t){o=e.call(i,t)||o})):o=e.call(this,t),o&&this.notificationSubscriptionChange&&this.notificationSubscriptionChange(this,n)},e.prototype.addSubscription=function(t){return-1===this.notifications.indexOf(t)&&(this.notifications.push(t),!0)},e.prototype.removeSubscription=function(t){var e=this.notifications.indexOf(t);return-1!==e&&(this.notifications.splice(e,1),!0)},e._consoleArgs=["","background: #2A3351","background: #364D98","color: #F4F6FE; background: #3656C1;","background: #364D98","background: #2A3351"],e}(s.Notifier);e.Mediator=a},433:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(e){if(this.proxyMap={},t.instanceMap[e])throw new Error("Model instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeModel()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeModel=function(t){delete this.instanceMap[t]},t.prototype.registerProxy=function(t){t.initializeNotifier(this.multitonKey),this.proxyMap[t.getProxyName()]=t,t.onRegister()},t.prototype.retrieveProxy=function(t){return this.proxyMap[t]},t.prototype.hasProxy=function(t){return void 0!==this.proxyMap[t]},t.prototype.removeProxy=function(t){if(this.proxyMap[t]){var e=this.proxyMap[t];return e.onRemove(),delete this.proxyMap[t],e}return null},t.prototype.initializeModel=function(){},t.instanceMap={},t}();e.Model=i},117:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(222),o=function(){function t(){}return t.prototype.initializeNotifier=function(t){this.multitonKey=t,this.facade=this.getFacade()},t.prototype.sendNotification=function(t){for(var e,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];this.facade&&(e=this.facade).sendNotification.apply(e,[t].concat(i))},t.prototype.getFacade=function(){if(null===this.multitonKey)throw new Error("multitonKey for this Notifier not yet initialized!");return n.Facade.getInstance(this.multitonKey)},t}();e.Notifier=o},413:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var s=i(117),r=i(542),a=function(t){function e(e,i){var n=t.call(this)||this;return n.proxyName=e||"Proxy",n.logger=r.PureMVC.debug?r.PureMVC.logProxy:r.PureMVC.logNone,i&&n.setData(i),n}return o(e,t),e.prototype.getProxyName=function(){return this.proxyName},e.prototype.setData=function(t){this.data=t},e.prototype.getData=function(){return this.data},e.prototype.onRegister=function(){this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.logger(e._consoleArgs,this.constructor.name,"remove")},e._consoleArgs=["","background: #295A34","background: #2FAA4A","color: #102415; background: #27D04C;","background: #2FAA4A","background: #295A34"],e}(s.Notifier);e.Proxy=a},542:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.logCommand=function(t,e,i){t[0]="%c %c %c "+e+" =>  "+i+" %c %c ",console.log.apply(console,t)},t.logNotification=function(t,e){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];t[0]="%c %c %c "+e+": args [ "+i+" ] %c %c ",console.log.apply(console,t)},t.logMediator=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logProxy=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logNone=function(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i]},t.debug=!0,t}();e.PureMVC=i},999:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(729),o=function(){function t(e){if(this.mediatorMap={},this.eventEmitter=new n,t.instanceMap[e])throw new Error("View instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeView()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeView=function(t){delete this.instanceMap[t]},t.prototype.removeObserver=function(t,e,i){this.eventEmitter.removeListener(t,e,i)},t.prototype.registerObserver=function(t,e,i){this.eventEmitter.on(t,e,i)},t.prototype.notifyObservers=function(t){for(var e,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];(e=this.eventEmitter).emit.apply(e,[t,t].concat(i))},t.prototype.registerMediator=function(t){this.mediatorMap[t.getMediatorName()]||(t.initializeNotifier(this.multitonKey),this.mediatorMap[t.getMediatorName()]=t,this.registerObservers(t),t.onRegister(this.onMediatorNotificationSubscriptionChange.bind(this)),t.onAwake())},t.prototype.awakeMediator=function(t){var e=this.mediatorMap[t];if(e){if(!e.isSleeping)return e;this.registerObservers(e),e.onAwake()}return e},t.prototype.retrieveMediator=function(t){return this.mediatorMap[t]},t.prototype.removeMediator=function(t){var e=this.mediatorMap[t];return e&&(this.removeObservers(e),delete this.mediatorMap[t],e.onSleep(),e.onRemove()),e},t.prototype.sleepMediator=function(t){var e=this.mediatorMap[t];if(e){if(e.isSleeping)return e;this.removeObservers(e),e.onSleep()}return e},t.prototype.hasMediator=function(t){return void 0!==this.mediatorMap[t]},t.prototype.initializeView=function(){},t.prototype.removeObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var n=0,o=i;n<o.length;n++){var s=o[n];this.removeObserver(s,t.handleNotification,t)}},t.prototype.registerObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var n=0,o=i;n<o.length;n++){var s=o[n];this.registerObserver(s,t.handleNotification,t)}},t.prototype.onMediatorNotificationSubscriptionChange=function(t,e){this.removeObservers(t,e),this.registerObservers(t)},t.instanceMap={},t}();e.View=o},710:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(382);e.Controller=n.Controller;var o=i(222);e.Facade=o.Facade;var s=i(651);e.Mediator=s.Mediator;var r=i(433);e.Model=r.Model;var a=i(117);e.Notifier=a.Notifier;var c=i(413);e.Proxy=c.Proxy;var h=i(542);e.PureMVC=h.PureMVC;var d=i(999);e.View=d.View},729:t=>{var e=Object.prototype.hasOwnProperty,i="~";function n(){}function o(t,e,i){this.fn=t,this.context=e,this.once=i||!1}function s(t,e,n,s,r){if("function"!=typeof n)throw new TypeError("The listener must be a function");var a=new o(n,s||t,r),c=i?i+e:e;return t._events[c]?t._events[c].fn?t._events[c]=[t._events[c],a]:t._events[c].push(a):(t._events[c]=a,t._eventsCount++),t}function r(t,e){0==--t._eventsCount?t._events=new n:delete t._events[e]}function a(){this._events=new n,this._eventsCount=0}Object.create&&(n.prototype=Object.create(null),(new n).__proto__||(i=!1)),a.prototype.eventNames=function(){var t,n,o=[];if(0===this._eventsCount)return o;for(n in t=this._events)e.call(t,n)&&o.push(i?n.slice(1):n);return Object.getOwnPropertySymbols?o.concat(Object.getOwnPropertySymbols(t)):o},a.prototype.listeners=function(t){var e=i?i+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var o=0,s=n.length,r=new Array(s);o<s;o++)r[o]=n[o].fn;return r},a.prototype.listenerCount=function(t){var e=i?i+t:t,n=this._events[e];return n?n.fn?1:n.length:0},a.prototype.emit=function(t,e,n,o,s,r){var a=i?i+t:t;if(!this._events[a])return!1;var c,h,d=this._events[a],l=arguments.length;if(d.fn){switch(d.once&&this.removeListener(t,d.fn,void 0,!0),l){case 1:return d.fn.call(d.context),!0;case 2:return d.fn.call(d.context,e),!0;case 3:return d.fn.call(d.context,e,n),!0;case 4:return d.fn.call(d.context,e,n,o),!0;case 5:return d.fn.call(d.context,e,n,o,s),!0;case 6:return d.fn.call(d.context,e,n,o,s,r),!0}for(h=1,c=new Array(l-1);h<l;h++)c[h-1]=arguments[h];d.fn.apply(d.context,c)}else{var p,u=d.length;for(h=0;h<u;h++)switch(d[h].once&&this.removeListener(t,d[h].fn,void 0,!0),l){case 1:d[h].fn.call(d[h].context);break;case 2:d[h].fn.call(d[h].context,e);break;case 3:d[h].fn.call(d[h].context,e,n);break;case 4:d[h].fn.call(d[h].context,e,n,o);break;default:if(!c)for(p=1,c=new Array(l-1);p<l;p++)c[p-1]=arguments[p];d[h].fn.apply(d[h].context,c)}}return!0},a.prototype.on=function(t,e,i){return s(this,t,e,i,!1)},a.prototype.once=function(t,e,i){return s(this,t,e,i,!0)},a.prototype.removeListener=function(t,e,n,o){var s=i?i+t:t;if(!this._events[s])return this;if(!e)return r(this,s),this;var a=this._events[s];if(a.fn)a.fn!==e||o&&!a.once||n&&a.context!==n||r(this,s);else{for(var c=0,h=[],d=a.length;c<d;c++)(a[c].fn!==e||o&&!a[c].once||n&&a[c].context!==n)&&h.push(a[c]);h.length?this._events[s]=1===h.length?h[0]:h:r(this,s)}return this},a.prototype.removeAllListeners=function(t){var e;return t?(e=i?i+t:t,this._events[e]&&r(this,e)):(this._events=new n,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prefixed=i,a.EventEmitter=a,t.exports=a},828:(t,e,i)=>{i.r(e),i.d(e,{GameFacade:()=>ee});var n=i(68);class o{constructor(t,e,i){this.x=t,this.y=e,this.z=i,this.connectedNodes=[],this.occupied=!1}isConnected(t){return this.connectedNodes.some((e=>e.x===t.x&&e.y===t.y&&e.z===t.z))}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}equalsPoint(t,e,i){return this.x===t&&this.y===e&&this.z===i}addConnectedNode(t){this.isConnected(t)||this.connectedNodes.push(t)}disconnectedNode(t){const e=this.connectedNodes.findIndex((e=>e.equals(t)));this.connectedNodes.splice(e,1)}}var s=i(969),r=i(434);const{Facade:a}=i(710);function c(t,e,...i){const c=a.getInstance(t),y=pc.Application.getApplication(),m=function(t){const e=t.root.findByTag("navigation_floor");let i=[];const n=[];for(const t of e){const e=t.script.NavigationComponent;n.push(e);for(const i of e.connectedComponents){const e=i.script.NavigationComponent;e.connectedComponents.includes(t)||e.connectedComponents.push(t)}const i=l(t);e.setGrid(i)}for(const t of n)for(const e of t.connectedComponents){const n=e.script.NavigationComponent;p(t.getGrid(),n.getGrid()),i=i.concat(t.getGrid())}return i}(y),g=function(t,e){const i=[],n=t.root.findByTag("wall");for(const t of n){const n=h(t);i.push(n),d(t,e),t.destroy()}return i}(y,m),f=function(t,e){let i=[];const n=t.root.findByTag("cover");for(const t of n)i=i.concat(u(t,e)),t.destroy();return i}(y,m),A=function(t){const e=new Map,i=t.root.findByTag("portal");for(const t of i){const i=t.script.PortalComponent,n=i.portalId,o={portalId:n,destinationScene:i.destinationScene,destinationPortal:i.destinationPortal,standingPoint:i.standingPoint.getPosition(),hitboxPoint:i.hitbox.getPosition()};e.set(n,o)}return e}(y),N=function(t){const e=[];for(const i of t)E(i,t)&&e.push(new o(i.x,i.y,i.z));for(const i of e)for(const n of e)if(!i.equals(n)||!n.isConnected(i)){const e=r.q.calculateBresenhamLine(i.x,i.z,n.x,n.z);r.q.checkValidLine(e,t)&&(i.addConnectedNode(n),n.addConnectedNode(i))}return e}(m);c.hasProxy(s.h.NAME)&&c.removeProxy(s.h.NAME),c.registerProxy(new s.h(m,g,f,A,N)),c.sendNotification(n.i.MAP_GRID_CREATED)}function h(t){const e=t.getLocalScale(),i=new pc.Vec3(e.x/2,e.y/2,e.z/2);return new pc.BoundingBox(t.getPosition(),i)}function d(t,e){const i=t.getPosition(),n=t.getLocalScale(),o=Math.round(i.y-.5*n.y),s=Math.round(i.x-.5*n.x),r=Math.round(i.z-.5*n.z);for(let t=s;t<s+n.x;t++)for(let i=r;i<r+n.z;i++){const n=e.findIndex((e=>e.equalsPoint(t,o,i)));if(n>-1){const t=e.splice(n,1);for(const e of t)for(const t of e.connectedNodes)t.disconnectedNode(e)}}}function l(t){const e=[],i=t.getLocalPosition(),n=t.getLocalScale(),s=Math.round(n.x),r=Math.round(n.z),a=Math.round(i.x-s/2),c=i.y,h=Math.round(i.z-r/2);for(let t=h;t<h+r;t++)for(let i=a;i<a+s;i++){const n=new o(i,c,t);e.push(n)}for(const t of e)for(const i of e)(i.equalsPoint(t.x-1,t.y,t.z)||i.equalsPoint(t.x+1,t.y,t.z)||i.equalsPoint(t.x,t.y,t.z-1)||i.equalsPoint(t.x,t.y,t.z+1))&&t.addConnectedNode(i);return e}function p(t,e){for(const i of t)for(const t of e)(t.equalsPoint(i.x-1,i.y,i.z)||t.equalsPoint(i.x+1,i.y,i.z)||t.equalsPoint(i.x,i.y,i.z-1)||t.equalsPoint(i.x,i.y,i.z+1))&&i.addConnectedNode(t)}function u(t,e){const i=[],n=t.getPosition(),o=t.getLocalScale(),s=Math.round(n.y-.5*o.y),r=Math.round(n.x-.5*o.x),a=Math.round(n.z-.5*o.z);for(let t=r;t<r+o.x;t++)for(let n=a;n<a+o.z;n++){const o=new pc.Vec3(t,s,n);i.push(o);const r=e.findIndex((e=>e.equalsPoint(t,s,n)));if(r>-1){const t=e.splice(r,1);for(const e of t)for(const t of e.connectedNodes)t.disconnectedNode(e)}}return i}function E(t,e){const i=new pc.Vec3(t.x-1,t.y,t.z-1),n=new pc.Vec3(t.x,t.y,t.z-1),o=new pc.Vec3(t.x+1,t.y,t.z-1),s=new pc.Vec3(t.x+1,t.y,t.z),r=new pc.Vec3(t.x+1,t.y,t.z+1),a=new pc.Vec3(t.x,t.y,t.z+1),c=new pc.Vec3(t.x-1,t.y,t.z+1),h=new pc.Vec3(t.x-1,t.y,t.z);return!((e.some((t=>t.equals(i)))||!t.connectedNodes.some((t=>t.equals(n)))||!t.connectedNodes.some((t=>t.equals(h))))&&(e.some((t=>t.equals(o)))||!t.connectedNodes.some((t=>t.equals(n)))||!t.connectedNodes.some((t=>t.equals(s))))&&(e.some((t=>t.equals(r)))||!t.connectedNodes.some((t=>t.equals(a)))||!t.connectedNodes.some((t=>t.equals(s))))&&(e.some((t=>t.equals(c)))||!t.connectedNodes.some((t=>t.equals(a)))||!t.connectedNodes.some((t=>t.equals(h)))))}var y=i(917);const{Proxy:m}=i(710);class g extends m{get vo(){return this.getData()}static get NAME(){return"WeaponsProxy"}constructor(t){super(g.NAME,t)}getDamage(t,e){for(const i in this.vo)if(Object.hasOwnProperty.call(this.vo,i)){const n=this.vo[i];if(Object.hasOwnProperty.call(n,t))return n[t].damage[Math.min(e-1,6)]}throw new Error("Cannot find weapon:: "+t)}getWeaponCategory(t){for(const e in this.vo)if(Object.hasOwnProperty.call(this.vo,e)){const i=this.vo[e];if(Object.hasOwnProperty.call(i,t))return e}throw new Error("Cannot category for weapon:: "+t)}}const{Proxy:f}=i(710),{StoryVO:A}=i(553);class N extends f{get vo(){return this.getData()}static get NAME(){return"StoryProxy"}constructor(){const t=pc.Application.getApplication(),e=t.assets.get(40529920).resource.trees,i=new Map;for(const n in e)if(Object.hasOwnProperty.call(e,n)){const o=e[n],s=t.assets.get(o).resource;i.set(n,s)}super(N.NAME,i),this.currentTree=void 0,this.currentNode=void 0,this.currentStepIndex=0,this.currentConditions=[]}getTree(t){return this.vo.has(t)?this.vo.get(t):void 0}getNode(t,e){const i=t.nodes;return Object.hasOwnProperty.call(i,e)?i[e]:void 0}getStep(t,e){const i=t.steps;return e<i.length?i[e]:void 0}goToNode(t){this.currentNode=t,this.currentStepIndex=0}startDialogueTree(t){this.currentTree=t,this.currentNode="entry",this.currentStepIndex=0;const e=this.getTree(this.currentTree);if(!e)throw Error(`Cannot start dialogue: Tree ${this.currentTree} not found`);if(!this.getNode(e,this.currentNode))throw Error('Cannot start dialogue: no "entry" node defined on '+t);return e}getCurrentNodeStep(){const t=this.getTree(this.currentTree),e=this.getNode(t,this.currentNode),i=this.getValidStep(e,this.currentStepIndex);if(i&&i.once){const t=this.getConditionStringForStep(this.currentTree,this.currentNode,this.currentStepIndex);this.addCondition(t)}return i}continueCurrentNodeStep(){const t=this.getTree(this.currentTree),e=this.getNode(t,this.currentNode);this.currentStepIndex++;const i=this.getValidStep(e,this.currentStepIndex);if(i&&i.once){const t=this.getConditionStringForStep(this.currentTree,this.currentNode,this.currentStepIndex);this.addCondition(t)}return i}getValidStep(t,e){let i=this.getStep(t,e);if(i){let n=[];if(i.conditions&&(n=n.concat(i.conditions)),i.once){const t=this.getInvertedConditionStringForStep(this.currentTree,this.currentNode,e);n=n.concat(t),console.log("Test valid step"),console.log(n)}return this.testConditions(n)?i:(this.currentStepIndex=e+1,this.getValidStep(t,this.currentStepIndex))}return i}getConditionStringForStep(t,e,i){return`${t}${e}${i}`}getInvertedConditionStringForStep(t,e,i){return`!${t}${e}${i}`}selectChoice(t){return this.getCurrentNodeStep().choices[t]}addCondition(t){-1===this.currentConditions.indexOf(t)&&this.currentConditions.push(t)}removeCondition(t){const e=this.currentConditions.indexOf(t);e>-1&&this.currentConditions.splice(e,1)}testConditions(t){let e=!0;for(const i of t){const t="||",n=i.split(t);if(n.length>1){let t=!1;for(const e of n)this.checkCondition(e)&&(t=!0);e&&(e=t)}else e&&(e=this.checkCondition(i))}return e}checkCondition(t){let e=!0;if(t.startsWith("!")){const i=t.slice(1,t.length);this.currentConditions.indexOf(i)>-1&&(e=!1)}else if(t.startsWith("+")){const i=t.slice(1,t.length);this.addCondition(i),e=!0}else if(t.startsWith("-")){const i=t.slice(1,t.length);this.removeCondition(i),e=!0}else-1===this.currentConditions.indexOf(t)&&(e=!1);return e}}const{Proxy:T}=i(710),{InventoryVO:_}=i(713);class C extends T{get vo(){return this.getData()}static get NAME(){return"InventoryProxy"}constructor(){super(C.NAME,new _)}get inventoryItems(){return this.vo.inventoryItems}set inventoryItems(t){this.vo.inventoryItems=t}get equipmentSlots(){return this.vo.equipmentSlots}reorderInventoryItem(t,e){const i=this.inventoryItems.findIndex((e=>e.uuid===t)),n=this.inventoryItems.splice(i,1);let o=0,s=0;for(let t=0;t<this.inventoryItems.length;t++){const i=this.inventoryItems[t];e>=o&&e<o+i.size&&(s=t),o+=i.size}if(e>=o&&(s=this.inventoryItems.length),"[object Array]"!==Object.prototype.toString.call(this.inventoryItems))throw new Error("Please provide a valid array");if(!n.length)throw new Error("There is no item in the array at index "+i);this.inventoryItems.splice(s,0,n[0])}attemptToEquipItemToSlot(t,e){if(("1hand"===t||"2hand"===t)&&"weapon"===e.type){const i=this.equipmentSlots.get(t);if(i&&"2hand"===i.equipSlot&&(this.equipmentSlots.delete("1hand"),this.equipmentSlots.delete("2hand")),"1hand"===e.equipSlot){if(this.equipmentSlots.set(t,e),"1hand"===t){const t=this.equipmentSlots.get("2hand");t&&t.uuid===e.uuid&&this.equipmentSlots.delete("2hand")}else if("2hand"===t){const t=this.equipmentSlots.get("1hand");t&&t.uuid===e.uuid&&this.equipmentSlots.delete("1hand")}}else this.equipmentSlots.set("1hand",e),this.equipmentSlots.set("2hand",e);return!0}return"armour"===t&&"armour"===e.type&&(this.equipmentSlots.set(t,e),!0)}addInventoryItem(t){this.inventoryItems.push(t)}getEquippedItem(t){return this.equipmentSlots.get(t)}}const{Proxy:M}=i(710);class v extends M{get vo(){return this.getData()}static get NAME(){return"ItemsProxy"}constructor(t){super(v.NAME,t)}getItemData(t){for(const e in this.vo)if(Object.hasOwnProperty.call(this.vo,e)){const i=this.vo[e];if(console.log(i),Object.hasOwnProperty.call(i,t))return{id:t,type:e,...this.vo[e][t]}}throw new Error("Cannot find data for item:: "+t)}}const{Proxy:I}=i(710),{BotBehavioursVO:S}=i(812);class P extends I{get vo(){return this.getData()}static get NAME(){return"BotBehaviourProxy"}constructor(){super(P.NAME,new S)}getTree(t){return this.vo.getTree(t)}}const{Facade:O}=i(710);function b(t,e){O.getInstance(t).registerProxy(new y.u);const i=pc.Application.getApplication();if(i){const e=i.assets.get(40415631).resource;O.getInstance(t).registerProxy(new g(e));const o=i.assets.get(40814027).resource;O.getInstance(t).registerProxy(new v(o)),O.getInstance(t).registerProxy(new N),O.getInstance(t).registerProxy(new C),O.getInstance(t).registerProxy(new P),O.getInstance(t).sendNotification(n.i.ADD_ITEM_TO_INVENTORY,"sword"),O.getInstance(t).sendNotification(n.i.ADD_ITEM_TO_INVENTORY,"pistolet"),O.getInstance(t).sendNotification(n.i.ADD_ITEM_TO_INVENTORY,"fusil"),O.getInstance(t).sendNotification(n.i.ADD_ITEM_TO_INVENTORY,"chainmail"),O.getInstance(t).sendNotification(n.i.ADD_ITEM_TO_INVENTORY,"shield"),O.getInstance(t).sendNotification(n.i.EQUIP_ITEM_TO_SLOT,"unarmed","1hand"),O.getInstance(t).sendNotification(n.i.EQUIP_ITEM_TO_SLOT,"unarmed","2hand")}}const{Facade:x}=i(710);function L(t,e,...i){const o=pc.Application.getApplication(),s=i[0],r=i[1];console.log("Changing scene "+s);const a=o.root.findByName("Root"),c=o.scenes.find(s);o.scenes.loadSceneHierarchy(c.url,(function(e,i){e?console.error(e):a&&a.destroy(),x.getInstance(t).sendNotification(n.i.CHANGE_SCENE_COMPLETE,s),x.getInstance(t).sendNotification(n.i.PARSE_GAMEMAP,s),x.getInstance(t).sendNotification(n.i.ADD_PLAYER_CHARACTER_TO_MAP,r)}))}function D(t){let e=t.length,i=void 0,n=-1;for(;0!==e;)n=Math.floor(Math.random()*e),e-=1,i=t[e],t[e]=t[n],t[n]=i;return t}var w=i(958);const{Proxy:R}=i(710),{CombatVO:G}=i(201);class k extends R{get vo(){return this.getData()}static get NAME(){return"CombatProxy"}constructor(t,e){super(k.NAME,new G(t,e))}onRegister(){const t=[...this.vo.participants];this.participantProxies=new Map;for(const e of t){const t=this.facade.retrieveProxy(w.b.NAME+e);t.isDead?this.vo.participants=this.vo.participants.filter((t=>t!==e)):this.participantProxies.set(e,t)}}nextTurn(){const t=this.vo.roundInitiative;if(t&&t.length>0){const e=t.shift();if(this.vo.activeParticipant=e,"end_round"!==e){this.facade.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Turn "+e);const t=this.participantProxies.get(e);t.resetCombatTurnState(),t.isNPC?this.facade.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,e):this.facade.sendNotification(n.i.AWAIT_PLAYER_COMBAT_INPUT,e)}else this.facade.sendNotification(n.i.SHOW_TOAST_MESSAGE,"End round"),setTimeout((()=>{this.facade.sendNotification(n.i.NEXT_COMBAT_ROUND)}),3e3)}}nextRound(){console.log("/////////////////"),console.log("//  New round  //"),console.log("/////////////////");const t=[];for(const[e,i]of this.participantProxies.entries()){const n=i.vo;for(let i=0;i<n.initiative;i++)t.push(e)}if(0===t.length)return void this.facade.sendNotification(n.i.END_COMBAT);t.push("end_round");let e=D(t);for(;"end_round"===e[0];)e=D(e);this.vo.roundInitiative=e}get nextTurnCharacterId(){return this.vo.nextTurnCharacterId}get activeParticipant(){return this.vo.activeParticipant}set activeParticipant(t){this.vo.activeParticipant=t}get participants(){return this.vo.participants}get teams(){return this.vo.teams}removeCharacterFromCombat(t){this.participantProxies.delete(t),this.vo.roundInitiative=this.vo.roundInitiative.filter((e=>e!==t));for(const[e,i]of this.teams.entries()){const o=i.indexOf(t);o>-1&&i.splice(o,1),0===i.length&&this.facade.sendNotification(n.i.END_COMBAT,e)}}}var U=i(448);const{Facade:H}=i(710);function V(t,e,...i){const o=i[0],s=H.getInstance(t);s.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Start Combat"),s.retrieveProxy(y.u.NAME).updateGameStateType(U.gameplayModeTypes.COMBAT);const r=s.retrieveProxy(w.b.NAME+o);s.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"spotted",r);const a=new Map,c=["player"];a.set("player_team",c);const h=[o].concat(r.combatGroup).filter((function(t,e,i){return i.indexOf(t)==e}));a.set("opposing_team",h);const d=c.concat(h),l=s.retrieveProxy(w.b.NAME+"player");for(const t of d)s.sendNotification(n.i.END_MOVEMENT+t),"player"!==t?s.sendNotification(n.i.CHARACTER_LOOK_AT+t,l.currentNode):s.sendNotification(n.i.CHARACTER_LOOK_AT+t,r.currentNode);const p=new k(d,a);s.registerProxy(p),setTimeout((()=>{s.sendNotification(n.i.NEXT_COMBAT_ROUND)}),2e3)}const{Facade:B}=i(710);function F(t,e,...i){const n=B.getInstance(t),o=n.retrieveProxy(y.u.NAME),s=n.retrieveProxy(k.NAME);o.vo.gameplayMode===U.gameplayModeTypes.COMBAT&&s.nextTurn()}const{Facade:z}=i(710);function q(t,e,...i){const o=z.getInstance(t),s=o.retrieveProxy(y.u.NAME),r=o.retrieveProxy(k.NAME);s.vo.gameplayMode===U.gameplayModeTypes.COMBAT&&(r.nextRound(),o.sendNotification(n.i.NEXT_COMBAT_TURN,r.vo.nextTurnCharacterId))}const{Facade:Y}=i(710);function W(t,e,...i){setTimeout((()=>{const e=Y.getInstance(t),i=e.retrieveProxy(k.NAME);e.sendNotification(n.i.HIDE_WALKABLE_AREA),e.sendNotification(n.i.NEXT_COMBAT_TURN,i.nextTurnCharacterId)}),500)}var K=i(226);const{Facade:j}=i(710);function Q(t,e,...i){const n=i[0],o=j.getInstance(t),r=(o.retrieveProxy(s.h.NAME),o.retrieveProxy(w.b.NAME+n).currentNode);o.retrieveProxy(w.b.NAME+"player").currentNode.connectedNodes.some((t=>t.equals(r))),(new K.o).runCommands(o,n)}var $=i(710);function X(t,e,...i){const o=$.Facade.getInstance(t),r=o.retrieveProxy(y.u.NAME),a=o.retrieveProxy(s.h.NAME),c=i[0];a.hasValidNode(c)&&(r.currentMode===U.gameplayModeTypes.EXPLORATION?o.sendNotification(n.i.NAVIGATE_TO_WAYPOINT+"player",c):r.currentMode===U.gameplayModeTypes.COMBAT&&"player"===o.retrieveProxy(k.NAME).activeParticipant&&o.sendNotification(n.i.COMBAT_NAVIGATE_TO_NODE,"player",c))}const{Facade:J}=i(710);function Z(t,e,...i){const n=J.getInstance(t),o=i[0],s=i[1],a=n.retrieveProxy(w.b.NAME+o),c=a.vo,h=r.q.breadthFirstSearch(c.currentNode,c.availableMovement);for(const t of h)t.equals(s)&&tt(n,a,s)}function tt(t,e,i){const o=e.vo,s=r.q.calculatePath(o.currentNode,i);s&&s.length>0&&(o.availableMovement-=s.length-1,e.currentNode=i,t.sendNotification(n.i.HIDE_WALKABLE_AREA),t.sendNotification(n.i.NAVIGATE_ALONG_PATH+o.id,s))}function et(t,e,...i){const n=i[0],o=pc.Application.getApplication(),s=o.assets.get(40235966),r=o.root.findByName("WorldObjects");for(const t of n){const e=s.resource.instantiate();e.setLocalPosition(t.x,t.y,t.z),r.addChild(e)}}function it(t,e,...i){const n=pc.Application.getApplication().root.findByTag("walkable_tile");for(const t of n)t.destroy()}function nt(t,e,...i){const o=i[0],s=$.Facade.getInstance(t),a=s.retrieveProxy(w.b.NAME+o).vo,c=r.q.breadthFirstSearch(a.currentNode,a.availableMovement);s.sendNotification(n.i.SHOW_WALKABLE_AREA,c)}function ot(t,e,...i){const o=$.Facade.getInstance(t),s=i[0],r=i[1];if(o.retrieveProxy(w.b.NAME+s).currentNode=r,o.retrieveProxy(y.u.NAME).currentMode===U.gameplayModeTypes.COMBAT){const t=o.retrieveProxy(k.NAME);t&&("player"===t.activeParticipant?o.sendNotification(n.i.AWAIT_PLAYER_COMBAT_INPUT,s):setTimeout((()=>{o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,s)}),500))}}var st=i(467);function rt(t,e,...i){const o=$.Facade.getInstance(t),a=i[0].script.GameCharacterComponent.characterId,c=o.retrieveProxy(y.u.NAME),h=o.retrieveProxy(s.h.NAME),d=o.retrieveProxy(w.b.NAME+a),l=o.retrieveProxy(w.b.NAME+"player"),p=o.retrieveProxy(g.NAME).getWeaponCategory(l.equippedWeapon);if(c.currentMode===U.gameplayModeTypes.EXPLORATION)"attack"===c.currentAction&&"ranged"===p?at(h,l,d)?(o.sendNotification(n.i.RESOLVE_RANGED_ATTACK,"player",a),o.sendNotification(n.i.START_COMBAT,a)):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"No line of sight"):"attack"===c.currentAction?o.sendNotification(n.i.NAVIGATE_TO_CHARACTER_AND_ATTACK,a):o.sendNotification(n.i.NAVIGATE_TO_CHARACTER_AND_TALK,a);else if(c.currentMode===U.gameplayModeTypes.COMBAT){const t=o.retrieveProxy(k.NAME);if(!t||"player"!==t.activeParticipant)return;if(l.availableActions<=0)return void o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Out of actions");if("ranged"===p)at(h,l,d)?o.sendNotification(n.i.RESOLVE_RANGED_ATTACK,"player",a):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"No line of sight");else if(function(t,e){const i=e.currentNode;return t.currentNode.connectedNodes.some((t=>t.equals(i)))}(l,d))"attack"===c.currentAction&&"attack"===c.currentAction&&o.sendNotification(n.i.RESOLVE_ATTACK,l.id,d.id);else{const t=function(t,e){const i=e.currentNode.connectedNodes.filter((t=>!t.occupied));if(i.length>0){const e=t.currentNode;let n=r.q.calculatePath(e,i[0]);for(let t=1;t<i.length;t++){const o=r.q.calculatePath(e,i[t]);o.length<n.length&&(n=o)}return n}}(l,d);t&&t.length-1<=l.vo.availableMovement?"attack"===c.currentAction?o.sendNotification(n.i.MOVE_ALONG_PATH_AND_ATTACK,"player",d.id,t):o.sendNotification(n.i.COMBAT_NAVIGATE_TO_NODE,"player",t.shift()):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Cannot reach target")}}}function at(t,e,i){const n=(0,st.z)(e),o=(0,st.z)(i);return!t.rayIntersectsWall(n,o)}var ct=i(829);function ht(t,e,...i){const o=$.Facade.getInstance(t),s=i[0],r=o.retrieveProxy(w.b.NAME+s),a=i[1],c=o.retrieveProxy(w.b.NAME+a);o.sendNotification(n.i.CHARACTER_LOOK_AT+s,c.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+a,r.currentNode);const h=o.retrieveProxy(g.NAME),d=r.equippedWeapon+"Fighting",l=c.equippedWeapon+"Fighting",p=r.getSkillTotal(d),u=r.getSkillTotal(l),E=lt(p),y=lt(u);if(r.availableActions-=1,E===y)o.sendNotification(n.i.DISPLAY_ATTACK+s),o.sendNotification(n.i.DISPLAY_ATTACK+a),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`Attack tied(${E}/${y})`);else if(E>y){const t=dt(E,y),e=h.getDamage(r.equippedWeapon,t);c.applyDamage(e),o.sendNotification(n.i.DISPLAY_ATTACK+s),c.isDead?o.sendNotification(n.i.KILL_GAME_CHARACTER,a):(o.sendNotification(n.i.DISPLAY_HIT+a),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${s} damages ${a} for ${e}`))}else{const t="melee"===h.getWeaponCategory(c.equippedWeapon),e=dt(y,E),i=t?c.equippedWeapon:ct.j.UNARMED,d=h.getDamage(i,e);r.applyDamage(d),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${a} damages ${s} for ${d}`),o.sendNotification(n.i.DISPLAY_ATTACK+a),r.isDead?o.sendNotification(n.i.KILL_GAME_CHARACTER,s):o.sendNotification(n.i.DISPLAY_HIT+s)}const m=o.retrieveProxy(k.NAME);m&&"player"!==m.activeParticipant&&setTimeout((()=>{o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,s)}),1500)}function dt(t,e){return t-e}function lt(t){return t+pt()+pt()}function pt(){return Math.round(6*Math.random())}var ut=i(321);const{Facade:Et}=i(710);function yt(t,e,...i){const o=Et.getInstance(t),s=i[0],r=i[1],a=i[2];o.retrieveProxy(w.b.NAME+s).useMovement(a.length-1);const c=o.retrieveMediator(ut.y.NAME+s);o.sendNotification(n.i.HIDE_WALKABLE_AREA),c.handleNavigateAlongPathWithPromise(a).then((()=>{o.sendNotification(n.i.RESOLVE_ATTACK,s,r)}))}function mt(t,e,...i){const o=$.Facade.getInstance(t),s=i[0];console.log("Kill character:: "+s);const r=o.retrieveProxy(w.b.NAME+s);o.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"death",r),o.sendNotification(n.i.DISPLAY_DEATH+s),r&&(r.currentStamina=0,r.currentNode.occupied=!1);const a=o.retrieveProxy(k.NAME);a&&a.removeCharacterFromCombat(s)}const{Facade:gt}=i(710);function ft(t,e,...i){const o=i[0],s=gt.getInstance(t);s.hasMediator(k.NAME)&&s.removeMediator(k.NAME),s.sendNotification(n.i.HIDE_WALKABLE_AREA);const r=s.retrieveProxy(y.u.NAME);"player_team"===o?(r.updateGameStateType(U.gameplayModeTypes.GAME_OVER),s.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Game Over")):(r.updateGameStateType(U.gameplayModeTypes.EXPLORATION),s.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Victory"))}function At(t,e,...i){const n=$.Facade.getInstance(t),o=i[0],s=n.retrieveProxy(w.b.NAME+o),r=n.retrieveProxy(P.NAME).getTree(s.botBehaviour);r&&r.runCommands(n,o)}i(316),i(744);var Nt=i(852);function Tt(t,e,...i){const o=$.Facade.getInstance(t);let r=0,a=0;const c=i[0],h=o.retrieveProxy(w.b.NAME+c),d=h.currentNode;let l=i[1],p=o.retrieveProxy(w.b.NAME+l);const u=p.currentNode;o.sendNotification(n.i.CHARACTER_LOOK_AT+c,p.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+l,h.currentNode);const E=h.equippedWeapon+"Fighting",y=h.getSkillTotal(E);r+=_t(y),a+=_t(p.skill);const m=o.retrieveProxy(g.NAME);o.retrieveProxy(s.h.NAME).isInCover(new pc.Vec3(u.x,u.y,u.z),new pc.Vec3(d.x,d.y,d.z))&&(a+=2);const f=o.retrieveMediator(Nt.N.NAME),A=new pc.Vec3(h.currentNode.x,h.currentNode.y+1,h.currentNode.z),N=new pc.Vec3(p.currentNode.x,p.currentNode.y+1,p.currentNode.z);h.availableActions-=1,o.sendNotification(n.i.DISPLAY_ATTACK+c),f.createProjectile("crossbow_bolt",A,N).then((()=>{if(r>a){const t=o.retrieveProxy(k.NAME);if(t){const e=p.currentNode.connectedNodes,i=[l];for(const n of t.participants){const t=o.retrieveProxy(w.b.NAME+n);!t.isDead&&e.some((e=>e.equals(t.currentNode)))&&i.push(n)}l=i[Math.floor(Math.random()*i.length)],p=o.retrieveProxy(w.b.NAME+l)}const e=r-a,i=m.getDamage(h.equippedWeapon,e);p.applyDamage(i),p.isDead?o.sendNotification(n.i.KILL_GAME_CHARACTER,l):(o.sendNotification(n.i.DISPLAY_HIT+l),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${c} damages ${l} for ${i}`))}else o.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"dodge",p);const t=o.retrieveProxy(k.NAME);t&&"player"!==t.activeParticipant&&setTimeout((()=>{o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,c)}),500)}))}function _t(t){return t+Ct()+Ct()}function Ct(){return Math.round(6*Math.random())}const{Facade:Mt}=i(710);function vt(t,e,...i){const o=Mt.getInstance(t);if(o.retrieveProxy(y.u.NAME).currentMode===U.gameplayModeTypes.COMBAT&&"player"!==o.retrieveProxy(k.NAME).activeParticipant)return void o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Must change weapon on your turn");const s=i[0],r=i[1],a=o.retrieveProxy(w.b.NAME+s);a&&(a.equippedWeapon=r,o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${s} equips ${r}`))}function It(t,e,...i){const o=$.Facade.getInstance(t),r=i[0],a=i[1],c=i[2],h=o.retrieveProxy(s.h.NAME).findNearestNode(r);o.retrieveMediator(ut.y.NAME+"player").moveToNodeWithPromise(h).then((()=>{o.sendNotification(n.i.CHANGE_SCENE,a,c)}))}const{Facade:St}=i(710);function Pt(t,e,...i){const n=St.getInstance(t),o=i[0],r=pc.Application.getApplication(),a=r.assets.get(40523336),c=r.root.findByName("WorldObjects"),h=a.resource.instantiate();c.addChild(h);const d=n.retrieveProxy(s.h.NAME).retrievePortal(o);h.setLocalPosition(d.standingPoint)}const{Facade:Ot}=i(710);function bt(t,e,...i){const o=Ot.getInstance(t),s=i[0],a=o.retrieveProxy(w.b.NAME+"player"),c=o.retrieveProxy(w.b.NAME+s),h=o.retrieveMediator(ut.y.NAME+"player"),d=function(t,e){const i=e.currentNode.connectedNodes,n=t.currentNode;if(i.some((t=>t.equals(n))))return[n];{const t=i.filter((t=>!t.occupied));if(t.length>0){let e=r.q.calculatePath(n,t[0]);for(let i=1;i<t.length;i++){const o=r.q.calculatePath(n,t[i]);(!e||o&&o.length<e.length)&&(e=o)}return e}return}}(a,c);d&&h.handleNavigateAlongPathWithPromise(d).then((()=>{o.sendNotification(n.i.START_DIALOGUE,s)}))}const{Facade:xt}=i(710);function Lt(t,e,...i){const o=xt.getInstance(t),s=o.retrieveProxy(y.u.NAME),r=i[0],a=o.retrieveProxy(N.NAME),c=o.retrieveProxy(w.b.NAME+"player"),h=o.retrieveProxy(w.b.NAME+r),d=h.dialogueTree;a.startDialogueTree(d),s.updateGameStateType(U.gameplayModeTypes.DIALOGUE),o.sendNotification(n.i.CHARACTER_LOOK_AT+"player",h.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+r,c.currentNode),o.sendNotification(n.i.SHOW_DIALOGUE_PANEL);const l=a.getCurrentNodeStep();o.sendNotification(n.i.DISPLAY_DIALOGUE_STEP,{treeId:d,step:l})}function Dt(t,e,...i){const o=$.Facade.getInstance(t),s=o.retrieveProxy(N.NAME),r=s.continueCurrentNodeStep();if(r){if(r.choices?o.sendNotification(n.i.HIDE_DIALOGUE_CONTINUE_BUTTON):o.sendNotification(n.i.SHOW_DIALOGUE_CONTINUE_BUTTON),r.notifications)for(const t of r.notifications)o.sendNotification(t.name,...t.args);o.sendNotification(n.i.DISPLAY_DIALOGUE_STEP,{treeId:s.currentTree,step:r})}else o.sendNotification(n.i.END_DIALOGUE)}function wt(t,e,...i){const o=$.Facade.getInstance(t),s=i[0],r=o.retrieveProxy(N.NAME),a=r.selectChoice(s);o.sendNotification(n.i.CLEAR_DIALOGUE_CHOICES);const c={title:"YOU",text:a.text,titleColour:"#DB831C"};o.sendNotification(n.i.DISPLAY_DIALOGUE_STEP,{treeId:r.currentTree,step:c}),a.test?o.sendNotification(n.i.RESOLVE_DIALOGUE_SKILL_TEST,a.test):a.goto&&o.sendNotification(n.i.GO_TO_DIALOGUE_NODE,a.goto)}function Rt(t,e,...i){const o=$.Facade.getInstance(t),s=o.retrieveProxy(N.NAME),r=i[0];s.goToNode(r);const a=s.getCurrentNodeStep();if(a){if(o.sendNotification(n.i.SHOW_DIALOGUE_CONTINUE_BUTTON),o.sendNotification(n.i.DISPLAY_DIALOGUE_STEP,{treeId:s.currentTree,step:a}),console.log("*****"),console.log(a),a.notifications)for(const t of a.notifications)console.log("SHOOT COMMAND: "+t.name),o.sendNotification(t.name,...t.args)}else o.sendNotification(n.i.END_DIALOGUE)}const{Facade:Gt}=i(710);function kt(t,e,...i){const o=Gt.getInstance(t);o.retrieveProxy(y.u.NAME).updateGameStateType(U.gameplayModeTypes.EXPLORATION),o.sendNotification(n.i.HIDE_DIALOGUE_PANEL)}const{Facade:Ut}=i(710);function Ht(t,e,...i){const o=Ut.getInstance(t),s=i[0],a=o.retrieveProxy(w.b.NAME+"player"),c=o.retrieveProxy(w.b.NAME+s),h=o.retrieveMediator(ut.y.NAME+"player"),d=function(t,e){const i=e.currentNode.connectedNodes,n=t.currentNode;if(i.some((t=>t.equals(n))))return[n];{const t=i.filter((t=>!t.occupied));if(t.length>0){let e=r.q.calculatePath(n,t[0]);for(let i=1;i<t.length;i++){const o=r.q.calculatePath(n,t[i]);o.length<e.length&&(e=o)}return e}return}}(a,c);d&&h.handleNavigateAlongPathWithPromise(d).then((()=>{o.sendNotification(n.i.START_COMBAT,s),o.sendNotification(n.i.RESOLVE_ATTACK,"player",s)}))}const{Facade:Vt}=i(710);function Bt(t,e,...i){const n=Vt.getInstance(t),o=i[0];n.retrieveProxy(y.u.NAME).currentAction=o}function Ft(t,e,...i){const o=$.Facade.getInstance(t),s=i[0],r=o.retrieveProxy(w.b.NAME+"player").getSkillTotal(s.skill),a=zt(),c=zt(),h=r>=a+c;o.sendNotification(n.i.DISPLAY_DIALOGUE_SKILL_TEST,s.skill,r,a,c,h),h?(console.log(`Succeeded ${s.skill} with a ${r} vs ${a}+${c}`),o.sendNotification(n.i.GO_TO_DIALOGUE_NODE,s.success.goto)):(console.log(`Failed ${s.skill} with a ${r} vs ${a}+${c}`),o.sendNotification(n.i.GO_TO_DIALOGUE_NODE,s.failure.goto))}function zt(){return Math.round(6*Math.random())}const{Facade:qt}=i(710);function Yt(t,e,...i){const o=qt.getInstance(t),s=o.retrieveProxy(C.NAME);o.sendNotification(n.i.DISPLAY_INVENTORY_PANEL,s.inventoryItems,s.equipmentSlots)}const{Facade:Wt}=i(710);function Kt(t,e,...i){const o=Wt.getInstance(t),s=o.retrieveProxy(C.NAME),r=i[0],a=i[1];s.reorderInventoryItem(r,a),o.sendNotification(n.i.DISPLAY_INVENTORY_PANEL,s.inventoryItems,s.equipmentSlots)}var jt=i(340);function Qt(t,e,...i){const o=$.Facade.getInstance(t),s=o.retrieveProxy(C.NAME),r=i[0],a=i[1],c=s.inventoryItems.find((t=>t.id===r));if(c)s.attemptToEquipItemToSlot(a,c)&&"weapon"===c.type&&o.sendNotification(n.i.EQUIP_WEAPON,"player",c.id);else{const t=o.retrieveProxy(v.NAME),e=o.retrieveProxy(C.NAME),i=new jt.R(t.getItemData(r));e.attemptToEquipItemToSlot(a,i)&&"weapon"===i.type&&o.sendNotification(n.i.EQUIP_WEAPON,"player",i.id)}o.sendNotification(n.i.DISPLAY_EQUIPPED_SLOT,s.equipmentSlots),o.sendNotification(n.i.DISPLAY_INVENTORY_PANEL,s.inventoryItems,s.equipmentSlots)}const{Facade:$t}=i(710);function Xt(t,e,...i){const n=i[0],o=$t.getInstance(t),s=o.retrieveProxy(v.NAME),r=o.retrieveProxy(C.NAME),a=new jt.R(s.getItemData(n));r.addInventoryItem(a)}const{Facade:Jt}=i(710);function Zt(t,e,...i){const o=Jt.getInstance(t),s=o.retrieveProxy(C.NAME),r=o.retrieveProxy(y.u.NAME),a=i[0],c=s.getEquippedItem(a);c&&"weapon"===c.type&&("attack"!==r.currentAction?(o.sendNotification(n.i.EQUIP_WEAPON,"player",c.id),r.currentAction="attack",o.sendNotification(n.i.SET_USE_ITEM_BUTTON_HIGHLIGHT,a,!0)):(r.currentAction="interact",o.sendNotification(n.i.SET_USE_ITEM_BUTTON_HIGHLIGHT,a,!1)))}const{Facade:te}=i(710);class ee extends te{static getInstance(t){return te.instanceMap[t]||(te.instanceMap[t]=new ee(t)),te.instanceMap[t]}static get KEY(){return"Cacogen"}static get NAME(){return"CacogenFacade"}static get STARTUP(){return ee.NAME+"StartUp"}startup(t){this.sendNotification(ee.STARTUP,t)}sendNotification(t,...e){super.sendNotification(t,...e)}initializeController(){super.initializeController(),this.registerCommand(ee.STARTUP,b),this.registerCommand(n.i.CHANGE_SCENE,L),this.registerCommand(n.i.PARSE_GAMEMAP,c),this.registerCommand(n.i.START_COMBAT,V),this.registerCommand(n.i.NEXT_COMBAT_TURN,F),this.registerCommand(n.i.NEXT_COMBAT_ROUND,q),this.registerCommand(n.i.END_COMBAT_TURN,W),this.registerCommand(n.i.ENEMY_TURN,Q),this.registerCommand(n.i.SELECTED_NODE,X),this.registerCommand(n.i.COMBAT_NAVIGATE_TO_NODE,Z),this.registerCommand(n.i.DETERMINE_NEXT_ENEMY_ACTION,At),this.registerCommand(n.i.SHOW_WALKABLE_AREA,et),this.registerCommand(n.i.HIDE_WALKABLE_AREA,it),this.registerCommand(n.i.AWAIT_PLAYER_COMBAT_INPUT,nt),this.registerCommand(n.i.FINISHED_MOVE,ot),this.registerCommand(n.i.SELECT_GAME_CHARACTER,rt),this.registerCommand(n.i.RESOLVE_ATTACK,ht),this.registerCommand(n.i.RESOLVE_RANGED_ATTACK,Tt),this.registerCommand(n.i.MOVE_ALONG_PATH_AND_ATTACK,yt),this.registerCommand(n.i.NAVIGATE_TO_CHARACTER_AND_ATTACK,Ht),this.registerCommand(n.i.KILL_GAME_CHARACTER,mt),this.registerCommand(n.i.END_COMBAT,ft),this.registerCommand(n.i.EQUIP_WEAPON,vt),this.registerCommand(n.i.NAVIGATE_THROUGH_PORTAL,It),this.registerCommand(n.i.ADD_PLAYER_CHARACTER_TO_MAP,Pt),this.registerCommand(n.i.NAVIGATE_TO_CHARACTER_AND_TALK,bt),this.registerCommand(n.i.START_DIALOGUE,Lt),this.registerCommand(n.i.CONTINUE_DIALOGUE_NODE,Dt),this.registerCommand(n.i.SELECT_DIALOGUE_CHOICE,wt),this.registerCommand(n.i.GO_TO_DIALOGUE_NODE,Rt),this.registerCommand(n.i.END_DIALOGUE,kt),this.registerCommand(n.i.GAMEPLAY_ACTION_CHANGED,Bt),this.registerCommand(n.i.RESOLVE_DIALOGUE_SKILL_TEST,Ft),this.registerCommand(n.i.CLICK_INVENTORY_BUTTON,Yt),this.registerCommand(n.i.REORDER_INVETORY_ITEM,Kt),this.registerCommand(n.i.EQUIP_ITEM_TO_SLOT,Qt),this.registerCommand(n.i.ADD_ITEM_TO_INVENTORY,Xt),this.registerCommand(n.i.USE_EQUIPPED_ITEM,Zt)}}},316:(t,e,i)=>{i.d(e,{r:()=>n,_:()=>o});class n{static get NONE(){return 0}static get BASIC_MELEE(){return 1}static get BASIC_RANGED(){return 2}}const o=[{NONE:n.NONE},{BASIC_MELEE:n.BASIC_MELEE},{BASIC_RANGED:n.BASIC_RANGED}]},623:(t,e,i)=>{i.d(e,{P:()=>r});var n=i(379),o=i(935),s=i(68);class r extends n.H{tick(t){return t.blackboard.get("facade",!1,!1).sendNotification(s.i.END_COMBAT_TURN),o.d.SUCCESS}}},488:(t,e,i)=>{i.d(e,{o:()=>s});var n=i(379),o=i(935);class s extends n.H{tick(t){return t.blackboard.set("target","player",t.tree.id,!1),o.d.SUCCESS}}},650:(t,e,i)=>{i.d(e,{s:()=>r});var n=i(379),o=i(935),s=i(958);class r extends n.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(s.b.NAME+i).availableActions>0?o.d.SUCCESS:o.d.FAILURE}}},658:(t,e,i)=>{i.d(e,{$:()=>r});var n=i(379),o=i(935),s=i(958);class r extends n.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(s.b.NAME+i).availableMovement>0?o.d.SUCCESS:o.d.FAILURE}}},94:(t,e,i)=>{i.d(e,{r:()=>r});var n=i(379),o=i(935),s=i(958);class r extends n.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(s.b.NAME+i).isDead?o.d.SUCCESS:o.d.FAILURE}}},30:(t,e,i)=>{i.d(e,{N:()=>r});var n=i(379),o=i(935),s=i(958);class r extends n.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("target",t.tree.id,!1);return e.retrieveProxy(s.b.NAME+i).isDead?o.d.SUCCESS:o.d.FAILURE}}},379:(t,e,i)=>{i.d(e,{H:()=>s});var n=i(935),o=i(217);class s{constructor(t){this.initialize(t)}initialize(t){this.id=(0,o.L)(),this.children=t||[]}execute(t){this._enter(t),t.blackboard.get("isOpen",t.tree.id,this.id)||this._open(t);const e=this._tick(t);return e!==n.d.RUNNING&&this._close(t),this._exit(t),e}_enter(t){t.enterNode(this),this.enter(t)}_open(t){t.openNode(this),t.blackboard.set("isOpen",!0,t.tree.id,this.id),this.open(t)}_tick(t){return t.tickNode(this),this.tick(t)}_close(t){t.closeNode(this),t.blackboard.set("isOpen",!1,t.tree.id,this.id),this.close(t)}_exit(t){t.exitNode(this),this.exit(t)}enter(t){}open(t){}tick(t){return n.d.ERROR}close(t){}exit(t){}}},935:(t,e,i)=>{i.d(e,{d:()=>n});class n{static get SUCCESS(){return 0}static get FAILURE(){return 1}static get RUNNING(){return 2}static get ERROR(){return 3}}},996:(t,e,i)=>{i.d(e,{q:()=>s});var n=i(379),o=i(935);class s extends n.H{tick(t){for(const e of this.children)e.execute(t);return o.d.SUCCESS}}},96:(t,e,i)=>{i.d(e,{_:()=>s});var n=i(379),o=i(935);class s extends n.H{open(t){t.blackboard.set("runningChild",0,t.tree.id,this.id)}tick(t){for(let e=t.blackboard.get("runningChild",t.tree.id,this.id);e<this.children.length;e++){let i=this.children[e].execute(t);if(i!==o.d.SUCCESS)return i===o.d.RUNNING&&t.blackboard.set("runningChild",e,t.tree.id,this.id),i}return o.d.SUCCESS}}},890:(t,e,i)=>{i.d(e,{U:()=>s});var n=i(379),o=i(935);class s extends n.H{tick(t){for(const e of this.children){const i=e.execute(t);if(i!==o.d.FAILURE)return i}return o.d.FAILURE}}},966:(t,e,i)=>{i.d(e,{M:()=>s});var n=i(379),o=i(935);class s extends n.H{tick(t){const e=this.children[0];if(!e)return o.d.ERROR;let i=e.execute(t);return i==o.d.SUCCESS?i=o.d.FAILURE:i==o.d.FAILURE&&(i=o.d.SUCCESS),i}}},226:(t,e,i)=>{i.d(e,{o:()=>M});var n=i(996),o=i(541),s=i(890),r=i(488),a=i(379),c=i(935),h=i(68);class d extends a.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1);return e.sendNotification(h.i.RESOLVE_ATTACK,i,n),c.d.SUCCESS}}var l=i(623),p=i(658),u=i(958);class E extends a.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=e.retrieveProxy(u.b.NAME+i).currentNode;return e.retrieveProxy(u.b.NAME+"player").currentNode.connectedNodes.some((t=>t.equals(n)))?c.d.SUCCESS:c.d.FAILURE}}var y=i(96),m=i(966),g=i(30),f=i(434);class A extends a.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1),o=e.retrieveProxy(u.b.NAME+i),s=o.currentNode,r=e.retrieveProxy(u.b.NAME+n).currentNode.connectedNodes.filter((t=>!t.occupied));if(r.length>0){let t=r.reduce(((t,e)=>N(s,t)<N(s,e)?t:e));const n=f.q.calculatePath(s,t);if(n&&n.length>0){const s=o.vo;for(;n.length>s.availableMovement;)n.shift();e.sendNotification(h.i.NAVIGATE_ALONG_PATH+i,n),o.currentNode=t}}else setTimeout((()=>{e.sendNotification(h.i.DETERMINE_NEXT_ENEMY_ACTION,i)}),500);return o.availableMovement=0,c.d.SUCCESS}}function N(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)}var T=i(94),_=i(650);class C extends a.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(u.b.NAME+i).availableMovement=0,c.d.SUCCESS}}class M extends o.p{constructor(){super("basicMeleeTree")}initialise(){this.tree.root=new n.q([new s.U([new y._([new r.o,new m.M([new T.r]),new m.M([new g.N]),new s.U([new y._([new E,new _.s,new r.o,new d,new C]),new y._([new p.$,new r.o,new A])])]),new l.P])])}}},744:(t,e,i)=>{i.d(e,{b:()=>P});var n=i(996),o=i(541),s=i(890),r=i(488),a=i(623),c=i(96),h=i(966),d=i(30),l=i(94),p=i(658),u=i(650),E=i(379),y=i(935),m=i(68);class g extends E.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1);return e.sendNotification(m.i.RESOLVE_RANGED_ATTACK,i,n),y.d.SUCCESS}}var f=i(958),A=i(434);class N extends E.H{constructor(t,e){super([]),this.minDistance=t,this.maxDistance=e}tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1),o=e.retrieveProxy(f.b.NAME+i),s=o.currentNode,r=e.retrieveProxy(f.b.NAME+n).currentNode,a=Math.pow(this.minDistance,2),c=Math.pow(this.maxDistance,2),h=o.availableMovement;o.availableMovement=0;const d=T(r,s);if(d>=a&&d<=c)return y.d.FAILURE;{const t=A.q.breadthFirstSearch(s,h);if(t.length>0){if(d<a){let n=t.reduce(((t,e)=>T(r,t)>T(r,e)?t:e));const a=A.q.calculatePath(s,n);a&&a.length>0&&(e.sendNotification(m.i.NAVIGATE_ALONG_PATH+i,a),o.currentNode=n)}else{let n=t.reduce(((t,e)=>T(r,t)<T(r,e)?t:e));const a=A.q.calculatePath(s,n);a&&a.length>0&&(e.sendNotification(m.i.NAVIGATE_ALONG_PATH+i,a),o.currentNode=n)}return y.d.SUCCESS}return y.d.FAILURE}}}function T(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)+Math.pow(e.z-t.z,2)}class _ extends E.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);setTimeout((()=>{e.sendNotification(m.i.DETERMINE_NEXT_ENEMY_ACTION,i)}),500)}}var C=i(969),M=i(467);class v extends E.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1),o=e.retrieveProxy(f.b.NAME+i),s=(o.currentNode,e.retrieveProxy(f.b.NAME+n)),r=(s.currentNode,e.retrieveProxy(C.h.NAME)),a=(0,M.z)(o),c=(0,M.z)(s);return r.rayIntersectsWall(a,c)?y.d.FAILURE:y.d.SUCCESS}}class I extends E.H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1),o=e.retrieveProxy(f.b.NAME+i),s=o.currentNode,r=e.retrieveProxy(f.b.NAME+n),a=r.currentNode.connectedNodes,c=e.retrieveProxy(C.h.NAME),h=a.filter((t=>!t.occupied));if(h.length>0){let t=h.reduce(((t,e)=>S(s,t)<S(s,e)?t:e));const n=A.q.calculatePath(s,t);if(n&&n.length>0){const s=o.vo;for(;n.length>s.availableMovement;)n.shift();const a=(0,M.z)(r);let h=0;for(let t=n.length-1;t>=0;t--){const e=n[t],i=new pc.Vec3(e.x,e.y+.5*o.height,e.z);if(!c.rayIntersectsWall(i,a)){h=t;break}}n.splice(0,h),e.sendNotification(m.i.NAVIGATE_ALONG_PATH+i,n),o.currentNode=t}}return o.availableMovement=0,y.d.SUCCESS}}function S(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)}class P extends o.p{constructor(){super("basicRangedTree")}initialise(){this.tree.root=new n.q([new s.U([new c._([new r.o,new h.M([new l.r]),new h.M([new d.N]),new s.U([new c._([new p.$,new h.M([new v]),new I]),new c._([new p.$,new s.U([new N(9,12),new _])]),new c._([new u.s,new v,new g])])]),new a.P])])}}},541:(t,e,i)=>{i.d(e,{p:()=>r});class n{constructor(){this.initialise()}initialise(){this.baseMemory={},this.treeMemory={}}getTreeMemory(t){return this.treeMemory[t]||(this.treeMemory[t]={nodeMemory:{},openNodes:[]}),this.treeMemory[t]}getNodeMemory(t,e){const i=t.nodeMemory;return i.hasOwnProperty(e)||(i[e]={}),i[e]}getMemory(t,e){var i=this.baseMemory;return t&&(i=this.getTreeMemory(t),e&&(i=this.getNodeMemory(i,e))),i}set(t,e,i,n){this.getMemory(i,n)[t]=e}get(t,e,i){return this.getMemory(e,i)[t]}}class o{constructor(){this.initialise()}initialise(){this.tree=void 0,this.openNodes=[],this.nodeCount=0,this.debug=void 0,this.target=void 0,this.blackboard=void 0}enterNode(t){this.nodeCount++,this.openNodes.push(t)}openNode(t){}tickNode(t){}closeNode(t){this.openNodes.pop()}exitNode(t){}}class s{constructor(t){this.initialise(t)}initialise(t){this.id=t,this.root=void 0}tick(t,e){const i=new o;i.target=t,i.blackboard=e,i.tree=this,this.root.execute(i);const n=e.get("openNodes",this.id)||[],s=i.openNodes.slice(0);let r=0;for(let t=0;t<Math.min(n.length,s.length)&&(r=t+1,n[t]===s[t]);t++);for(let t=n.length-1;t>=r;t--)n[t].close(i);e.set("openNodes",s,this.id),e.set("nodeCount",i.nodeCount,this.id)}}class r{constructor(t){this.id="basicMeleeTree",this.blackboard=new n,this.tree=new s(t),this.initialise()}initialise(){}runCommands(t,e){this.blackboard.set("facade",t,!1,!1),this.blackboard.set("characterId",e,this.tree.id,!1),this.tree.tick(this,this.blackboard)}}},68:(t,e,i)=>{i.d(e,{i:()=>n});class n{static get CHANGE_SCENE(){return"CHANGE_SCENE"}static get CHANGE_SCENE_COMPLETE(){return"CHANGE_SCENE_COMPLETE"}static get APP_INITIALISED(){return"APP_INITIALISED"}static get PARSE_GAMEMAP(){return"PARSE_GAMEMAP"}static get MAP_GRID_CREATED(){return"MAP_GRID_CREATED"}static get NAVIGATE_TO_NODE(){return"NAVIGATE_TO_NODE"}static get NAVIGATE_TO_WAYPOINT(){return"NAVIGATE_TO_WAYPOINT"}static get NAVIGATE_THROUGH_PORTAL(){return"NAVIGATE_THROUGH_PORTAL"}static get COMBAT_NAVIGATE_TO_NODE(){return"COMBAT_NAVIGATE_TO_NODE"}static get SET_CAMERA_TARGET(){return"SET_CAMERA_TARGET"}static get INPUT_DRAG_MOUSE(){return"INPUT_DRAG_MOUSE"}static get MOVED_TO_NODE(){return"MOVED_TO_NODE"}static get FINISHED_MOVE(){return"FINISHED_MOVE"}static get START_COMBAT(){return"START_COMBAT"}static get SHOW_TOAST_MESSAGE(){return"SHOW_TOAST_MESSAGE"}static get NEXT_COMBAT_TURN(){return"NEXT_COMBAT_TURN"}static get NEXT_COMBAT_ROUND(){return"NEXT_COMBAT_ROUND"}static get END_COMBAT(){return"END_COMBAT"}static get END_COMBAT_TURN(){return"END_COMBAT_TURN"}static get ENEMY_TURN(){return"ENEMY_TURN"}static get SELECTED_NODE(){return"SELECTED_NODE"}static get DETERMINE_NEXT_ENEMY_ACTION(){return"DETERMINE_NEXT_ENEMY_ACTION"}static get NAVIGATE_ALONG_PATH(){return"NAVIGATE_ALONG_PATH"}static get SHOW_WALKABLE_AREA(){return"SHOW_WALKABLE_AREA"}static get HIDE_WALKABLE_AREA(){return"HIDE_WALKABLE_AREA"}static get END_MOVEMENT(){return"END_MOVEMENT"}static get AWAIT_PLAYER_COMBAT_INPUT(){return"AWAIT_PLAYER_COMBAT_INPUT"}static get SET_CHARACTER_TO_NODE(){return"SET_CHARACTER_TO_NODE"}static get SELECT_GAME_CHARACTER(){return"SELECT_GAME_CHARACTER"}static get TOGGLE_BUTTON(){return"TOGGLE_BUTTON"}static get USE_PLAYER_ACTION(){return"USE_PLAYER_ACTION"}static get RESOLVE_ATTACK(){return"RESOLVE_ATTACK"}static get RESOLVE_RANGED_ATTACK(){return"RESOLVE_RANGED_ATTACK"}static get MOVE_ALONG_PATH_AND_ATTACK(){return"MOVE_ALONG_PATH_AND_ATTACK"}static get UPDATE_STAMINA(){return"UPDATE_STAMINA"}static get DISPLAY_DEATH(){return"DISPLAY_DEATH"}static get DISPLAY_ATTACK(){return"DISPLAY_ATTACK"}static get DISPLAY_HIT(){return"DISPLAY_HIT"}static get KILL_GAME_CHARACTER(){return"KILL_GAME_CHARACTER"}static get CHARACTER_LOOK_AT(){return"CHARACTER_LOOK_AT"}static get CHANGE_STAMINA(){return"CHANGE_STAMINA"}static get EQUIP_WEAPON(){return"EQUIP_WEAPON"}static get USE_ACTION(){return"USE_ACTION"}static get DISPLAY_FLOATING_STATUS(){return"DISPLAY_FLOATING_STATUS"}static get ADD_PLAYER_CHARACTER_TO_MAP(){return"ADD_PLAYER_CHARACTER_TO_MAP"}static get NAVIGATE_TO_CHARACTER_AND_TALK(){return"NAVIGATE_TO_CHARACTER_AND_TALK"}static get NAVIGATE_TO_CHARACTER_AND_ATTACK(){return"NAVIGATE_TO_CHARACTER_AND_ATTACK"}static get SHOW_DIALOGUE_PANEL(){return"SHOW_DIALOGUE_PANEL"}static get HIDE_DIALOGUE_PANEL(){return"HIDE_DIALOGUE_PANEL"}static get SHOW_DIALOGUE_CONTINUE_BUTTON(){return"SHOW_DIALOGUE_CONTINUE_BUTTON"}static get HIDE_DIALOGUE_CONTINUE_BUTTON(){return"HIDE_DIALOGUE_CONTINUE_BUTTON"}static get DISPLAY_DIALOGUE_STEP(){return"DISPLAY_DIALOGUE_STEP"}static get DISPLAY_DIALOGUE_SKILL_TEST(){return"DISPLAY_DIALOGUE_SKILL_TEST"}static get CONTINUE_DIALOGUE_NODE(){return"CONTINUE_DIALOGUE_NODE"}static get SELECT_DIALOGUE_CHOICE(){return"SELECT_DIALOGUE_CHOICE"}static get RESOLVE_DIALOGUE_SKILL_TEST(){return"RESOLVE_DIALOGUE_SKILL_TEST"}static get CLEAR_DIALOGUE_CHOICES(){return"CLEAR_DIALOGUE_CHOICES"}static get GO_TO_DIALOGUE_NODE(){return"GO_TO_DIALOGUE_NODE"}static get START_DIALOGUE(){return"START_DIALOGUE"}static get END_DIALOGUE(){return"END_DIALOGUE"}static get GAMEPLAY_ACTION_CHANGED(){return"GAMEPLAY_ACTION_CHANGED"}static get CLICK_INVENTORY_BUTTON(){return"CLICK_INVENTORY_BUTTON"}static get DISPLAY_INVENTORY_PANEL(){return"DISPLAY_INVENTORY_PANEL"}static get REORDER_INVETORY_ITEM(){return"REORDER_INVETORY_ITEM"}static get EQUIP_ITEM_TO_SLOT(){return"EQUIP_ITEM_TO_SLOT"}static get ADD_ITEM_TO_INVENTORY(){return"ADD_ITEM_TO_INVENTORY"}static get DISPLAY_EQUIPPED_SLOT(){return"DISPLAY_EQUIPPED_SLOT"}static get USE_EQUIPPED_ITEM(){return"USE_EQUIPPED_ITEM"}static get SET_USE_ITEM_BUTTON_HIGHLIGHT(){return"SET_USE_ITEM_BUTTON_HIGHLIGHT"}}},829:(t,e,i)=>{i.d(e,{j:()=>n,E:()=>o});class n{static get SWORD(){return"sword"}static get AXE(){return"axe"}static get KNIFE(){return"knife"}static get STAFF(){return"staff"}static get HAMMER(){return"hammer"}static get SPEAR(){return"spear"}static get MACE(){return"mace"}static get POLEARM(){return"polearm"}static get MAUL(){return"maul"}static get GREATSWORD(){return"greatsword"}static get CLUB(){return"club"}static get UNARMED(){return"unarmed"}static get SHIELD(){return"shield"}static get FUSIL(){return"fusil"}static get BOW(){return"bow"}static get CROSSBOW(){return"crossbow"}static get PISTOLET(){return"pistolet"}}const o=Object.entries(Object.getOwnPropertyDescriptors(n)).filter((([t,e])=>"function"==typeof e.get)).map((([t])=>({[t]:n[t]})))},812:(t,e,i)=>{i.r(e),i.d(e,{BotBehavioursVO:()=>r});var n=i(316),o=i(226),s=i(744);class r{constructor(t,e){this.behaviourTrees=new Map,this.behaviourTrees.set(n.r.BASIC_MELEE,new o.o),this.behaviourTrees.set(n.r.BASIC_RANGED,new s.b)}getTree(t){return this.behaviourTrees.get(t)}}},201:(t,e,i)=>{i.r(e),i.d(e,{CombatVO:()=>n});class n{constructor(t,e){this.participants=t,this.roundInitiative=[],this.activeParticipant=void 0,this.teams=e}get nextTurnCharacterId(){return this.roundInitiative[0]}}},958:(t,e,i)=>{i.d(e,{b:()=>r});var n=i(68);const{Proxy:o}=i(710),{GameCharacterVO:s}=i(940);class r extends o{get vo(){return this.getData()}static get NAME(){return"GameCharacterProxy_"}constructor(t){super(r.NAME+t.id,new s(t))}resetCombatTurnState(){this.vo.availableMovement=this.vo.maxMovement,this.vo.availableActions=this.vo.maxActionsPerTurn}useMovement(t){this.vo.availableMovement-=t}applyDamage(t){this.vo.currentStamina-=t,this.vo.currentStamina=Math.max(0,this.vo.currentStamina),this.vo.currentStamina>0?this.facade.sendNotification(n.i.UPDATE_STAMINA+this.id,this.vo.currentStamina,this.vo.maximumStamina):console.log(this.id+" died"),this.facade.sendNotification(n.i.CHANGE_STAMINA+this.id,this.vo.currentStamina,this.vo.maxStamina)}getSkillTotal(t){return this.vo.advancedSkills.has(t)?this.skill+this.vo.advancedSkills.get(t):this.skill}get id(){return this.vo.id}get dialogueTree(){return this.vo.dialogueTree}get currentNode(){return this.vo.currentNode}set currentNode(t){this.vo.currentNode&&(this.vo.currentNode.occupied=!1),this.vo.currentNode=t,this.vo.currentNode.occupied=!0}get combatGroup(){return this.vo.combatGroup}get isNPC(){return this.vo.isNPC}get availableMovement(){return this.vo.availableMovement}set availableMovement(t){this.vo.availableMovement=t}get availableActions(){return this.vo.availableActions}set availableActions(t){this.vo.availableActions=t,this.facade.sendNotification(n.i.USE_ACTION+this.id,this.availableActions,this.maxActionsPerTurn)}get maxActionsPerTurn(){return this.vo.maxActionsPerTurn}get skill(){return this.vo.skill}get currentStamina(){return this.vo.currentStamina}set currentStamina(t){this.vo.currentStamina=t}get currentLuck(){return this.vo.currentStamina}get isDead(){return this.vo.currentStamina<=0}get botBehaviour(){return this.vo.botBehaviour}get equippedWeapon(){return this.vo.equippedWeapon}set equippedWeapon(t){this.vo.equippedWeapon=t}get height(){return this.vo.height}}},940:(t,e,i)=>{i.r(e),i.d(e,{GameCharacterVO:()=>n});class n{constructor(t){this.id=t.id,this.isNPC=t.isNPC,this.combatGroup=t.combatGroup||[],this.dialogueTree=t.dialogueTree||this.id,this.currentNode=void 0,this.initiative=t.initiative||2,this.maxMovement=t.maxMovement||6,this.height=t.height||1.8,this.maxActionsPerTurn=1,this.availableActions=this.maxActionsPerTurn,this.availableMovement=this.maxMovement,this.skill=t.skill||1,this.maxStamina=t.maxStamina||1,this.currentStamina=this.maxStamina,this.maxLuck=t.maxLuck||1,this.currentLuck=this.maxLuck,this.advancedSkills=t.advancedSkills||new Map,this.botBehaviour=t.botBehaviour||0,this.equippedWeapon=t.equippedWeapon||"unarmed"}}},969:(t,e,i)=>{i.d(e,{h:()=>r});var n=i(434);const{Proxy:o}=i(710),{GameMapVO:s}=i(438);class r extends o{get vo(){return this.getData()}static get NAME(){return"GameMapProxy"}constructor(t,e,i,n,o){super(r.NAME),this.setData({mapGrid:t,wallBoundingBoxes:e,cover:i,portals:n,navigationGrid:o})}onRegister(){}findNearestNode(t){const e=this.vo.mapGrid;let i=e[0],o=n.q.getDistSquared(i,t);for(const s of e){const e=n.q.getDistSquared(s,t);e<o&&(o=e,i=s)}return i}findNearestWaypoint(t){const e=this.vo.navigationGrid;let i=e[0],o=n.q.getDistSquared(i,t);for(const s of e){const e=n.q.getDistSquared(s,t);e<o&&(o=e,i=s)}return i}rayIntersectsWall(t,e){const i=t.distance(e),n=e.clone().sub(t.clone()).normalize(),o=new pc.Ray(t,n),s=this.vo.wallBoundingBoxes;for(const e of s){const n=new pc.Vec3;if(e.intersectsRay(o,n)&&n.distance(t)<i)return!0}return!1}get cover(){return this.vo.cover}isInCover(t,e){const i=[],n=function(t){const e=[];return e.push(new pc.Vec3(t.x,t.y,t.z-1)),e.push(new pc.Vec3(t.x+1,t.y,t.z)),e.push(new pc.Vec3(t.x-1,t.y,t.z)),e.push(new pc.Vec3(t.x,t.y,t.z+1)),e}(t);for(const t of n)this.cover.find((e=>t.equals(e)))&&i.push(t);if(i.length>0){const n=t.distance(e);for(const t of i)if(t.distance(e)<n)return!0;return!1}return!1}retrievePortal(t){return this.vo.portals.get(t)}hasValidLine(t,e){const i=n.q.calculateBresenhamLine(t.x,t.z,e.x,e.z);return n.q.checkValidLine(i,this.vo.mapGrid)}hasValidNode(t){return this.vo.mapGrid.some((e=>e.equals(t)))}}},438:(t,e,i)=>{i.r(e),i.d(e,{GameMapVO:()=>n});class n{constructor(){this.mapGrid=[]}}},434:(t,e,i)=>{i.d(e,{q:()=>o});class n{constructor(){this.data=[]}push(t,e=0){return this.data.push({value:t,priority:e})}pop(){let t=0,e=1/0;for(let i=0;i<this.data.length;i++){let n=this.data[i].priority;Math.min(e,n)===n&&(e=n,t=i)}return this.data.splice(t,1)[0].value}size(){return this.data.length}empty(){return 0===this.data.length}}class o{static breadthFirstSearch(t,e){let i=[];const n=[];i.push(t);const o=new Map;o.set(t,t);let s=0;for(;i.length>0&&s<e;){const t=[];for(const e of i)for(let i=0;i<e.connectedNodes.length;i++){const s=e.connectedNodes[i];s.occupied||o.has(s)||(t.push(s),n.push(s),o.set(s,e))}i=t,s++}return n}static calculatePath(t,e){const i=new n;i.push(t,0);const o=new Map,s=new Map;for(o.set(t,t),s.set(t,0);!i.empty();){const t=i.pop();if(t.equals(e))break;for(let n=0;n<t.connectedNodes.length;n++){const r=t.connectedNodes[n],a=s.get(t)+1;if(!r.occupied&&(!s.has(r)||a<s.get(r))){s.set(r,a);let n=a+this.heuristic(r,e);i.push(r,n),o.set(r,t)}}}let r=e,a=!1;const c=[];for(c.push(r);!r.equals(t)&&!a;)o.has(r)||!r.equals(e)?(r=o.get(r),c.push(r)):a=!0;return a?void 0:c}static calculateWaypointsPath(t,e){const i=new n;i.push(t,0);const o=new Map,s=new Map;for(o.set(t,t),s.set(t,0);!i.empty();){const t=i.pop();if(t.equals(e))break;for(let n=0;n<t.connectedNodes.length;n++){const r=t.connectedNodes[n],a=this.getDistSquared(r,t),c=s.get(t)+a;if(!r.occupied&&(!s.has(r)||c<s.get(r))){s.set(r,c);let n=c+this.heuristic(r,e);i.push(r,n),o.set(r,t)}}}let r=e,a=!1;const c=[];for(c.push(r);!r.equals(t)&&!a;)o.has(r)||!r.equals(e)?(r=o.get(r),c.push(r)):a=!0;return a?void 0:c}static getDistSquared(t,e){return(t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y)+(t.z-e.z)*(t.z-e.z)}static heuristic(t,e){return Math.abs(t.x-e.x)+Math.abs(t.y-e.y)+Math.abs(t.z-e.z)}static calculateBresenhamLine(t,e,i,n){let o=i-t,s=n-e,r=Math.abs(o),a=Math.abs(s);const c=o>0?1:-1,h=s>0?1:-1,d={x:t,y:0,z:e},l=[];for(let t=0,e=0;t<r||e<a;)(.5+t)/r<(.5+e)/a?(d.x+=c,t++):(d.z+=h,e++),l.push({x:d.x,y:0,z:d.z});return l}static checkValidLine(t,e){let i=!0;for(const n of t)e.some((t=>t.equals(n)))||(i=!1);return i}}},917:(t,e,i)=>{i.d(e,{u:()=>s});const{Proxy:n}=i(710),{GameStateVO:o}=i(448);class s extends n{get vo(){return this.getData()}static get NAME(){return"GameStateProxy"}constructor(){super(s.NAME,new o)}updateGameStateType(t){this.vo.gameplayMode=t}get currentMode(){return this.vo.gameplayMode}get currentAction(){return this.vo.selectedAction}set currentAction(t){this.vo.selectedAction=t}}},448:(t,e,i)=>{i.r(e),i.d(e,{gameplayModeTypes:()=>n,GameStateVO:()=>o});const n={EXPLORATION:"EXPLORATION",COMBAT:"COMBAT",DIALOGUE:"DIALOGUE",GAME_OVER:"GAME_OVER"};class o{constructor(){this.gameplayMode=n.EXPLORATION,this.selectedAction="none"}}},713:(t,e,i)=>{i.r(e),i.d(e,{InventoryVO:()=>o});var n=i(340);class o{constructor(){this.inventoryItems=[],this.equipmentSlots=new Map}addItem(t){this.inventoryItems.push(new n.R(t))}}},340:(t,e,i)=>{i.d(e,{R:()=>o});var n=i(217);class o{constructor(t){this.uuid=(0,n.L)(),this.id=t.id,this.icon=t.icon,this.name=t.name,this.description=t.description,this.type=t.type,this.size=t.size??1,this.equipSlot=t.equipSlot??"none"}}},553:(t,e,i)=>{i.r(e),i.d(e,{StoryVO:()=>n});class n{constructor(){}}},467:(t,e,i)=>{function n(t){const e=t.currentNode;return new pc.Vec3(e.x,e.y+.5*t.height,e.z)}i.d(e,{z:()=>n})},217:(t,e,i)=>{function n(){for(var t=[],e="0123456789abcdef",i=0;i<36;i++)t[i]=e.substr(Math.floor(16*Math.random()),1);return t[14]="4",t[19]=e.substr(3&t[19]|8,1),t[8]=t[13]=t[18]=t[23]="-",t.join("")}i.d(e,{L:()=>n})},321:(t,e,i)=>{i.d(e,{y:()=>c});var n=i(68),o=i(969),s=i(434),r=i(958);const{Mediator:a}=i(710);class c extends a{static get NAME(){return"GameCharacterMediator_"}constructor(t,e,i){super(c.NAME+t),this.id=t;let o=[n.i.CHANGE_SCENE_COMPLETE,n.i.NAVIGATE_TO_NODE+this.id,n.i.NAVIGATE_TO_WAYPOINT+this.id,n.i.NAVIGATE_ALONG_PATH+this.id,n.i.SET_CHARACTER_TO_NODE+this.id,n.i.DISPLAY_DEATH+this.id,n.i.DISPLAY_ATTACK+this.id,n.i.DISPLAY_HIT+this.id,n.i.CHARACTER_LOOK_AT+this.id,n.i.START_COMBAT,n.i.MAP_GRID_CREATED];o=o.concat(i),this.subscribeNotification(o),this.viewComponent=e,this.viewComponent.on("updateCurrentNode",this.updateCurrentNode,this),this.viewComponent.on("finishedMove",this.handleFinishedMode,this),this.viewComponent.on("destroy",(()=>{this.viewComponent.off("updateCurrentNode",this.updateCurrentNode,this),this.viewComponent.off("finishedMove",this.handleFinishedMode,this)}))}onRegister(t){super.onRegister(t)}handleNotification(t,...e){this.viewComponent&&this.viewComponent.fire(t,this.id,...e);for(const i in this.viewComponent.script)if(Object.hasOwnProperty.call(this.viewComponent.script,i)){const n=this.viewComponent.script[i];"function"==typeof n.handleNotification&&n.handleNotification(t,this.id,...e)}switch(t){case n.i.START_COMBAT:this.handleStartCombat();break;case n.i.MAP_GRID_CREATED:const t=this.facade.retrieveProxy(o.h.NAME);this.facade.retrieveProxy(r.b.NAME+this.id).currentNode=t.findNearestNode(this.viewComponent.getLocalPosition());break;case n.i.NAVIGATE_TO_NODE+this.id:this.handleNavigateToNode(e[0]);break;case n.i.NAVIGATE_TO_WAYPOINT+this.id:this.handleNavigateToWaypoint(e[0]);break;case n.i.NAVIGATE_ALONG_PATH+this.id:this.handleNavigateAlongPath(e[0]);break;case n.i.SET_CHARACTER_TO_NODE+this.id:this.handleSetCharacterToNode(e[0]);break;case n.i.CHARACTER_LOOK_AT+this.id:const i=e[0];this.viewComponent.script.GameCharacterComponent.lookAtPoint(i);break;case n.i.DISPLAY_DEATH+this.id:const s=this.viewComponent.findByName("Hitbox");s&&s.fire("stopListening"),this.viewComponent.script.GameCharacterComponent.animateDeath();break;case n.i.DISPLAY_ATTACK+this.id:this.viewComponent.script.GameCharacterComponent.animateAttack();break;case n.i.DISPLAY_HIT+this.id:this.viewComponent.script.GameCharacterComponent.animateHit()}}handleNavigateToNode(t){const e=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(r.b.NAME+this.id);i.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition());const n=s.q.calculatePath(i.currentNode,t);n&&n.length>0&&(this.viewComponent.script.GameCharacterComponent.setPath(n),i.currentNode=t)}handleNavigateToWaypoint(t){const e=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(r.b.NAME+this.id);i.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition());const n=i.currentNode,a=e.findNearestWaypoint(this.viewComponent.getLocalPosition()),c=e.findNearestWaypoint(t);if(e.hasValidLine(n,t)){const e=[t,n];this.viewComponent.script.GameCharacterComponent.setPath(e),i.currentNode=t}else{const o=s.q.calculateWaypointsPath(a,c);if(o&&o.length>0){o.length>1&&e.hasValidLine(o[1],t)&&o.shift();let s=!0;for(;o.length>1&&s;)e.hasValidLine(o[o.length-2],n)?o.pop():s=!1;o.unshift(t),this.viewComponent.script.GameCharacterComponent.setPath(o),i.currentNode=t}}}handleNavigateAlongPath(t){this.viewComponent.script.GameCharacterComponent.setPath(t)}moveToNodeWithPromise(t){const e=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(r.b.NAME+this.id);i.currentNode,i.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition());const n=s.q.calculatePath(i.currentNode,t);return n&&n.length>0&&(this.viewComponent.script.GameCharacterComponent.setPath(n),i.currentNode=t),new Promise(((t,e)=>{this.viewComponent.on("finishedMove",(()=>{t()})),this.viewComponent.on("cancelMove",(()=>{e()}))}))}handleNavigateAlongPathWithPromise(t){return this.viewComponent.script.GameCharacterComponent.setPath(t),new Promise(((t,e)=>{this.viewComponent.on("finishedMove",(()=>{t()})),this.viewComponent.on("cancelMove",(()=>{e()}))}))}updateCurrentNode(t){this.facade.sendNotification(n.i.MOVED_TO_NODE+this.id,t)}handleFinishedMode(t){this.facade.sendNotification(n.i.FINISHED_MOVE,this.id,t)}lookForCharacter(t,e){for(const i of this.searchArea)i.equals(e)&&(this.viewComponent.script.GameCharacterComponent.lookAtPoint(e),this.facade.sendNotification(n.i.START_COMBAT,this.viewComponent,[t]))}handleStartCombat(){this.facade.retrieveProxy(r.b.NAME+this.id).vo}handleSetCharacterToNode(t){this.facade.retrieveProxy(r.b.NAME+this.id).currentNode=t,this.viewComponent.script.GameCharacterComponent.stopMovement(t)}}},852:(t,e,i)=>{i.d(e,{N:()=>o});const{Mediator:n}=i(710);class o extends n{static get NAME(){return"ProjectileCreatorMediator"}constructor(t){super(o.NAME),this.subscribeNotification([]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...e){}createProjectile(t,e,i){return this.viewComponent.script.ProjectileCreatorComponent.createProjectile(t,e,i)}}}},e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t=i(828),e=i(68);const{Facade:n}=i(710),{GameFacade:o}=i(828),s=pc.createScript("CacogenGame");s.prototype.initialize=function(){this.facade=n.getInstance(o.KEY),this.facade.sendNotification(e.i.APP_INITIALISED),this.facade.sendNotification(e.i.CHANGE_SCENE,"Port Taringo","entrance")},s.prototype.update=function(t){};var r=i(434);const a=pc.createScript("NavigationComponent");a.attributes.add("connectedComponents",{type:"entity",array:!0,title:"Connected Components"}),a.prototype.initialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,.05,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.findByName("Plane").enabled=!1,this.entity.once("destroy",(()=>{this.app.off("picker:raycast",this.handleRayCast,this)}))},a.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity,i,e)},a.prototype.setGrid=function(t){this.nodeGrid=t},a.prototype.getGrid=function(){return this.nodeGrid},a.prototype.getNearestNode=function(t){let e=this.nodeGrid[0],i=r.q.getDistSquared(e,t);for(const n of this.nodeGrid){const o=r.q.getDistSquared(n,t);o<i&&(i=o,e=n)}return e};var c=i(710),h=i(958),d=i(321),l=i(316),p=i(829),u=i(969);const E=pc.createScript("GameCharacterComponent");function y(t){const e=new Map;for(const i of t)e.set(i.skillName,i.skillValue);return e}E.attributes.add("characterId",{type:"string",title:"Character Id"}),E.attributes.add("characterSpeed",{type:"number",title:"Character Speed",default:4}),E.attributes.add("characterHeight",{type:"number",title:"Character Height",default:1.8}),E.attributes.add("isNPC",{type:"boolean",title:"is NPC",default:!0}),E.attributes.add("statsOverrides",{type:"json",title:"Stats Overrides",schema:[{name:"skill",title:"Skill",type:"number",default:1},{name:"maxStamina",title:"Stamina",type:"number",default:1},{name:"maxLuck",title:"Luck",type:"number",default:1},{name:"initiative",title:"Initiative",type:"number",default:2},{name:"maxMovement",title:"Movement",type:"number",default:6}]}),E.attributes.add("advancedSkills",{type:"json",title:"Advanced Skills",schema:[{name:"skillName",title:"Skill Name",type:"string"},{name:"skillValue",title:"Skill Value",type:"number"}],array:!0}),E.attributes.add("combatGroupName",{type:"string",title:"Combat Group Name"}),E.attributes.add("dialogueTreeName",{type:"string",title:"Dialogue Tree Name"}),E.attributes.add("botBehaviour",{type:"number",title:"Bot Behaviour",enum:l._,default:0}),E.attributes.add("equippedWeapon",{type:"string",title:"Equipped Weapon",enum:p.E,default:"unarmed"}),E.prototype.preregisterNotification=function(t){this.preregisteredNotifications||(this.preregisteredNotifications=[]),this.preregisteredNotifications.push(t)},E.prototype.postInitialize=function(){this.movementPath=[],this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.preregisteredNotifications||(this.preregisteredNotifications=[]);const e=this.statsOverrides,i={id:this.characterId,isNPC:this.isNPC,height:this.characterHeight,advancedSkills:y(this.advancedSkills),equippedWeapon:this.equippedWeapon,...e,botBehaviour:this.botBehaviour,dialogueTree:this.dialogueTreeName};if(this.combatGroupName&&""!==this.combatGroupName){const t=this.app.root.findByTag("combatGroup:"+this.combatGroupName),e=[];for(const i of t)if(i.enabled){const t=i.script.GameCharacterComponent.characterId;e.push(t)}i.combatGroup=e}if(this.facade.hasMediator(d.y.NAME+this.characterId)&&this.facade.removeMediator(d.y.NAME+this.characterId),this.facade.hasProxy(h.b.NAME+this.characterId));else{const t=new h.b(i),e=this.facade.retrieveProxy(u.h.NAME);if(e){const i=e.findNearestNode(this.entity.getPosition());t.currentNode=i}this.facade.registerProxy(t)}this.facade.registerMediator(new d.y(this.characterId,this.entity,this.preregisteredNotifications)),this.vehicle=this.entity.script.VehicleComponent,this.entity.animation.play("idle.glb",.1)},E.prototype.setPath=function(t){this.movementPath&&this.movementPath.length>0&&this.entity.fire("cancelMove"),this.movementPath=t,this.entity.animation.loop=!0,this.entity.animation.play("walk.glb",.1)},E.prototype.stopMovement=function(t){this.movementPath=[],this.entity.setLocalPosition(t.x,t.y,t.z),this.entity.animation.loop=!0,this.entity.animation.play("idle.glb",.1)},E.prototype.update=function(t){this.moveAlongPath(t)},E.prototype.moveAlongPath=function(t){if(this.movementPath.length>0){const e=this.movementPath[this.movementPath.length-1],i=this.entity.getLocalPosition(),n=new pc.Vec3(e.x,e.y,e.z);if(i.distance(n)<=t*this.characterSpeed){const t=this.movementPath.pop();0===this.movementPath.length&&(this.entity.fire("finishedMove",t),this.entity.animation.loop=!0,this.entity.animation.play("idle.glb",.1)),this.entity.fire("updateCurrentNode",t)}else this.movementPath.length>1?this.vehicle.seek(n,t):this.vehicle.arrive(n,t),this.vehicle.processVelocity(t)}},E.prototype.lookAtPoint=function(t){const e=this.entity.getLocalPosition(),i=t.x-e.x,n=t.z-e.z,o=180*Math.atan2(i,n)/Math.PI;this.entity.setEulerAngles(0,o,0)},E.prototype.animateDeath=function(){this.entity.animation.loop=!1,this.entity.animation.play("die.glb",.1)},E.prototype.animateHit=function(){this.entity.animation.loop=!1,this.entity.animation.play("hit.glb",.1)},E.prototype.animateAttack=function(){this.entity.animation.loop=!1,this.entity.animation.play("attack.glb",.1)};var m=i(917),g=i(448);const f=pc.createScript("AgroGameCharacterComponent");f.attributes.add("sightRange",{type:"number",title:"Sight Range",default:5}),f.prototype.initialize=function(){this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MAP_GRID_CREATED),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MOVED_TO_NODE+"player"),this.entity.on(e.i.MAP_GRID_CREATED,this.handleMapGridCreated,this),this.entity.on(e.i.MOVED_TO_NODE+"player",this.handleMovedToNode,this),console.log("Wait for initial")},f.prototype.handleMapGridCreated=function(e,...i){const n=c.Facade.getInstance(t.GameFacade.KEY);this.characterProxy=n.retrieveProxy(h.b.NAME+e)},f.prototype.handleMovedToNode=function(i,n){const o=c.Facade.getInstance(t.GameFacade.KEY);if(o.retrieveProxy(m.u.NAME).vo.gameplayMode!==g.gameplayModeTypes.EXPLORATION||this.characterProxy.isDead)return;const s=this.characterProxy.currentNode,r=new pc.Vec3(s.x,s.y,s.z),a=new pc.Vec3(n.x,n.y,n.z);if(r.distance(a)<=this.sightRange){const t=o.retrieveProxy(u.h.NAME);r.y+=this.characterProxy.height,t.rayIntersectsWall(r,a)||(o.sendNotification(e.i.SET_CHARACTER_TO_NODE+"player",n),o.sendNotification(e.i.START_COMBAT,i))}};const{Mediator:A}=i(710);class N extends A{static get NAME(){return"ToastMessageMediator"}constructor(t){super(N.NAME),this.subscribeNotification([e.i.SHOW_TOAST_MESSAGE]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SHOW_TOAST_MESSAGE:this.viewComponent.script.ToastMessageComponent.addMessage(i[0])}}}const T=pc.createScript("ToastMessageComponent");T.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),T.attributes.add("messageTime",{type:"number",default:5,title:"Message Time"}),T.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(N.NAME)&&this.facade.removeMediator(N.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new N(this.entity))},T.prototype.addMessage=function(t){0===this.messageQueue.length?(this.messageQueue.push(t),this.showNextMessage()):this.messageQueue.push(t)},T.prototype.showNextMessage=function(){if(this.messageQueue.length>0){const t=this.messageQueue[0];this.labelEntity.element.text=t,setTimeout((()=>{this.messageQueue.shift(),this.showNextMessage()}),1e3*this.messageTime)}else this.labelEntity.element.text=""},pc.createScript("SetCameraTargetComponent").prototype.postInitialize=function(){c.Facade.getInstance(t.GameFacade.KEY).sendNotification(e.i.SET_CAMERA_TARGET,this.entity)};const{Mediator:_}=i(710);class C extends _{static get NAME(){return"InputLayerMediator"}constructor(t){super(C.NAME),this.subscribeNotification([]),this.viewComponent=t,this.viewComponent.on("picker:gameCharacter",this.handlePickerGameCharacter,this),this.viewComponent.on("picker:navigation",this.handlePickerNavigation,this),this.viewComponent.on("scrolling",this.handleScrolling,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...e){}handlePickerGameCharacter(t){this.facade.sendNotification(e.i.SELECT_GAME_CHARACTER,t)}handlePickerNavigation(t){this.facade.sendNotification(e.i.SELECTED_NODE,t)}handleScrolling(t){this.facade.sendNotification(e.i.INPUT_DRAG_MOUSE,t)}}const M=pc.createScript("GameCamera");M.attributes.add("distance",{type:"number",default:100,title:"Distance"}),M.attributes.add("dragMultiplierX",{type:"number",default:.5,title:"Drag Multiplier"}),M.attributes.add("dragMultiplierY",{type:"number",default:.5,title:"Drag Multiplier"}),M.attributes.add("verticalScroll",{type:"boolean",default:!1,title:"Vertical Scroll"}),M.attributes.add("minCameraHeight",{type:"number",default:5,title:"Min Camera Height"}),M.attributes.add("maxCameraHeight",{type:"number",default:100,title:"Max Camera Height"}),M.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(I.NAME)&&this.facade.removeMediator(I.NAME),this.facade.registerMediator(new I(this.entity))},M.prototype.setCameraTarget=function(t){this.cameraTarget=t,this.rotation=this.entity.getEulerAngles().y,this.cameraHeight=this.entity.getLocalPosition().y},M.prototype.handleDrag=function(t){if(this.rotation+=t.x*this.dragMultiplierX,this.verticalScroll){let e=this.cameraHeight-t.y*this.dragMultiplierY;e=pc.math.clamp(e,this.minCameraHeight,this.maxCameraHeight),this.cameraHeight=e}},M.prototype.getTargetCameraPosition=function(t){const e=this.entity.getLocalPosition(),i=Math.sin(this.rotation*Math.PI/180)*this.distance,n=Math.cos(this.rotation*Math.PI/180)*this.distance;return new pc.Vec3(t.x+i,e.y,t.z+n)},M.prototype.update=function(t){if(this.cameraTarget){const t=this.cameraTarget.getLocalPosition(),e=this.getTargetCameraPosition(t),i=this.entity.getLocalPosition(),n=(e.x+9*i.x)/10,o=(this.cameraHeight+9*i.y)/10,s=(e.z+9*i.z)/10;this.entity.setLocalPosition(n,o,s),this.entity.lookAt(t)}};const{Mediator:v}=i(710);class I extends v{static get NAME(){return"GameCameraMediator"}constructor(t){super(I.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.INPUT_DRAG_MOUSE,e.i.SET_CAMERA_TARGET]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SET_CAMERA_TARGET:this.viewComponent.script.GameCamera.setCameraTarget(i[0]);break;case e.i.INPUT_DRAG_MOUSE:this.viewComponent.script.GameCamera.handleDrag(i[0])}}}const S=pc.createScript("InputLayerComponent");S.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),S.attributes.add("dragTime",{type:"number",title:"Drag Time",default:.4}),S.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(C.NAME)&&this.facade.removeMediator(C.NAME),this.facade.registerMediator(new C(this.entity)),this.ray=new pc.Ray,this.inputQueue=[],this.app.mouse.disableContextMenu(),this.clickDownStart=0,this.isDragging=!1,this.app.on("picker:result",this.handlePickerResult,this),this.app.mouse&&(this.app.mouse.on(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.entity.element.on(pc.EVENT_MOUSEDOWN,this.onMouseDown,this),this.app.mouse.on(pc.EVENT_MOUSEUP,this.onMouseUp,this),this.entity.once("destroy",(()=>{this.app.mouse.off(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.app.mouse.off(pc.EVENT_MOUSEUP,this.onMouseUp,this)}))),this.app.touch&&(this.app.touch.on(pc.EVENT_TOUCHMOVE,(t=>{this.onMouseMove(t.touches[0])})),this.entity.element.on(pc.EVENT_TOUCHSTART,(t=>{this.onMouseDown(t.touches[0])})),this.entity.element.on(pc.EVENT_TOUCHEND,(t=>{this.onMouseUp()})))},S.prototype.onMouseDown=function(t){this.isDragging=!0,this.clickDownStart=Date.now(),this.clickStartPoint={x:t.x,y:t.y}},S.prototype.onMouseMove=function(t){if(this.isDragging){const e=new pc.Vec2(this.clickStartPoint.x-t.x,this.clickStartPoint.y-t.y);this.entity.fire("scrolling",e),this.clickStartPoint={x:t.x,y:t.y}}},S.prototype.onMouseUp=function(){this.isDragging=!1,Date.now()-this.clickDownStart<1e3*this.dragTime&&this.clickStartPoint&&this.handleRaycastCollisions(this.clickStartPoint.x,this.clickStartPoint.y)},S.prototype.handleRaycastCollisions=function(t,e){const i=this.cameraEntity,n=this.cameraEntity.camera;n.screenToWorld(t,e,n.farClip,this.ray.direction),this.ray.origin.copy(i.getPosition()),this.ray.direction.sub(this.ray.origin).normalize(),this.app.fire("picker:raycast",this.ray,{x:t,y:e})},S.prototype.handlePickerResult=function(t,e,i){this.inputQueue.push({entity:t,hitPosition:e,screenPosition:i})},S.prototype.update=function(t){this.processInputQueue()},S.prototype.processInputQueue=function(){if(this.inputQueue.length>0){let e=this.inputQueue[0],i=-1;for(const n of this.inputQueue){const o=(t=n.entity).tags.has("gameCharacter")?3:t.tags.has("portal")?2:t.tags.has("navigation")?1:-1;o>i&&(e=n,i=o)}this.inputQueue=[],e.entity.tags.has("gameCharacter")&&this.pickedGameCharacter(e.entity,e.hitPosition),e.entity.tags.has("navigation")&&this.pickedNavigation(e.entity,e.hitPosition),e.entity.tags.has("portal")&&this.pickedPortal(e.entity,e.hitPosition)}var t},S.prototype.pickedGameCharacter=function(t,e){this.entity.fire("picker:gameCharacter",t)},S.prototype.pickedNavigation=function(t,e){const i=t.script.NavigationComponent.getNearestNode(e);this.entity.fire("picker:navigation",i)},S.prototype.pickedPortal=function(t,e){t.fire("picker:portal")};const{Mediator:P}=i(710);class O extends P{static get NAME(){return"PlayerCombatPanelMediator"}constructor(t){super(O.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.AWAIT_PLAYER_COMBAT_INPUT,e.i.END_COMBAT_TURN]),this.viewComponent=t,this.viewComponent.on("click:endTurn",this.handleEndTurn,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:this.viewComponent.enabled=!1;break;case e.i.AWAIT_PLAYER_COMBAT_INPUT:this.viewComponent.enabled=!0;break;case e.i.END_COMBAT_TURN:this.viewComponent.enabled=!1}}handleEndTurn(t){this.sendNotification(e.i.END_COMBAT_TURN)}}const b=pc.createScript("PlayerCombatPanelComponent");b.attributes.add("endTurnButton",{type:"entity",title:"End Turn button"}),b.prototype.initialize=function(){},b.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(O.NAME)&&this.facade.removeMediator(O.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new O(this.entity)),this.endTurnButton.element.on("click",this.clickEndTurn,this)},b.prototype.clickEndTurn=function(t){this.entity.fire("click:endTurn")};const x=pc.createScript("HitboxComponent");x.prototype.postInitialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,t.y/2,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.on("stopListening",(()=>{this.app.off("picker:raycast",this.handleRayCast,this)})),this.entity.on("destroy",(()=>{this.app.off("picker:raycast",this.handleRayCast,this)})),this.entity.model.enabled=!1},x.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity.parent,i,e)},x.prototype.update=function(t){this.aabb.center.copy(this.entity.getPosition())};const{Mediator:L}=i(710);class D extends L{static get NAME(){return"ActionPanelMediator"}constructor(t){super(D.NAME),this.subscribeNotification([e.i.SET_PLAYER_ACTION,e.i.TOGGLE_BUTTON,e.i.USE_PLAYER_ACTION]),this.viewComponent=t,this.viewComponent.on("click:fireCommand",this.handleFireCommand,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.TOGGLE_BUTTON:const t=i[0];this.viewComponent.script.ActionPanelComponent.selectAction(t);break;case e.i.USE_PLAYER_ACTION:}}handleFireCommand(t,...e){this.facade.sendNotification(t,...e)}}const w=pc.createScript("ActionButtonComponent");w.attributes.add("highlightEntity",{type:"entity",title:"Highlight Entity"}),w.attributes.add("iconEntity",{type:"entity",title:"Icon Entity"}),w.attributes.add("commands",{type:"json",schema:[{name:"commandName",title:"Command name",type:"string"},{name:"commandArgs",title:"Command arguments",type:"string",array:!0}],title:"Command name",array:!0}),w.prototype.initialize=function(){this.highlightEntity.enabled=!1,this.entity.on("select:action",this.handleChangeAction,this),this.entity.element.on("click",this.handleClick,this)},w.prototype.handleClick=function(t){for(const t of this.commands){const e=t.commandName,i=t.commandArgs;this.entity.parent.fire("click:fireCommand",e,...i)}},w.prototype.handleChangeAction=function(t){this.entity.name===t?this.highlightEntity.enabled=!this.highlightEntity.enabled:this.highlightEntity.enabled=!1};const R=pc.createScript("ActionPanelComponent");R.attributes.add("actionButtons",{type:"entity",title:"Action Buttons",array:!0}),R.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(D.NAME)&&this.facade.removeMediator(D.NAME),this.facade.registerMediator(new D(this.entity))},R.prototype.selectAction=function(t){for(const e of this.actionButtons)e.fire("select:action",t)},pc.createScript("UIStopPropagation").prototype.initialize=function(){this.entity.element.on(pc.EVENT_MOUSEDOWN,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_MOUSEDOWN,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHSTART,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHMOVE,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHEND,(t=>{t.stopPropagation()}))};var G=i(852);const k=pc.createScript("ProjectileCreatorComponent");k.attributes.add("projectileTypes",{type:"json",title:"Projectile Types",schema:[{name:"projectileName",title:"Projectile Name",type:"string"},{name:"projectileTemplate",title:"Projectile Template",type:"asset"}],array:!0}),k.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(G.N.NAME)&&this.facade.removeMediator(G.N.NAME),this.facade.registerMediator(new G.N(this.entity))},k.prototype.createProjectile=function(t,e,i){return new Promise(((n,o)=>{const s=this.projectileTypes.find((e=>e.projectileName===t));if(!s)throw o(),new Error(`Unable to create projectile "${t}"`);{const t=s.projectileTemplate.resource.instantiate();this.entity.addChild(t),t.once("projectileArrived",(()=>{n()})),t.script.ProjectileComponent.setTarget(e,i)}}))};const U=pc.createScript("ProjectileComponent");U.attributes.add("projectileSpeed",{type:"number",title:"Projectile Speed",default:8}),U.prototype.initialize=function(){},U.prototype.setTarget=function(t,e){this.entity.setLocalPosition(t.x,t.y,t.z),this.targetPoint=e,this.lookAtPoint(this.targetPoint)},U.prototype.update=function(t){if(this.targetPoint){const e=this.entity.getLocalPosition(),i=new pc.Vec3,n=new pc.Vec3(t*this.projectileSpeed,t*this.projectileSpeed,t*this.projectileSpeed);i.sub2(this.targetPoint.clone(),e),i.normalize(),i.mul(n),i.add(e),this.entity.setLocalPosition(i),i.distance(this.targetPoint)<=t*this.projectileSpeed&&(this.entity.fire("projectileArrived"),this.entity.destroy())}},U.prototype.lookAtPoint=function(t){const e=this.entity.getLocalPosition(),i=t.x-e.x,n=t.z-e.z,o=180*Math.atan2(i,n)/Math.PI;this.entity.setEulerAngles(0,o,0)};const{Mediator:H}=i(710);class V extends H{static get NAME(){return"StaminaBarMediator"}constructor(t){super(V.NAME),this.subscribeNotification([e.i.CHANGE_STAMINA+"player"]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_STAMINA+"player":const t=i[0],n=i[1];this.viewComponent.script.StaminaBarComponent.updateStamina(t,n)}}}const B=pc.createScript("StaminaBarComponent");B.attributes.add("barEntity",{type:"entity",title:"Bar Entity"}),B.attributes.add("staminaLabel",{type:"entity",title:"Stamina Label"}),B.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(V.NAME)&&this.facade.removeMediator(V.NAME),this.facade.registerMediator(new V(this.entity)),this.barEntityMaxWidth=this.barEntity.element.width},B.prototype.updateStamina=function(t,e){const i=pc.math.clamp(t/e,0,1),n=pc.math.lerp(0,this.barEntityMaxWidth,i);this.barEntity.element.width=n,this.barEntity.element.rect.z=i,this.barEntity.element.rect=this.barEntity.element.rect,this.staminaLabel.element.text=`${t}/${e}`};const{Mediator:F}=i(710);class z extends F{static get NAME(){return"ActionsRemainingPanelMediator"}constructor(t){super(z.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.AWAIT_PLAYER_COMBAT_INPUT,e.i.END_COMBAT_TURN,e.i.USE_ACTION+"player"]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:this.viewComponent.enabled=!1;break;case e.i.AWAIT_PLAYER_COMBAT_INPUT:const t=this.facade.retrieveProxy(h.b.NAME+"player"),n=t.availableActions,o=t.maxActionsPerTurn;this.viewComponent.script.ActionsRemainingPanelComponent.showAvailableAction(n,o),this.viewComponent.enabled=!0;break;case e.i.USE_ACTION+"player":this.viewComponent.script.ActionsRemainingPanelComponent.showAvailableAction(i[0],i[1]);break;case e.i.END_COMBAT_TURN:this.viewComponent.enabled=!1}}}const q=pc.createScript("ActionsRemainingPanelComponent");q.attributes.add("pipTemplate",{type:"asset",title:"Pip Template"}),q.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(z.NAME)&&this.facade.removeMediator(z.NAME),this.facade.registerMediator(new z(this.entity)),this.pips=[]},q.prototype.showAvailableAction=function(t,e){for(;this.pips.length<e;)this.createPip();for(let e=0;e<this.pips.length;e++)e<t?this.pips[e].fire("togglePip",!0):this.pips[e].fire("togglePip",!1)},q.prototype.createPip=function(){const t=this.pipTemplate.resource.instantiate();this.entity.addChild(t),this.pips.push(t)};const Y=pc.createScript("ActionsRemainingPipComponent");Y.attributes.add("pipFront",{type:"entity",title:"Pip front"}),Y.prototype.initialize=function(){this.entity.on("togglePip",(t=>{this.pipFront.enabled=t}))};const{Mediator:W}=i(710);class K extends W{static get NAME(){return"FloatingStatusCreatorMediator"}constructor(t){super(K.NAME),this.subscribeNotification([e.i.DISPLAY_FLOATING_STATUS]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.DISPLAY_FLOATING_STATUS:const t=this.viewComponent.script.FloatingStatusCreatorComponent,n=i[0],o=i[1];t.displayStatus(n,o)}}}const j=pc.createScript("TemporaryFloatingStatusComponent");j.prototype.initialize=function(){},j.prototype.setWorldPosition=function(t,e,i){this.entity.enabled=!0,this.worldPosition=t,this.device=this.app.graphicsDevice,this.cameraEntity=e,this.screenEntity=i,setTimeout((()=>{this.entity.destroy()}),1e3)},j.prototype.postUpdate=function(t){const e=this.worldSpaceToScreenSpace(this.worldPosition.clone());e&&this.entity.setLocalPosition(e)},j.prototype.worldSpaceToScreenSpace=function(t){if(this.device&&this.cameraEntity&&this.screenEntity){const e=t.clone(),i=new pc.Vec3;this.cameraEntity.camera.worldToScreen(e,i);const n=this.app.graphicsDevice.maxPixelRatio;i.x*=n,i.y*=n;const o=this.screenEntity.screen.scale,s=i.x/o,r=(this.device.height-i.y)/o;return new pc.Vec3(s,r,0)}};const Q=pc.createScript("FloatingStatusCreatorComponent");Q.attributes.add("screenEntity",{type:"entity",title:"Screen Entity"}),Q.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),Q.attributes.add("floatingStatuses",{type:"json",schema:[{name:"name",title:"Name",type:"string"},{name:"template",title:"Template",type:"asset"}],title:"Floating Statuses",array:!0}),Q.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(K.NAME)&&this.facade.removeMediator(K.NAME),this.facade.registerMediator(new K(this.entity))},Q.prototype.displayStatus=function(t,e,...i){const n=this.floatingStatuses.find((e=>e.name===t));if(!n)throw new Error("Cannot create floating status: "+t);{const t=e.currentNode,i=new pc.Vec3(t.x,t.y+e.height,t.z),o=n.template.resource.instantiate();o.script.TemporaryFloatingStatusComponent.setWorldPosition(i,this.cameraEntity,this.screenEntity),this.entity.parent.addChild(o)}};const{Mediator:$}=i(710);class X extends ${static get NAME(){return"PortalMediator"}constructor(t){super(X.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE]),this.viewComponent=t,this.viewComponent.on("picker:portal",this.selectedPortal,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SET_CAMERA_TARGET:}}selectedPortal(){const t=this.facade.retrieveProxy(m.u.NAME),i=this.viewComponent.script.PortalComponent,n=i.destinationScene,o=i.destinationPortal,s=i.standingPoint.getPosition();t.currentMode===g.gameplayModeTypes.EXPLORATION&&this.facade.sendNotification(e.i.NAVIGATE_THROUGH_PORTAL,s,n,o)}}const J=pc.createScript("PortalComponent");J.attributes.add("portalId",{type:"string",title:"Portal Id"}),J.attributes.add("destinationScene",{type:"string",title:"Destination Scene"}),J.attributes.add("destinationPortal",{type:"string",title:"Destination Portal"}),J.attributes.add("hitbox",{type:"entity",title:"Hitbox"}),J.attributes.add("standingPoint",{type:"entity",title:"Standing Point"}),J.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(X.NAME)&&this.facade.removeMediator(X.NAME),this.facade.registerMediator(new X(this.entity)),this.standingPoint.model.enabled=!1};const{Mediator:Z}=i(710);class tt extends Z{static get NAME(){return"DialoguePanelMediator"}constructor(t){super(tt.NAME),this.subscribeNotification([e.i.SHOW_DIALOGUE_PANEL,e.i.HIDE_DIALOGUE_PANEL,e.i.DISPLAY_DIALOGUE_STEP,e.i.DISPLAY_DIALOGUE_SKILL_TEST,e.i.CLEAR_DIALOGUE_CHOICES,e.i.SHOW_DIALOGUE_CONTINUE_BUTTON,e.i.HIDE_DIALOGUE_CONTINUE_BUTTON]),this.viewComponent=t,this.viewComponent.on("clicked:continue",this.handleClickContinue,this),this.viewComponent.on("clicked:choice",this.handleClickChoice,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SHOW_DIALOGUE_PANEL:this.viewComponent.enabled=!0;break;case e.i.HIDE_DIALOGUE_PANEL:setTimeout((()=>{this.viewComponent.script.DialoguePanelComponent.clearPanel(),this.viewComponent.enabled=!1}),100);break;case e.i.DISPLAY_DIALOGUE_STEP:this.viewComponent.script.DialoguePanelComponent.createStep(i[0]);break;case e.i.DISPLAY_DIALOGUE_SKILL_TEST:this.viewComponent.script.DialoguePanelComponent.createSkillTest(...i);break;case e.i.CLEAR_DIALOGUE_CHOICES:this.viewComponent.script.DialoguePanelComponent.clearDialogueChoices();break;case e.i.SHOW_DIALOGUE_CONTINUE_BUTTON:this.viewComponent.script.DialoguePanelComponent.setContinueButton(!0);break;case e.i.HIDE_DIALOGUE_CONTINUE_BUTTON:this.viewComponent.script.DialoguePanelComponent.setContinueButton(!1)}}handleClickContinue(){this.facade.sendNotification(e.i.CONTINUE_DIALOGUE_NODE)}handleClickChoice(t){this.facade.sendNotification(e.i.SELECT_DIALOGUE_CHOICE,t)}}const et=pc.createScript("DialoguePanelComponent");et.attributes.add("scrollbarViewEntity",{type:"entity",title:"Scrollbar View"}),et.attributes.add("contentEntity",{type:"entity",title:"Content Entity"}),et.attributes.add("feedEntity",{type:"entity",title:"Feed Entity"}),et.attributes.add("contentHeight",{type:"number",title:"Content Height",default:520}),et.attributes.add("textEntryTemplate",{type:"asset",title:"Text Entry Asset"}),et.attributes.add("choiceEntryTemplate",{type:"asset",title:"Choice Entry Asset"}),et.attributes.add("skillTestEntryTemplate",{type:"asset",title:"Skill Test Entry Asset"}),et.attributes.add("continueButtonEntity",{type:"entity",title:"Continue Button"}),et.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(tt.NAME)&&this.facade.removeMediator(tt.NAME),this.facade.registerMediator(new tt(this.entity)),this.entity.enabled=!1,this.choices=[],this.continueButtonEntity.element.on("click",(()=>{this.entity.fire("clicked:continue")}),this)},et.prototype.createStep=function(t){if(this.createText(t.step),t.step.choices)for(let e=0;e<t.step.choices.length;e++){const i=t.step.choices[e];this.createChoice(e,i.text)}},et.prototype.createText=function(t){const e=this.textEntryTemplate.resource.instantiate();e.script.DialogueTextComponent.setup(t),this.feedEntity.addChild(e),this.resizeToContents(),setTimeout((()=>{this.scrollbarViewEntity.scrollbar.value=1}),50)},et.prototype.createChoice=function(t,e){const i=this.choiceEntryTemplate.resource.instantiate();i.script.DialogueChoiceComponent.setup(t,e),i.element.text=e,this.feedEntity.addChild(i),this.choices.push(i),i.on("click",this.handleSelectChoice,this),this.resizeToContents(),setTimeout((()=>{this.scrollbarViewEntity.scrollbar.value=1}),50)},et.prototype.createSkillTest=function(t,e,i,n,o){const s=this.skillTestEntryTemplate.resource.instantiate();s.script.DialogueSkillTestComponent.setup(t,e,i,n,o),this.feedEntity.addChild(s),this.resizeToContents(),setTimeout((()=>{this.scrollbarViewEntity.scrollbar.value=1}),50)},et.prototype.clearDialogueChoices=function(){for(const t of this.choices)t.off("click",this.handleSelectChoice,this),t.destroy();this.choices=[]},et.prototype.clearPanel=function(){for(;this.feedEntity.children.length>0;)this.feedEntity.children[0].destroy()},et.prototype.handleSelectChoice=function(t){this.entity.fire("clicked:choice",t)},et.prototype.resizeToContents=function(){let t=this.feedEntity.layoutgroup.spacing.y,e=0;for(const i of this.feedEntity.children)e+=i.element.height,e+=t;this.contentEntity.element.height=Math.max(this.contentHeight,e)},et.prototype.setContinueButton=function(t){this.continueButtonEntity.enabled=t};const it=pc.createScript("DialogueChoiceComponent");it.attributes.add("indexEntity",{type:"entity",title:"Index Entity"}),it.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),it.prototype.initialize=function(){},it.prototype.setup=function(t,e){this.indexEntity.element.text=t+1+".",this.labelEntity.element.text=e,this.entity.element.height=this.labelEntity.element.height,this.entity.element.on("click",(()=>{this.entity.fire("click",t)}))},it.prototype.update=function(t){this.entity.element.height=this.labelEntity.element.height};const nt=pc.createScript("DefaultAnimationComponent");nt.attributes.add("animationName",{type:"string",title:"Animation Name"}),nt.prototype.postInitialize=function(){this.entity.animation.loop=!0,this.entity.animation.play(this.animationName,.1)};const ot=pc.createScript("DialogueTextComponent");ot.attributes.add("withImageWidth",{type:"number",title:"With Image Width",default:340}),ot.attributes.add("withoutImageWidth",{type:"number",title:"With Image Width",default:360}),ot.attributes.add("textContainer",{type:"entity",title:"Text Container"}),ot.attributes.add("titleEntity",{type:"entity",title:"Title Entity"}),ot.attributes.add("bodyEntity",{type:"entity",title:"Body Entity"}),ot.attributes.add("thumbnailContainer",{type:"entity",title:"Thumbnail Container"}),ot.attributes.add("thumbnailImage",{type:"entity",title:"Thumbnail Image"}),ot.prototype.initialize=function(){},ot.prototype.setup=function(t){t.title?(this.titleEntity.element.text=t.title,t.titleColour&&this.titleEntity.element.color.fromString(t.titleColour)):this.titleEntity.enabled=!1,t.thumbnail?this.textContainer.element.width=this.withImageWidth:(this.textContainer.element.width=this.withoutImageWidth,this.thumbnailContainer.enable=!1),this.bodyEntity.element.text=t.text},ot.prototype.setHeight=function(){const t=this.thumbnailContainer.enable?this.thumbnailContainer.element.height:0;let e=0,i=this.textContainer.layoutgroup.spacing.y;for(const t of this.textContainer.children)e+=t.element.height+i;this.titleEntity.enabled||(this.bodyEntity.element.width=this.withImageWidth),this.entity.element.height=Math.max(t,e)},ot.prototype.postInitialize=function(){this.setHeight()},ot.prototype.update=function(t){};const{Mediator:st}=i(710);class rt extends st{static get NAME(){return"AttackButtonMediator"}constructor(t){super(rt.NAME),this.subscribeNotification([e.i.GAMEPLAY_ACTION_CHANGED]),this.viewComponent=t,this.viewComponent.on("click:toggleAttack",this.handleToggleAttack,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.GAMEPLAY_ACTION_CHANGED:"attack"===i[0]?this.viewComponent.script.AttackButtonComponent.toggleHighlight(!0):this.viewComponent.script.AttackButtonComponent.toggleHighlight(!1)}}handleToggleAttack(t){t?this.facade.sendNotification(e.i.GAMEPLAY_ACTION_CHANGED,"attack"):this.facade.sendNotification(e.i.GAMEPLAY_ACTION_CHANGED,"interact")}}const at=pc.createScript("AttackButtonComponent");at.attributes.add("highlightEntity",{type:"entity",title:"Highlight Entity"}),at.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(rt.NAME)&&this.facade.removeMediator(rt.NAME),this.facade.registerMediator(new rt(this.entity)),this.entity.element.on("click",this.handleClick,this)},at.prototype.handleClick=function(t){this.entity.fire("click:toggleAttack",!this.highlightEntity.enabled)},at.prototype.toggleHighlight=function(t){this.highlightEntity.enabled=t};const{Mediator:ct}=i(710);class ht extends ct{static get NAME(){return"UseItemButtonMediator"}constructor(t,i){super(ht.NAME+i),this.equipmentSlotKey=i,this.subscribeNotification([e.i.GAMEPLAY_ACTION_CHANGED,e.i.DISPLAY_EQUIPPED_SLOT,e.i.SET_USE_ITEM_BUTTON_HIGHLIGHT]),this.viewComponent=t,this.viewComponent.on("click:useItem",this.handleUseItem,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.GAMEPLAY_ACTION_CHANGED:"attack"===i[0]?this.viewComponent.script.UseItemButtonComponent.toggleHighlight(!0):this.viewComponent.script.UseItemButtonComponent.toggleHighlight(!1);break;case e.i.DISPLAY_EQUIPPED_SLOT:const t=i[0].get(this.equipmentSlotKey);t&&t.icon?this.viewComponent.script.UseItemButtonComponent.setIcon(t.icon):this.viewComponent.script.UseItemButtonComponent.setDefaultIcon();break;case e.i.SET_USE_ITEM_BUTTON_HIGHLIGHT:const n=i[0];if(console.log(`Highlight: ${n} vs ${this.equipmentSlotKey}`),n===this.equipmentSlotKey){const t=i[1];this.viewComponent.script.UseItemButtonComponent.toggleHighlight(t)}}}handleUseItem(){this.facade.sendNotification(e.i.USE_EQUIPPED_ITEM,this.equipmentSlotKey)}}const dt=pc.createScript("UseItemButtonComponent");dt.attributes.add("equipmentSlotKey",{type:"string",title:"Equipment Slot Key"}),dt.attributes.add("iconEntity",{type:"entity",title:"Icon Entity"}),dt.attributes.add("highlightEntity",{type:"entity",title:"Highlight Entity"}),dt.attributes.add("defaultIcon",{type:"asset",title:"Default Icon"}),dt.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(ht.NAME+this.equipmentSlotKey)&&this.facade.removeMediator(ht.NAME+this.equipmentSlotKey),this.facade.registerMediator(new ht(this.entity,this.equipmentSlotKey)),this.entity.element.on("click",this.handleClick,this)},dt.prototype.setIcon=function(t){const e=this.app.assets.get(t);this.iconEntity.element.spriteAsset=e},dt.prototype.setDefaultIcon=function(){this.iconEntity.element.spriteAsset=this.defaultIcon},dt.prototype.handleClick=function(t){this.entity.fire("click:useItem")},dt.prototype.toggleHighlight=function(t){this.highlightEntity.enabled=t};const lt=pc.createScript("VehicleComponent");function pt(t,e){return t.length()<e?t:t.normalize().scale(e)}lt.attributes.add("mass",{type:"number",title:"Mass",default:3}),lt.attributes.add("maxSpeed",{type:"number",title:"Max Speed",default:5}),lt.attributes.add("maxForce",{type:"number",title:"Max Force",default:.5}),lt.attributes.add("arriveThreshold",{type:"number",title:"Arrival Threshold",default:1}),lt.prototype.initialize=function(){this.velocity=new pc.Vec3,this.steeringForce=new pc.Vec3},lt.prototype.processVelocity=function(t){const e=this.entity.getPosition();this.steeringForce=pt(this.steeringForce,this.maxForce),this.steeringForce=this.steeringForce.scale(1/this.mass),this.velocity=this.velocity.add(this.steeringForce),this.velocity=pt(this.velocity,this.maxSpeed*t),this.steeringForce=new pc.Vec3,this.entity.setLocalPosition(e.add(this.velocity));const i=180*(n=this.velocity,Math.atan2(n.x,n.z))/Math.PI;var n;this.entity.setEulerAngles(0,i,0)},lt.prototype.seek=function(t,e){const i=this.entity.getLocalPosition();let n=t.clone().sub(i);n=n.normalize(),n.scale(this.maxSpeed*e);const o=n.sub(this.velocity);this.steeringForce=this.steeringForce.add(o)},lt.prototype.arrive=function(t){const e=this.entity.getPosition();let i=t.clone().sub(e).normalize().scale(this.maxSpeed);const n=e.distance(t);i=n>this.arrivalThreshold?i.scale(this.maxSpeed):i.scale(this.maxSpeed*n/this.arriveThreshold);const o=i.sub(this.velocity);this.steeringForce=this.steeringForce.add(o)};const ut=pc.createScript("ScreenResizeComponent");ut.prototype.window=window,ut.prototype.postInitialize=function(){this.onResize(),this.window.addEventListener("resize",this.onResize.bind(this),!1)},ut.prototype.onResize=function(){const t=this.app.graphicsDevice;t.width<t.height?this.entity.screen.scaleBlend=1:this.entity.screen.scaleBlend=0,this.entity.screen.referenceResolution=new pc.Vec2(t.width,t.height)};const Et=pc.createScript("DialogueSkillTestComponent");Et.attributes.add("skillNameLabel",{type:"entity",title:"Skill Name Label"}),Et.attributes.add("skillValueLabel",{type:"entity",title:"Skill Value Label"}),Et.attributes.add("die1Label",{type:"entity",title:"Die 1 Label"}),Et.attributes.add("die2Label",{type:"entity",title:"Die 2 Label"}),Et.attributes.add("successLabel",{type:"entity",title:"Success Label"}),Et.attributes.add("failureLabel",{type:"entity",title:"Failure Label"}),Et.prototype.initialize=function(){},Et.prototype.setup=function(t,e,i,n,o){this.skillNameLabel.element.text=t,this.skillValueLabel.element.text=e,this.die1Label.element.text=i,this.die2Label.element.text=n,this.successLabel.enabled=o,this.failureLabel.enabled=!o};const yt=pc.createScript("InventoryItemComponent");yt.attributes.add("iconEntity",{type:"entity",title:"Icon Entity"}),yt.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),yt.attributes.add("slotHeight",{type:"number",title:"Slot Height",default:44}),yt.attributes.add("expandedEntity",{type:"entity",title:"Expanded Entity"}),yt.prototype.setup=function(t){this.icon=t.icon;const e=this.app.assets.get(this.icon);this.iconEntity.element.spriteAsset=e,this.size=t.size,this.labelEntity.element.text=t.name,this.entity.element.height=this.slotHeight*this.size,this.expandedEntity.element.height=this.slotHeight*this.size,this.itemData=t},yt.prototype.collapse=function(){this.expandedEntity.enabled=!1},yt.prototype.expand=function(){this.expandedEntity.enabled=!0},yt.prototype.postInitialize=function(){new pc.ElementDragHelper(this.entity.element,null).on("drag:start",this.onDragStart,this)},yt.prototype.onDragStart=function(){this.entity.parent.fire("drag:start",this.entity,this.size)};const{Mediator:mt}=i(710);class gt extends mt{static get NAME(){return"InventoryPanelMediator"}constructor(t){super(gt.NAME),this.subscribeNotification([e.i.DISPLAY_INVENTORY_PANEL]),this.viewComponent=t,this.viewComponent.on("reorderItem",this.handeReorderItem,this),this.viewComponent.on("equipItem",this.handleEquipItem,this),this.viewComponent.on("close",this.handleClose,this),this.viewComponent.enabled=!1}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.DISPLAY_INVENTORY_PANEL:const t=i[0],n=i[1];this.viewComponent.script.InventoryPanelComponent.displayItems(t,n),this.viewComponent.enabled=!0}}handeReorderItem(t,i){this.facade.sendNotification(e.i.REORDER_INVETORY_ITEM,t,i)}handleEquipItem(t,i){this.facade.sendNotification(e.i.EQUIP_ITEM_TO_SLOT,t,i)}handleClose(){setTimeout((()=>{this.viewComponent.enabled=!1}),100)}}const ft=pc.createScript("InventoryPanelComponent");function At(t,e){return t.x>e.x1&&t.x<e.x2&&t.y>e.y1&&t.y<e.y2}ft.attributes.add("slotContainer",{type:"entity",title:"Slot Container"}),ft.attributes.add("topSlotPosition",{type:"entity",title:"Top Slot Position"}),ft.attributes.add("closeButton",{type:"entity",title:"Close Button"}),ft.attributes.add("itemAsset",{type:"asset",title:"Item Asset"}),ft.attributes.add("dragIcon",{type:"entity",title:"Drag Icon"}),ft.attributes.add("slotWidth",{type:"number",title:"Slot Width",default:320}),ft.attributes.add("slotHeight",{type:"number",title:"Slot Height",default:44}),ft.attributes.add("maxSlots",{type:"number",title:"Max Slots",default:12}),ft.attributes.add("equipmentSlots",{type:"json",schema:[{name:"key",title:"Equipment Slot Key",type:"string"},{name:"entity",title:"Equipment Slot Entity",type:"entity"}],array:!0,title:"Equipment Slots"}),ft.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(gt.NAME)&&this.facade.removeMediator(gt.NAME),this.facade.registerMediator(new gt(this.entity)),this.entity.on("drag:start",this.handleDragStart,this),this.closeButton.element.on("click",this.handleClose,this),this.inventoryItemEntities=[]},ft.prototype.handleDragStart=function(t,e){t.reparent(this.entity),this.dragIcon.reparent(this.entity),this.app.touch?(this.app.touch.on(pc.EVENT_TOUCHMOVE,(i=>{i.touches.length>0&&this.handleMouseMove(t,e,i.touches[0])}),this),this.app.touch.on(pc.EVENT_TOUCHEND,(i=>{i.changedTouches.length>0&&this.handleMouseUp(t,e,i.changedTouches[0])}),this)):(this.entity.element.on(pc.EVENT_MOUSEMOVE,(i=>{this.handleMouseMove(t,e,i)}),this),this.entity.element.on(pc.EVENT_MOUSEUP,(i=>{this.handleMouseUp(t,e,i)}),this))},ft.prototype.localPositionFromMouseEvent=function(t){const e=new pc.Vec3(t.x,t.y,0),i=this.app.graphicsDevice.maxPixelRatio;e.x*=i,e.y*=i;const n=this.entity.element.screen.screen,o=this.app.graphicsDevice,s=n.scale,r=e.x/s,a=(o.height-e.y)/s;return new pc.Vec3(r,a,0)},ft.prototype.handleMouseMove=function(t,e,i){const n=this.localPositionFromMouseEvent(i);this.dragIcon.setLocalPosition(n),this.displayPotentialList(t,e,n)},ft.prototype.handleMouseUp=function(t,e,i){const n=this.localPositionFromMouseEvent(i);this.dragIcon.enabled=!1,t.script.InventoryItemComponent.expand(),this.entity.element.off(pc.EVENT_MOUSEMOVE),this.entity.element.off(pc.EVENT_MOUSEUP),this.app.touch&&(this.app.touch.off(pc.EVENT_TOUCHMOVE),this.app.touch.off(pc.EVENT_TOUCHEND));const o=this.topSlotPosition.getLocalPosition();if(At(n,{x1:o.x,y1:o.y-this.maxSlots*this.slotHeight,x2:o.x+this.slotWidth,y2:o.y})){const e=this.app.graphicsDevice.height,i={x:t.element.screenCorners[2].x,y:e-t.element.screenCorners[2].y},n=this.localPositionFromMouseEvent(i),s=Math.max(0,Math.floor((o.y-n.y)/this.slotHeight)),r=t.script.InventoryItemComponent.itemData;this.entity.fire("reorderItem",r.uuid,s)}else this.checkDropOnEquipmentSlot(t,i)},ft.prototype.checkDropOnEquipmentSlot=function(t,e){for(const i of this.equipmentSlots){const n=i.key,o=i.entity.element.screenCorners,s=this.app.graphicsDevice.height;if(At({x:e.x,y:s-e.y},{x1:o[0].x,y1:o[0].y,x2:o[2].x,y2:o[2].y})){const e=t.script.InventoryItemComponent.itemData;this.entity.fire("equipItem",e.id,n)}}},ft.prototype.handleItemMove=function(t,e){this.isInBounds(e)?t.script.InventoryItemComponent.expand():t.script.InventoryItemComponent.collapse(),this.setHighlightPosition(e)},ft.prototype.handleClose=function(t){t.event.stopImmediatePropagation(),this.entity.fire("close")},ft.prototype.displayItems=function(t,e){this.clearPanel();const i=this.topSlotPosition.getLocalPosition();let n=0;for(let e=0;e<t.length;e++){const o=t[e];n+=o.size;const s=this.itemAsset.resource.instantiate();s.script.InventoryItemComponent.setup(o),s.setLocalPosition(i.x,i.y-n*this.slotHeight,0),this.inventoryItemEntities.push(s),this.entity.addChild(s)}for(const t of this.equipmentSlots){const i=t.key,n=t.entity;if(e.has(i)){const t=e.get(i);n.script.InventoryEquippedSlotComponent.setup(t.icon)}else n.script.InventoryEquippedSlotComponent.clear()}},ft.prototype.displayPotentialList=function(t,e,i){const n=this.topSlotPosition.getLocalPosition();if(At(i,{x1:n.x,y1:n.y-this.maxSlots*this.slotHeight,x2:n.x+this.slotWidth,y2:n.y})){t.script.InventoryItemComponent.expand(),this.dragIcon.enabled=!1;const e=this.app.graphicsDevice.height,i={x:t.element.screenCorners[2].x,y:e-t.element.screenCorners[2].y},o=this.localPositionFromMouseEvent(i),s=Math.max(0,Math.floor((n.y-o.y)/this.slotHeight));this.reorderListWithGap(t,t.script.InventoryItemComponent.size,s)}else t.script.InventoryItemComponent.collapse(),this.dragIcon.enabled=!0},ft.prototype.reorderListWithGap=function(t,e,i){const n=this.topSlotPosition.getLocalPosition();let o=0;for(let s=0;s<this.inventoryItemEntities.length;s++){const r=this.inventoryItemEntities[s];t!==r&&(i>=o&&i<o+r.script.InventoryItemComponent.size&&(o+=e),o+=r.script.InventoryItemComponent.size,r.setLocalPosition(n.x,n.y-o*this.slotHeight,0))}},ft.prototype.clearPanel=function(){for(;this.inventoryItemEntities.length>0;)this.inventoryItemEntities.pop().destroy()};const Nt=pc.createScript("InventoryDragIconComponent");Nt.prototype.initialize=function(){},Nt.prototype.setup=function(t,e){};const Tt=pc.createScript("InventoryEquippedSlotComponent");Tt.attributes.add("defaultAsset",{type:"asset",title:"Default Asset"}),Tt.attributes.add("iconEntity",{type:"entity",title:"Icon Entity"}),Tt.prototype.initialize=function(){},Tt.prototype.setup=function(t){const e=this.app.assets.get(t);this.iconEntity.element.spriteAsset=e},Tt.prototype.clear=function(){this.iconEntity.element.spriteAsset=this.defaultAsset};const{Facade:_t}=i(710),{PureMVC:Ct}=i(710);new class{constructor(){Ct.debug=!0,_t.getInstance=t.GameFacade.getInstance,console.log(_t),this.facade=_t.getInstance(t.GameFacade.KEY),this.facade.startup(this)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,