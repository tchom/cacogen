(()=>{"use strict";var t={382:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(542),o=i(999),r=function(){function t(e){if(this.commandMap={},t.instanceMap[e])throw new Error("controller key for this Multiton key already constructed");this.multitonKey=e,this.logger=n.PureMVC.debug?n.PureMVC.logCommand:n.PureMVC.logNone,this.initializeController()}return t.removeController=function(t){delete this.instanceMap[t]},t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.prototype.registerCommand=function(t,e){this.commandMap[t]||this.view.registerObserver(t,this.executeCommand,this),this.commandMap[t]=e},t.prototype.hasCommand=function(t){return void 0!==this.commandMap[t]},t.prototype.removeCommand=function(t){this.hasCommand(t)&&(this.view.removeObserver(t,this.executeCommand,this),delete this.commandMap[t])},t.prototype.initializeController=function(){this.view=o.View.getInstance(this.multitonKey)},t.prototype.executeCommand=function(e){for(var i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];var o=this.commandMap[e];o&&(this.logger(t._consoleArgs,e,o.name),o.apply(void 0,[this.multitonKey,e].concat(i)))},t._consoleArgs=["","background: #3F234E","background: #6E2994","color: #D4BFE0; background: #8724BD;","background: #6E2994","background: #3F234E"],t.instanceMap={},t}();e.Controller=r},222:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(382),o=i(433),r=i(542),a=i(999),s=function(){function t(e){if(t.instanceMap[e])throw new Error("Facade instance for this Multiton key already constructed!");this.logger=r.PureMVC.debug?r.PureMVC.logNotification:r.PureMVC.logNone,this.initializeNotifier(e),this.initializeFacade()}return t.getInstance=function(e){return e?(t.instanceMap[e]||(t.instanceMap[e]=new t(e)),t.instanceMap[e]):null},t.hasCore=function(t){return void 0!==this.instanceMap[t]},t.removeCore=function(t){this.instanceMap[t]&&(o.Model.removeModel(t),a.View.removeView(t),n.Controller.removeController(t),delete this.instanceMap[t])},t.prototype.initializeFacade=function(){this.initializeModel(),this.initializeController(),this.initializeView()},t.prototype.registerCommand=function(t,e){this.controller.registerCommand(t,e)},t.prototype.removeCommand=function(t){this.controller.removeCommand(t)},t.prototype.hasCommand=function(t){return this.controller.hasCommand(t)},t.prototype.registerProxy=function(t){this.model.registerProxy(t)},t.prototype.retrieveProxy=function(t){return this.model.retrieveProxy(t)},t.prototype.removeProxy=function(t){return this.model?this.model.removeProxy(t):null},t.prototype.hasProxy=function(t){return this.model.hasProxy(t)},t.prototype.registerMediator=function(t){this.view.registerMediator(t)},t.prototype.retrieveMediator=function(t){return this.view.retrieveMediator(t)},t.prototype.removeMediator=function(t){return this.view.removeMediator(t)},t.prototype.sleepMediator=function(t){return this.view.sleepMediator(t)},t.prototype.awakeMediator=function(t){return this.view.awakeMediator(t)},t.prototype.hasMediator=function(t){return this.view.hasMediator(t)},t.prototype.sendNotification=function(e){for(var i,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];this.logger.apply(this,[t._consoleArgs,e].concat(n)),(i=this.view).notifyObservers.apply(i,[e].concat(n))},t.prototype.initializeNotifier=function(t){this.multitonKey=t},t.prototype.initializeController=function(){this.controller||(this.controller=n.Controller.getInstance(this.multitonKey))},t.prototype.initializeModel=function(){this.model||(this.model=o.Model.getInstance(this.multitonKey))},t.prototype.initializeView=function(){this.view||(this.view=a.View.getInstance(this.multitonKey))},t._consoleArgs=["","background: #757130","background: #DED434","color: #2F2E15; background: #FFF325;","background: #DED434","background: #757130"],t.instanceMap={},t}();e.Facade=s},651:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),a=i(542),s=function(t){function e(e,i){var n=t.call(this)||this;return n.logger=a.PureMVC.debug?a.PureMVC.logMediator:a.PureMVC.logNone,n.mediatorName=e||"Mediator",n.viewComponent=i,n.sleeping=!0,n.subscribedNotifications=[],n.notificationSubscriptionChange=null,n}return o(e,t),Object.defineProperty(e.prototype,"notifications",{get:function(){return this.subscribedNotifications},enumerable:!0,configurable:!0}),e.prototype.getMediatorName=function(){return this.mediatorName},e.prototype.setViewComponent=function(t){this.viewComponent=t},e.prototype.getViewComponent=function(){return this.viewComponent},e.prototype.onRegister=function(t){this.notificationSubscriptionChange=t,this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.notificationSubscriptionChange=null,this.logger(e._consoleArgs,this.constructor.name,"remove")},e.prototype.onSleep=function(){this.sleeping=!0,this.logger(e._consoleArgs,this.constructor.name,"sleep")},e.prototype.onAwake=function(){this.sleeping=!1,this.logger(e._consoleArgs,this.constructor.name,"awake")},Object.defineProperty(e.prototype,"isSleeping",{get:function(){return this.sleeping},enumerable:!0,configurable:!0}),e.prototype.subscribeNotification=function(t){this.changeSubscription(t,this.addSubscription)},e.prototype.unsubscribeNotification=function(t){this.changeSubscription(t,this.removeSubscription)},e.prototype.changeSubscription=function(t,e){var i=this,n=this.notifications.slice(),o=!1;t instanceof Array?t.forEach((function(t){o=e.call(i,t)||o})):o=e.call(this,t),o&&this.notificationSubscriptionChange&&this.notificationSubscriptionChange(this,n)},e.prototype.addSubscription=function(t){return-1===this.notifications.indexOf(t)&&(this.notifications.push(t),!0)},e.prototype.removeSubscription=function(t){var e=this.notifications.indexOf(t);return-1!==e&&(this.notifications.splice(e,1),!0)},e._consoleArgs=["","background: #2A3351","background: #364D98","color: #F4F6FE; background: #3656C1;","background: #364D98","background: #2A3351"],e}(r.Notifier);e.Mediator=s},433:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(e){if(this.proxyMap={},t.instanceMap[e])throw new Error("Model instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeModel()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeModel=function(t){delete this.instanceMap[t]},t.prototype.registerProxy=function(t){t.initializeNotifier(this.multitonKey),this.proxyMap[t.getProxyName()]=t,t.onRegister()},t.prototype.retrieveProxy=function(t){return this.proxyMap[t]},t.prototype.hasProxy=function(t){return void 0!==this.proxyMap[t]},t.prototype.removeProxy=function(t){if(this.proxyMap[t]){var e=this.proxyMap[t];return e.onRemove(),delete this.proxyMap[t],e}return null},t.prototype.initializeModel=function(){},t.instanceMap={},t}();e.Model=i},117:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(222),o=function(){function t(){}return t.prototype.initializeNotifier=function(t){this.multitonKey=t,this.facade=this.getFacade()},t.prototype.sendNotification=function(t){for(var e,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];this.facade&&(e=this.facade).sendNotification.apply(e,[t].concat(i))},t.prototype.getFacade=function(){if(null===this.multitonKey)throw new Error("multitonKey for this Notifier not yet initialized!");return n.Facade.getInstance(this.multitonKey)},t}();e.Notifier=o},413:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),a=i(542),s=function(t){function e(e,i){var n=t.call(this)||this;return n.proxyName=e||"Proxy",n.logger=a.PureMVC.debug?a.PureMVC.logProxy:a.PureMVC.logNone,i&&n.setData(i),n}return o(e,t),e.prototype.getProxyName=function(){return this.proxyName},e.prototype.setData=function(t){this.data=t},e.prototype.getData=function(){return this.data},e.prototype.onRegister=function(){this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.logger(e._consoleArgs,this.constructor.name,"remove")},e._consoleArgs=["","background: #295A34","background: #2FAA4A","color: #102415; background: #27D04C;","background: #2FAA4A","background: #295A34"],e}(r.Notifier);e.Proxy=s},542:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.logCommand=function(t,e,i){t[0]="%c %c %c "+e+" =>  "+i+" %c %c ",console.log.apply(console,t)},t.logNotification=function(t,e){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];t[0]="%c %c %c "+e+": args [ "+i+" ] %c %c ",console.log.apply(console,t)},t.logMediator=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logProxy=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logNone=function(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i]},t.debug=!0,t}();e.PureMVC=i},999:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(729),o=function(){function t(e){if(this.mediatorMap={},this.eventEmitter=new n,t.instanceMap[e])throw new Error("View instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeView()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeView=function(t){delete this.instanceMap[t]},t.prototype.removeObserver=function(t,e,i){this.eventEmitter.removeListener(t,e,i)},t.prototype.registerObserver=function(t,e,i){this.eventEmitter.on(t,e,i)},t.prototype.notifyObservers=function(t){for(var e,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];(e=this.eventEmitter).emit.apply(e,[t,t].concat(i))},t.prototype.registerMediator=function(t){this.mediatorMap[t.getMediatorName()]||(t.initializeNotifier(this.multitonKey),this.mediatorMap[t.getMediatorName()]=t,this.registerObservers(t),t.onRegister(this.onMediatorNotificationSubscriptionChange.bind(this)),t.onAwake())},t.prototype.awakeMediator=function(t){var e=this.mediatorMap[t];if(e){if(!e.isSleeping)return e;this.registerObservers(e),e.onAwake()}return e},t.prototype.retrieveMediator=function(t){return this.mediatorMap[t]},t.prototype.removeMediator=function(t){var e=this.mediatorMap[t];return e&&(this.removeObservers(e),delete this.mediatorMap[t],e.onSleep(),e.onRemove()),e},t.prototype.sleepMediator=function(t){var e=this.mediatorMap[t];if(e){if(e.isSleeping)return e;this.removeObservers(e),e.onSleep()}return e},t.prototype.hasMediator=function(t){return void 0!==this.mediatorMap[t]},t.prototype.initializeView=function(){},t.prototype.removeObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var n=0,o=i;n<o.length;n++){var r=o[n];this.removeObserver(r,t.handleNotification,t)}},t.prototype.registerObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var n=0,o=i;n<o.length;n++){var r=o[n];this.registerObserver(r,t.handleNotification,t)}},t.prototype.onMediatorNotificationSubscriptionChange=function(t,e){this.removeObservers(t,e),this.registerObservers(t)},t.instanceMap={},t}();e.View=o},710:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(382);e.Controller=n.Controller;var o=i(222);e.Facade=o.Facade;var r=i(651);e.Mediator=r.Mediator;var a=i(433);e.Model=a.Model;var s=i(117);e.Notifier=s.Notifier;var c=i(413);e.Proxy=c.Proxy;var d=i(542);e.PureMVC=d.PureMVC;var h=i(999);e.View=h.View},729:t=>{var e=Object.prototype.hasOwnProperty,i="~";function n(){}function o(t,e,i){this.fn=t,this.context=e,this.once=i||!1}function r(t,e,n,r,a){if("function"!=typeof n)throw new TypeError("The listener must be a function");var s=new o(n,r||t,a),c=i?i+e:e;return t._events[c]?t._events[c].fn?t._events[c]=[t._events[c],s]:t._events[c].push(s):(t._events[c]=s,t._eventsCount++),t}function a(t,e){0==--t._eventsCount?t._events=new n:delete t._events[e]}function s(){this._events=new n,this._eventsCount=0}Object.create&&(n.prototype=Object.create(null),(new n).__proto__||(i=!1)),s.prototype.eventNames=function(){var t,n,o=[];if(0===this._eventsCount)return o;for(n in t=this._events)e.call(t,n)&&o.push(i?n.slice(1):n);return Object.getOwnPropertySymbols?o.concat(Object.getOwnPropertySymbols(t)):o},s.prototype.listeners=function(t){var e=i?i+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var o=0,r=n.length,a=new Array(r);o<r;o++)a[o]=n[o].fn;return a},s.prototype.listenerCount=function(t){var e=i?i+t:t,n=this._events[e];return n?n.fn?1:n.length:0},s.prototype.emit=function(t,e,n,o,r,a){var s=i?i+t:t;if(!this._events[s])return!1;var c,d,h=this._events[s],p=arguments.length;if(h.fn){switch(h.once&&this.removeListener(t,h.fn,void 0,!0),p){case 1:return h.fn.call(h.context),!0;case 2:return h.fn.call(h.context,e),!0;case 3:return h.fn.call(h.context,e,n),!0;case 4:return h.fn.call(h.context,e,n,o),!0;case 5:return h.fn.call(h.context,e,n,o,r),!0;case 6:return h.fn.call(h.context,e,n,o,r,a),!0}for(d=1,c=new Array(p-1);d<p;d++)c[d-1]=arguments[d];h.fn.apply(h.context,c)}else{var l,u=h.length;for(d=0;d<u;d++)switch(h[d].once&&this.removeListener(t,h[d].fn,void 0,!0),p){case 1:h[d].fn.call(h[d].context);break;case 2:h[d].fn.call(h[d].context,e);break;case 3:h[d].fn.call(h[d].context,e,n);break;case 4:h[d].fn.call(h[d].context,e,n,o);break;default:if(!c)for(l=1,c=new Array(p-1);l<p;l++)c[l-1]=arguments[l];h[d].fn.apply(h[d].context,c)}}return!0},s.prototype.on=function(t,e,i){return r(this,t,e,i,!1)},s.prototype.once=function(t,e,i){return r(this,t,e,i,!0)},s.prototype.removeListener=function(t,e,n,o){var r=i?i+t:t;if(!this._events[r])return this;if(!e)return a(this,r),this;var s=this._events[r];if(s.fn)s.fn!==e||o&&!s.once||n&&s.context!==n||a(this,r);else{for(var c=0,d=[],h=s.length;c<h;c++)(s[c].fn!==e||o&&!s[c].once||n&&s[c].context!==n)&&d.push(s[c]);d.length?this._events[r]=1===d.length?d[0]:d:a(this,r)}return this},s.prototype.removeAllListeners=function(t){var e;return t?(e=i?i+t:t,this._events[e]&&a(this,e)):(this._events=new n,this._eventsCount=0),this},s.prototype.off=s.prototype.removeListener,s.prototype.addListener=s.prototype.on,s.prefixed=i,s.EventEmitter=s,t.exports=s},571:(t,e,i)=>{i.r(e),i.d(e,{GameFacade:()=>Qt});var n=i(68);class o{constructor(t,e,i){this.x=t,this.y=e,this.z=i,this.connectedNodes=[],this.occupied=!1}isConnected(t){return void 0!==this.connectedNodes.find((e=>e.x===t.x&&e.y===t.y&&e.z===t.z))}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}equalsPoint(t,e,i){return this.x===t&&this.y===e&&this.z===i}addConnectedNode(t){this.isConnected(t)||this.connectedNodes.push(t)}disconnectedNode(t){const e=this.connectedNodes.findIndex((e=>e.equals(t)));this.connectedNodes.splice(e,1)}}var r=i(969);const{Facade:a}=i(710);function s(t,e,...i){const o=a.getInstance(t),s=pc.Application.getApplication(),u=function(t){const e=t.root.findByTag("navigation_floor");let i=[];const n=[];for(const t of e){const e=t.script.NavigationComponent;n.push(e);const i=h(t);e.setGrid(i)}for(const t of n)for(const e of t.connectedComponents){const n=e.script.NavigationComponent;p(t.getGrid(),n.getGrid()),i=i.concat(t.getGrid())}return i}(s),f=function(t,e){const i=[],n=t.root.findByTag("wall");for(const t of n){const n=c(t);i.push(n),d(t,e),t.destroy()}return i}(s,u),A=function(t,e){let i=[];const n=t.root.findByTag("cover");for(const t of n)i=i.concat(l(t,e)),t.destroy();return i}(s,u),g=function(t){const e=new Map,i=t.root.findByTag("portal");for(const t of i){const i=t.script.PortalComponent,n=i.portalId,o={portalId:n,destinationScene:i.destinationScene,destinationPortal:i.destinationPortal,standingPoint:i.standingPoint.getPosition(),hitboxPoint:i.hitbox.getPosition()};e.set(n,o)}return e}(s);o.hasProxy(r.h.NAME)&&o.removeProxy(r.h.NAME),o.registerProxy(new r.h(u,f,A,g)),console.log("MAP_GRID_CREATED"),o.sendNotification(n.i.MAP_GRID_CREATED)}function c(t){const e=t.getLocalScale(),i=new pc.Vec3(e.x/2,e.y/2,e.z/2);return new pc.BoundingBox(t.getPosition(),i)}function d(t,e){const i=t.getPosition(),n=t.getLocalScale(),o=Math.round(i.y-.5*n.y),r=Math.round(i.x-.5*n.x),a=Math.round(i.z-.5*n.z);for(let t=r;t<r+n.x;t++)for(let i=a;i<a+n.z;i++){const n=e.findIndex((e=>e.equalsPoint(t,o,i)));if(n>-1){const t=e.splice(n,1);for(const e of t)for(const t of e.connectedNodes)t.disconnectedNode(e)}}}function h(t){const e=[],i=t.getLocalPosition(),n=t.getLocalScale(),r=Math.round(n.x),a=Math.round(n.z),s=Math.round(i.x-r/2),c=i.y,d=Math.round(i.z-a/2);for(let t=d;t<d+a;t++)for(let i=s;i<s+r;i++){const n=new o(i,c,t);e.push(n)}for(const t of e)for(const i of e)(i.equalsPoint(t.x-1,t.y,t.z)||i.equalsPoint(t.x+1,t.y,t.z)||i.equalsPoint(t.x,t.y,t.z-1)||i.equalsPoint(t.x,t.y,t.z+1))&&t.addConnectedNode(i);return e}function p(t,e){for(const i of t)for(const t of e)(t.equalsPoint(i.x-1,i.y,i.z)||t.equalsPoint(i.x+1,i.y,i.z)||t.equalsPoint(i.x,i.y,i.z-1)||t.equalsPoint(i.x,i.y,i.z+1))&&i.addConnectedNode(t)}function l(t,e){const i=[],n=t.getPosition(),o=t.getLocalScale(),r=Math.round(n.y-.5*o.y),a=Math.round(n.x-.5*o.x),s=Math.round(n.z-.5*o.z);for(let t=a;t<a+o.x;t++)for(let n=s;n<s+o.z;n++){const o=new pc.Vec3(t,r,n);i.push(o);const a=e.findIndex((e=>e.equalsPoint(t,r,n)));if(a>-1){const t=e.splice(a,1);for(const e of t)for(const t of e.connectedNodes)t.disconnectedNode(e)}}return i}var u=i(917);const{Proxy:f}=i(710);class A extends f{get vo(){return this.getData()}static get NAME(){return"WeaponsProxy"}constructor(t){super(A.NAME,t)}getDamage(t,e){for(const i in this.vo)if(Object.hasOwnProperty.call(this.vo,i)){const n=this.vo[i];if(Object.hasOwnProperty.call(n,t))return n[t].damage[Math.min(e-1,6)]}throw new Error("Cannot find weapon:: "+t)}getWeaponCategory(t){for(const e in this.vo)if(Object.hasOwnProperty.call(this.vo,e)){const i=this.vo[e];if(Object.hasOwnProperty.call(i,t))return e}throw new Error("Cannot category for weapon:: "+t)}}const{Facade:g}=i(710);function E(t,e){g.getInstance(t).registerProxy(new u.u);const i=pc.Application.getApplication();if(i){const e=i.assets.get(40415631).resource;g.getInstance(t).registerProxy(new A(e))}}const{Facade:m}=i(710);function y(t,e,...i){const o=pc.Application.getApplication(),r=i[0],a=i[1];console.log("Changing scene "+r);const s=o.root.findByName("Root"),c=o.scenes.find(r);o.scenes.loadSceneHierarchy(c.url,(function(e,i){e?console.error(e):s&&s.destroy(),m.getInstance(t).sendNotification(n.i.CHANGE_SCENE_COMPLETE,r),m.getInstance(t).sendNotification(n.i.PARSE_GAMEMAP,r),m.getInstance(t).sendNotification(n.i.ADD_PLAYER_CHARACTER_TO_MAP,a)}))}function N(t){let e=t.length,i=void 0,n=-1;for(;0!==e;)n=Math.floor(Math.random()*e),e-=1,i=t[e],t[e]=t[n],t[n]=i;return t}var M=i(958);const{Proxy:C}=i(710),{CombatVO:v}=i(201);class T extends C{get vo(){return this.getData()}static get NAME(){return"CombatProxy"}constructor(t,e){super(T.NAME,new v(t,e))}onRegister(){const t=this.vo.participants;this.participantProxies=new Map;for(const e of t){const t=this.facade.retrieveProxy(M.b.NAME+e);this.participantProxies.set(e,t)}}nextTurn(){const t=this.vo.roundInitiative;if(t&&t.length>0){const e=t.shift();if(this.vo.activeParticipant=e,"end_round"!==e){this.facade.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Turn "+e);const t=this.participantProxies.get(e);t.resetCombatTurnState(),t.isNPC?this.facade.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,e):this.facade.sendNotification(n.i.AWAIT_PLAYER_COMBAT_INPUT,e)}else this.facade.sendNotification(n.i.SHOW_TOAST_MESSAGE,"End round"),setTimeout((()=>{this.facade.sendNotification(n.i.NEXT_COMBAT_ROUND)}),3e3)}}nextRound(){console.log("/////////////////"),console.log("//  New round  //"),console.log("/////////////////");const t=[];for(const[e,i]of this.participantProxies.entries()){const n=i.vo;for(let i=0;i<n.initiative;i++)t.push(e)}if(0===t.length)return void this.facade.sendNotification(n.i.END_COMBAT);t.push("end_round");let e=N(t);for(;"end_round"===e[0];)e=N(e);this.vo.roundInitiative=e}get nextTurnCharacterId(){return this.vo.nextTurnCharacterId}get activeParticipant(){return this.vo.activeParticipant}set activeParticipant(t){this.vo.activeParticipant=t}get participants(){return this.vo.participants}get teams(){return this.vo.teams}removeCharacterFromCombat(t){this.participantProxies.delete(t),this.vo.roundInitiative=this.vo.roundInitiative.filter((e=>e!==t));for(const[e,i]of this.teams.entries()){const o=i.indexOf(t);o>-1&&i.splice(o,1),0===i.length&&this.facade.sendNotification(n.i.END_COMBAT,e)}}}var _=i(448);const{Facade:P}=i(710);function b(t,e,...i){const o=i[0],r=P.getInstance(t);r.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Start Combat"),r.retrieveProxy(u.u.NAME).updateGameStateType(_.gameplayModeTypes.COMBAT);const a=r.retrieveProxy(M.b.NAME+o);r.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"spotted",a);const s=new Map,c=["player"];s.set("player_team",c);const d=[o].concat(a.combatGroup).filter((function(t,e,i){return i.indexOf(t)==e}));s.set("opposing_team",d);const h=c.concat(d),p=r.retrieveProxy(M.b.NAME+"player");for(const t of h)r.sendNotification(n.i.END_MOVEMENT+t),"player"!==t?r.sendNotification(n.i.CHARACTER_LOOK_AT+t,p.currentNode):r.sendNotification(n.i.CHARACTER_LOOK_AT+t,a.currentNode);const l=new T(h,s);r.registerProxy(l),setTimeout((()=>{r.sendNotification(n.i.NEXT_COMBAT_ROUND)}),2e3)}const{Facade:S}=i(710);function O(t,e,...i){const n=S.getInstance(t),o=n.retrieveProxy(u.u.NAME),r=n.retrieveProxy(T.NAME);o.vo.gameplayMode===_.gameplayModeTypes.COMBAT&&r.nextTurn()}const{Facade:x}=i(710);function w(t,e,...i){const o=x.getInstance(t),r=o.retrieveProxy(u.u.NAME),a=o.retrieveProxy(T.NAME);r.vo.gameplayMode===_.gameplayModeTypes.COMBAT&&(a.nextRound(),o.sendNotification(n.i.NEXT_COMBAT_TURN,a.vo.nextTurnCharacterId))}const{Facade:I}=i(710);function R(t,e,...i){setTimeout((()=>{const e=I.getInstance(t),i=e.retrieveProxy(T.NAME);e.sendNotification(n.i.HIDE_WALKABLE_AREA),e.sendNotification(n.i.NEXT_COMBAT_TURN,i.nextTurnCharacterId)}),500)}var L=i(434);class D{static get SUCCESS(){return 0}static get FAILURE(){return 1}static get RUNNING(){return 2}static get ERROR(){return 3}}class G{constructor(t){this.initialize(t)}initialize(t){this.id=function(){for(var t=[],e="0123456789abcdef",i=0;i<36;i++)t[i]=e.substr(Math.floor(16*Math.random()),1);return t[14]="4",t[19]=e.substr(3&t[19]|8,1),t[8]=t[13]=t[18]=t[23]="-",t.join("")}(),this.children=t||[]}execute(t){this._enter(t),t.blackboard.get("isOpen",t.tree.id,this.id)||this._open(t);const e=this._tick(t);return e!==D.RUNNING&&this._close(t),this._exit(t),e}_enter(t){t.enterNode(this),this.enter(t)}_open(t){t.openNode(this),t.blackboard.set("isOpen",!0,t.tree.id,this.id),this.open(t)}_tick(t){return t.tickNode(this),this.tick(t)}_close(t){t.closeNode(this),t.blackboard.set("isOpen",!1,t.tree.id,this.id),this.close(t)}_exit(t){t.exitNode(this),this.exit(t)}enter(t){}open(t){}tick(t){return D.ERROR}close(t){}exit(t){}}class k extends G{tick(t){for(const e of this.children)e.execute(t);return D.SUCCESS}}class H{constructor(){this.initialise()}initialise(){this.baseMemory={},this.treeMemory={}}getTreeMemory(t){return this.treeMemory[t]||(this.treeMemory[t]={nodeMemory:{},openNodes:[]}),this.treeMemory[t]}getNodeMemory(t,e){const i=t.nodeMemory;return i.hasOwnProperty(e)||(i[e]={}),i[e]}getMemory(t,e){var i=this.baseMemory;return t&&(i=this.getTreeMemory(t),e&&(i=this.getNodeMemory(i,e))),i}set(t,e,i,n){this.getMemory(i,n)[t]=e}get(t,e,i){return this.getMemory(e,i)[t]}}class V{constructor(){this.initialise()}initialise(){this.tree=void 0,this.openNodes=[],this.nodeCount=0,this.debug=void 0,this.target=void 0,this.blackboard=void 0}enterNode(t){this.nodeCount++,this.openNodes.push(t)}openNode(t){}tickNode(t){}closeNode(t){this.openNodes.pop()}exitNode(t){}}class U{constructor(t){this.initialise(t)}initialise(t){this.id=t,this.root=void 0}tick(t,e){const i=new V;i.target=t,i.blackboard=e,i.tree=this,this.root.execute(i);const n=e.get("openNodes",this.id)||[],o=i.openNodes.slice(0);let r=0;for(let t=0;t<Math.min(n.length,o.length)&&(r=t+1,n[t]===o[t]);t++);for(let t=n.length-1;t>=r;t--)n[t].close(i);e.set("openNodes",o,this.id),e.set("nodeCount",i.nodeCount,this.id)}}class F{constructor(t){this.id="basicMeleeTree",this.blackboard=new H,this.tree=new U(t),this.initialise()}initialise(){}runCommands(t,e){this.blackboard.set("facade",t,!1,!1),this.blackboard.set("characterId",e,this.tree.id,!1),this.tree.tick(this,this.blackboard)}}class B extends G{tick(t){for(const e of this.children){const i=e.execute(t);if(i!==D.FAILURE)return i}return D.FAILURE}}class z extends G{tick(t){return t.blackboard.set("target","player",t.tree.id,!1),D.SUCCESS}}class W extends G{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1);return e.sendNotification(n.i.RESOLVE_ATTACK,i,o),D.SUCCESS}}class K extends G{tick(t){return t.blackboard.get("facade",!1,!1).sendNotification(n.i.END_COMBAT_TURN),D.SUCCESS}}class Y extends G{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(M.b.NAME+i).availableMovement>0?D.SUCCESS:D.FAILURE}}class j extends G{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=e.retrieveProxy(M.b.NAME+i).currentNode;return e.retrieveProxy(M.b.NAME+"player").currentNode.connectedNodes.some((t=>t.equals(n)))?D.SUCCESS:D.FAILURE}}class q extends G{open(t){t.blackboard.set("runningChild",0,t.tree.id,this.id)}tick(t){for(let e=t.blackboard.get("runningChild",t.tree.id,this.id);e<this.children.length;e++){let i=this.children[e].execute(t);if(i!==D.SUCCESS)return i===D.RUNNING&&t.blackboard.set("runningChild",e,t.tree.id,this.id),i}return D.SUCCESS}}class X extends G{tick(t){const e=this.children[0];if(!e)return D.ERROR;let i=e.execute(t);return i==D.SUCCESS?i=D.FAILURE:i==D.FAILURE&&(i=D.SUCCESS),i}}class Q extends G{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("target",t.tree.id,!1);return e.retrieveProxy(M.b.NAME+i).isDead?D.SUCCESS:D.FAILURE}}class $ extends G{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1),r=e.retrieveProxy(M.b.NAME+i),a=r.currentNode,s=e.retrieveProxy(M.b.NAME+o).currentNode.connectedNodes.filter((t=>!t.occupied));if(s.length>0){let t=s.reduce(((t,e)=>J(a,t)<J(a,e)?t:e));const o=L.q.calculatePath(a,t);if(o&&o.length>0){const a=r.vo;for(;o.length>a.availableMovement;)o.shift();e.sendNotification(n.i.NAVIGATE_ALONG_PATH+i,o),r.currentNode=t}}return r.availableMovement=0,D.SUCCESS}}function J(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)}class Z extends G{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(M.b.NAME+i).isDead?D.SUCCESS:D.FAILURE}}class tt extends G{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(M.b.NAME+i).availableActions>0?D.SUCCESS:D.FAILURE}}class et extends G{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(M.b.NAME+i).availableMovement=0,D.SUCCESS}}class it extends F{constructor(){super("basicMeleeTree")}initialise(){this.tree.root=new k([new B([new q([new z,new X([new Z]),new X([new Q]),new B([new q([new j,new tt,new z,new W,new et]),new q([new Y,new z,new $])])]),new K])])}}const{Facade:nt}=i(710);function ot(t,e,...i){const n=i[0],o=nt.getInstance(t),a=(o.retrieveProxy(r.h.NAME),o.retrieveProxy(M.b.NAME+n).currentNode);o.retrieveProxy(M.b.NAME+"player").currentNode.connectedNodes.some((t=>t.equals(a))),(new it).runCommands(o,n)}var rt=i(710);function at(t,e,...i){const o=rt.Facade.getInstance(t),r=o.retrieveProxy(u.u.NAME),a=i[0];r.currentMode===_.gameplayModeTypes.EXPLORATION?o.sendNotification(n.i.NAVIGATE_TO_NODE+"player",a):r.currentMode===_.gameplayModeTypes.COMBAT&&"player"===o.retrieveProxy(T.NAME).activeParticipant&&o.sendNotification(n.i.COMBAT_NAVIGATE_TO_NODE,"player",a)}const{Facade:st}=i(710);function ct(t,e,...i){const n=st.getInstance(t),o=i[0],r=i[1],a=n.retrieveProxy(M.b.NAME+o),s=a.vo,c=L.q.breadthFirstSearch(s.currentNode,s.availableMovement);console.log(s),console.log(c),console.log(r);for(const t of c)t.equals(r)&&dt(n,a,r)}function dt(t,e,i){const o=e.vo,r=L.q.calculatePath(o.currentNode,i);r&&r.length>0&&(o.availableMovement-=r.length-1,e.currentNode=i,t.sendNotification(n.i.HIDE_WALKABLE_AREA),t.sendNotification(n.i.NAVIGATE_ALONG_PATH+o.id,r))}function ht(t,e,...i){const n=i[0],o=pc.Application.getApplication(),r=o.assets.get(40235966),a=o.root.findByName("WorldObjects");for(const t of n){const e=r.resource.instantiate();e.setLocalPosition(t.x,t.y,t.z),a.addChild(e)}}function pt(t,e,...i){const n=pc.Application.getApplication().root.findByTag("walkable_tile");for(const t of n)t.destroy()}function lt(t,e,...i){const o=i[0],r=rt.Facade.getInstance(t),a=r.retrieveProxy(M.b.NAME+o).vo,s=L.q.breadthFirstSearch(a.currentNode,a.availableMovement);r.sendNotification(n.i.SHOW_WALKABLE_AREA,s)}function ut(t,e,...i){const o=rt.Facade.getInstance(t),r=i[0],a=i[1];if(o.retrieveProxy(M.b.NAME+r).currentNode=a,o.retrieveProxy(u.u.NAME).currentMode===_.gameplayModeTypes.COMBAT){const t=o.retrieveProxy(T.NAME);t&&("player"===t.activeParticipant?o.sendNotification(n.i.AWAIT_PLAYER_COMBAT_INPUT,r):o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,r))}}function ft(t){const e=t.currentNode;return new pc.Vec3(e.x,e.y+.5*t.height,e.z)}function At(t,e,...i){const o=rt.Facade.getInstance(t),a=i[0].script.GameCharacterComponent.characterId,s=o.retrieveProxy(u.u.NAME),c=o.retrieveProxy(r.h.NAME),d=o.retrieveProxy(M.b.NAME+a),h=o.retrieveProxy(M.b.NAME+"player"),p=o.retrieveProxy(A.NAME).getWeaponCategory(h.equippedWeapon);if(s.currentMode===_.gameplayModeTypes.EXPLORATION)if("attack"===s.currentAction&&"ranged"===p)Et(c,h,d)?(o.sendNotification(n.i.RESOLVE_RANGED_ATTACK,"player",a),o.sendNotification(n.i.START_COMBAT,a)):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"No line of sight");else{const t=gt(h,d);t&&o.sendNotification(n.i.NAVIGATE_ALONG_PATH+"player",t)}else if(s.currentMode===_.gameplayModeTypes.COMBAT){const t=o.retrieveProxy(T.NAME);if(!t||"player"!==t.activeParticipant)return;if(h.availableActions<=0)return void o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Out of actions");if("ranged"===p)Et(c,h,d)?o.sendNotification(n.i.RESOLVE_RANGED_ATTACK,"player",a):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"No line of sight");else if(function(t,e){const i=e.currentNode;return t.currentNode.connectedNodes.some((t=>t.equals(i)))}(h,d))"attack"===s.currentAction&&"attack"===s.currentAction&&o.sendNotification(n.i.RESOLVE_ATTACK,h.id,d.id);else{const t=gt(h,d);t&&t.length-1<=h.vo.availableMovement?"attack"===s.currentAction?o.sendNotification(n.i.MOVE_ALONG_PATH_AND_ATTACK,"player",d.id,t):o.sendNotification(n.i.COMBAT_NAVIGATE_TO_NODE,"player",t.shift()):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Cannot reach target")}}}function gt(t,e){const i=e.currentNode.connectedNodes.filter((t=>!t.occupied));if(i.length>0){const e=t.currentNode;let n=L.q.calculatePath(e,i[0]);for(let t=1;t<i.length;t++){const o=L.q.calculatePath(e,i[t]);o.length<n.length&&(n=o)}return n}}function Et(t,e,i){const n=ft(e),o=ft(i);return!t.rayIntersectsWall(n,o)}function mt(t,e,...i){const o=rt.Facade.getInstance(t),r=i[0],a=i[1],s=o.retrieveProxy(u.u.NAME);s.currentAction===r?s.currentAction="none":s.currentAction=r,o.sendNotification(n.i.TOGGLE_BUTTON,a)}var yt=i(829);function Nt(t,e,...i){const o=rt.Facade.getInstance(t),r=i[0],a=o.retrieveProxy(M.b.NAME+r),s=i[1],c=o.retrieveProxy(M.b.NAME+s);o.sendNotification(n.i.CHARACTER_LOOK_AT+r,c.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+s,a.currentNode);const d=Ct(a.skill),h=Ct(c.skill),p=o.retrieveProxy(A.NAME);if(a.availableActions-=1,d===h)o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`Attack tied(${d}/${h})`);else if(d>h){const t=Mt(d,h),e=p.getDamage(a.equippedWeapon,t);c.applyDamage(e),o.sendNotification(n.i.DISPLAY_ATTACK+r),c.isDead?(o.sendNotification(n.i.DISPLAY_DEATH+s),o.sendNotification(n.i.KILL_GAME_CHARACTER,s)):(o.sendNotification(n.i.DISPLAY_HIT+s),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${r} damages ${s} for ${e}`))}else{const t="melee"===p.getWeaponCategory(c.equippedWeapon),e=Mt(h,d),i=t?c.equippedWeapon:yt.j.UNARMED,l=p.getDamage(i,e);a.applyDamage(l),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${s} damages ${r} for ${l}`),o.sendNotification(n.i.DISPLAY_ATTACK+s),a.isDead?(o.sendNotification(n.i.DISPLAY_DEATH+r),o.sendNotification(n.i.KILL_GAME_CHARACTER,r)):o.sendNotification(n.i.DISPLAY_HIT+r)}const l=o.retrieveProxy(T.NAME);l&&"player"!==l.activeParticipant&&setTimeout((()=>{o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,r)}),1500)}function Mt(t,e){return t-e}function Ct(t){return t+vt()+vt()}function vt(){return Math.round(6*Math.random())}var Tt=i(321);const{Facade:_t}=i(710);function Pt(t,e,...i){const o=_t.getInstance(t),r=i[0],a=i[1],s=i[2];o.retrieveProxy(M.b.NAME+r).useMovement(s.length-1);const c=o.retrieveMediator(Tt.y.NAME+r);o.sendNotification(n.i.HIDE_WALKABLE_AREA),c.handleNavigateAlongPathWithPromise(s).then((()=>{o.sendNotification(n.i.RESOLVE_ATTACK,r,a)}))}function bt(t,e,...i){const o=rt.Facade.getInstance(t),r=i[0],a=o.retrieveProxy(M.b.NAME+r);o.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"death",a),a&&(a.currentNode.occupied=!1);const s=o.retrieveProxy(T.NAME);s&&s.removeCharacterFromCombat(r)}const{Facade:St}=i(710);function Ot(t,e,...i){const o=i[0],r=St.getInstance(t);r.hasMediator(T.NAME)&&r.removeMediator(T.NAME),r.sendNotification(n.i.HIDE_WALKABLE_AREA),r.retrieveProxy(u.u.NAME).updateGameStateType(_.gameplayModeTypes.EXPLORATION),"player_team"===o?r.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Game Over"):r.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Victory")}var xt=i(316);class wt extends G{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1);return e.sendNotification(n.i.RESOLVE_RANGED_ATTACK,i,o),D.SUCCESS}}class It extends G{constructor(t,e){super([]),this.minDistance=t,this.maxDistance=e}tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1),r=e.retrieveProxy(M.b.NAME+i),a=r.currentNode,s=e.retrieveProxy(M.b.NAME+o).currentNode,c=Math.pow(this.minDistance,2),d=Math.pow(this.maxDistance,2),h=r.availableMovement;r.availableMovement=0;const p=Rt(s,a);if(p>=c&&p<=d)return D.FAILURE;{const t=L.q.breadthFirstSearch(a,h);if(t.length>0){if(p<c){let o=t.reduce(((t,e)=>Rt(s,t)>Rt(s,e)?t:e));const c=L.q.calculatePath(a,o);c&&c.length>0&&(e.sendNotification(n.i.NAVIGATE_ALONG_PATH+i,c),r.currentNode=o)}else{let o=t.reduce(((t,e)=>Rt(s,t)<Rt(s,e)?t:e));const c=L.q.calculatePath(a,o);c&&c.length>0&&(e.sendNotification(n.i.NAVIGATE_ALONG_PATH+i,c),r.currentNode=o)}return D.SUCCESS}return D.FAILURE}}}function Rt(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)+Math.pow(e.z-t.z,2)}class Lt extends G{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);setTimeout((()=>{setTimeout((()=>{e.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,i)}),500)}),500)}}class Dt extends G{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1),o=e.retrieveProxy(M.b.NAME+i),a=(o.currentNode,e.retrieveProxy(M.b.NAME+n)),s=(a.currentNode,e.retrieveProxy(r.h.NAME)),c=ft(o),d=ft(a);return s.rayIntersectsWall(c,d)?D.FAILURE:D.SUCCESS}}class Gt extends G{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1),a=e.retrieveProxy(M.b.NAME+i),s=a.currentNode,c=e.retrieveProxy(M.b.NAME+o),d=c.currentNode.connectedNodes,h=e.retrieveProxy(r.h.NAME),p=d.filter((t=>!t.occupied));if(p.length>0){let t=p.reduce(((t,e)=>kt(s,t)<kt(s,e)?t:e));const o=L.q.calculatePath(s,t);if(o&&o.length>0){const r=a.vo;for(;o.length>r.availableMovement;)o.shift();const s=ft(c);let d=0;for(let t=o.length-1;t>=0;t--){const e=o[t],i=new pc.Vec3(e.x,e.y+.5*a.height,e.z);if(!h.rayIntersectsWall(i,s)){d=t;break}}o.splice(0,d),e.sendNotification(n.i.NAVIGATE_ALONG_PATH+i,o),a.currentNode=t}}return a.availableMovement=0,D.SUCCESS}}function kt(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)}class Ht extends F{constructor(){super("basicRangedTree")}initialise(){this.tree.root=new k([new B([new q([new z,new X([new Z]),new X([new Q]),new B([new q([new Y,new X([new Dt]),new Gt]),new q([new Y,new B([new It(9,12),new Lt])]),new q([new tt,new Dt,new wt])])]),new K])])}}function Vt(t,e,...i){const n=rt.Facade.getInstance(t),o=i[0];switch(n.retrieveProxy(M.b.NAME+o).botBehaviour){case xt.r.BASIC_MELEE:(new it).runCommands(n,o);break;case xt.r.BASIC_RANGED:(new Ht).runCommands(n,o)}}var Ut=i(852);function Ft(t,e,...i){const o=rt.Facade.getInstance(t);let a=0,s=0;const c=i[0],d=o.retrieveProxy(M.b.NAME+c),h=d.currentNode;let p=i[1],l=o.retrieveProxy(M.b.NAME+p);const u=l.currentNode;o.sendNotification(n.i.CHARACTER_LOOK_AT+c,l.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+p,d.currentNode),a+=Bt(d.skill),s+=Bt(l.skill);const f=o.retrieveProxy(A.NAME);o.retrieveProxy(r.h.NAME).isInCover(new pc.Vec3(u.x,u.y,u.z),new pc.Vec3(h.x,h.y,h.z))&&(s+=2);const g=o.retrieveMediator(Ut.N.NAME),E=new pc.Vec3(d.currentNode.x,d.currentNode.y+1,d.currentNode.z),m=new pc.Vec3(l.currentNode.x,l.currentNode.y+1,l.currentNode.z);d.availableActions-=1,o.sendNotification(n.i.DISPLAY_ATTACK+c),g.createProjectile("crossbow_bolt",E,m).then((()=>{if(a>s){const t=o.retrieveProxy(T.NAME);if(t){const e=l.currentNode.connectedNodes,i=[p];for(const n of t.participants){const t=o.retrieveProxy(M.b.NAME+n);!t.isDead&&e.some((e=>e.equals(t.currentNode)))&&i.push(n)}p=i[Math.floor(Math.random()*i.length)],l=o.retrieveProxy(M.b.NAME+p)}const e=a-s,i=f.getDamage(d.equippedWeapon,e);l.applyDamage(i),l.isDead?(o.sendNotification(n.i.DISPLAY_DEATH+p),o.sendNotification(n.i.KILL_GAME_CHARACTER,p)):(o.sendNotification(n.i.DISPLAY_HIT+p),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${c} damages ${p} for ${i}`))}else o.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"dodge",l);const t=o.retrieveProxy(T.NAME);t&&"player"!==t.activeParticipant&&setTimeout((()=>{o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,c)}),500)}))}function Bt(t){return t+zt()+zt()}function zt(){return Math.round(6*Math.random())}const{Facade:Wt}=i(710);function Kt(t,e,...i){const o=Wt.getInstance(t);if(o.retrieveProxy(u.u.NAME).currentMode===_.gameplayModeTypes.COMBAT&&"player"!==o.retrieveProxy(T.NAME).activeParticipant)return void o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Must change weapon on your turn");const r=i[0],a=i[1];o.retrieveProxy(M.b.NAME+r).equippedWeapon=a,o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${r} equips ${a}`)}function Yt(t,e,...i){const o=rt.Facade.getInstance(t),a=i[0],s=i[1],c=i[2],d=o.retrieveProxy(r.h.NAME).findNearestNode(a);o.retrieveMediator(Tt.y.NAME+"player").moveToNodeWithPromise(d).then((()=>{o.sendNotification(n.i.CHANGE_SCENE,s,c)}))}const{Facade:jt}=i(710);function qt(t,e,...i){const n=jt.getInstance(t),o=i[0],a=pc.Application.getApplication(),s=a.assets.get(40523336),c=a.root.findByName("WorldObjects"),d=s.resource.instantiate();c.addChild(d);const h=n.retrieveProxy(r.h.NAME).retrievePortal(o);d.setLocalPosition(h.standingPoint)}const{Facade:Xt}=i(710);class Qt extends Xt{static getInstance(t){return Xt.instanceMap[t]||(Xt.instanceMap[t]=new Qt(t)),Xt.instanceMap[t]}static get KEY(){return"Cacogen"}static get NAME(){return"CacogenFacade"}static get STARTUP(){return Qt.NAME+"StartUp"}startup(t){this.sendNotification(Qt.STARTUP,t)}sendNotification(t,...e){super.sendNotification(t,...e)}initializeController(){super.initializeController(),this.registerCommand(Qt.STARTUP,E),this.registerCommand(n.i.CHANGE_SCENE,y),this.registerCommand(n.i.PARSE_GAMEMAP,s),this.registerCommand(n.i.START_COMBAT,b),this.registerCommand(n.i.NEXT_COMBAT_TURN,O),this.registerCommand(n.i.NEXT_COMBAT_ROUND,w),this.registerCommand(n.i.END_COMBAT_TURN,R),this.registerCommand(n.i.ENEMY_TURN,ot),this.registerCommand(n.i.SELECTED_NODE,at),this.registerCommand(n.i.COMBAT_NAVIGATE_TO_NODE,ct),this.registerCommand(n.i.DETERMINE_NEXT_ENEMY_ACTION,Vt),this.registerCommand(n.i.SHOW_WALKABLE_AREA,ht),this.registerCommand(n.i.HIDE_WALKABLE_AREA,pt),this.registerCommand(n.i.AWAIT_PLAYER_COMBAT_INPUT,lt),this.registerCommand(n.i.FINISHED_MOVE,ut),this.registerCommand(n.i.SELECT_GAME_CHARACTER,At),this.registerCommand(n.i.SET_PLAYER_ACTION,mt),this.registerCommand(n.i.RESOLVE_ATTACK,Nt),this.registerCommand(n.i.RESOLVE_RANGED_ATTACK,Ft),this.registerCommand(n.i.MOVE_ALONG_PATH_AND_ATTACK,Pt),this.registerCommand(n.i.KILL_GAME_CHARACTER,bt),this.registerCommand(n.i.END_COMBAT,Ot),this.registerCommand(n.i.EQUIP_WEAPON,Kt),this.registerCommand(n.i.NAVIGATE_THROUGH_PORTAL,Yt),this.registerCommand(n.i.ADD_PLAYER_CHARACTER_TO_MAP,qt)}}},316:(t,e,i)=>{i.d(e,{r:()=>n,_:()=>o});class n{static get NONE(){return 0}static get BASIC_MELEE(){return 1}static get BASIC_RANGED(){return 2}}const o=[{NONE:n.NONE},{BASIC_MELEE:n.BASIC_MELEE},{BASIC_RANGED:n.BASIC_RANGED}]},68:(t,e,i)=>{i.d(e,{i:()=>n});class n{static get CHANGE_SCENE(){return"CHANGE_SCENE"}static get CHANGE_SCENE_COMPLETE(){return"CHANGE_SCENE_COMPLETE"}static get APP_INITIALISED(){return"APP_INITIALISED"}static get PARSE_GAMEMAP(){return"PARSE_GAMEMAP"}static get MAP_GRID_CREATED(){return"MAP_GRID_CREATED"}static get NAVIGATE_TO_NODE(){return"NAVIGATE_TO_NODE"}static get NAVIGATE_THROUGH_PORTAL(){return"NAVIGATE_THROUGH_PORTAL"}static get COMBAT_NAVIGATE_TO_NODE(){return"COMBAT_NAVIGATE_TO_NODE"}static get SET_CAMERA_TARGET(){return"SET_CAMERA_TARGET"}static get INPUT_DRAG_MOUSE(){return"INPUT_DRAG_MOUSE"}static get MOVED_TO_NODE(){return"MOVED_TO_NODE"}static get FINISHED_MOVE(){return"FINISHED_MOVE"}static get START_COMBAT(){return"START_COMBAT"}static get SHOW_TOAST_MESSAGE(){return"SHOW_TOAST_MESSAGE"}static get NEXT_COMBAT_TURN(){return"NEXT_COMBAT_TURN"}static get NEXT_COMBAT_ROUND(){return"NEXT_COMBAT_ROUND"}static get END_COMBAT(){return"END_COMBAT"}static get END_COMBAT_TURN(){return"END_COMBAT_TURN"}static get ENEMY_TURN(){return"ENEMY_TURN"}static get SELECTED_NODE(){return"SELECTED_NODE"}static get DETERMINE_NEXT_ENEMY_ACTION(){return"DETERMINE_NEXT_ENEMY_ACTION"}static get NAVIGATE_ALONG_PATH(){return"NAVIGATE_ALONG_PATH"}static get SHOW_WALKABLE_AREA(){return"SHOW_WALKABLE_AREA"}static get HIDE_WALKABLE_AREA(){return"HIDE_WALKABLE_AREA"}static get END_MOVEMENT(){return"END_MOVEMENT"}static get AWAIT_PLAYER_COMBAT_INPUT(){return"AWAIT_PLAYER_COMBAT_INPUT"}static get SET_CHARACTER_TO_NODE(){return"SET_CHARACTER_TO_NODE"}static get SELECT_GAME_CHARACTER(){return"SELECT_GAME_CHARACTER"}static get SET_PLAYER_ACTION(){return"SET_PLAYER_ACTION"}static get TOGGLE_BUTTON(){return"TOGGLE_BUTTON"}static get USE_PLAYER_ACTION(){return"USE_PLAYER_ACTION"}static get RESOLVE_ATTACK(){return"RESOLVE_ATTACK"}static get RESOLVE_RANGED_ATTACK(){return"RESOLVE_RANGED_ATTACK"}static get MOVE_ALONG_PATH_AND_ATTACK(){return"MOVE_ALONG_PATH_AND_ATTACK"}static get UPDATE_STAMINA(){return"UPDATE_STAMINA"}static get DISPLAY_DEATH(){return"DISPLAY_DEATH"}static get DISPLAY_ATTACK(){return"DISPLAY_ATTACK"}static get DISPLAY_HIT(){return"DISPLAY_HIT"}static get KILL_GAME_CHARACTER(){return"KILL_GAME_CHARACTER"}static get CHARACTER_LOOK_AT(){return"CHARACTER_LOOK_AT"}static get CHANGE_STAMINA(){return"CHANGE_STAMINA"}static get EQUIP_WEAPON(){return"EQUIP_WEAPON"}static get USE_ACTION(){return"USE_ACTION"}static get DISPLAY_FLOATING_STATUS(){return"DISPLAY_FLOATING_STATUS"}static get ADD_PLAYER_CHARACTER_TO_MAP(){return"ADD_PLAYER_CHARACTER_TO_MAP"}}},829:(t,e,i)=>{i.d(e,{j:()=>n,E:()=>o});class n{static get SWORD(){return"sword"}static get AXE(){return"axe"}static get KNIFE(){return"knife"}static get STAFF(){return"staff"}static get HAMMER(){return"hammer"}static get SPEAR(){return"spear"}static get MACE(){return"mace"}static get POLEARM(){return"polearm"}static get MAUL(){return"maul"}static get GREATSWORD(){return"greatsword"}static get CLUB(){return"club"}static get UNARMED(){return"unarmed"}static get SHIELD(){return"shield"}static get FUSIL(){return"fusil"}static get BOW(){return"bow"}static get CROSSBOW(){return"crossbow"}static get PISTOLET(){return"pistolet"}}const o=Object.entries(Object.getOwnPropertyDescriptors(n)).filter((([t,e])=>"function"==typeof e.get)).map((([t])=>({[t]:n[t]})))},201:(t,e,i)=>{i.r(e),i.d(e,{CombatVO:()=>n});class n{constructor(t,e){this.participants=t,this.roundInitiative=[],this.activeParticipant=void 0,this.teams=e}get nextTurnCharacterId(){return this.roundInitiative[0]}}},958:(t,e,i)=>{i.d(e,{b:()=>a});var n=i(68);const{Proxy:o}=i(710),{GameCharacterVO:r}=i(940);class a extends o{get vo(){return this.getData()}static get NAME(){return"GameCharacterProxy_"}constructor(t){super(a.NAME+t.id,new r(t))}resetCombatTurnState(){this.vo.availableMovement=this.vo.maxMovement,this.vo.availableActions=this.vo.maxActionsPerTurn}useMovement(t){this.vo.availableMovement-=t}applyDamage(t){this.vo.currentStamina-=t,this.vo.currentStamina=Math.max(0,this.vo.currentStamina),this.vo.currentStamina>0?this.facade.sendNotification(n.i.UPDATE_STAMINA+this.id,this.vo.currentStamina,this.vo.maximumStamina):console.log(this.id+" died"),this.facade.sendNotification(n.i.CHANGE_STAMINA+this.id,this.vo.currentStamina,this.vo.maxStamina)}get id(){return this.vo.id}get currentNode(){return this.vo.currentNode}set currentNode(t){this.vo.currentNode&&(this.vo.currentNode.occupied=!1),this.vo.currentNode=t,this.vo.currentNode.occupied=!0}get combatGroup(){return this.vo.combatGroup}get isNPC(){return this.vo.isNPC}get availableMovement(){return this.vo.availableMovement}set availableMovement(t){this.vo.availableMovement=t}get availableActions(){return this.vo.availableActions}set availableActions(t){this.vo.availableActions=t,this.facade.sendNotification(n.i.USE_ACTION+this.id,this.availableActions,this.maxActionsPerTurn)}get maxActionsPerTurn(){return this.vo.maxActionsPerTurn}get skill(){return this.vo.skill}get currentStamina(){return this.vo.currentStamina}get currentLuck(){return this.vo.currentStamina}get isDead(){return this.vo.currentStamina<=0}get botBehaviour(){return this.vo.botBehaviour}get equippedWeapon(){return this.vo.equippedWeapon}set equippedWeapon(t){this.vo.equippedWeapon=t}get height(){return this.vo.height}}},940:(t,e,i)=>{i.r(e),i.d(e,{GameCharacterVO:()=>n});class n{constructor(t){this.id=t.id,this.isNPC=t.isNPC,this.combatGroup=t.combatGroup||[],this.currentNode=void 0,this.initiative=t.initiative||2,this.maxMovement=t.maxMovement||6,this.height=t.height||1.8,this.maxActionsPerTurn=1,this.availableActions=this.maxActionsPerTurn,this.availableMovement=this.maxMovement,this.skill=t.skill||1,this.maxStamina=t.maxStamina||1,this.currentStamina=this.maxStamina,this.maxLuck=t.maxLuck||1,this.currentLuck=this.maxLuck,this.advancedSkills=t.advancedSkills||{},this.botBehaviour=t.botBehaviour||0,this.equippedWeapon=t.equippedWeapon||"unarmed"}}},969:(t,e,i)=>{i.d(e,{h:()=>a});var n=i(434);const{Proxy:o}=i(710),{GameMapVO:r}=i(438);class a extends o{get vo(){return this.getData()}static get NAME(){return"GameMapProxy"}constructor(t,e,i,n){super(a.NAME),this.setData({mapGrid:t,wallBoundingBoxes:e,cover:i,portals:n})}onRegister(){}findNearestNode(t){const e=this.vo.mapGrid;let i=e[0],o=n.q.getDistSquared(i,t);for(const r of e){const e=n.q.getDistSquared(r,t);e<o&&(o=e,i=r)}return i}rayIntersectsWall(t,e){const i=t.distance(e),n=e.clone().sub(t.clone()).normalize(),o=new pc.Ray(t,n),r=this.vo.wallBoundingBoxes;for(const e of r){const n=new pc.Vec3;if(e.intersectsRay(o,n)&&n.distance(t)<i)return!0}return!1}get cover(){return this.vo.cover}isInCover(t,e){const i=[],n=function(t){const e=[];return e.push(new pc.Vec3(t.x,t.y,t.z-1)),e.push(new pc.Vec3(t.x+1,t.y,t.z)),e.push(new pc.Vec3(t.x-1,t.y,t.z)),e.push(new pc.Vec3(t.x,t.y,t.z+1)),e}(t);for(const t of n)this.cover.find((e=>t.equals(e)))&&i.push(t);if(i.length>0){const n=t.distance(e);for(const t of i)if(t.distance(e)<n)return!0;return!1}return!1}retrievePortal(t){return this.vo.portals.get(t)}}},438:(t,e,i)=>{i.r(e),i.d(e,{GameMapVO:()=>n});class n{constructor(){this.mapGrid=[]}}},434:(t,e,i)=>{i.d(e,{q:()=>o});class n{constructor(){this.data=[]}push(t,e=0){return this.data.push({value:t,priority:e})}pop(){let t=0,e=1/0;for(let i=0;i<this.data.length;i++){let n=this.data[i].priority;Math.min(e,n)===n&&(e=n,t=i)}return this.data.splice(t,1)[0].value}size(){return this.data.length}empty(){return 0===this.data.length}}class o{static breadthFirstSearch(t,e){let i=[];const n=[];i.push(t);const o=new Map;o.set(t,t);let r=0;for(;i.length>0&&r<e;){const t=[];for(const e of i)for(let i=0;i<e.connectedNodes.length;i++){const r=e.connectedNodes[i];r.occupied||o.has(r)||(t.push(r),n.push(r),o.set(r,e))}i=t,r++}return n}static calculatePath(t,e){const i=new n;i.push(t,0);const o=new Map,r=new Map;for(o.set(t,t),r.set(t,0);!i.empty();){const t=i.pop();if(t.equals(e))break;for(let n=0;n<t.connectedNodes.length;n++){const a=t.connectedNodes[n],s=r.get(t)+1;if(!a.occupied&&(!r.has(a)||s<r.get(a))){r.set(a,s);let n=s+this.heuristic(a,e);i.push(a,n),o.set(a,t)}}}let a=e,s=!1;const c=[];for(c.push(a);!a.equals(t)&&!s;)o.has(a)||!a.equals(e)?(a=o.get(a),c.push(a)):s=!0;return s?void 0:c}static getDistSquared(t,e){return(t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y)+(t.z-e.z)*(t.z-e.z)}static heuristic(t,e){return Math.abs(t.x-e.x)+Math.abs(t.y-e.y)+Math.abs(t.z-e.z)}}},917:(t,e,i)=>{i.d(e,{u:()=>r});const{Proxy:n}=i(710),{GameStateVO:o}=i(448);class r extends n{get vo(){return this.getData()}static get NAME(){return"GameStateProxy"}constructor(){super(r.NAME,new o)}updateGameStateType(t){this.vo.gameplayMode=t}get currentMode(){return this.vo.gameplayMode}get currentAction(){return this.vo.selectedAction}set currentAction(t){this.vo.selectedAction=t}}},448:(t,e,i)=>{i.r(e),i.d(e,{gameplayModeTypes:()=>n,GameStateVO:()=>o});const n={EXPLORATION:"EXPLORATION",COMBAT:"COMBAT",DIALOGUE:"DIALOGUE"};class o{constructor(){this.gameplayMode=n.EXPLORATION,this.selectedAction="none"}}},321:(t,e,i)=>{i.d(e,{y:()=>c});var n=i(68),o=i(969),r=i(434),a=i(958);const{Mediator:s}=i(710);class c extends s{static get NAME(){return"GameCharacterMediator_"}constructor(t,e,i){super(c.NAME+t),this.id=t;let o=[n.i.CHANGE_SCENE_COMPLETE,n.i.NAVIGATE_TO_NODE+this.id,n.i.NAVIGATE_ALONG_PATH+this.id,n.i.SET_CHARACTER_TO_NODE+this.id,n.i.DISPLAY_DEATH+this.id,n.i.DISPLAY_ATTACK+this.id,n.i.DISPLAY_HIT+this.id,n.i.CHARACTER_LOOK_AT+this.id,n.i.START_COMBAT,n.i.MAP_GRID_CREATED];o=o.concat(i),this.subscribeNotification(o),this.viewComponent=e,this.viewComponent.on("updateCurrentNode",this.updateCurrentNode,this),this.viewComponent.on("finishedMove",this.handleFinishedMode,this),this.viewComponent.on("destroy",(()=>{this.viewComponent.off("updateCurrentNode",this.updateCurrentNode,this),this.viewComponent.off("finishedMove",this.handleFinishedMode,this)}))}onRegister(t){super.onRegister(t)}handleNotification(t,...e){this.viewComponent&&this.viewComponent.fire(t,this.id,...e);for(const i in this.viewComponent.script)if(Object.hasOwnProperty.call(this.viewComponent.script,i)){const n=this.viewComponent.script[i];"function"==typeof n.handleNotification&&n.handleNotification(t,this.id,...e)}switch(t){case n.i.START_COMBAT:this.handleStartCombat();break;case n.i.MAP_GRID_CREATED:const t=this.facade.retrieveProxy(o.h.NAME);this.facade.retrieveProxy(a.b.NAME+this.id).currentNode=t.findNearestNode(this.viewComponent.getLocalPosition());break;case n.i.NAVIGATE_TO_NODE+this.id:this.handleNavigateToNode(e[0]);break;case n.i.NAVIGATE_ALONG_PATH+this.id:this.handleNavigateAlongPath(e[0]);break;case n.i.SET_CHARACTER_TO_NODE+this.id:this.handleSetCharacterToNode(e[0]);break;case n.i.CHARACTER_LOOK_AT+this.id:const i=e[0];console.log(this.id),console.log(this.viewComponent),this.viewComponent.script.GameCharacterComponent.lookAtPoint(i);break;case n.i.DISPLAY_DEATH+this.id:const r=this.viewComponent.findByName("Hitbox");r&&r.fire("stopListening"),this.viewComponent.script.GameCharacterComponent.animateDeath();break;case n.i.DISPLAY_ATTACK+this.id:this.viewComponent.script.GameCharacterComponent.animateAttack();break;case n.i.DISPLAY_HIT+this.id:this.viewComponent.script.GameCharacterComponent.animateHit()}}handleNavigateToNode(t){const e=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(a.b.NAME+this.id);i.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition());const n=r.q.calculatePath(i.currentNode,t);n&&n.length>0&&(this.viewComponent.script.GameCharacterComponent.setPath(n),i.currentNode=t)}handleNavigateAlongPath(t){this.viewComponent.script.GameCharacterComponent.setPath(t)}moveToNodeWithPromise(t){const e=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(a.b.NAME+this.id);i.currentNode,i.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition());const n=r.q.calculatePath(i.currentNode,t);return n&&n.length>0&&(this.viewComponent.script.GameCharacterComponent.setPath(n),i.currentNode=t),new Promise(((t,e)=>{this.viewComponent.on("finishedMove",(()=>{t()})),this.viewComponent.on("cancelMove",(()=>{e()}))}))}handleNavigateAlongPathWithPromise(t){return this.viewComponent.script.GameCharacterComponent.setPath(t),new Promise(((t,e)=>{this.viewComponent.on("finishedMove",(()=>{t()})),this.viewComponent.on("cancelMove",(()=>{e()}))}))}updateCurrentNode(t){this.facade.sendNotification(n.i.MOVED_TO_NODE+this.id,t)}handleFinishedMode(t){this.facade.sendNotification(n.i.FINISHED_MOVE,this.id,t)}lookForCharacter(t,e){for(const i of this.searchArea)i.equals(e)&&(this.viewComponent.script.GameCharacterComponent.lookAtPoint(e),this.facade.sendNotification(n.i.START_COMBAT,this.viewComponent,[t]))}handleStartCombat(){this.facade.retrieveProxy(a.b.NAME+this.id).vo}handleSetCharacterToNode(t){this.facade.retrieveProxy(a.b.NAME+this.id).currentNode=t,this.viewComponent.script.GameCharacterComponent.stopMovement(t)}}},852:(t,e,i)=>{i.d(e,{N:()=>o});const{Mediator:n}=i(710);class o extends n{static get NAME(){return"ProjectileCreatorMediator"}constructor(t){super(o.NAME),this.subscribeNotification([]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...e){}createProjectile(t,e,i){return this.viewComponent.script.ProjectileCreatorComponent.createProjectile(t,e,i)}}}},e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t=i(571),e=i(68);const{Facade:n}=i(710),{GameFacade:o}=i(571),r=pc.createScript("CacogenGame");r.prototype.initialize=function(){this.facade=n.getInstance(o.KEY),this.facade.sendNotification(e.i.APP_INITIALISED),this.facade.sendNotification(e.i.CHANGE_SCENE,"Map1","entrance")},r.prototype.update=function(t){};var a=i(434);const s=pc.createScript("NavigationComponent");s.attributes.add("connectedComponents",{type:"entity",array:!0,title:"Connected Components"}),s.prototype.initialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,.05,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.findByName("Plane").enabled=!1,this.entity.once("destroy",(()=>{this.app.off("picker:raycast",this.handleRayCast,this)}))},s.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity,i,e)},s.prototype.setGrid=function(t){this.nodeGrid=t},s.prototype.getGrid=function(){return this.nodeGrid},s.prototype.getNearestNode=function(t){let e=this.nodeGrid[0],i=a.q.getDistSquared(e,t);for(const n of this.nodeGrid){const o=a.q.getDistSquared(n,t);o<i&&(i=o,e=n)}return e};var c=i(710),d=i(958),h=i(321),p=i(316),l=i(829);const u=pc.createScript("GameCharacterComponent");u.attributes.add("characterId",{type:"string",title:"Character Id"}),u.attributes.add("characterSpeed",{type:"number",title:"Character Speed",default:4}),u.attributes.add("characterHeight",{type:"number",title:"Character Height",default:1.8}),u.attributes.add("isNPC",{type:"boolean",title:"is NPC",default:!0}),u.attributes.add("statsOverrides",{type:"json",title:"Stats Overrides",schema:[{name:"skill",title:"Skill",type:"number",default:1},{name:"maxStamina",title:"Stamina",type:"number",default:1},{name:"maxLuck",title:"Luck",type:"number",default:1},{name:"initiative",title:"Initiative",type:"number",default:2},{name:"maxMovement",title:"Movement",type:"number",default:6}]}),u.attributes.add("advancedSkills",{type:"json",title:"Advanced Skills",schema:[{name:"skillName",title:"Skill Name",type:"string"},{name:"skillValue",title:"Skill Value",type:"string"}],array:!0}),u.attributes.add("combatGroupName",{type:"string",title:"Combat Group Name"}),u.attributes.add("botBehaviour",{type:"number",title:"Bot Behaviour",enum:p._,default:0}),u.attributes.add("equippedWeapon",{type:"string",title:"Equipped Weapon",enum:l.E,default:"unarmed"}),u.prototype.preregisterNotification=function(t){this.preregisteredNotifications||(this.preregisteredNotifications=[]),this.preregisteredNotifications.push(t)},u.prototype.postInitialize=function(){this.movementPath=[],this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.preregisteredNotifications||(this.preregisteredNotifications=[]);const e=this.statsOverrides,i={id:this.characterId,isNPC:this.isNPC,height:this.characterHeight,advancedSkills:this.advancedSkills,equippedWeapon:this.equippedWeapon,...e,botBehaviour:this.botBehaviour};if(this.combatGroupName&&""!==this.combatGroupName){const t=this.app.root.findByTag("combatGroup:"+this.combatGroupName),e=[];for(const i of t)if(i.enabled){const t=i.script.GameCharacterComponent.characterId;e.push(t)}i.combatGroup=e}this.facade.hasProxy(d.b.NAME+this.characterId)&&this.facade.removeProxy(d.b.NAME+this.characterId),this.facade.hasMediator(h.y.NAME+this.characterId)&&this.facade.removeMediator(h.y.NAME+this.characterId),this.facade.registerProxy(new d.b(i)),this.facade.registerMediator(new h.y(this.characterId,this.entity,this.preregisteredNotifications)),this.entity.animation.play("idle.glb",.1)},u.prototype.setPath=function(t){this.movementPath&&this.movementPath.length>0&&this.entity.fire("cancelMove"),this.movementPath=t,this.entity.animation.loop=!0,this.entity.animation.play("walk.glb",.1)},u.prototype.stopMovement=function(t){this.movementPath=[],this.entity.setLocalPosition(t.x,t.y,t.z),this.entity.animation.loop=!0,this.entity.animation.play("idle.glb",.1)},u.prototype.update=function(t){this.moveAlongPath(t)},u.prototype.moveAlongPath=function(t){if(this.movementPath.length>0){const e=this.movementPath[this.movementPath.length-1],i=this.entity.getLocalPosition(),n=new pc.Vec3,o=new pc.Vec3(t*this.characterSpeed,t*this.characterSpeed,t*this.characterSpeed),r=new pc.Vec3(e.x,e.y,e.z);if(n.sub2(r,i),n.normalize(),n.mul(o),n.add(i),this.entity.setLocalPosition(n),this.lookAtPoint(e),n.distance(r)<=t*this.characterSpeed){const t=this.movementPath.pop();0===this.movementPath.length&&(this.entity.fire("finishedMove",t),this.entity.animation.loop=!0,this.entity.animation.play("idle.glb",.1)),this.entity.fire("updateCurrentNode",t)}}},u.prototype.lookAtPoint=function(t){const e=this.entity.getLocalPosition(),i=t.x-e.x,n=t.z-e.z,o=180*Math.atan2(i,n)/Math.PI;this.entity.setEulerAngles(0,o,0)},u.prototype.animateDeath=function(){this.entity.animation.loop=!1,this.entity.animation.play("die.glb",.1)},u.prototype.animateHit=function(){this.entity.animation.loop=!1,this.entity.animation.play("hit.glb",.1)},u.prototype.animateAttack=function(){this.entity.animation.loop=!1,this.entity.animation.play("attack.glb",.1)};var f=i(969),A=i(917),g=i(448);const E=pc.createScript("AgroGameCharacterComponent");E.attributes.add("sightRange",{type:"number",title:"Sight Range",default:5}),E.prototype.initialize=function(){this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MAP_GRID_CREATED),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MOVED_TO_NODE+"player"),this.entity.on(e.i.MAP_GRID_CREATED,this.handleMapGridCreated,this),this.entity.on(e.i.MOVED_TO_NODE+"player",this.handleMovedToNode,this),console.log("Wait for initial")},E.prototype.handleMapGridCreated=function(e,...i){const n=c.Facade.getInstance(t.GameFacade.KEY);this.characterProxy=n.retrieveProxy(d.b.NAME+e)},E.prototype.handleMovedToNode=function(i,n){const o=c.Facade.getInstance(t.GameFacade.KEY);if(o.retrieveProxy(A.u.NAME).vo.gameplayMode!==g.gameplayModeTypes.EXPLORATION||this.characterProxy.isDead)return;const r=this.characterProxy.currentNode,a=new pc.Vec3(r.x,r.y,r.z),s=new pc.Vec3(n.x,n.y,n.z);if(a.distance(s)<=this.sightRange){const t=o.retrieveProxy(f.h.NAME);a.y+=this.characterProxy.height,t.rayIntersectsWall(a,s)||(o.sendNotification(e.i.SET_CHARACTER_TO_NODE+"player",n),o.sendNotification(e.i.START_COMBAT,i))}};const{Mediator:m}=i(710);class y extends m{static get NAME(){return"ToastMessageMediator"}constructor(t){super(y.NAME),this.subscribeNotification([e.i.SHOW_TOAST_MESSAGE]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SHOW_TOAST_MESSAGE:this.viewComponent.script.ToastMessageComponent.addMessage(i[0])}}}const N=pc.createScript("ToastMessageComponent");N.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),N.attributes.add("messageTime",{type:"number",default:5,title:"Message Time"}),N.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(y.NAME)&&this.facade.removeMediator(y.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new y(this.entity))},N.prototype.addMessage=function(t){0===this.messageQueue.length?(this.messageQueue.push(t),this.showNextMessage()):this.messageQueue.push(t)},N.prototype.showNextMessage=function(){if(this.messageQueue.length>0){const t=this.messageQueue[0];this.labelEntity.element.text=t,setTimeout((()=>{this.messageQueue.shift(),this.showNextMessage()}),1e3*this.messageTime)}else this.labelEntity.element.text=""},pc.createScript("SetCameraTargetComponent").prototype.postInitialize=function(){c.Facade.getInstance(t.GameFacade.KEY).sendNotification(e.i.SET_CAMERA_TARGET,this.entity)};const{Mediator:M}=i(710);class C extends M{static get NAME(){return"InputLayerMediator"}constructor(t){super(C.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE]),this.viewComponent=t,this.viewComponent.on("picker:gameCharacter",this.handlePickerGameCharacter,this),this.viewComponent.on("picker:navigation",this.handlePickerNavigation,this),this.viewComponent.on("scrolling",this.handleScrolling,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:}}handlePickerGameCharacter(t){this.facade.sendNotification(e.i.SELECT_GAME_CHARACTER,t)}handlePickerNavigation(t){this.facade.sendNotification(e.i.SELECTED_NODE,t)}handleScrolling(t){this.facade.sendNotification(e.i.INPUT_DRAG_MOUSE,t)}}const v=pc.createScript("GameCamera");v.attributes.add("distance",{type:"number",default:100,title:"Distance"}),v.attributes.add("dragMultiplierX",{type:"number",default:.5,title:"Drag Multiplier"}),v.attributes.add("dragMultiplierY",{type:"number",default:.5,title:"Drag Multiplier"}),v.attributes.add("verticalScroll",{type:"boolean",default:!1,title:"Vertical Scroll"}),v.attributes.add("minCameraHeight",{type:"number",default:5,title:"Min Camera Height"}),v.attributes.add("maxCameraHeight",{type:"number",default:100,title:"Max Camera Height"}),v.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(_.NAME)&&this.facade.removeMediator(_.NAME),this.facade.registerMediator(new _(this.entity))},v.prototype.setCameraTarget=function(t){this.cameraTarget=t,this.rotation=this.entity.getEulerAngles().y,this.cameraHeight=this.entity.getLocalPosition().y},v.prototype.handleDrag=function(t){if(this.rotation+=t.x*this.dragMultiplierX,this.verticalScroll){let e=this.cameraHeight-t.y*this.dragMultiplierY;e=pc.math.clamp(e,this.minCameraHeight,this.maxCameraHeight),this.cameraHeight=e}},v.prototype.getTargetCameraPosition=function(t){const e=this.entity.getLocalPosition(),i=Math.sin(this.rotation*Math.PI/180)*this.distance,n=Math.cos(this.rotation*Math.PI/180)*this.distance;return new pc.Vec3(t.x+i,e.y,t.z+n)},v.prototype.update=function(t){if(this.cameraTarget){const t=this.cameraTarget.getLocalPosition(),e=this.getTargetCameraPosition(t),i=this.entity.getLocalPosition(),n=(e.x+9*i.x)/10,o=(this.cameraHeight+9*i.y)/10,r=(e.z+9*i.z)/10;this.entity.setLocalPosition(n,o,r),this.entity.lookAt(t)}};const{Mediator:T}=i(710);class _ extends T{static get NAME(){return"GameCameraMediator"}constructor(t){super(_.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.INPUT_DRAG_MOUSE,e.i.SET_CAMERA_TARGET]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SET_CAMERA_TARGET:this.viewComponent.script.GameCamera.setCameraTarget(i[0]);break;case e.i.INPUT_DRAG_MOUSE:this.viewComponent.script.GameCamera.handleDrag(i[0])}}}const P=pc.createScript("InputLayerComponent");P.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),P.attributes.add("dragTime",{type:"number",title:"Drag Time",default:.4}),P.prototype.window=window,P.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(C.NAME)&&this.facade.removeMediator(C.NAME),this.facade.registerMediator(new C(this.entity)),this.ray=new pc.Ray,this.inputQueue=[],this.app.mouse.disableContextMenu(),this.clickDownStart=0,this.isDragging=!1,this.app.on("picker:result",this.handlePickerResult,this),this.app.mouse&&(this.app.mouse.on(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.entity.element.on(pc.EVENT_MOUSEDOWN,this.onMouseDown,this),this.app.mouse.on(pc.EVENT_MOUSEUP,this.onMouseUp,this),this.entity.once("destroy",(()=>{this.app.mouse.off(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.app.mouse.off(pc.EVENT_MOUSEUP,this.onMouseUp,this)}))),this.app.touch&&(this.app.touch.on(pc.EVENT_TOUCHMOVE,(t=>{this.onMouseMove(t.touches[0])})),this.entity.element.on(pc.EVENT_TOUCHSTART,(t=>{this.onMouseDown(t.touches[0])})),this.entity.element.on(pc.EVENT_TOUCHEND,(t=>{this.onMouseUp()}))),this.onResize(),this.window.addEventListener("resize",this.onResize.bind(this),!1)},P.prototype.onResize=function(){const t=this.app.graphicsDevice;t.width<t.height?this.entity.element.screen.screen.scaleBlend=1:this.entity.element.screen.screen.scaleBlend=0},P.prototype.onMouseDown=function(t){this.isDragging=!0,this.clickDownStart=Date.now(),this.clickStartPoint={x:t.x,y:t.y}},P.prototype.onMouseMove=function(t){if(this.isDragging){const e=new pc.Vec2(this.clickStartPoint.x-t.x,this.clickStartPoint.y-t.y);this.entity.fire("scrolling",e),this.clickStartPoint={x:t.x,y:t.y}}},P.prototype.onMouseUp=function(){this.isDragging=!1,Date.now()-this.clickDownStart<1e3*this.dragTime&&this.clickStartPoint&&this.handleRaycastCollisions(this.clickStartPoint.x,this.clickStartPoint.y)},P.prototype.handleRaycastCollisions=function(t,e){const i=this.cameraEntity,n=this.cameraEntity.camera;n.screenToWorld(t,e,n.farClip,this.ray.direction),this.ray.origin.copy(i.getPosition()),this.ray.direction.sub(this.ray.origin).normalize(),this.app.fire("picker:raycast",this.ray,{x:t,y:e})},P.prototype.handlePickerResult=function(t,e,i){this.inputQueue.push({entity:t,hitPosition:e,screenPosition:i})},P.prototype.update=function(t){this.processInputQueue()},P.prototype.processInputQueue=function(){if(this.inputQueue.length>0){let e=this.inputQueue[0],i=-1;for(const n of this.inputQueue){const o=(t=n.entity).tags.has("gameCharacter")?3:t.tags.has("portal")?2:t.tags.has("navigation")?1:-1;o>i&&(e=n,i=o)}this.inputQueue=[],e.entity.tags.has("gameCharacter")&&this.pickedGameCharacter(e.entity,e.hitPosition),e.entity.tags.has("navigation")&&this.pickedNavigation(e.entity,e.hitPosition),e.entity.tags.has("portal")&&this.pickedPortal(e.entity,e.hitPosition)}var t},P.prototype.pickedGameCharacter=function(t,e){this.entity.fire("picker:gameCharacter",t)},P.prototype.pickedNavigation=function(t,e){const i=t.script.NavigationComponent.getNearestNode(e);this.entity.fire("picker:navigation",i)},P.prototype.pickedPortal=function(t,e){t.fire("picker:portal")};const{Mediator:b}=i(710);class S extends b{static get NAME(){return"PlayerCombatPanelMediator"}constructor(t){super(S.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.AWAIT_PLAYER_COMBAT_INPUT,e.i.END_COMBAT_TURN]),this.viewComponent=t,this.viewComponent.on("click:endTurn",this.handleEndTurn,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:this.viewComponent.enabled=!1;break;case e.i.AWAIT_PLAYER_COMBAT_INPUT:this.viewComponent.enabled=!0;break;case e.i.END_COMBAT_TURN:this.viewComponent.enabled=!1}}handleEndTurn(t){this.sendNotification(e.i.END_COMBAT_TURN)}}const O=pc.createScript("PlayerCombatPanelComponent");O.attributes.add("endTurnButton",{type:"entity",title:"End Turn button"}),O.prototype.initialize=function(){},O.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(S.NAME)&&this.facade.removeMediator(S.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new S(this.entity)),this.endTurnButton.element.on("click",this.clickEndTurn,this)},O.prototype.clickEndTurn=function(t){this.entity.fire("click:endTurn")};const x=pc.createScript("HitboxComponent");x.prototype.postInitialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,t.y/2,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.on("stopListening",(()=>{this.app.off("picker:raycast",this.handleRayCast,this)})),this.entity.on("destroy",(()=>{this.app.off("picker:raycast",this.handleRayCast,this)})),this.entity.model.enabled=!1},x.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity.parent,i,e)},x.prototype.update=function(t){this.aabb.center.copy(this.entity.getPosition())};const{Mediator:w}=i(710);class I extends w{static get NAME(){return"ActionPanelMediator"}constructor(t){super(I.NAME),this.subscribeNotification([e.i.SET_PLAYER_ACTION,e.i.TOGGLE_BUTTON,e.i.USE_PLAYER_ACTION]),this.viewComponent=t,this.viewComponent.on("click:fireCommand",this.handleFireCommand,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.TOGGLE_BUTTON:const t=i[0];this.viewComponent.script.ActionPanelComponent.selectAction(t);break;case e.i.USE_PLAYER_ACTION:}}handleFireCommand(t,...e){this.facade.sendNotification(t,...e)}}const R=pc.createScript("ActionButtonComponent");R.attributes.add("highlightEntity",{type:"entity",title:"Highlight Entity"}),R.attributes.add("iconEntity",{type:"entity",title:"Icon Entity"}),R.attributes.add("commands",{type:"json",schema:[{name:"commandName",title:"Command name",type:"string"},{name:"commandArgs",title:"Command arguments",type:"string",array:!0}],title:"Command name",array:!0}),R.prototype.initialize=function(){this.highlightEntity.enabled=!1,this.entity.on("select:action",this.handleChangeAction,this),this.entity.element.on("click",this.handleClick,this)},R.prototype.handleClick=function(t){for(const t of this.commands){const e=t.commandName,i=t.commandArgs;this.entity.parent.fire("click:fireCommand",e,...i)}},R.prototype.handleChangeAction=function(t){this.entity.name===t?this.highlightEntity.enabled=!this.highlightEntity.enabled:this.highlightEntity.enabled=!1};const L=pc.createScript("ActionPanelComponent");L.attributes.add("actionButtons",{type:"entity",title:"Action Buttons",array:!0}),L.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(I.NAME)&&this.facade.removeMediator(I.NAME),this.facade.registerMediator(new I(this.entity))},L.prototype.selectAction=function(t){for(const e of this.actionButtons)e.fire("select:action",t)},pc.createScript("UIStopPropagation").prototype.initialize=function(){this.entity.element.on(pc.EVENT_MOUSEDOWN,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_MOUSEDOWN,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHSTART,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHMOVE,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHEND,(t=>{t.stopPropagation()}))};var D=i(852);const G=pc.createScript("ProjectileCreatorComponent");G.attributes.add("projectileTypes",{type:"json",title:"Projectile Types",schema:[{name:"projectileName",title:"Projectile Name",type:"string"},{name:"projectileTemplate",title:"Projectile Template",type:"asset"}],array:!0}),G.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(D.N.NAME)&&this.facade.removeMediator(D.N.NAME),this.facade.registerMediator(new D.N(this.entity))},G.prototype.createProjectile=function(t,e,i){return new Promise(((n,o)=>{const r=this.projectileTypes.find((e=>e.projectileName===t));if(!r)throw o(),new Error(`Unable to create projectile "${t}"`);{const t=r.projectileTemplate.resource.instantiate();this.entity.addChild(t),t.once("projectileArrived",(()=>{n()})),t.script.ProjectileComponent.setTarget(e,i)}}))};const k=pc.createScript("ProjectileComponent");k.attributes.add("projectileSpeed",{type:"number",title:"Projectile Speed",default:8}),k.prototype.initialize=function(){},k.prototype.setTarget=function(t,e){this.entity.setLocalPosition(t.x,t.y,t.z),this.targetPoint=e,this.lookAtPoint(this.targetPoint)},k.prototype.update=function(t){if(this.targetPoint){const e=this.entity.getLocalPosition(),i=new pc.Vec3,n=new pc.Vec3(t*this.projectileSpeed,t*this.projectileSpeed,t*this.projectileSpeed);i.sub2(this.targetPoint.clone(),e),i.normalize(),i.mul(n),i.add(e),this.entity.setLocalPosition(i),i.distance(this.targetPoint)<=t*this.projectileSpeed&&(this.entity.fire("projectileArrived"),this.entity.destroy())}},k.prototype.lookAtPoint=function(t){const e=this.entity.getLocalPosition(),i=t.x-e.x,n=t.z-e.z,o=180*Math.atan2(i,n)/Math.PI;this.entity.setEulerAngles(0,o,0)};const{Mediator:H}=i(710);class V extends H{static get NAME(){return"StaminaBarMediator"}constructor(t){super(V.NAME),this.subscribeNotification([e.i.CHANGE_STAMINA+"player"]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_STAMINA+"player":const t=i[0],n=i[1];this.viewComponent.script.StaminaBarComponent.updateStamina(t,n)}}}const U=pc.createScript("StaminaBarComponent");U.attributes.add("barEntity",{type:"entity",title:"Bar Entity"}),U.attributes.add("staminaLabel",{type:"entity",title:"Stamina Label"}),U.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(V.NAME)&&this.facade.removeMediator(V.NAME),this.facade.registerMediator(new V(this.entity)),this.barEntityMaxWidth=this.barEntity.element.width},U.prototype.updateStamina=function(t,e){const i=pc.math.clamp(t/e,0,1),n=pc.math.lerp(0,this.barEntityMaxWidth,i);this.barEntity.element.width=n,this.barEntity.element.rect.z=i,this.barEntity.element.rect=this.barEntity.element.rect,this.staminaLabel.element.text=`${t}/${e}`};const{Mediator:F}=i(710);class B extends F{static get NAME(){return"ActionsRemainingPanelMediator"}constructor(t){super(B.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.AWAIT_PLAYER_COMBAT_INPUT,e.i.END_COMBAT_TURN,e.i.USE_ACTION+"player"]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:this.viewComponent.enabled=!1;break;case e.i.AWAIT_PLAYER_COMBAT_INPUT:const t=this.facade.retrieveProxy(d.b.NAME+"player"),n=t.availableActions,o=t.maxActionsPerTurn;this.viewComponent.script.ActionsRemainingPanelComponent.showAvailableAction(n,o),this.viewComponent.enabled=!0;break;case e.i.USE_ACTION+"player":this.viewComponent.script.ActionsRemainingPanelComponent.showAvailableAction(i[0],i[1]);break;case e.i.END_COMBAT_TURN:this.viewComponent.enabled=!1}}}const z=pc.createScript("ActionsRemainingPanelComponent");z.attributes.add("pipTemplate",{type:"asset",title:"Pip Template"}),z.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(B.NAME)&&this.facade.removeMediator(B.NAME),this.facade.registerMediator(new B(this.entity)),this.pips=[]},z.prototype.showAvailableAction=function(t,e){for(;this.pips.length<e;)this.createPip();for(let e=0;e<this.pips.length;e++)e<t?this.pips[e].fire("togglePip",!0):this.pips[e].fire("togglePip",!1)},z.prototype.createPip=function(){const t=this.pipTemplate.resource.instantiate();this.entity.addChild(t),this.pips.push(t)};const W=pc.createScript("ActionsRemainingPipComponent");W.attributes.add("pipFront",{type:"entity",title:"Pip front"}),W.prototype.initialize=function(){this.entity.on("togglePip",(t=>{this.pipFront.enabled=t}))};const{Mediator:K}=i(710);class Y extends K{static get NAME(){return"FloatingStatusCreatorMediator"}constructor(t){super(Y.NAME),this.subscribeNotification([e.i.DISPLAY_FLOATING_STATUS]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.DISPLAY_FLOATING_STATUS:const t=this.viewComponent.script.FloatingStatusCreatorComponent,n=i[0],o=i[1];t.displayStatus(n,o)}}}const j=pc.createScript("TemporaryFloatingStatusComponent");j.prototype.initialize=function(){},j.prototype.setWorldPosition=function(t,e,i){this.entity.enabled=!0,this.worldPosition=t,this.device=this.app.graphicsDevice,this.cameraEntity=e,this.screenEntity=i,setTimeout((()=>{this.entity.destroy()}),1e3)},j.prototype.update=function(t){const e=this.worldSpaceToScreenSpace(this.worldPosition.clone());e&&this.entity.setLocalPosition(e)},j.prototype.worldSpaceToScreenSpace=function(t){if(this.device&&this.cameraEntity&&this.screenEntity){const e=t.clone(),i=new pc.Vec3;this.cameraEntity.camera.worldToScreen(e,i);const n=this.screenEntity.screen,o=n.referenceResolution.x/n.resolution.x,r=i.x*o,a=-1*i.y*o+this.screenEntity.screen.resolution.y*o;return new pc.Vec3(r,a,0)}};const q=pc.createScript("FloatingStatusCreatorComponent");q.attributes.add("screenEntity",{type:"entity",title:"Screen Entity"}),q.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),q.attributes.add("floatingStatuses",{type:"json",schema:[{name:"name",title:"Name",type:"string"},{name:"template",title:"Template",type:"asset"}],title:"Floating Statuses",array:!0}),q.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(Y.NAME)&&this.facade.removeMediator(Y.NAME),this.facade.registerMediator(new Y(this.entity))},q.prototype.displayStatus=function(t,e,...i){const n=this.floatingStatuses.find((e=>e.name===t));if(!n)throw new Error("Cannot create floating status: "+t);{const t=e.currentNode,i=new pc.Vec3(t.x,t.y+e.height,t.z),o=n.template.resource.instantiate();o.script.TemporaryFloatingStatusComponent.setWorldPosition(i,this.cameraEntity,this.screenEntity),this.entity.addChild(o)}};const{Mediator:X}=i(710);class Q extends X{static get NAME(){return"PortalMediator"}constructor(t){super(Q.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE]),this.viewComponent=t,this.viewComponent.on("picker:portal",this.selectedPortal,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SET_CAMERA_TARGET:}}selectedPortal(){const t=this.viewComponent.script.PortalComponent,i=t.destinationScene,n=t.destinationPortal,o=t.standingPoint.getPosition();this.facade.sendNotification(e.i.NAVIGATE_THROUGH_PORTAL,o,i,n)}}const $=pc.createScript("PortalComponent");$.attributes.add("portalId",{type:"string",title:"Portal Id"}),$.attributes.add("destinationScene",{type:"string",title:"Destination Scene"}),$.attributes.add("destinationPortal",{type:"string",title:"Destination Portal"}),$.attributes.add("hitbox",{type:"entity",title:"Hitbox"}),$.attributes.add("standingPoint",{type:"entity",title:"Standing Point"}),$.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(Q.NAME)&&this.facade.removeMediator(Q.NAME),this.facade.registerMediator(new Q(this.entity)),this.standingPoint.model.enabled=!1};const{Facade:J}=i(710),{PureMVC:Z}=i(710);new class{constructor(){console.log("Main start"),Z.debug=!0,J.getInstance=t.GameFacade.getInstance,console.log(J),this.facade=J.getInstance(t.GameFacade.KEY),this.facade.startup(this)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,