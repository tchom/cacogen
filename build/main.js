(()=>{"use strict";var t={382:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=i(542),n=i(999),r=function(){function t(e){if(this.commandMap={},t.instanceMap[e])throw new Error("controller key for this Multiton key already constructed");this.multitonKey=e,this.logger=o.PureMVC.debug?o.PureMVC.logCommand:o.PureMVC.logNone,this.initializeController()}return t.removeController=function(t){delete this.instanceMap[t]},t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.prototype.registerCommand=function(t,e){this.commandMap[t]||this.view.registerObserver(t,this.executeCommand,this),this.commandMap[t]=e},t.prototype.hasCommand=function(t){return void 0!==this.commandMap[t]},t.prototype.removeCommand=function(t){this.hasCommand(t)&&(this.view.removeObserver(t,this.executeCommand,this),delete this.commandMap[t])},t.prototype.initializeController=function(){this.view=n.View.getInstance(this.multitonKey)},t.prototype.executeCommand=function(e){for(var i=[],o=1;o<arguments.length;o++)i[o-1]=arguments[o];var n=this.commandMap[e];n&&(this.logger(t._consoleArgs,e,n.name),n.apply(void 0,[this.multitonKey,e].concat(i)))},t._consoleArgs=["","background: #3F234E","background: #6E2994","color: #D4BFE0; background: #8724BD;","background: #6E2994","background: #3F234E"],t.instanceMap={},t}();e.Controller=r},222:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=i(382),n=i(433),r=i(542),a=i(999),s=function(){function t(e){if(t.instanceMap[e])throw new Error("Facade instance for this Multiton key already constructed!");this.logger=r.PureMVC.debug?r.PureMVC.logNotification:r.PureMVC.logNone,this.initializeNotifier(e),this.initializeFacade()}return t.getInstance=function(e){return e?(t.instanceMap[e]||(t.instanceMap[e]=new t(e)),t.instanceMap[e]):null},t.hasCore=function(t){return void 0!==this.instanceMap[t]},t.removeCore=function(t){this.instanceMap[t]&&(n.Model.removeModel(t),a.View.removeView(t),o.Controller.removeController(t),delete this.instanceMap[t])},t.prototype.initializeFacade=function(){this.initializeModel(),this.initializeController(),this.initializeView()},t.prototype.registerCommand=function(t,e){this.controller.registerCommand(t,e)},t.prototype.removeCommand=function(t){this.controller.removeCommand(t)},t.prototype.hasCommand=function(t){return this.controller.hasCommand(t)},t.prototype.registerProxy=function(t){this.model.registerProxy(t)},t.prototype.retrieveProxy=function(t){return this.model.retrieveProxy(t)},t.prototype.removeProxy=function(t){return this.model?this.model.removeProxy(t):null},t.prototype.hasProxy=function(t){return this.model.hasProxy(t)},t.prototype.registerMediator=function(t){this.view.registerMediator(t)},t.prototype.retrieveMediator=function(t){return this.view.retrieveMediator(t)},t.prototype.removeMediator=function(t){return this.view.removeMediator(t)},t.prototype.sleepMediator=function(t){return this.view.sleepMediator(t)},t.prototype.awakeMediator=function(t){return this.view.awakeMediator(t)},t.prototype.hasMediator=function(t){return this.view.hasMediator(t)},t.prototype.sendNotification=function(e){for(var i,o=[],n=1;n<arguments.length;n++)o[n-1]=arguments[n];this.logger.apply(this,[t._consoleArgs,e].concat(o)),(i=this.view).notifyObservers.apply(i,[e].concat(o))},t.prototype.initializeNotifier=function(t){this.multitonKey=t},t.prototype.initializeController=function(){this.controller||(this.controller=o.Controller.getInstance(this.multitonKey))},t.prototype.initializeModel=function(){this.model||(this.model=n.Model.getInstance(this.multitonKey))},t.prototype.initializeView=function(){this.view||(this.view=a.View.getInstance(this.multitonKey))},t._consoleArgs=["","background: #757130","background: #DED434","color: #2F2E15; background: #FFF325;","background: #DED434","background: #757130"],t.instanceMap={},t}();e.Facade=s},651:function(t,e,i){var o,n=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),a=i(542),s=function(t){function e(e,i){var o=t.call(this)||this;return o.logger=a.PureMVC.debug?a.PureMVC.logMediator:a.PureMVC.logNone,o.mediatorName=e||"Mediator",o.viewComponent=i,o.sleeping=!0,o.subscribedNotifications=[],o.notificationSubscriptionChange=null,o}return n(e,t),Object.defineProperty(e.prototype,"notifications",{get:function(){return this.subscribedNotifications},enumerable:!0,configurable:!0}),e.prototype.getMediatorName=function(){return this.mediatorName},e.prototype.setViewComponent=function(t){this.viewComponent=t},e.prototype.getViewComponent=function(){return this.viewComponent},e.prototype.onRegister=function(t){this.notificationSubscriptionChange=t,this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.notificationSubscriptionChange=null,this.logger(e._consoleArgs,this.constructor.name,"remove")},e.prototype.onSleep=function(){this.sleeping=!0,this.logger(e._consoleArgs,this.constructor.name,"sleep")},e.prototype.onAwake=function(){this.sleeping=!1,this.logger(e._consoleArgs,this.constructor.name,"awake")},Object.defineProperty(e.prototype,"isSleeping",{get:function(){return this.sleeping},enumerable:!0,configurable:!0}),e.prototype.subscribeNotification=function(t){this.changeSubscription(t,this.addSubscription)},e.prototype.unsubscribeNotification=function(t){this.changeSubscription(t,this.removeSubscription)},e.prototype.changeSubscription=function(t,e){var i=this,o=this.notifications.slice(),n=!1;t instanceof Array?t.forEach((function(t){n=e.call(i,t)||n})):n=e.call(this,t),n&&this.notificationSubscriptionChange&&this.notificationSubscriptionChange(this,o)},e.prototype.addSubscription=function(t){return-1===this.notifications.indexOf(t)&&(this.notifications.push(t),!0)},e.prototype.removeSubscription=function(t){var e=this.notifications.indexOf(t);return-1!==e&&(this.notifications.splice(e,1),!0)},e._consoleArgs=["","background: #2A3351","background: #364D98","color: #F4F6FE; background: #3656C1;","background: #364D98","background: #2A3351"],e}(r.Notifier);e.Mediator=s},433:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(e){if(this.proxyMap={},t.instanceMap[e])throw new Error("Model instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeModel()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeModel=function(t){delete this.instanceMap[t]},t.prototype.registerProxy=function(t){t.initializeNotifier(this.multitonKey),this.proxyMap[t.getProxyName()]=t,t.onRegister()},t.prototype.retrieveProxy=function(t){return this.proxyMap[t]},t.prototype.hasProxy=function(t){return void 0!==this.proxyMap[t]},t.prototype.removeProxy=function(t){if(this.proxyMap[t]){var e=this.proxyMap[t];return e.onRemove(),delete this.proxyMap[t],e}return null},t.prototype.initializeModel=function(){},t.instanceMap={},t}();e.Model=i},117:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=i(222),n=function(){function t(){}return t.prototype.initializeNotifier=function(t){this.multitonKey=t,this.facade=this.getFacade()},t.prototype.sendNotification=function(t){for(var e,i=[],o=1;o<arguments.length;o++)i[o-1]=arguments[o];this.facade&&(e=this.facade).sendNotification.apply(e,[t].concat(i))},t.prototype.getFacade=function(){if(null===this.multitonKey)throw new Error("multitonKey for this Notifier not yet initialized!");return o.Facade.getInstance(this.multitonKey)},t}();e.Notifier=n},413:function(t,e,i){var o,n=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),a=i(542),s=function(t){function e(e,i){var o=t.call(this)||this;return o.proxyName=e||"Proxy",o.logger=a.PureMVC.debug?a.PureMVC.logProxy:a.PureMVC.logNone,i&&o.setData(i),o}return n(e,t),e.prototype.getProxyName=function(){return this.proxyName},e.prototype.setData=function(t){this.data=t},e.prototype.getData=function(){return this.data},e.prototype.onRegister=function(){this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.logger(e._consoleArgs,this.constructor.name,"remove")},e._consoleArgs=["","background: #295A34","background: #2FAA4A","color: #102415; background: #27D04C;","background: #2FAA4A","background: #295A34"],e}(r.Notifier);e.Proxy=s},542:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.logCommand=function(t,e,i){t[0]="%c %c %c "+e+" =>  "+i+" %c %c ",console.log.apply(console,t)},t.logNotification=function(t,e){for(var i=[],o=2;o<arguments.length;o++)i[o-2]=arguments[o];t[0]="%c %c %c "+e+": args [ "+i+" ] %c %c ",console.log.apply(console,t)},t.logMediator=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logProxy=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logNone=function(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i]},t.debug=!0,t}();e.PureMVC=i},999:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=i(729),n=function(){function t(e){if(this.mediatorMap={},this.eventEmitter=new o,t.instanceMap[e])throw new Error("View instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeView()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeView=function(t){delete this.instanceMap[t]},t.prototype.removeObserver=function(t,e,i){this.eventEmitter.removeListener(t,e,i)},t.prototype.registerObserver=function(t,e,i){this.eventEmitter.on(t,e,i)},t.prototype.notifyObservers=function(t){for(var e,i=[],o=1;o<arguments.length;o++)i[o-1]=arguments[o];(e=this.eventEmitter).emit.apply(e,[t,t].concat(i))},t.prototype.registerMediator=function(t){this.mediatorMap[t.getMediatorName()]||(t.initializeNotifier(this.multitonKey),this.mediatorMap[t.getMediatorName()]=t,this.registerObservers(t),t.onRegister(this.onMediatorNotificationSubscriptionChange.bind(this)),t.onAwake())},t.prototype.awakeMediator=function(t){var e=this.mediatorMap[t];if(e){if(!e.isSleeping)return e;this.registerObservers(e),e.onAwake()}return e},t.prototype.retrieveMediator=function(t){return this.mediatorMap[t]},t.prototype.removeMediator=function(t){var e=this.mediatorMap[t];return e&&(this.removeObservers(e),delete this.mediatorMap[t],e.onSleep(),e.onRemove()),e},t.prototype.sleepMediator=function(t){var e=this.mediatorMap[t];if(e){if(e.isSleeping)return e;this.removeObservers(e),e.onSleep()}return e},t.prototype.hasMediator=function(t){return void 0!==this.mediatorMap[t]},t.prototype.initializeView=function(){},t.prototype.removeObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var o=0,n=i;o<n.length;o++){var r=n[o];this.removeObserver(r,t.handleNotification,t)}},t.prototype.registerObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var o=0,n=i;o<n.length;o++){var r=n[o];this.registerObserver(r,t.handleNotification,t)}},t.prototype.onMediatorNotificationSubscriptionChange=function(t,e){this.removeObservers(t,e),this.registerObservers(t)},t.instanceMap={},t}();e.View=n},710:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=i(382);e.Controller=o.Controller;var n=i(222);e.Facade=n.Facade;var r=i(651);e.Mediator=r.Mediator;var a=i(433);e.Model=a.Model;var s=i(117);e.Notifier=s.Notifier;var c=i(413);e.Proxy=c.Proxy;var h=i(542);e.PureMVC=h.PureMVC;var p=i(999);e.View=p.View},729:t=>{var e=Object.prototype.hasOwnProperty,i="~";function o(){}function n(t,e,i){this.fn=t,this.context=e,this.once=i||!1}function r(t,e,o,r,a){if("function"!=typeof o)throw new TypeError("The listener must be a function");var s=new n(o,r||t,a),c=i?i+e:e;return t._events[c]?t._events[c].fn?t._events[c]=[t._events[c],s]:t._events[c].push(s):(t._events[c]=s,t._eventsCount++),t}function a(t,e){0==--t._eventsCount?t._events=new o:delete t._events[e]}function s(){this._events=new o,this._eventsCount=0}Object.create&&(o.prototype=Object.create(null),(new o).__proto__||(i=!1)),s.prototype.eventNames=function(){var t,o,n=[];if(0===this._eventsCount)return n;for(o in t=this._events)e.call(t,o)&&n.push(i?o.slice(1):o);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(t)):n},s.prototype.listeners=function(t){var e=i?i+t:t,o=this._events[e];if(!o)return[];if(o.fn)return[o.fn];for(var n=0,r=o.length,a=new Array(r);n<r;n++)a[n]=o[n].fn;return a},s.prototype.listenerCount=function(t){var e=i?i+t:t,o=this._events[e];return o?o.fn?1:o.length:0},s.prototype.emit=function(t,e,o,n,r,a){var s=i?i+t:t;if(!this._events[s])return!1;var c,h,p=this._events[s],u=arguments.length;if(p.fn){switch(p.once&&this.removeListener(t,p.fn,void 0,!0),u){case 1:return p.fn.call(p.context),!0;case 2:return p.fn.call(p.context,e),!0;case 3:return p.fn.call(p.context,e,o),!0;case 4:return p.fn.call(p.context,e,o,n),!0;case 5:return p.fn.call(p.context,e,o,n,r),!0;case 6:return p.fn.call(p.context,e,o,n,r,a),!0}for(h=1,c=new Array(u-1);h<u;h++)c[h-1]=arguments[h];p.fn.apply(p.context,c)}else{var d,l=p.length;for(h=0;h<l;h++)switch(p[h].once&&this.removeListener(t,p[h].fn,void 0,!0),u){case 1:p[h].fn.call(p[h].context);break;case 2:p[h].fn.call(p[h].context,e);break;case 3:p[h].fn.call(p[h].context,e,o);break;case 4:p[h].fn.call(p[h].context,e,o,n);break;default:if(!c)for(d=1,c=new Array(u-1);d<u;d++)c[d-1]=arguments[d];p[h].fn.apply(p[h].context,c)}}return!0},s.prototype.on=function(t,e,i){return r(this,t,e,i,!1)},s.prototype.once=function(t,e,i){return r(this,t,e,i,!0)},s.prototype.removeListener=function(t,e,o,n){var r=i?i+t:t;if(!this._events[r])return this;if(!e)return a(this,r),this;var s=this._events[r];if(s.fn)s.fn!==e||n&&!s.once||o&&s.context!==o||a(this,r);else{for(var c=0,h=[],p=s.length;c<p;c++)(s[c].fn!==e||n&&!s[c].once||o&&s[c].context!==o)&&h.push(s[c]);h.length?this._events[r]=1===h.length?h[0]:h:a(this,r)}return this},s.prototype.removeAllListeners=function(t){var e;return t?(e=i?i+t:t,this._events[e]&&a(this,e)):(this._events=new o,this._eventsCount=0),this},s.prototype.off=s.prototype.removeListener,s.prototype.addListener=s.prototype.on,s.prefixed=i,s.EventEmitter=s,t.exports=s},986:(t,e,i)=>{i.r(e),i.d(e,{GameFacade:()=>R});var o=i(68);class n{constructor(t,e,i){this.x=t,this.y=e,this.z=i,this.connectedNodes=[],this.occupied=!1}isConnected(t){return void 0!==this.connectedNodes.find((e=>e.x===t.x&&e.y===t.y&&e.z===t.z))}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}equalsPoint(t,e,i){return this.x===t&&this.y===e&&this.z===i}addConnectedNode(t){this.isConnected(t)||this.connectedNodes.push(t)}disconnectedNode(t){const e=this.connectedNodes.findIndex((e=>e.equals(t)));this.connectedNodes.splice(e,1)}}i(434);var r=i(917);pc.createScript("GameMapComponent").prototype.initialize=function(){};var a=i(710);const{Mediator:s}=i(710);class c extends s{static get NAME(){return"InputLayerMediator"}constructor(t){super(c.NAME),this.subscribeNotification([o.i.CHANGE_SCENE_COMPLETE]),this.viewComponent=t,this.viewComponent.on("picker:navigation",this.handlePickerNavigation,this),this.viewComponent.on("scrolling",this.handleScrolling,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case o.i.CHANGE_SCENE_COMPLETE:}}handlePickerNavigation(t){this.facade.sendNotification(o.i.NAVIGATE_TO_NODE,t)}handleScrolling(t){this.facade.sendNotification(o.i.INPUT_DRAG_MOUSE,t)}}const h=pc.createScript("GameCamera");h.attributes.add("distance",{type:"number",default:100,title:"Distance"}),h.attributes.add("dragMultiplierX",{type:"number",default:.5,title:"Drag Multiplier"}),h.attributes.add("dragMultiplierY",{type:"number",default:.5,title:"Drag Multiplier"}),h.attributes.add("minCameraHeight",{type:"number",default:5,title:"Min Camera Height"}),h.attributes.add("maxCameraHeight",{type:"number",default:100,title:"Max Camera Height"}),h.prototype.initialize=function(){this.facade=a.Facade.getInstance(R.KEY),this.facade.hasMediator(u.NAME)&&this.facade.removeMediator(u.NAME),this.facade.registerMediator(new u(this.entity))},h.prototype.setCameraTarget=function(t){this.cameraTarget=t,this.rotation=this.entity.getEulerAngles().y,this.cameraHeight=this.entity.getLocalPosition().y},h.prototype.handleDrag=function(t){this.rotation+=t.x*this.dragMultiplierX;let e=this.cameraHeight-t.y*this.dragMultiplierY;e=pc.math.clamp(e,this.minCameraHeight,this.maxCameraHeight),this.cameraHeight=e},h.prototype.getTargetCameraPosition=function(t){const e=this.entity.getLocalPosition(),i=Math.sin(this.rotation*Math.PI/180)*this.distance,o=Math.cos(this.rotation*Math.PI/180)*this.distance;return new pc.Vec3(t.x+i,e.y,t.z+o)},h.prototype.update=function(t){if(this.cameraTarget){const t=this.cameraTarget.getLocalPosition(),e=this.getTargetCameraPosition(t),i=this.entity.getLocalPosition(),o=(e.x+9*i.x)/10,n=(this.cameraHeight+9*i.y)/10,r=(e.z+9*i.z)/10;this.entity.setLocalPosition(o,n,r),this.entity.lookAt(t)}};const{Mediator:p}=i(710);class u extends p{static get NAME(){return"GameCameraMediator"}constructor(t){super(u.NAME),this.subscribeNotification([o.i.CHANGE_SCENE_COMPLETE,o.i.INPUT_DRAG_MOUSE,o.i.SET_CAMERA_TARGET]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case o.i.SET_CAMERA_TARGET:this.viewComponent.script.GameCamera.setCameraTarget(e[0]);break;case o.i.INPUT_DRAG_MOUSE:this.viewComponent.script.GameCamera.handleDrag(e[0])}}}const d=pc.createScript("InputLayerComponent");d.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),d.attributes.add("dragTime",{type:"number",title:"Drag Time",default:.4}),d.prototype.initialize=function(){this.facade=a.Facade.getInstance(R.KEY),this.facade.hasMediator(c.NAME)&&this.facade.removeMediator(c.NAME),this.facade.registerMediator(new c(this.entity)),this.ray=new pc.Ray,this.app.mouse.disableContextMenu(),this.clickDownStart=0,this.isDragging=!1,this.app.on("picker:result",this.handlePickerResult,this),this.app.mouse.on(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.entity.element.on(pc.EVENT_MOUSEDOWN,this.onMouseDown,this),this.app.mouse.on(pc.EVENT_MOUSEUP,this.onMouseUp,this),this.entity.once("destroy",(()=>{this.app.mouse.off(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.app.mouse.off(pc.EVENT_MOUSEUP,this.onMouseUp,this)}))},d.prototype.onMouseDown=function(t){this.isDragging=!0,this.clickDownStart=Date.now(),this.clickStartPoint={x:t.x,y:t.y}},d.prototype.onMouseMove=function(t){if(this.isDragging){const e=new pc.Vec2(this.clickStartPoint.x-t.x,this.clickStartPoint.y-t.y);this.entity.fire("scrolling",e),this.clickStartPoint={x:t.x,y:t.y}}},d.prototype.onMouseUp=function(){this.isDragging=!1,Date.now()-this.clickDownStart<1e3*this.dragTime&&this.clickStartPoint&&this.handleRaycastCollisions(this.clickStartPoint.x,this.clickStartPoint.y)},d.prototype.handleRaycastCollisions=function(t,e){const i=this.cameraEntity,o=this.cameraEntity.camera;o.screenToWorld(t,e,o.farClip,this.ray.direction),this.ray.origin.copy(i.getPosition()),this.ray.direction.sub(this.ray.origin).normalize(),this.app.fire("picker:raycast",this.ray,{x:t,y:e})},d.prototype.handlePickerResult=function(t,e,i){if(t.tags.has("navigation")){const i=t.script.NavigationComponent.getNearestNode(e);this.entity.fire("picker:navigation",i)}};const{Mediator:l}=i(710);class f extends l{static get NAME(){return"GameMapMediator"}constructor(t){super(f.NAME),this.subscribeNotification([o.i.CHANGE_SCENE_COMPLETE])}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case o.i.CHANGE_SCENE_COMPLETE:this.facade.retrieveProxy(r.u.NAME).vo,pc.Application.getApplication()}}}var g=i(99);const{GameMediator:y}=i(23),{Facade:m}=i(710);function M(t,e){console.log("Parse map");const i=pc.Application.getApplication().root.findByTag("navigation_floor");let n=[];const r=[];for(const t of i){const e=t.script.NavigationComponent;r.push(e);const i=v(t);e.setGrid(i)}for(const t of r)for(const e of t.connectedComponents){const i=e.script.NavigationComponent;N(t.getGrid(),i.getGrid()),n=n.concat(t.getGrid())}m.getInstance(t).registerProxy(new g.h(n)),m.getInstance(t).registerMediator(new f),m.getInstance(t).sendNotification(o.i.MAP_GRID_CREATED)}function v(t){const e=[],i=t.getLocalPosition(),o=t.getLocalScale(),r=Math.round(o.x),a=Math.round(o.z),s=Math.round(i.x-r/2),c=i.y,h=Math.round(i.z-a/2);for(let t=h;t<h+a;t++)for(let i=s;i<s+r;i++){const o=new n(i,c,t);e.push(o)}for(const t of e)for(const i of e)(i.equalsPoint(t.x-1,t.y,t.z)||i.equalsPoint(t.x+1,t.y,t.z)||i.equalsPoint(t.x,t.y,t.z-1)||i.equalsPoint(t.x,t.y,t.z+1))&&t.addConnectedNode(i);return e}function N(t,e){for(const i of t)for(const t of e)(t.equalsPoint(i.x-1,i.y,i.z)||t.equalsPoint(i.x+1,i.y,i.z)||t.equalsPoint(i.x,i.y,i.z-1)||t.equalsPoint(i.x,i.y,i.z+1))&&i.addConnectedNode(t)}const{Facade:E}=i(710);function C(t,e){E.getInstance(t).registerProxy(new r.u)}const{Facade:A}=i(710);function _(t,e,...i){const n=pc.Application.getApplication(),r=i[0];console.log("Changing scene "+r);const a=n.root.findByName("Root"),s=n.scenes.find(r);n.scenes.loadSceneHierarchy(s.url,(function(e,i){e?console.error(e):a&&a.destroy(),A.getInstance(t).sendNotification(o.i.CHANGE_SCENE_COMPLETE,r),A.getInstance(t).sendNotification(o.i.PARSE_GAMEMAP,r)}))}var T=i(758),P=i(448);const{Facade:b}=i(710);function O(t,e,...i){const n=i[0],a=b.getInstance(t);a.sendNotification(o.i.SHOW_TOAST_MESSAGE,"Start Combat"),a.retrieveProxy(r.u.NAME).updateGameStateType(P.gameplayModeTypes.COMBAT);const s=["player"].concat(n),c=new T.F(s);a.registerProxy(c),a.sendNotification(o.i.NEXT_COMBAT_ROUND)}const{Facade:S}=i(710);function x(t,e,...i){const o=S.getInstance(t),n=o.retrieveProxy(r.u.NAME),a=o.retrieveProxy(T.F.NAME);n.vo.gameplayMode===P.gameplayModeTypes.COMBAT&&a.nextTurn()}const{Facade:w}=i(710);function I(t,e,...i){const n=w.getInstance(t),a=n.retrieveProxy(r.u.NAME),s=n.retrieveProxy(T.F.NAME);a.vo.gameplayMode===P.gameplayModeTypes.COMBAT&&(s.nextRound(),n.sendNotification(o.i.NEXT_COMBAT_TURN))}const{Facade:G}=i(710);class R extends G{static getInstance(t){return G.instanceMap[t]||(G.instanceMap[t]=new R(t)),G.instanceMap[t]}static get KEY(){return"Cacogen"}static get NAME(){return"CacogenFacade"}static get STARTUP(){return R.NAME+"StartUp"}startup(t){this.sendNotification(R.STARTUP,t)}sendNotification(t,...e){super.sendNotification(t,...e)}initializeController(){super.initializeController(),this.registerCommand(R.STARTUP,C),this.registerCommand(o.i.CHANGE_SCENE,_),this.registerCommand(o.i.PARSE_GAMEMAP,M),this.registerCommand(o.i.START_COMBAT,O),this.registerCommand(o.i.NEXT_COMBAT_TURN,x),this.registerCommand(o.i.NEXT_COMBAT_ROUND,I)}}},68:(t,e,i)=>{i.d(e,{i:()=>o});class o{static get CHANGE_SCENE(){return"CHANGE_SCENE"}static get CHANGE_SCENE_COMPLETE(){return"CHANGE_SCENE_COMPLETE"}static get APP_INITIALISED(){return"APP_INITIALISED"}static get PARSE_GAMEMAP(){return"PARSE_GAMEMAP"}static get MAP_GRID_CREATED(){return"MAP_GRID_CREATED"}static get NAVIGATE_TO_NODE(){return"NAVIGATE_TO_NODE"}static get SET_CAMERA_TARGET(){return"SET_CAMERA_TARGET"}static get INPUT_DRAG_MOUSE(){return"INPUT_DRAG_MOUSE"}static get PC_MOVED_TO_NODE(){return"PC_MOVED_TO_NODE"}static get PC_FINISHED_MOVE(){return"PC_FINISHED_MOVE"}static get START_COMBAT(){return"START_COMBAT"}static get SHOW_TOAST_MESSAGE(){return"SHOW_TOAST_MESSAGE"}static get NEXT_COMBAT_TURN(){return"NEXT_COMBAT_TURN"}static get NEXT_COMBAT_ROUND(){return"NEXT_COMBAT_ROUND"}static get AWAIT_PLAYER_COMBAT_INPUT(){return"AWAIT_PLAYER_COMBAT_INPUT"}}},758:(t,e,i)=>{i.d(e,{F:()=>c});var o=i(68);function n(t){let e=t.length,i=void 0,o=-1;for(;0!==e;)o=Math.floor(Math.random()*e),e-=1,i=t[e],t[e]=t[o],t[o]=i;return t}var r=i(958);const{Proxy:a}=i(710),{CombatVO:s}=i(201);class c extends a{get vo(){return this.getData()}static get NAME(){return"CombatProxy"}constructor(t){super(c.NAME,new s(t))}onRegister(){const t=this.vo.participants;this.participantProxies=new Map;for(const e of t){const t=this.facade.retrieveProxy(r.b.NAME+e);this.participantProxies.set(e,t)}}nextTurn(){const t=this.vo.roundInitiative;if(t&&t.length>0){const e=t.shift();if("end_round"!==e){this.facade.sendNotification(o.i.SHOW_TOAST_MESSAGE,"Turn "+e);const t=this.participantProxies.get(e);"player"===e?this.facade.sendNotification(o.i.AWAIT_PLAYER_COMBAT_INPUT,t):setTimeout((()=>{this.facade.sendNotification(o.i.NEXT_COMBAT_TURN)}),4e3)}else this.facade.sendNotification(o.i.SHOW_TOAST_MESSAGE,"End round"),this.facade.sendNotification(o.i.NEXT_COMBAT_ROUND)}}nextRound(){const t=[];for(const[e,i]of this.participantProxies.entries()){const o=i.vo;for(let i=0;i<o.initiative;i++)t.push(e)}t.push("end_round");let e=n(t);for(;"end_round"===e[0];)e=n(e);this.vo.roundInitiative=e}}},201:(t,e,i)=>{i.r(e),i.d(e,{CombatVO:()=>o});class o{constructor(t){this.participants=t,this.roundInitiative=[]}}},958:(t,e,i)=>{i.d(e,{b:()=>r});const{Proxy:o}=i(710),{GameCharacterVO:n}=i(940);class r extends o{get vo(){return this.getData()}static get NAME(){return"GameCharacterProxy_"}constructor(t){super(r.NAME+t,new n(t))}}},940:(t,e,i)=>{i.r(e),i.d(e,{GameCharacterVO:()=>o});class o{constructor(t){this.id=t,this.currentNode=void 0,this.agroArea=void 0,this.roundInitiative=[],this.initiative=2,this.maxMovement=6,this.availableMovement=this.maxMovement}}},99:(t,e,i)=>{i.d(e,{h:()=>a});var o=i(434);const{Proxy:n}=i(710),{GameMapVO:r}=i(438);class a extends n{get vo(){return this.getData()}static get NAME(){return"GameMapProxy"}constructor(t){super(a.NAME),this.setData({mapGrid:t})}onRegister(){}findNearestNode(t){const e=this.vo.mapGrid;let i=e[0],n=o.q.getDistSquared(i,t);for(const r of e){const e=o.q.getDistSquared(r,t);e<n&&(n=e,i=r)}return i}}},438:(t,e,i)=>{i.r(e),i.d(e,{GameMapVO:()=>o});class o{constructor(){this.mapGrid=[]}}},434:(t,e,i)=>{i.d(e,{q:()=>n});class o{constructor(){this.data=[]}push(t,e=0){return this.data.push({value:t,priority:e})}pop(){let t=0,e=1/0;for(let i=0;i<this.data.length;i++){let o=this.data[i].priority;Math.min(e,o)===o&&(e=o,t=i)}return this.data.splice(t,1)[0].value}size(){return this.data.length}empty(){return 0===this.data.length}}class n{static breadthFirstSearch(t,e){let i=[];const o=[];i.push(t);const n=new Map;n.set(t,t);let r=0;for(;i.length>0&&r<e;){const t=[];for(const e of i)for(let i=0;i<e.connectedNodes.length;i++){const r=e.connectedNodes[i];r.occupied||n.has(r)||(t.push(r),o.push(r),n.set(r,e))}i=t,r++}return o}static calculatePath(t,e){const i=new o;i.push(t,0);const n=new Map,r=new Map;for(n.set(t,t),r.set(t,0);!i.empty();){const t=i.pop();if(t.equals(e))break;for(let o=0;o<t.connectedNodes.length;o++){const a=t.connectedNodes[o],s=r.get(t)+1;if(!a.occupied&&(!r.has(a)||s<r.get(a))){r.set(a,s);let o=s+this.heuristic(a,e);i.push(a,o),n.set(a,t)}}}let a=e,s=!1;const c=[];for(c.push(a);!a.equals(t)&&!s;)n.has(a)||!a.equals(e)?(a=n.get(a),c.push(a)):s=!0;return s?void 0:c}static getDistSquared(t,e){return(t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y)+(t.z-e.z)*(t.z-e.z)}static heuristic(t,e){return Math.abs(t.x-e.x)+Math.abs(t.y-e.y)+Math.abs(t.z-e.z)}}},917:(t,e,i)=>{i.d(e,{u:()=>r});const{Proxy:o}=i(710),{GameStateVO:n}=i(448);class r extends o{get vo(){return this.getData()}static get NAME(){return"GameStateProxy"}constructor(){super(r.NAME,new n)}updateGameStateType(t){this.vo.gameplayMode=t}}},448:(t,e,i)=>{i.r(e),i.d(e,{gameplayModeTypes:()=>o,GameStateVO:()=>n});const o={EXPLORATION:"EXPLORATION",COMBAT:"COMBAT",DIALOGUE:"DIALOGUE"};class n{constructor(){this.gameplayMode=o.EXPLORATION}}},23:(t,e,i)=>{i.r(e),i.d(e,{GameMediator:()=>r});var o=i(68);const{Mediator:n}=i(710);class r extends n{static get NAME(){return"GameMediator"}constructor(){console.log("Register mediator - GameMediator");const t=pc.Application.getApplication();super(r.NAME,t),this.subscribeNotification(o.i.APP_INITIALISED)}handleNotification(t,...e){switch(t){case o.i.APP_INITIALISED:}}}}},e={};function i(o){if(e[o])return e[o].exports;var n=e[o]={exports:{}};return t[o].call(n.exports,n,n.exports,i),n.exports}i.d=(t,e)=>{for(var o in e)i.o(e,o)&&!i.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t=i(986),e=i(68);const{Facade:o}=i(710),{GameFacade:n}=i(986),r=pc.createScript("CacogenGame");r.prototype.initialize=function(){this.facade=o.getInstance(n.KEY),this.facade.sendNotification(e.i.APP_INITIALISED),this.facade.sendNotification(e.i.CHANGE_SCENE,"Map1")},r.prototype.update=function(t){};var a=i(434);const s=pc.createScript("NavigationComponent");s.attributes.add("connectedComponents",{type:"entity",array:!0,title:"Connected Components"}),s.prototype.initialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,.05,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.findByName("Plane").enabled=!1},s.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity,i,e)},s.prototype.setGrid=function(t){this.nodeGrid=t},s.prototype.getGrid=function(){return this.nodeGrid},s.prototype.getNearestNode=function(t){let e=this.nodeGrid[0],i=a.q.getDistSquared(e,t);for(const o of this.nodeGrid){const n=a.q.getDistSquared(o,t);n<i&&(i=n,e=o)}return e};var c=i(710),h=i(958),p=i(99),u=i(917);const{Mediator:d}=i(710);class l extends d{static get NAME(){return"GameCharacterMediator_"}constructor(t,i,o){super(l.NAME+t),this.id=t;let n=[e.i.CHANGE_SCENE_COMPLETE,e.i.NAVIGATE_TO_NODE,e.i.START_COMBAT];n=n.concat(o),this.subscribeNotification(n),this.viewComponent=i,this.viewComponent.on("updateCurrentNode",this.updateCurrentNode,this),this.viewComponent.on("finishedMove",this.handleFinishedMode,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(this.viewComponent&&this.viewComponent.fire(t,this.id,...i),t){case e.i.START_COMBAT:this.handleStartCombat()}}updateCurrentNode(t){}handleFinishedMode(t){this.facade.sendNotification(e.i.PC_FINISHED_MOVE,t)}lookForCharacter(t,i){for(const o of this.searchArea)o.equals(i)&&(this.viewComponent.script.GameCharacterComponent.lookAtPoint(i),this.facade.sendNotification(e.i.START_COMBAT,this.viewComponent,[t]))}handleStartCombat(){}}const f=pc.createScript("GameCharacterComponent");f.attributes.add("characterId",{type:"string",title:"Character Id"}),f.attributes.add("characterSpeed",{type:"number",title:"Character Speed",default:4}),f.prototype.preregisterNotification=function(t){this.preregisteredNotifications||(this.preregisteredNotifications=[]),this.preregisteredNotifications.push(t)},f.prototype.postInitialize=function(){this.movementPath=[],this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(l.NAME+this.characterId)&&this.facade.removeMediator(l.NAME+this.characterId),this.preregisteredNotifications||(this.preregisteredNotifications=[]),this.facade.registerProxy(new h.b(this.characterId)),this.facade.registerMediator(new l(this.characterId,this.entity,this.preregisteredNotifications))},f.prototype.setPath=function(t){this.movementPath=t},f.prototype.stopMovement=function(t){console.log("StopMovement"),console.log(t),this.movementPath=[],this.entity.setLocalPosition(t.x,t.y,t.z)},f.prototype.update=function(t){this.moveAlongPath(t)},f.prototype.moveAlongPath=function(t){if(this.movementPath.length>0){const e=this.movementPath[this.movementPath.length-1],i=this.entity.getLocalPosition(),o=new pc.Vec3,n=new pc.Vec3(t*this.characterSpeed,t*this.characterSpeed,t*this.characterSpeed),r=new pc.Vec3(e.x,e.y,e.z);if(o.sub2(r,i),o.normalize(),o.mul(n),o.add(i),this.entity.setLocalPosition(o),this.lookAtPoint(e),console.log("updateCurrentNode"),o.distance(r)<.15){const t=this.movementPath.pop();this.entity.fire("updateCurrentNode",t),0===this.movementPath.length&&this.entity.fire("finishedMove",t)}}},f.prototype.lookAtPoint=function(t){const e=this.entity.getLocalPosition(),i=t.x-e.x,o=t.z-e.z,n=180*Math.atan2(i,o)/Math.PI;this.entity.setEulerAngles(0,n,0)};var g=i(448);const y=pc.createScript("AgroGameCharacterComponent");y.attributes.add("sightRange",{type:"number",title:"Sight Range",default:5}),y.prototype.initialize=function(){this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MAP_GRID_CREATED),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.PC_MOVED_TO_NODE),this.entity.on(e.i.MAP_GRID_CREATED,this.handleMapGridCreated,this),this.entity.on(e.i.PC_MOVED_TO_NODE,this.handleMovedToNode,this)},y.prototype.handleMapGridCreated=function(e,...i){const o=c.Facade.getInstance(t.GameFacade.KEY),n=o.retrieveProxy(h.b.NAME+e).vo;if(!n.currentNode){const t=o.retrieveProxy(p.h.NAME);n.currentNode=t.findNearestNode(this.entity.getLocalPosition()),n.currentNode.occupied=!0,n.agroArea=a.q.breadthFirstSearch(n.currentNode,this.sightRange)}},y.prototype.handleMovedToNode=function(i,o,n){const r=c.Facade.getInstance(t.GameFacade.KEY),a=r.retrieveProxy(h.b.NAME+i).vo;if(r.retrieveProxy(u.u.NAME).vo.gameplayMode===g.gameplayModeTypes.EXPLORATION)for(const t of a.agroArea)t.equals(n)&&(this.entity.script.GameCharacterComponent.lookAtPoint(n),r.sendNotification(e.i.NAVIGATE_TO_NODE,n),r.sendNotification(e.i.START_COMBAT,i))};const{Mediator:m}=i(710);class M extends m{static get NAME(){return"ToastMessageMediator"}constructor(t){super(M.NAME),this.subscribeNotification([e.i.SHOW_TOAST_MESSAGE]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SHOW_TOAST_MESSAGE:this.viewComponent.script.ToastMessageComponent.addMessage(i[0])}}}const v=pc.createScript("ToastMessageComponent");v.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),v.attributes.add("messageTime",{type:"number",default:5,title:"Message Time"}),v.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(M.NAME)&&this.facade.removeMediator(M.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new M(this.entity))},v.prototype.addMessage=function(t){0===this.messageQueue.length?(this.messageQueue.push(t),this.showNextMessage()):this.messageQueue.push(t)},v.prototype.showNextMessage=function(){if(this.messageQueue.length>0){const t=this.messageQueue[0];this.labelEntity.element.text=t,setTimeout((()=>{this.messageQueue.shift(),this.showNextMessage()}),1e3*this.messageTime)}else this.labelEntity.element.text=""};const N=pc.createScript("NavigateToNodeComponent");N.prototype.initialize=function(){this.entity.script.GameCharacterComponent.preregisterNotification(e.i.NAVIGATE_TO_NODE),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.START_COMBAT),this.entity.on(e.i.NAVIGATE_TO_NODE,this.handleNavigateToNode,this),this.entity.on(e.i.START_COMBAT,this.handleStartCombat,this),this.entity.on("updateCurrentNode",this.updateCurrentNode,this)},N.prototype.handleNavigateToNode=function(e,...i){const o=i[0],n=c.Facade.getInstance(t.GameFacade.KEY);if(n.retrieveProxy(u.u.NAME).vo.gameplayMode===g.gameplayModeTypes.EXPLORATION){const t=n.retrieveProxy(p.h.NAME),i=n.retrieveProxy(h.b.NAME+e).vo;i.currentNode||(i.currentNode=t.findNearestNode(this.entity.getLocalPosition()));const r=a.q.calculatePath(i.currentNode,o);r&&r.length>0&&(this.entity.script.GameCharacterComponent.setPath(r),i.currentNode=o)}},N.prototype.updateCurrentNode=function(i){const o=this.entity.script.GameCharacterComponent.characterId;c.Facade.getInstance(t.GameFacade.KEY).sendNotification(e.i.PC_MOVED_TO_NODE,o,i)},N.prototype.handleStartCombat=function(){const e=this.entity.script.GameCharacterComponent.characterId,i=c.Facade.getInstance(t.GameFacade.KEY).retrieveProxy(h.b.NAME+e).vo;this.entity.script.GameCharacterComponent.stopMovement(i.currentNode)},pc.createScript("SetCameraTargetComponent").prototype.postInitialize=function(){c.Facade.getInstance(t.GameFacade.KEY).sendNotification(e.i.SET_CAMERA_TARGET,this.entity)};var E=i(758);const C=pc.createScript("PlayerCombatInputComponent");C.attributes.add("moveTileTemplate",{type:"asset",title:"Move tile template"}),C.attributes.add("tileContainer",{type:"entity",title:"Tile Container"}),C.prototype.initialize=function(){this.entity.script.GameCharacterComponent.preregisterNotification(e.i.AWAIT_PLAYER_COMBAT_INPUT),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.NAVIGATE_TO_NODE),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.PC_FINISHED_MOVE),this.entity.on(e.i.AWAIT_PLAYER_COMBAT_INPUT,this.awaitPlayerInput,this)},C.prototype.awaitPlayerInput=function(t,...e){this.showMoveableTiles(t)},C.prototype.handleNavigateToNode=function(e,...i){const o=i[0],n=c.Facade.getInstance(t.GameFacade.KEY),r=n.retrieveProxy(u.u.NAME).vo,a=n.retrieveProxy(h.b.NAME+e);if(n.retrieveProxy(E.F.NAME)&&r.gameplayMode===g.gameplayModeTypes.COMBAT)for(const t of this.moveableNodes)t.equals(o)&&this.handleValidMove(a,o)},C.prototype.destroyDisplayTiles=function(){for(const t of this.displayTiles)t.destroy()},C.prototype.handleFinishedMove=function(t,e){this.showMoveableTiles(t)},C.prototype.handleValidMove=function(t,i){const o=t.vo,n=a.q.calculatePath(o.currentNode,i);n&&n.length>0&&(o.availableMovement-=n.length-1,o.currentNode=i,this.destroyDisplayTiles(),this.entity.off(e.i.NAVIGATE_TO_NODE,this.handleNavigateToNode,this),this.entity.on(e.i.PC_FINISHED_MOVE,this.handleFinishedMove,this),this.entity.script.GameCharacterComponent.setPath(n))},C.prototype.showMoveableTiles=function(i){const o=c.Facade.getInstance(t.GameFacade.KEY).retrieveProxy(h.b.NAME+i).vo;console.log("TILE AT AREA"),console.log(o.currentNode),console.log(this.entity.getLocalPosition()),this.moveableNodes=a.q.breadthFirstSearch(o.currentNode,o.availableMovement),this.displayTiles=[];for(const t of this.moveableNodes){const e=this.moveTileTemplate.resource.instantiate();e.setLocalPosition(t.x,t.y,t.z),this.tileContainer.addChild(e),this.displayTiles.push(e)}this.entity.on(e.i.NAVIGATE_TO_NODE,this.handleNavigateToNode,this),this.entity.off(e.i.PC_FINISHED_MOVE,this.handleFinishedMove,this)};const{Facade:A}=i(710),{PureMVC:_}=i(710);new class{constructor(){console.log("Main start"),_.debug=!0,A.getInstance=t.GameFacade.getInstance,console.log(A),this.facade=A.getInstance(t.GameFacade.KEY),this.facade.startup(this)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvRmFjYWRlLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vbm9kZV9tb2R1bGVzL0Brb3JlZXovcHVyZS1tdmMvbGliL2NvbS9rb3JlZXovcHVyZW12Yy9NZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvTW9kZWwuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9ub2RlX21vZHVsZXMvQGtvcmVlei9wdXJlLW12Yy9saWIvY29tL2tvcmVlei9wdXJlbXZjL05vdGlmaWVyLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vbm9kZV9tb2R1bGVzL0Brb3JlZXovcHVyZS1tdmMvbGliL2NvbS9rb3JlZXovcHVyZW12Yy9Qcm94eS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvUHVyZU1WQy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9jb20va29yZWV6L3B1cmVtdmMvVmlldy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9Aa29yZWV6L3B1cmUtbXZjL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL25vZGVfbW9kdWxlcy9ldmVudGVtaXR0ZXIzL2luZGV4LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uTm9kZS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2dhbWVNYXAvR2FtZU1hcENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2lucHV0TGF5ZXIvSW5wdXRMYXllck1lZGlhdG9yLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvZ2FtZUNhbWVyYS9HYW1lQ2FtZXJhLmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvZ2FtZUNhbWVyYS9HYW1lQ2FtZXJhTWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9pbnB1dExheWVyL0lucHV0TGF5ZXJDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9nYW1lTWFwL0dhbWVNYXBNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1BhcnNlR2FtZU1hcENvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29udHJvbGxlci9TdGFydHVwQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0NoYW5nZVNjZW5lQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL1N0YXJ0Q29tYmF0Q29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL05leHRDb21iYXRUdXJuQ29tbWFuZC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL05leHRDb21iYXRSb3VuZENvbW1hbmQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvR2FtZUZhY2FkZS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9jb250cm9sbGVyL0dhbWVDb21tYW5kcy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy91dGlscy9TaHVmZmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2NvbWJhdC9Db21iYXRWTy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJWTy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9nYW1lTWFwL0dhbWVNYXBQcm94eS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9nYW1lTWFwL0dhbWVNYXBWTy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9nYW1lTWFwL25hdmlnYXRpb24vUHJpb3JpdHlRdWV1ZS5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy9tb2RlbC9nYW1lTWFwL25hdmlnYXRpb24vQXN0YXIuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVByb3h5LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTy5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L0dhbWVNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvQ2Fjb2dlbkdhbWUuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvY29tcG9uZW50cy9uYXZpZ2F0aW9uL05hdmlnYXRpb25Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJNZWRpYXRvci5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlckNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2dhbWVDaGFyYWN0ZXIvYWdncm8vQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy90b2FzdE1lc3NhZ2UvVG9hc3RNZXNzYWdlTWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvdmlldy90b2FzdE1lc3NhZ2UvVG9hc3RNZXNzYWdlQ29tcG9uZW50LmpzIiwid2VicGFjazovL2NhY29nZW4tZW5naW5lLy4vc3JjL3ZpZXcvZ2FtZUNoYXJhY3Rlci9uYXZpZ2F0ZVRvTm9kZS9OYXZpZ2F0ZVRvTm9kZUNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2dhbWVDaGFyYWN0ZXIvc2V0Q2FtZXJhVGFyZ2V0L1NldENhbWVyYVRhcmdldENvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jYWNvZ2VuLWVuZ2luZS8uL3NyYy92aWV3L2dhbWVDaGFyYWN0ZXIvY29tYmF0SW5wdXQvUGxheWVyQ29tYmF0SW5wdXRDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vY2Fjb2dlbi1lbmdpbmUvLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJQdXJlTVZDXzEiLCJWaWV3XzEiLCJDb250cm9sbGVyIiwia2V5IiwidGhpcyIsImNvbW1hbmRNYXAiLCJpbnN0YW5jZU1hcCIsIkVycm9yIiwibXVsdGl0b25LZXkiLCJsb2dnZXIiLCJQdXJlTVZDIiwiZGVidWciLCJsb2dDb21tYW5kIiwibG9nTm9uZSIsImluaXRpYWxpemVDb250cm9sbGVyIiwicmVtb3ZlQ29udHJvbGxlciIsImdldEluc3RhbmNlIiwicHJvdG90eXBlIiwicmVnaXN0ZXJDb21tYW5kIiwibm90aWZpY2F0aW9uTmFtZSIsImNvbW1hbmRDbGFzc1JlZiIsInZpZXciLCJyZWdpc3Rlck9ic2VydmVyIiwiZXhlY3V0ZUNvbW1hbmQiLCJoYXNDb21tYW5kIiwidW5kZWZpbmVkIiwicmVtb3ZlQ29tbWFuZCIsInJlbW92ZU9ic2VydmVyIiwiVmlldyIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImNvbW1hbmQiLCJfY29uc29sZUFyZ3MiLCJuYW1lIiwiYXBwbHkiLCJjb25jYXQiLCJDb250cm9sbGVyXzEiLCJNb2RlbF8xIiwiRmFjYWRlIiwibG9nTm90aWZpY2F0aW9uIiwiaW5pdGlhbGl6ZU5vdGlmaWVyIiwiaW5pdGlhbGl6ZUZhY2FkZSIsImhhc0NvcmUiLCJyZW1vdmVDb3JlIiwiTW9kZWwiLCJyZW1vdmVNb2RlbCIsInJlbW92ZVZpZXciLCJpbml0aWFsaXplTW9kZWwiLCJpbml0aWFsaXplVmlldyIsImNvbnRyb2xsZXIiLCJyZWdpc3RlclByb3h5IiwicHJveHkiLCJtb2RlbCIsInJldHJpZXZlUHJveHkiLCJwcm94eU5hbWUiLCJyZW1vdmVQcm94eSIsImhhc1Byb3h5IiwicmVnaXN0ZXJNZWRpYXRvciIsIm1lZGlhdG9yIiwicmV0cmlldmVNZWRpYXRvciIsIm1lZGlhdG9yTmFtZSIsInJlbW92ZU1lZGlhdG9yIiwic2xlZXBNZWRpYXRvciIsImF3YWtlTWVkaWF0b3IiLCJoYXNNZWRpYXRvciIsInNlbmROb3RpZmljYXRpb24iLCJfYSIsIm5vdGlmeU9ic2VydmVycyIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJkIiwiYiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJfXyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiTm90aWZpZXJfMSIsIk1lZGlhdG9yIiwiX3N1cGVyIiwidmlld0NvbXBvbmVudCIsIl90aGlzIiwiY2FsbCIsImxvZ01lZGlhdG9yIiwic2xlZXBpbmciLCJzdWJzY3JpYmVkTm90aWZpY2F0aW9ucyIsIm5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSIsImdldCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJnZXRNZWRpYXRvck5hbWUiLCJzZXRWaWV3Q29tcG9uZW50IiwiZ2V0Vmlld0NvbXBvbmVudCIsIm9uUmVnaXN0ZXIiLCJvblJlbW92ZSIsIm9uU2xlZXAiLCJvbkF3YWtlIiwic3Vic2NyaWJlTm90aWZpY2F0aW9uIiwiY2hhbmdlU3Vic2NyaXB0aW9uIiwiYWRkU3Vic2NyaXB0aW9uIiwidW5zdWJzY3JpYmVOb3RpZmljYXRpb24iLCJyZW1vdmVTdWJzY3JpcHRpb24iLCJhY3Rpb24iLCJvbGROb3RpZmljYXRpb25zIiwibm90aWZpY2F0aW9ucyIsInNsaWNlIiwiY2hhbmdlZCIsImZvckVhY2giLCJub3RpZmljYXRpb24iLCJpbmRleE9mIiwicHVzaCIsImluZGV4Iiwic3BsaWNlIiwiTm90aWZpZXIiLCJwcm94eU1hcCIsImdldFByb3h5TmFtZSIsIkZhY2FkZV8xIiwiZmFjYWRlIiwiZ2V0RmFjYWRlIiwiUHJveHkiLCJkYXRhIiwibG9nUHJveHkiLCJzZXREYXRhIiwiZ2V0RGF0YSIsImNvbnNvbGVBcmdzIiwiY29tbWFuZE5hbWUiLCJjb25zb2xlIiwibG9nIiwiRXZlbnRFbWl0dGVyIiwibWVkaWF0b3JNYXAiLCJldmVudEVtaXR0ZXIiLCJvYnNlcnZlck1ldGhvZCIsImNvbnRleHQiLCJyZW1vdmVMaXN0ZW5lciIsIm9uIiwiZW1pdCIsInJlZ2lzdGVyT2JzZXJ2ZXJzIiwib25NZWRpYXRvck5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSIsImJpbmQiLCJpc1NsZWVwaW5nIiwicmVtb3ZlT2JzZXJ2ZXJzIiwiaW50ZXJlc3RzIiwibm90aWZpY2F0aW9uSW50ZXJlc3RzIiwibm90aWZpY2F0aW9uSW50ZXJlc3RzXzEiLCJpbnRlcmVzdCIsImhhbmRsZU5vdGlmaWNhdGlvbiIsIm5vdGlmaWNhdGlvbkludGVyZXN0c18yIiwiTWVkaWF0b3JfMSIsIlByb3h5XzEiLCJoYXMiLCJwcmVmaXgiLCJFdmVudHMiLCJFRSIsImZuIiwib25jZSIsImFkZExpc3RlbmVyIiwiZW1pdHRlciIsImV2ZW50IiwiVHlwZUVycm9yIiwibGlzdGVuZXIiLCJldnQiLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiY2xlYXJFdmVudCIsImV2ZW50TmFtZXMiLCJldmVudHMiLCJuYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImxpc3RlbmVycyIsImhhbmRsZXJzIiwiaSIsImwiLCJlZSIsImxpc3RlbmVyQ291bnQiLCJhMSIsImEyIiwiYTMiLCJhNCIsImE1IiwibGVuIiwiaiIsInJlbW92ZUFsbExpc3RlbmVycyIsIm9mZiIsInByZWZpeGVkIiwibW9kdWxlIiwiTmF2aWdhdGlvbk5vZGUiLCJ4IiwieSIsInoiLCJjb25uZWN0ZWROb2RlcyIsIm9jY3VwaWVkIiwib3RoZXJOb2RlIiwiZmluZCIsIm5vZGUiLCJpc0Nvbm5lY3RlZCIsImNvbm5lY3RlZE5vZGVJbmRleCIsImZpbmRJbmRleCIsImVxdWFscyIsInBjIiwiY3JlYXRlU2NyaXB0IiwiaW5pdGlhbGl6ZSIsIklucHV0TGF5ZXJNZWRpYXRvciIsInN1cGVyIiwiTkFNRSIsIkdhbWVDb21tYW5kcyIsImhhbmRsZVBpY2tlck5hdmlnYXRpb24iLCJoYW5kbGVTY3JvbGxpbmciLCJkaXJlY3Rpb24iLCJHYW1lQ2FtZXJhIiwiYXR0cmlidXRlcyIsImFkZCIsInR5cGUiLCJkZWZhdWx0IiwidGl0bGUiLCJHYW1lRmFjYWRlIiwiS0VZIiwiR2FtZUNhbWVyYU1lZGlhdG9yIiwiZW50aXR5Iiwic2V0Q2FtZXJhVGFyZ2V0IiwiY2FtZXJhVGFyZ2V0Iiwicm90YXRpb24iLCJnZXRFdWxlckFuZ2xlcyIsImNhbWVyYUhlaWdodCIsImdldExvY2FsUG9zaXRpb24iLCJoYW5kbGVEcmFnIiwiZHJhZ011bHRpcGxpZXJYIiwibmV3Q2FtZXJhSGVpZ2h0IiwiZHJhZ011bHRpcGxpZXJZIiwibWF0aCIsImNsYW1wIiwibWluQ2FtZXJhSGVpZ2h0IiwibWF4Q2FtZXJhSGVpZ2h0IiwiZ2V0VGFyZ2V0Q2FtZXJhUG9zaXRpb24iLCJmb2N1c1BvaW50IiwiY2FtZXJhUG9zaXRpb24iLCJ0YXJnZXRYIiwiTWF0aCIsInNpbiIsIlBJIiwiZGlzdGFuY2UiLCJ0YXJnZXRaIiwiY29zIiwiVmVjMyIsInVwZGF0ZSIsImR0IiwiY2FtZXJhVGFyZ2V0UG9zaXRpb24iLCJ0YXJnZXRQb3NpdGlvbiIsImN1cnJlbnRQb3MiLCJ0d2VlblgiLCJ0d2VlblkiLCJ0d2VlbloiLCJzZXRMb2NhbFBvc2l0aW9uIiwibG9va0F0Iiwic2NyaXB0IiwiSW5wdXRMYXllckNvbXBvbmVudCIsInJheSIsIlJheSIsImFwcCIsIm1vdXNlIiwiZGlzYWJsZUNvbnRleHRNZW51IiwiY2xpY2tEb3duU3RhcnQiLCJpc0RyYWdnaW5nIiwiaGFuZGxlUGlja2VyUmVzdWx0IiwiRVZFTlRfTU9VU0VNT1ZFIiwib25Nb3VzZU1vdmUiLCJlbGVtZW50IiwiRVZFTlRfTU9VU0VET1dOIiwib25Nb3VzZURvd24iLCJFVkVOVF9NT1VTRVVQIiwib25Nb3VzZVVwIiwiRGF0ZSIsIm5vdyIsImNsaWNrU3RhcnRQb2ludCIsIlZlYzIiLCJmaXJlIiwiZHJhZ1RpbWUiLCJoYW5kbGVSYXljYXN0Q29sbGlzaW9ucyIsImNhbWVyYUVudGl0eSIsImNhbWVyYUNvbXBvbmVudCIsImNhbWVyYSIsInNjcmVlblRvV29ybGQiLCJmYXJDbGlwIiwib3JpZ2luIiwiY29weSIsImdldFBvc2l0aW9uIiwic3ViIiwibm9ybWFsaXplIiwicGlja2VkRW50aXR5IiwiaGl0UG9zaXRpb24iLCJzY3JlZW5Qb3MiLCJ0YWdzIiwibmVhcmVzdE5vZGUiLCJnZXROZWFyZXN0Tm9kZSIsIkdhbWVNYXBNZWRpYXRvciIsIm1hcEdyaWQiLCJHYW1lU3RhdGVQcm94eSIsInZvIiwiQXBwbGljYXRpb24iLCJnZXRBcHBsaWNhdGlvbiIsIkdhbWVNZWRpYXRvciIsInBhcnNlR2FtZU1hcENvbW1hbmQiLCJuYXZpZ2F0aW9uRmxvb3JzIiwicm9vdCIsImZpbmRCeVRhZyIsImNvbXBsZXRlZEdyaWQiLCJuYXZpZ2F0aW9uQ29tcG9uZW50cyIsImZsb29yRW50aXR5IiwibmF2Q29tcCIsImZsb29yR3JpZCIsImNyZWF0ZVBhcnRpYWxHcmlkRnJvbUZsb29yIiwic2V0R3JpZCIsIm5hdmlnYXRpb25Db21wIiwiY29ubmVjdGVkQ29tcEVudGl0eSIsImNvbm5lY3RlZENvbXBvbmVudHMiLCJjb25uZWN0ZWROYXZDb21wIiwiam9pblRvQWRqYWNlbnRHcmlkIiwiZ2V0R3JpZCIsIkdhbWVNYXBQcm94eSIsImdyaWQiLCJmbG9vclBvc2l0aW9uIiwiZmxvb3JTaXplIiwiZ2V0TG9jYWxTY2FsZSIsInNuYXBwZWRXaWR0aCIsInJvdW5kIiwic25hcHBlZEJyZWFkdGgiLCJzbmFwcGVkWCIsInNuYXBwZWRZIiwic25hcHBlZFoiLCJlcXVhbHNQb2ludCIsImFkZENvbm5lY3RlZE5vZGUiLCJncmlkVG9Kb2luIiwic3RhcnR1cENvbW1hbmQiLCJjaGFuZ2VTY2VuZUNvbW1hbmQiLCJzY2VuZU5hbWUiLCJvbGRIaWVyYXJjaHkiLCJmaW5kQnlOYW1lIiwic2NlbmUiLCJzY2VuZXMiLCJsb2FkU2NlbmVIaWVyYXJjaHkiLCJ1cmwiLCJlcnIiLCJwYXJlbnQiLCJlcnJvciIsImRlc3Ryb3kiLCJzdGFydENvbWJhdENvbW1hbmQiLCJpbnN0aWdhdGluZ1BhcnR5SWRzIiwidXBkYXRlR2FtZVN0YXRlVHlwZSIsImdhbWVwbGF5TW9kZVR5cGVzIiwicGFydGljaXBhbnRzIiwiY29tYmF0UHJveHkiLCJDb21iYXRQcm94eSIsIm5leHRDb21iYXRUdXJuQ29tbWFuZCIsImdhbWVTdGF0ZSIsImdhbWVwbGF5TW9kZSIsIm5leHRUdXJuIiwibmV4dENvbWJhdFJvdW5kQ29tbWFuZCIsIm5leHRSb3VuZCIsImdhbWUiLCJTVEFSVFVQIiwic2h1ZmZsZUFycmF5IiwiYXJyYXkiLCJjdXJyZW50SW5kZXgiLCJ0ZW1wb3JhcnlWYWx1ZSIsInJhbmRvbUluZGV4IiwiZmxvb3IiLCJyYW5kb20iLCJDb21iYXRWTyIsInBhcnRpY2lwYW50UHJveGllcyIsIk1hcCIsInBhcnRpY2lwYW50IiwicGFydGljaXBhbnRQcm94eSIsIkdhbWVDaGFyYWN0ZXJQcm94eSIsInNldCIsInJvdW5kSW5pdGlhdGl2ZSIsIm5leHRUdXJuSWQiLCJzaGlmdCIsInNldFRpbWVvdXQiLCJpbml0aWF0aXZlcyIsImNoYXJhY3RlcklkIiwiZW50cmllcyIsImluaXRpYXRpdmUiLCJzaHVmZmxlZEluaXRpYXRpdmUiLCJHYW1lQ2hhcmFjdGVyVk8iLCJpZCIsImN1cnJlbnROb2RlIiwiYWdyb0FyZWEiLCJtYXhNb3ZlbWVudCIsImF2YWlsYWJsZU1vdmVtZW50IiwiR2FtZU1hcFZPIiwidGFyZ2V0UG9pbnQiLCJkaXN0U3FydFRvTmVhcmVzdE5vZGUiLCJkaXN0VG9Ob2RlIiwiUHJpb3JpdHlRdWV1ZSIsInByaW9yaXR5IiwibWluIiwiSW5maW5pdHkiLCJBc3RhciIsInN0YXJ0IiwicmFuZ2VMaW1pdCIsImZyb250aWVyIiwic2VhcmNoZWRBcmVhIiwiY2FtZUZyb20iLCJyYW5nZSIsIm5ld0Zyb250aWVyIiwiY3VycmVudCIsIm5leHQiLCJnb2FsIiwiY29zdFNvRmFyIiwiZW1wdHkiLCJwb3AiLCJuZXdDb3N0IiwiaGV1cmlzdGljIiwicGF0aElzQnJva2VuIiwicGF0aCIsInB0MSIsInB0MiIsImEiLCJhYnMiLCJHYW1lU3RhdGVWTyIsIm5ld1N0YXRlVHlwZSIsIkVYUExPUkFUSU9OIiwiQ09NQkFUIiwiRElBTE9HVUUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsIm8iLCJvYmoiLCJwcm9wIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiQ2Fjb2dlbkdhbWUiLCJOYXZpZ2F0aW9uQ29tcG9uZW50Iiwic2NhbGUiLCJoYWxmRXh0ZW50cyIsImFhYmIiLCJCb3VuZGluZ0JveCIsImhhbmRsZVJheUNhc3QiLCJlbmFibGVkIiwiaW50ZXJzZWN0c1JheSIsIm5vZGVHcmlkIiwiR2FtZUNoYXJhY3Rlck1lZGlhdG9yIiwicHJlcmVnaXN0ZXJlZE5vdGlmaWNhdGlvbnMiLCJ1cGRhdGVDdXJyZW50Tm9kZSIsImhhbmRsZUZpbmlzaGVkTW9kZSIsImhhbmRsZVN0YXJ0Q29tYmF0IiwibmV3Tm9kZSIsInNlYXJjaE5vZGUiLCJzZWFyY2hBcmVhIiwibG9va0F0UG9pbnQiLCJHYW1lQ2hhcmFjdGVyQ29tcG9uZW50IiwicHJlcmVnaXN0ZXJOb3RpZmljYXRpb24iLCJwb3N0SW5pdGlhbGl6ZSIsIm1vdmVtZW50UGF0aCIsInNldFBhdGgiLCJzdG9wTW92ZW1lbnQiLCJtb3ZlQWxvbmdQYXRoIiwibmV4dFBhdGhQb2ludCIsImxvY2FsUG9zIiwibmV3UG9zaXRpb24iLCJzcGVlZCIsImNoYXJhY3RlclNwZWVkIiwibm9kZVBvaW50Iiwic3ViMiIsIm11bCIsInBvaW50IiwiZHgiLCJkeiIsImFuZ2xlVG9EZXN0IiwiYXRhbjIiLCJzZXRFdWxlckFuZ2xlcyIsIkFncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50IiwiaGFuZGxlTWFwR3JpZENyZWF0ZWQiLCJoYW5kbGVNb3ZlZFRvTm9kZSIsImdhbWVNYXBQcm94eSIsImZpbmROZWFyZXN0Tm9kZSIsInNpZ2h0UmFuZ2UiLCJ0YXJnZXRJZCIsImFncm9Ob2RlIiwiVG9hc3RNZXNzYWdlTWVkaWF0b3IiLCJhZGRNZXNzYWdlIiwiVG9hc3RNZXNzYWdlQ29tcG9uZW50IiwibWVzc2FnZVF1ZXVlIiwiY3VycmVudFRpbWVvdXQiLCJtZXNzYWdlIiwic2hvd05leHRNZXNzYWdlIiwibmV4dE1lc3NhZ2UiLCJsYWJlbEVudGl0eSIsInRleHQiLCJtZXNzYWdlVGltZSIsIk5hdmlnYXRlVG9Ob2RlQ29tcG9uZW50IiwiaGFuZGxlTmF2aWdhdGVUb05vZGUiLCJ0YXJnZXROb2RlIiwiZ2FtZUNoYXJhY3RlclZPIiwiUGxheWVyQ29tYmF0SW5wdXRDb21wb25lbnQiLCJhd2FpdFBsYXllcklucHV0Iiwic2hvd01vdmVhYmxlVGlsZXMiLCJnYW1lQ2hhcmFjdGVyUHJveHkiLCJtb3ZlYWJsZU5vZGVzIiwiaGFuZGxlVmFsaWRNb3ZlIiwiZGVzdHJveURpc3BsYXlUaWxlcyIsInRpbGUiLCJkaXNwbGF5VGlsZXMiLCJoYW5kbGVGaW5pc2hlZE1vdmUiLCJjaGFyYWN0ZXJQcm94eSIsIm1vdmVUaWxlVGVtcGxhdGUiLCJyZXNvdXJjZSIsImluc3RhbnRpYXRlIiwidGlsZUNvbnRhaW5lciIsImFkZENoaWxkIiwic3RhcnR1cCJdLCJtYXBwaW5ncyI6IndDQUNBQSxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0RCxJQUFJQyxFQUFZLEVBQVEsS0FDcEJDLEVBQVMsRUFBUSxLQUVqQkMsRUFBNEIsV0FDNUIsU0FBU0EsRUFBV0MsR0FFaEIsR0FEQUMsS0FBS0MsV0FBYSxHQUNkSCxF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QjFLLFFBQVFDLElBQUksZ0JBQ1pELFFBQVFDLElBQUl5SyxFQUFHd0YsYUFDZmxRLFFBQVFDLElBQUloSSxLQUFLME4sT0FBT00sb0JBQ3hCaE8sS0FBS3NmLGNBQWdCekcsRUFBQSxxQkFBeUJwRyxFQUFHd0YsWUFBYXhGLEVBQUcyRixtQkFDakVwWSxLQUFLMGYsYUFBZSxHQUVwQixJQUFLLE1BQU14VCxLQUFRbE0sS0FBS3NmLGNBQWUsQ0FDbkMsTUFBTUcsRUFBT3pmLEtBQUs2ZixpQkFBaUJDLFNBQVNDLGNBQzVDTixFQUFLN1AsaUJBQWlCMUQsRUFBS1AsRUFBR08sRUFBS04sRUFBR00sRUFBS0wsR0FDM0M3TCxLQUFLZ2dCLGNBQWNDLFNBQVNSLEdBQzVCemYsS0FBSzBmLGFBQWEzWSxLQUFLMFksR0FJM0J6ZixLQUFLME4sT0FBT25GLEdBQUdzRSxFQUFBLG1CQUErQjdNLEtBQUsrZSxxQkFBc0IvZSxNQUN6RUEsS0FBSzBOLE9BQU9uQyxJQUFJc0IsRUFBQSxtQkFBK0I3TSxLQUFLMmYsbUJBQW9CM2YsT0MxRjVFLE1BQVFvQyxPQUFNLEdBQUssRUFBUSxNQUNyQixRQUFFOUIsR0FBWSxFQUFRLEtBd0JmLElBWmIsTUFDSSxjQUNJeUgsUUFBUUMsSUFBSSxjQUNaMUgsRUFBUUMsT0FBUSxFQUNoQixFQUFPSyxZQUFjMk0sRUFBVyxXQUFYLFlBQ3JCeEYsUUFBUUMsSUFBSSxHQUVaaEksS0FBS3NILE9BQVMsRUFBTzFHLFlBQVkyTSxFQUFXLFdBQVgsS0FDakN2TixLQUFLc0gsT0FBTzRZLFFBQVFsZ0IsUyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUHVyZU1WQ18xID0gcmVxdWlyZShcIi4vUHVyZU1WQ1wiKTtcbnZhciBWaWV3XzEgPSByZXF1aXJlKFwiLi9WaWV3XCIpO1xudmFyIE1VTFRJVE9OX01TRyA9IFwiY29udHJvbGxlciBrZXkgZm9yIHRoaXMgTXVsdGl0b24ga2V5IGFscmVhZHkgY29uc3RydWN0ZWRcIjtcbnZhciBDb250cm9sbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnRyb2xsZXIoa2V5KSB7XG4gICAgICAgIHRoaXMuY29tbWFuZE1hcCA9IHt9O1xuICAgICAgICBpZiAoQ29udHJvbGxlci5pbnN0YW5jZU1hcFtrZXldKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTVVMVElUT05fTVNHKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm11bHRpdG9uS2V5ID0ga2V5O1xuICAgICAgICB0aGlzLmxvZ2dlciA9IFB1cmVNVkNfMS5QdXJlTVZDLmRlYnVnID8gUHVyZU1WQ18xLlB1cmVNVkMubG9nQ29tbWFuZCA6IFB1cmVNVkNfMS5QdXJlTVZDLmxvZ05vbmU7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZUNvbnRyb2xsZXIoKTtcbiAgICB9XG4gICAgQ29udHJvbGxlci5yZW1vdmVDb250cm9sbGVyID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWxldGUgdGhpcy5pbnN0YW5jZU1hcFtrZXldO1xuICAgIH07XG4gICAgQ29udHJvbGxlci5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pbnN0YW5jZU1hcFtrZXldKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlTWFwW2tleV0gPSBuZXcgQ29udHJvbGxlcihrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlTWFwW2tleV07XG4gICAgfTtcbiAgICBDb250cm9sbGVyLnByb3RvdHlwZS5yZWdpc3RlckNvbW1hbmQgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSwgY29tbWFuZENsYXNzUmVmKSB7XG4gICAgICAgIGlmICghdGhpcy5jb21tYW5kTWFwW25vdGlmaWNhdGlvbk5hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcucmVnaXN0ZXJPYnNlcnZlcihub3RpZmljYXRpb25OYW1lLCB0aGlzLmV4ZWN1dGVDb21tYW5kLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbW1hbmRNYXBbbm90aWZpY2F0aW9uTmFtZV0gPSBjb21tYW5kQ2xhc3NSZWY7XG4gICAgfTtcbiAgICBDb250cm9sbGVyLnByb3RvdHlwZS5oYXNDb21tYW5kID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZE1hcFtub3RpZmljYXRpb25OYW1lXSAhPT0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlQ29tbWFuZCA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc0NvbW1hbmQobm90aWZpY2F0aW9uTmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMudmlldy5yZW1vdmVPYnNlcnZlcihub3RpZmljYXRpb25OYW1lLCB0aGlzLmV4ZWN1dGVDb21tYW5kLCB0aGlzKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNvbW1hbmRNYXBbbm90aWZpY2F0aW9uTmFtZV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnRyb2xsZXIucHJvdG90eXBlLmluaXRpYWxpemVDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnZpZXcgPSBWaWV3XzEuVmlldy5nZXRJbnN0YW5jZSh0aGlzLm11bHRpdG9uS2V5KTtcbiAgICB9O1xuICAgIENvbnRyb2xsZXIucHJvdG90eXBlLmV4ZWN1dGVDb21tYW5kID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbW1hbmQgPSB0aGlzLmNvbW1hbmRNYXBbbm90aWZpY2F0aW9uTmFtZV07XG4gICAgICAgIGlmICghY29tbWFuZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9nZ2VyKENvbnRyb2xsZXIuX2NvbnNvbGVBcmdzLCBub3RpZmljYXRpb25OYW1lLCBjb21tYW5kLm5hbWUpO1xuICAgICAgICBjb21tYW5kLmFwcGx5KHZvaWQgMCwgW3RoaXMubXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWVdLmNvbmNhdChhcmdzKSk7XG4gICAgfTtcbiAgICBDb250cm9sbGVyLl9jb25zb2xlQXJncyA9IFtcbiAgICAgICAgXCJcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzNGMjM0RVwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjNkUyOTk0XCIsXG4gICAgICAgIFwiY29sb3I6IFwiICsgXCIjRDRCRkUwXCIgKyBcIjsgYmFja2dyb3VuZDogXCIgKyBcIiM4NzI0QkRcIiArIFwiO1wiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjNkUyOTk0XCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMzRjIzNEVcIlxuICAgIF07XG4gICAgQ29udHJvbGxlci5pbnN0YW5jZU1hcCA9IHt9O1xuICAgIHJldHVybiBDb250cm9sbGVyO1xufSgpKTtcbmV4cG9ydHMuQ29udHJvbGxlciA9IENvbnRyb2xsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250cm9sbGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHNhcmdpcyBvbiA3LzQvMTcuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDb250cm9sbGVyXzEgPSByZXF1aXJlKFwiLi9Db250cm9sbGVyXCIpO1xudmFyIE1vZGVsXzEgPSByZXF1aXJlKFwiLi9Nb2RlbFwiKTtcbnZhciBQdXJlTVZDXzEgPSByZXF1aXJlKFwiLi9QdXJlTVZDXCIpO1xudmFyIFZpZXdfMSA9IHJlcXVpcmUoXCIuL1ZpZXdcIik7XG52YXIgTVVMVElUT05fTVNHID0gXCJGYWNhZGUgaW5zdGFuY2UgZm9yIHRoaXMgTXVsdGl0b24ga2V5IGFscmVhZHkgY29uc3RydWN0ZWQhXCI7XG52YXIgRmFjYWRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZhY2FkZShrZXkpIHtcbiAgICAgICAgaWYgKEZhY2FkZS5pbnN0YW5jZU1hcFtrZXldKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTVVMVElUT05fTVNHKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvZ2dlciA9IFB1cmVNVkNfMS5QdXJlTVZDLmRlYnVnID8gUHVyZU1WQ18xLlB1cmVNVkMubG9nTm90aWZpY2F0aW9uIDogUHVyZU1WQ18xLlB1cmVNVkMubG9nTm9uZTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplTm90aWZpZXIoa2V5KTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplRmFjYWRlKCk7XG4gICAgfVxuICAgIEZhY2FkZS5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghRmFjYWRlLmluc3RhbmNlTWFwW2tleV0pIHtcbiAgICAgICAgICAgIEZhY2FkZS5pbnN0YW5jZU1hcFtrZXldID0gbmV3IEZhY2FkZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBGYWNhZGUuaW5zdGFuY2VNYXBba2V5XTtcbiAgICB9O1xuICAgIEZhY2FkZS5oYXNDb3JlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZU1hcFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBGYWNhZGUucmVtb3ZlQ29yZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlTWFwW2tleV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBNb2RlbF8xLk1vZGVsLnJlbW92ZU1vZGVsKGtleSk7XG4gICAgICAgIFZpZXdfMS5WaWV3LnJlbW92ZVZpZXcoa2V5KTtcbiAgICAgICAgQ29udHJvbGxlcl8xLkNvbnRyb2xsZXIucmVtb3ZlQ29udHJvbGxlcihrZXkpO1xuICAgICAgICBkZWxldGUgdGhpcy5pbnN0YW5jZU1hcFtrZXldO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5pbml0aWFsaXplRmFjYWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmluaXRpYWxpemVNb2RlbCgpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVDb250cm9sbGVyKCk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZVZpZXcoKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUucmVnaXN0ZXJDb21tYW5kID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUsIGNvbW1hbmRDbGFzc1JlZikge1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXIucmVnaXN0ZXJDb21tYW5kKG5vdGlmaWNhdGlvbk5hbWUsIGNvbW1hbmRDbGFzc1JlZik7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnJlbW92ZUNvbW1hbmQgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXIucmVtb3ZlQ29tbWFuZChub3RpZmljYXRpb25OYW1lKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuaGFzQ29tbWFuZCA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXIuaGFzQ29tbWFuZChub3RpZmljYXRpb25OYW1lKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUucmVnaXN0ZXJQcm94eSA9IGZ1bmN0aW9uIChwcm94eSkge1xuICAgICAgICB0aGlzLm1vZGVsLnJlZ2lzdGVyUHJveHkocHJveHkpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5yZXRyaWV2ZVByb3h5ID0gZnVuY3Rpb24gKHByb3h5TmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5yZXRyaWV2ZVByb3h5KHByb3h5TmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnJlbW92ZVByb3h5ID0gZnVuY3Rpb24gKHByb3h5TmFtZSkge1xuICAgICAgICBpZiAodGhpcy5tb2RlbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwucmVtb3ZlUHJveHkocHJveHlOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuaGFzUHJveHkgPSBmdW5jdGlvbiAocHJveHlOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmhhc1Byb3h5KHByb3h5TmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLnJlZ2lzdGVyTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3IpIHtcbiAgICAgICAgdGhpcy52aWV3LnJlZ2lzdGVyTWVkaWF0b3IobWVkaWF0b3IpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5yZXRyaWV2ZU1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LnJldHJpZXZlTWVkaWF0b3IobWVkaWF0b3JOYW1lKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUucmVtb3ZlTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcucmVtb3ZlTWVkaWF0b3IobWVkaWF0b3JOYW1lKTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuc2xlZXBNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5zbGVlcE1lZGlhdG9yKG1lZGlhdG9yTmFtZSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLmF3YWtlTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuYXdha2VNZWRpYXRvcihtZWRpYXRvck5hbWUpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5oYXNNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5oYXNNZWRpYXRvcihtZWRpYXRvck5hbWUpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5zZW5kTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmxvZ2dlci5hcHBseSh0aGlzLCBbRmFjYWRlLl9jb25zb2xlQXJncywgbm90aWZpY2F0aW9uTmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgKF9hID0gdGhpcy52aWV3KS5ub3RpZnlPYnNlcnZlcnMuYXBwbHkoX2EsIFtub3RpZmljYXRpb25OYW1lXS5jb25jYXQoYXJncykpO1xuICAgIH07XG4gICAgRmFjYWRlLnByb3RvdHlwZS5pbml0aWFsaXplTm90aWZpZXIgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHRoaXMubXVsdGl0b25LZXkgPSBrZXk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLmluaXRpYWxpemVDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gQ29udHJvbGxlcl8xLkNvbnRyb2xsZXIuZ2V0SW5zdGFuY2UodGhpcy5tdWx0aXRvbktleSk7XG4gICAgfTtcbiAgICBGYWNhZGUucHJvdG90eXBlLmluaXRpYWxpemVNb2RlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGVsID0gTW9kZWxfMS5Nb2RlbC5nZXRJbnN0YW5jZSh0aGlzLm11bHRpdG9uS2V5KTtcbiAgICB9O1xuICAgIEZhY2FkZS5wcm90b3R5cGUuaW5pdGlhbGl6ZVZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnZpZXcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZpZXcgPSBWaWV3XzEuVmlldy5nZXRJbnN0YW5jZSh0aGlzLm11bHRpdG9uS2V5KTtcbiAgICB9O1xuICAgIEZhY2FkZS5fY29uc29sZUFyZ3MgPSBbXG4gICAgICAgIFwiXCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiM3NTcxMzBcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiI0RFRDQzNFwiLFxuICAgICAgICBcImNvbG9yOiBcIiArIFwiIzJGMkUxNVwiICsgXCI7IGJhY2tncm91bmQ6IFwiICsgXCIjRkZGMzI1XCIgKyBcIjtcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiI0RFRDQzNFwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjNzU3MTMwXCJcbiAgICBdO1xuICAgIEZhY2FkZS5pbnN0YW5jZU1hcCA9IHt9O1xuICAgIHJldHVybiBGYWNhZGU7XG59KCkpO1xuZXhwb3J0cy5GYWNhZGUgPSBGYWNhZGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GYWNhZGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBOb3RpZmllcl8xID0gcmVxdWlyZShcIi4vTm90aWZpZXJcIik7XG52YXIgUHVyZU1WQ18xID0gcmVxdWlyZShcIi4vUHVyZU1WQ1wiKTtcbnZhciBOQU1FID0gXCJNZWRpYXRvclwiO1xudmFyIE1lZGlhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNZWRpYXRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNZWRpYXRvcihtZWRpYXRvck5hbWUsIHZpZXdDb21wb25lbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubG9nZ2VyID0gUHVyZU1WQ18xLlB1cmVNVkMuZGVidWcgPyBQdXJlTVZDXzEuUHVyZU1WQy5sb2dNZWRpYXRvciA6IFB1cmVNVkNfMS5QdXJlTVZDLmxvZ05vbmU7XG4gICAgICAgIF90aGlzLm1lZGlhdG9yTmFtZSA9IG1lZGlhdG9yTmFtZSB8fCBOQU1FO1xuICAgICAgICBfdGhpcy52aWV3Q29tcG9uZW50ID0gdmlld0NvbXBvbmVudDtcbiAgICAgICAgX3RoaXMuc2xlZXBpbmcgPSB0cnVlO1xuICAgICAgICBfdGhpcy5zdWJzY3JpYmVkTm90aWZpY2F0aW9ucyA9IFtdO1xuICAgICAgICBfdGhpcy5ub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UgPSBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZWRpYXRvci5wcm90b3R5cGUsIFwibm90aWZpY2F0aW9uc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3Vic2NyaWJlZE5vdGlmaWNhdGlvbnM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5nZXRNZWRpYXRvck5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lZGlhdG9yTmFtZTtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5zZXRWaWV3Q29tcG9uZW50ID0gZnVuY3Rpb24gKHZpZXdDb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50ID0gdmlld0NvbXBvbmVudDtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5nZXRWaWV3Q29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3Q29tcG9uZW50O1xuICAgIH07XG4gICAgTWVkaWF0b3IucHJvdG90eXBlLm9uUmVnaXN0ZXIgPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlID0gbm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlO1xuICAgICAgICB0aGlzLmxvZ2dlcihNZWRpYXRvci5fY29uc29sZUFyZ3MsIHRoaXMuY29uc3RydWN0b3IubmFtZSwgXCJyZWdpc3RlclwiKTtcbiAgICB9O1xuICAgIE1lZGlhdG9yLnByb3RvdHlwZS5vblJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLmxvZ2dlcihNZWRpYXRvci5fY29uc29sZUFyZ3MsIHRoaXMuY29uc3RydWN0b3IubmFtZSwgXCJyZW1vdmVcIik7XG4gICAgfTtcbiAgICBNZWRpYXRvci5wcm90b3R5cGUub25TbGVlcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zbGVlcGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMubG9nZ2VyKE1lZGlhdG9yLl9jb25zb2xlQXJncywgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBcInNsZWVwXCIpO1xuICAgIH07XG4gICAgTWVkaWF0b3IucHJvdG90eXBlLm9uQXdha2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2xlZXBpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sb2dnZXIoTWVkaWF0b3IuX2NvbnNvbGVBcmdzLCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUsIFwiYXdha2VcIik7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVkaWF0b3IucHJvdG90eXBlLCBcImlzU2xlZXBpbmdcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNsZWVwaW5nO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNZWRpYXRvci5wcm90b3R5cGUuc3Vic2NyaWJlTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VTdWJzY3JpcHRpb24obm90aWZpY2F0aW9uTmFtZSwgdGhpcy5hZGRTdWJzY3JpcHRpb24pO1xuICAgIH07XG4gICAgTWVkaWF0b3IucHJvdG90eXBlLnVuc3Vic2NyaWJlTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VTdWJzY3JpcHRpb24obm90aWZpY2F0aW9uTmFtZSwgdGhpcy5yZW1vdmVTdWJzY3JpcHRpb24pO1xuICAgIH07XG4gICAgTWVkaWF0b3IucHJvdG90eXBlLmNoYW5nZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lLCBhY3Rpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG9sZE5vdGlmaWNhdGlvbnMgPSB0aGlzLm5vdGlmaWNhdGlvbnMuc2xpY2UoKTtcbiAgICAgICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKG5vdGlmaWNhdGlvbk5hbWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgbm90aWZpY2F0aW9uTmFtZS5mb3JFYWNoKGZ1bmN0aW9uIChub3RpZmljYXRpb24pIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VkID0gYWN0aW9uLmNhbGwoX3RoaXMsIG5vdGlmaWNhdGlvbikgfHwgY2hhbmdlZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2hhbmdlZCA9IGFjdGlvbi5jYWxsKHRoaXMsIG5vdGlmaWNhdGlvbk5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFuZ2VkICYmIHRoaXMubm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSh0aGlzLCBvbGROb3RpZmljYXRpb25zKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWVkaWF0b3IucHJvdG90eXBlLmFkZFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMubm90aWZpY2F0aW9ucy5pbmRleE9mKG5vdGlmaWNhdGlvbikgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMucHVzaChub3RpZmljYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgTWVkaWF0b3IucHJvdG90eXBlLnJlbW92ZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb24pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5ub3RpZmljYXRpb25zLmluZGV4T2Yobm90aWZpY2F0aW9uKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBNZWRpYXRvci5fY29uc29sZUFyZ3MgPSBbXG4gICAgICAgIFwiXCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMyQTMzNTFcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzM2NEQ5OFwiLFxuICAgICAgICBcImNvbG9yOiBcIiArIFwiI0Y0RjZGRVwiICsgXCI7IGJhY2tncm91bmQ6IFwiICsgXCIjMzY1NkMxXCIgKyBcIjtcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzM2NEQ5OFwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjMkEzMzUxXCJcbiAgICBdO1xuICAgIHJldHVybiBNZWRpYXRvcjtcbn0oTm90aWZpZXJfMS5Ob3RpZmllcikpO1xuZXhwb3J0cy5NZWRpYXRvciA9IE1lZGlhdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWVkaWF0b3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTVVMVElUT05fTVNHID0gXCJNb2RlbCBpbnN0YW5jZSBmb3IgdGhpcyBNdWx0aXRvbiBrZXkgYWxyZWFkeSBjb25zdHJ1Y3RlZCFcIjtcbnZhciBNb2RlbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNb2RlbChrZXkpIHtcbiAgICAgICAgdGhpcy5wcm94eU1hcCA9IHt9O1xuICAgICAgICBpZiAoTW9kZWwuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE1VTFRJVE9OX01TRyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tdWx0aXRvbktleSA9IGtleTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplTW9kZWwoKTtcbiAgICB9XG4gICAgTW9kZWwuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZU1hcFtrZXldID0gbmV3IE1vZGVsKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VNYXBba2V5XTtcbiAgICB9O1xuICAgIE1vZGVsLnJlbW92ZU1vZGVsID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZWxldGUgdGhpcy5pbnN0YW5jZU1hcFtrZXldO1xuICAgIH07XG4gICAgTW9kZWwucHJvdG90eXBlLnJlZ2lzdGVyUHJveHkgPSBmdW5jdGlvbiAocHJveHkpIHtcbiAgICAgICAgcHJveHkuaW5pdGlhbGl6ZU5vdGlmaWVyKHRoaXMubXVsdGl0b25LZXkpO1xuICAgICAgICB0aGlzLnByb3h5TWFwW3Byb3h5LmdldFByb3h5TmFtZSgpXSA9IHByb3h5O1xuICAgICAgICBwcm94eS5vblJlZ2lzdGVyKCk7XG4gICAgfTtcbiAgICBNb2RlbC5wcm90b3R5cGUucmV0cmlldmVQcm94eSA9IGZ1bmN0aW9uIChwcm94eU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJveHlNYXBbcHJveHlOYW1lXTtcbiAgICB9O1xuICAgIE1vZGVsLnByb3RvdHlwZS5oYXNQcm94eSA9IGZ1bmN0aW9uIChwcm94eU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJveHlNYXBbcHJveHlOYW1lXSAhPT0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgTW9kZWwucHJvdG90eXBlLnJlbW92ZVByb3h5ID0gZnVuY3Rpb24gKHByb3h5TmFtZSkge1xuICAgICAgICBpZiAodGhpcy5wcm94eU1hcFtwcm94eU5hbWVdKSB7XG4gICAgICAgICAgICB2YXIgcHJveHkgPSB0aGlzLnByb3h5TWFwW3Byb3h5TmFtZV07XG4gICAgICAgICAgICBwcm94eS5vblJlbW92ZSgpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMucHJveHlNYXBbcHJveHlOYW1lXTtcbiAgICAgICAgICAgIHJldHVybiBwcm94eTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIE1vZGVsLnByb3RvdHlwZS5pbml0aWFsaXplTW9kZWwgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgTW9kZWwuaW5zdGFuY2VNYXAgPSB7fTtcbiAgICByZXR1cm4gTW9kZWw7XG59KCkpO1xuZXhwb3J0cy5Nb2RlbCA9IE1vZGVsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TW9kZWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIENyZWF0ZWQgYnkgc2FyZ2lzIG9uIDcvNC8xNy5cbiAqL1xudmFyIEZhY2FkZV8xID0gcmVxdWlyZShcIi4vRmFjYWRlXCIpO1xudmFyIE1VTFRJVE9OX01TRyA9IFwibXVsdGl0b25LZXkgZm9yIHRoaXMgTm90aWZpZXIgbm90IHlldCBpbml0aWFsaXplZCFcIjtcbnZhciBOb3RpZmllciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb3RpZmllcigpIHtcbiAgICB9XG4gICAgTm90aWZpZXIucHJvdG90eXBlLmluaXRpYWxpemVOb3RpZmllciA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdGhpcy5tdWx0aXRvbktleSA9IGtleTtcbiAgICAgICAgdGhpcy5mYWNhZGUgPSB0aGlzLmdldEZhY2FkZSgpO1xuICAgIH07XG4gICAgTm90aWZpZXIucHJvdG90eXBlLnNlbmROb3RpZmljYXRpb24gPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0aGlzLmZhY2FkZSkge1xuICAgICAgICAgICAgKF9hID0gdGhpcy5mYWNhZGUpLnNlbmROb3RpZmljYXRpb24uYXBwbHkoX2EsIFtub3RpZmljYXRpb25OYW1lXS5jb25jYXQoYXJncykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBOb3RpZmllci5wcm90b3R5cGUuZ2V0RmFjYWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5tdWx0aXRvbktleSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE1VTFRJVE9OX01TRyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEZhY2FkZV8xLkZhY2FkZS5nZXRJbnN0YW5jZSh0aGlzLm11bHRpdG9uS2V5KTtcbiAgICB9O1xuICAgIHJldHVybiBOb3RpZmllcjtcbn0oKSk7XG5leHBvcnRzLk5vdGlmaWVyID0gTm90aWZpZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RpZmllci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBDcmVhdGVkIGJ5IHNhcmdpcyBvbiA3LzQvMTcuXG4gKi9cbnZhciBOb3RpZmllcl8xID0gcmVxdWlyZShcIi4vTm90aWZpZXJcIik7XG52YXIgUHVyZU1WQ18xID0gcmVxdWlyZShcIi4vUHVyZU1WQ1wiKTtcbnZhciBOQU1FID0gXCJQcm94eVwiO1xudmFyIFByb3h5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQcm94eSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQcm94eShwcm94eU5hbWUsIGRhdGEpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucHJveHlOYW1lID0gcHJveHlOYW1lIHx8IE5BTUU7XG4gICAgICAgIF90aGlzLmxvZ2dlciA9IFB1cmVNVkNfMS5QdXJlTVZDLmRlYnVnID8gUHVyZU1WQ18xLlB1cmVNVkMubG9nUHJveHkgOiBQdXJlTVZDXzEuUHVyZU1WQy5sb2dOb25lO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgX3RoaXMuc2V0RGF0YShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFByb3h5LnByb3RvdHlwZS5nZXRQcm94eU5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3h5TmFtZTtcbiAgICB9O1xuICAgIFByb3h5LnByb3RvdHlwZS5zZXREYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9O1xuICAgIFByb3h5LnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xuICAgIH07XG4gICAgUHJveHkucHJvdG90eXBlLm9uUmVnaXN0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyKFByb3h5Ll9jb25zb2xlQXJncywgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLCBcInJlZ2lzdGVyXCIpO1xuICAgIH07XG4gICAgUHJveHkucHJvdG90eXBlLm9uUmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxvZ2dlcihQcm94eS5fY29uc29sZUFyZ3MsIHRoaXMuY29uc3RydWN0b3IubmFtZSwgXCJyZW1vdmVcIik7XG4gICAgfTtcbiAgICBQcm94eS5fY29uc29sZUFyZ3MgPSBbXG4gICAgICAgIFwiXCIsXG4gICAgICAgIFwiYmFja2dyb3VuZDogXCIgKyBcIiMyOTVBMzRcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzJGQUE0QVwiLFxuICAgICAgICBcImNvbG9yOiBcIiArIFwiIzEwMjQxNVwiICsgXCI7IGJhY2tncm91bmQ6IFwiICsgXCIjMjdEMDRDXCIgKyBcIjtcIixcbiAgICAgICAgXCJiYWNrZ3JvdW5kOiBcIiArIFwiIzJGQUE0QVwiLFxuICAgICAgICBcImJhY2tncm91bmQ6IFwiICsgXCIjMjk1QTM0XCJcbiAgICBdO1xuICAgIHJldHVybiBQcm94eTtcbn0oTm90aWZpZXJfMS5Ob3RpZmllcikpO1xuZXhwb3J0cy5Qcm94eSA9IFByb3h5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJveHkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUHVyZU1WQyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQdXJlTVZDKCkge1xuICAgIH1cbiAgICBQdXJlTVZDLmxvZ0NvbW1hbmQgPSBmdW5jdGlvbiAoY29uc29sZUFyZ3MsIG5vdGlmaWNhdGlvbk5hbWUsIGNvbW1hbmROYW1lKSB7XG4gICAgICAgIGNvbnNvbGVBcmdzWzBdID0gXCIlYyAlYyAlYyBcIiArIG5vdGlmaWNhdGlvbk5hbWUgKyBcIiA9PiAgXCIgKyBjb21tYW5kTmFtZSArIFwiICVjICVjIFwiO1xuICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBjb25zb2xlQXJncyk7XG4gICAgfTtcbiAgICBQdXJlTVZDLmxvZ05vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChjb25zb2xlQXJncywgbm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlQXJnc1swXSA9IFwiJWMgJWMgJWMgXCIgKyBub3RpZmljYXRpb25OYW1lICsgXCI6IGFyZ3MgWyBcIiArIGFyZ3MgKyBcIiBdICVjICVjIFwiO1xuICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBjb25zb2xlQXJncyk7XG4gICAgfTtcbiAgICBQdXJlTVZDLmxvZ01lZGlhdG9yID0gZnVuY3Rpb24gKGNvbnNvbGVBcmdzLCBuYW1lLCBhY3Rpb24pIHtcbiAgICAgICAgY29uc29sZUFyZ3NbMF0gPSBcIiVjICVjICVjIFwiICsgbmFtZSArIFwiOiBcIiArIGFjdGlvbiArIFwiICVjICVjIFwiO1xuICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBjb25zb2xlQXJncyk7XG4gICAgfTtcbiAgICBQdXJlTVZDLmxvZ1Byb3h5ID0gZnVuY3Rpb24gKGNvbnNvbGVBcmdzLCBuYW1lLCBhY3Rpb24pIHtcbiAgICAgICAgY29uc29sZUFyZ3NbMF0gPSBcIiVjICVjICVjIFwiICsgbmFtZSArIFwiOiBcIiArIGFjdGlvbiArIFwiICVjICVjIFwiO1xuICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBjb25zb2xlQXJncyk7XG4gICAgfTtcbiAgICBQdXJlTVZDLmxvZ05vbmUgPSBmdW5jdGlvbiAoY29uc29sZUFyZ3MpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFB1cmVNVkMuZGVidWcgPSB0cnVlO1xuICAgIHJldHVybiBQdXJlTVZDO1xufSgpKTtcbmV4cG9ydHMuUHVyZU1WQyA9IFB1cmVNVkM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QdXJlTVZDLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoXCJldmVudGVtaXR0ZXIzXCIpO1xudmFyIE1VTFRJVE9OX01TRyA9IFwiVmlldyBpbnN0YW5jZSBmb3IgdGhpcyBNdWx0aXRvbiBrZXkgYWxyZWFkeSBjb25zdHJ1Y3RlZCFcIjtcbnZhciBWaWV3ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZpZXcoa2V5KSB7XG4gICAgICAgIHRoaXMubWVkaWF0b3JNYXAgPSB7fTtcbiAgICAgICAgdGhpcy5ldmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIGlmIChWaWV3Lmluc3RhbmNlTWFwW2tleV0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihNVUxUSVRPTl9NU0cpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubXVsdGl0b25LZXkgPSBrZXk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZVZpZXcoKTtcbiAgICB9XG4gICAgVmlldy5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pbnN0YW5jZU1hcFtrZXldKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlTWFwW2tleV0gPSBuZXcgVmlldyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlTWFwW2tleV07XG4gICAgfTtcbiAgICBWaWV3LnJlbW92ZVZpZXcgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmluc3RhbmNlTWFwW2tleV07XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5yZW1vdmVPYnNlcnZlciA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lLCBvYnNlcnZlck1ldGhvZCwgY29udGV4dCkge1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5yZW1vdmVMaXN0ZW5lcihub3RpZmljYXRpb25OYW1lLCBvYnNlcnZlck1ldGhvZCwgY29udGV4dCk7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5yZWdpc3Rlck9ic2VydmVyID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbk5hbWUsIG9ic2VydmVyTWV0aG9kLCBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLm9uKG5vdGlmaWNhdGlvbk5hbWUsIG9ic2VydmVyTWV0aG9kLCBjb250ZXh0KTtcbiAgICB9O1xuICAgIFZpZXcucHJvdG90eXBlLm5vdGlmeU9ic2VydmVycyA9IGZ1bmN0aW9uIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdGhpcy5ldmVudEVtaXR0ZXIpLmVtaXQuYXBwbHkoX2EsIFtub3RpZmljYXRpb25OYW1lLCBub3RpZmljYXRpb25OYW1lXS5jb25jYXQoYXJncykpO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmVnaXN0ZXJNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvcikge1xuICAgICAgICBpZiAodGhpcy5tZWRpYXRvck1hcFttZWRpYXRvci5nZXRNZWRpYXRvck5hbWUoKV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtZWRpYXRvci5pbml0aWFsaXplTm90aWZpZXIodGhpcy5tdWx0aXRvbktleSk7XG4gICAgICAgIC8vIHJlZ2lzdGVyIHRoZSBtZWRpYXRvciBmb3IgcmV0cmlldmFsIGJ5IG5hbWVcbiAgICAgICAgdGhpcy5tZWRpYXRvck1hcFttZWRpYXRvci5nZXRNZWRpYXRvck5hbWUoKV0gPSBtZWRpYXRvcjtcbiAgICAgICAgdGhpcy5yZWdpc3Rlck9ic2VydmVycyhtZWRpYXRvcik7XG4gICAgICAgIG1lZGlhdG9yLm9uUmVnaXN0ZXIodGhpcy5vbk1lZGlhdG9yTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlLmJpbmQodGhpcykpO1xuICAgICAgICBtZWRpYXRvci5vbkF3YWtlKCk7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5hd2FrZU1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yTmFtZSkge1xuICAgICAgICB2YXIgbWVkaWF0b3IgPSB0aGlzLm1lZGlhdG9yTWFwW21lZGlhdG9yTmFtZV07XG4gICAgICAgIGlmIChtZWRpYXRvcikge1xuICAgICAgICAgICAgaWYgKCFtZWRpYXRvci5pc1NsZWVwaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lZGlhdG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZWdpc3Rlck9ic2VydmVycyhtZWRpYXRvcik7XG4gICAgICAgICAgICAvLyBhbGVydCB0aGUgbWVkaWF0b3IgdGhhdCBpdCBoYXMgYmVlbiBhd2FrZW5cbiAgICAgICAgICAgIG1lZGlhdG9yLm9uQXdha2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVkaWF0b3I7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5yZXRyaWV2ZU1lZGlhdG9yID0gZnVuY3Rpb24gKG1lZGlhdG9yTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZWRpYXRvck1hcFttZWRpYXRvck5hbWVdO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmVtb3ZlTWVkaWF0b3IgPSBmdW5jdGlvbiAobWVkaWF0b3JOYW1lKSB7XG4gICAgICAgIHZhciBtZWRpYXRvciA9IHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3JOYW1lXTtcbiAgICAgICAgaWYgKG1lZGlhdG9yKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZU9ic2VydmVycyhtZWRpYXRvcik7XG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIG1lZGlhdG9yIGZyb20gdGhlIG1hcFxuICAgICAgICAgICAgZGVsZXRlIHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3JOYW1lXTtcbiAgICAgICAgICAgIG1lZGlhdG9yLm9uU2xlZXAoKTtcbiAgICAgICAgICAgIC8vIGFsZXJ0IHRoZSBtZWRpYXRvciB0aGF0IGl0IGhhcyBiZWVuIHJlbW92ZWRcbiAgICAgICAgICAgIG1lZGlhdG9yLm9uUmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lZGlhdG9yO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUuc2xlZXBNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvck5hbWUpIHtcbiAgICAgICAgdmFyIG1lZGlhdG9yID0gdGhpcy5tZWRpYXRvck1hcFttZWRpYXRvck5hbWVdO1xuICAgICAgICBpZiAobWVkaWF0b3IpIHtcbiAgICAgICAgICAgIGlmIChtZWRpYXRvci5pc1NsZWVwaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lZGlhdG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZW1vdmVPYnNlcnZlcnMobWVkaWF0b3IpO1xuICAgICAgICAgICAgLy8gYWxlcnQgdGhlIG1lZGlhdG9yIHRoYXQgaXQgaGFzIGJlZW4gc2xlcHRcbiAgICAgICAgICAgIG1lZGlhdG9yLm9uU2xlZXAoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVkaWF0b3I7XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5oYXNNZWRpYXRvciA9IGZ1bmN0aW9uIChtZWRpYXRvck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVkaWF0b3JNYXBbbWVkaWF0b3JOYW1lXSAhPT0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZVZpZXcgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgVmlldy5wcm90b3R5cGUucmVtb3ZlT2JzZXJ2ZXJzID0gZnVuY3Rpb24gKG1lZGlhdG9yLCBpbnRlcmVzdHMpIHtcbiAgICAgICAgLy8gZm9yIGV2ZXJ5IG5vdGlmaWNhdGlvbiB0aGUgbWVkaWF0b3IgaXMgaW50ZXJlc3RlZCBpbi4uLlxuICAgICAgICB2YXIgbm90aWZpY2F0aW9uSW50ZXJlc3RzID0gaW50ZXJlc3RzIHx8IG1lZGlhdG9yLm5vdGlmaWNhdGlvbnM7XG4gICAgICAgIGlmIChub3RpZmljYXRpb25JbnRlcmVzdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBub3RpZmljYXRpb25JbnRlcmVzdHNfMSA9IG5vdGlmaWNhdGlvbkludGVyZXN0czsgX2kgPCBub3RpZmljYXRpb25JbnRlcmVzdHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJlc3QgPSBub3RpZmljYXRpb25JbnRlcmVzdHNfMVtfaV07XG4gICAgICAgICAgICAgICAgLy8gaW50ZXJlc3RcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZU9ic2VydmVyKGludGVyZXN0LCBtZWRpYXRvci5oYW5kbGVOb3RpZmljYXRpb24sIG1lZGlhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlldy5wcm90b3R5cGUucmVnaXN0ZXJPYnNlcnZlcnMgPSBmdW5jdGlvbiAobWVkaWF0b3IsIGludGVyZXN0cykge1xuICAgICAgICAvLyBnZXQgbm90aWZpY2F0aW9uIGludGVyZXN0cyBpZiBhbnlcbiAgICAgICAgdmFyIG5vdGlmaWNhdGlvbkludGVyZXN0cyA9IGludGVyZXN0cyB8fCBtZWRpYXRvci5ub3RpZmljYXRpb25zO1xuICAgICAgICAvLyByZWdpc3RlciBtZWRpYXRvciBhcyBhbiBvYnNlcnZlciBmb3IgZWFjaCBub3RpZmljYXRpb25cbiAgICAgICAgaWYgKG5vdGlmaWNhdGlvbkludGVyZXN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5vdGlmaWNhdGlvbkludGVyZXN0c18yID0gbm90aWZpY2F0aW9uSW50ZXJlc3RzOyBfaSA8IG5vdGlmaWNhdGlvbkludGVyZXN0c18yLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcmVzdCA9IG5vdGlmaWNhdGlvbkludGVyZXN0c18yW19pXTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyT2JzZXJ2ZXIoaW50ZXJlc3QsIG1lZGlhdG9yLmhhbmRsZU5vdGlmaWNhdGlvbiwgbWVkaWF0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBWaWV3LnByb3RvdHlwZS5vbk1lZGlhdG9yTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlID0gZnVuY3Rpb24gKG1lZGlhdG9yLCBvbGROb3RpZmljYXRpb25zKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlT2JzZXJ2ZXJzKG1lZGlhdG9yLCBvbGROb3RpZmljYXRpb25zKTtcbiAgICAgICAgdGhpcy5yZWdpc3Rlck9ic2VydmVycyhtZWRpYXRvcik7XG4gICAgfTtcbiAgICBWaWV3Lmluc3RhbmNlTWFwID0ge307XG4gICAgcmV0dXJuIFZpZXc7XG59KCkpO1xuZXhwb3J0cy5WaWV3ID0gVmlldztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZpZXcuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ29udHJvbGxlcl8xID0gcmVxdWlyZShcIi4vY29tL2tvcmVlei9wdXJlbXZjL0NvbnRyb2xsZXJcIik7XG5leHBvcnRzLkNvbnRyb2xsZXIgPSBDb250cm9sbGVyXzEuQ29udHJvbGxlcjtcbnZhciBGYWNhZGVfMSA9IHJlcXVpcmUoXCIuL2NvbS9rb3JlZXovcHVyZW12Yy9GYWNhZGVcIik7XG5leHBvcnRzLkZhY2FkZSA9IEZhY2FkZV8xLkZhY2FkZTtcbnZhciBNZWRpYXRvcl8xID0gcmVxdWlyZShcIi4vY29tL2tvcmVlei9wdXJlbXZjL01lZGlhdG9yXCIpO1xuZXhwb3J0cy5NZWRpYXRvciA9IE1lZGlhdG9yXzEuTWVkaWF0b3I7XG52YXIgTW9kZWxfMSA9IHJlcXVpcmUoXCIuL2NvbS9rb3JlZXovcHVyZW12Yy9Nb2RlbFwiKTtcbmV4cG9ydHMuTW9kZWwgPSBNb2RlbF8xLk1vZGVsO1xudmFyIE5vdGlmaWVyXzEgPSByZXF1aXJlKFwiLi9jb20va29yZWV6L3B1cmVtdmMvTm90aWZpZXJcIik7XG5leHBvcnRzLk5vdGlmaWVyID0gTm90aWZpZXJfMS5Ob3RpZmllcjtcbnZhciBQcm94eV8xID0gcmVxdWlyZShcIi4vY29tL2tvcmVlei9wdXJlbXZjL1Byb3h5XCIpO1xuZXhwb3J0cy5Qcm94eSA9IFByb3h5XzEuUHJveHk7XG52YXIgUHVyZU1WQ18xID0gcmVxdWlyZShcIi4vY29tL2tvcmVlei9wdXJlbXZjL1B1cmVNVkNcIik7XG5leHBvcnRzLlB1cmVNVkMgPSBQdXJlTVZDXzEuUHVyZU1WQztcbnZhciBWaWV3XzEgPSByZXF1aXJlKFwiLi9jb20va29yZWV6L3B1cmVtdmMvVmlld1wiKTtcbmV4cG9ydHMuVmlldyA9IFZpZXdfMS5WaWV3O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIHByZWZpeCA9ICd+JztcblxuLyoqXG4gKiBDb25zdHJ1Y3RvciB0byBjcmVhdGUgYSBzdG9yYWdlIGZvciBvdXIgYEVFYCBvYmplY3RzLlxuICogQW4gYEV2ZW50c2AgaW5zdGFuY2UgaXMgYSBwbGFpbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyBhcmUgZXZlbnQgbmFtZXMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBFdmVudHMoKSB7fVxuXG4vL1xuLy8gV2UgdHJ5IHRvIG5vdCBpbmhlcml0IGZyb20gYE9iamVjdC5wcm90b3R5cGVgLiBJbiBzb21lIGVuZ2luZXMgY3JlYXRpbmcgYW5cbi8vIGluc3RhbmNlIGluIHRoaXMgd2F5IGlzIGZhc3RlciB0aGFuIGNhbGxpbmcgYE9iamVjdC5jcmVhdGUobnVsbClgIGRpcmVjdGx5LlxuLy8gSWYgYE9iamVjdC5jcmVhdGUobnVsbClgIGlzIG5vdCBzdXBwb3J0ZWQgd2UgcHJlZml4IHRoZSBldmVudCBuYW1lcyB3aXRoIGFcbi8vIGNoYXJhY3RlciB0byBtYWtlIHN1cmUgdGhhdCB0aGUgYnVpbHQtaW4gb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdFxuLy8gb3ZlcnJpZGRlbiBvciB1c2VkIGFzIGFuIGF0dGFjayB2ZWN0b3IuXG4vL1xuaWYgKE9iamVjdC5jcmVhdGUpIHtcbiAgRXZlbnRzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy9cbiAgLy8gVGhpcyBoYWNrIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBgX19wcm90b19fYCBwcm9wZXJ0eSBpcyBzdGlsbCBpbmhlcml0ZWQgaW5cbiAgLy8gc29tZSBvbGQgYnJvd3NlcnMgbGlrZSBBbmRyb2lkIDQsIGlQaG9uZSA1LjEsIE9wZXJhIDExIGFuZCBTYWZhcmkgNS5cbiAgLy9cbiAgaWYgKCFuZXcgRXZlbnRzKCkuX19wcm90b19fKSBwcmVmaXggPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRhdGlvbiBvZiBhIHNpbmdsZSBldmVudCBsaXN0ZW5lci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBbb25jZT1mYWxzZV0gU3BlY2lmeSBpZiB0aGUgbGlzdGVuZXIgaXMgYSBvbmUtdGltZSBsaXN0ZW5lci5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gRUUoZm4sIGNvbnRleHQsIG9uY2UpIHtcbiAgdGhpcy5mbiA9IGZuO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLm9uY2UgPSBvbmNlIHx8IGZhbHNlO1xufVxuXG4vKipcbiAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIFJlZmVyZW5jZSB0byB0aGUgYEV2ZW50RW1pdHRlcmAgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHBhcmFtIHtCb29sZWFufSBvbmNlIFNwZWNpZnkgaWYgdGhlIGxpc3RlbmVyIGlzIGEgb25lLXRpbWUgbGlzdGVuZXIuXG4gKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBuZXcgRUUoZm4sIGNvbnRleHQgfHwgZW1pdHRlciwgb25jZSlcbiAgICAsIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnQ7XG5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHNbZXZ0XSkgZW1pdHRlci5fZXZlbnRzW2V2dF0gPSBsaXN0ZW5lciwgZW1pdHRlci5fZXZlbnRzQ291bnQrKztcbiAgZWxzZSBpZiAoIWVtaXR0ZXIuX2V2ZW50c1tldnRdLmZuKSBlbWl0dGVyLl9ldmVudHNbZXZ0XS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZ0XSA9IFtlbWl0dGVyLl9ldmVudHNbZXZ0XSwgbGlzdGVuZXJdO1xuXG4gIHJldHVybiBlbWl0dGVyO1xufVxuXG4vKipcbiAqIENsZWFyIGV2ZW50IGJ5IG5hbWUuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgUmVmZXJlbmNlIHRvIHRoZSBgRXZlbnRFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldnQgVGhlIEV2ZW50IG5hbWUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjbGVhckV2ZW50KGVtaXR0ZXIsIGV2dCkge1xuICBpZiAoLS1lbWl0dGVyLl9ldmVudHNDb3VudCA9PT0gMCkgZW1pdHRlci5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICBlbHNlIGRlbGV0ZSBlbWl0dGVyLl9ldmVudHNbZXZ0XTtcbn1cblxuLyoqXG4gKiBNaW5pbWFsIGBFdmVudEVtaXR0ZXJgIGludGVyZmFjZSB0aGF0IGlzIG1vbGRlZCBhZ2FpbnN0IHRoZSBOb2RlLmpzXG4gKiBgRXZlbnRFbWl0dGVyYCBpbnRlcmZhY2UuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50cygpO1xuICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG59XG5cbi8qKlxuICogUmV0dXJuIGFuIGFycmF5IGxpc3RpbmcgdGhlIGV2ZW50cyBmb3Igd2hpY2ggdGhlIGVtaXR0ZXIgaGFzIHJlZ2lzdGVyZWRcbiAqIGxpc3RlbmVycy5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHZhciBuYW1lcyA9IFtdXG4gICAgLCBldmVudHNcbiAgICAsIG5hbWU7XG5cbiAgaWYgKHRoaXMuX2V2ZW50c0NvdW50ID09PSAwKSByZXR1cm4gbmFtZXM7XG5cbiAgZm9yIChuYW1lIGluIChldmVudHMgPSB0aGlzLl9ldmVudHMpKSB7XG4gICAgaWYgKGhhcy5jYWxsKGV2ZW50cywgbmFtZSkpIG5hbWVzLnB1c2gocHJlZml4ID8gbmFtZS5zbGljZSgxKSA6IG5hbWUpO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICByZXR1cm4gbmFtZXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZXZlbnRzKSk7XG4gIH1cblxuICByZXR1cm4gbmFtZXM7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKGV2ZW50KSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50XG4gICAgLCBoYW5kbGVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmICghaGFuZGxlcnMpIHJldHVybiBbXTtcbiAgaWYgKGhhbmRsZXJzLmZuKSByZXR1cm4gW2hhbmRsZXJzLmZuXTtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGhhbmRsZXJzLmxlbmd0aCwgZWUgPSBuZXcgQXJyYXkobCk7IGkgPCBsOyBpKyspIHtcbiAgICBlZVtpXSA9IGhhbmRsZXJzW2ldLmZuO1xuICB9XG5cbiAgcmV0dXJuIGVlO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIG51bWJlciBvZiBsaXN0ZW5lcnMgbGlzdGVuaW5nIHRvIGEgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHsoU3RyaW5nfFN5bWJvbCl9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWJlciBvZiBsaXN0ZW5lcnMuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIGxpc3RlbmVyQ291bnQoZXZlbnQpIHtcbiAgdmFyIGV2dCA9IHByZWZpeCA/IHByZWZpeCArIGV2ZW50IDogZXZlbnRcbiAgICAsIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmICghbGlzdGVuZXJzKSByZXR1cm4gMDtcbiAgaWYgKGxpc3RlbmVycy5mbikgcmV0dXJuIDE7XG4gIHJldHVybiBsaXN0ZW5lcnMubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBDYWxscyBlYWNoIG9mIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBldmVudCBoYWQgbGlzdGVuZXJzLCBlbHNlIGBmYWxzZWAuXG4gKiBAcHVibGljXG4gKi9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZlbnQsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgZXZ0ID0gcHJlZml4ID8gcHJlZml4ICsgZXZlbnQgOiBldmVudDtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1tldnRdKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdXG4gICAgLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBhcmdzXG4gICAgLCBpO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAobGlzdGVuZXJzLm9uY2UpIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVycy5mbiwgdW5kZWZpbmVkLCB0cnVlKTtcblxuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICBjYXNlIDE6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCksIHRydWU7XG4gICAgICBjYXNlIDI6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEpLCB0cnVlO1xuICAgICAgY2FzZSAzOiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiksIHRydWU7XG4gICAgICBjYXNlIDQ6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMyksIHRydWU7XG4gICAgICBjYXNlIDU6IHJldHVybiBsaXN0ZW5lcnMuZm4uY2FsbChsaXN0ZW5lcnMuY29udGV4dCwgYTEsIGEyLCBhMywgYTQpLCB0cnVlO1xuICAgICAgY2FzZSA2OiByZXR1cm4gbGlzdGVuZXJzLmZuLmNhbGwobGlzdGVuZXJzLmNvbnRleHQsIGExLCBhMiwgYTMsIGE0LCBhNSksIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMSwgYXJncyA9IG5ldyBBcnJheShsZW4gLTEpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mbi5hcHBseShsaXN0ZW5lcnMuY29udGV4dCwgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGhcbiAgICAgICwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlKSB0aGlzLnJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbaV0uZm4sIHVuZGVmaW5lZCwgdHJ1ZSk7XG5cbiAgICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMTogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQpOyBicmVhaztcbiAgICAgICAgY2FzZSAyOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEpOyBicmVhaztcbiAgICAgICAgY2FzZSAzOiBsaXN0ZW5lcnNbaV0uZm4uY2FsbChsaXN0ZW5lcnNbaV0uY29udGV4dCwgYTEsIGEyKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgNDogbGlzdGVuZXJzW2ldLmZuLmNhbGwobGlzdGVuZXJzW2ldLmNvbnRleHQsIGExLCBhMiwgYTMpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIWFyZ3MpIGZvciAoaiA9IDEsIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0xKTsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBhcmdzW2ogLSAxXSA9IGFyZ3VtZW50c1tqXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2ldLmNvbnRleHQsIGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBBZGQgYSBsaXN0ZW5lciBmb3IgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IFtjb250ZXh0PXRoaXNdIFRoZSBjb250ZXh0IHRvIGludm9rZSB0aGUgbGlzdGVuZXIgd2l0aC5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICByZXR1cm4gYWRkTGlzdGVuZXIodGhpcywgZXZlbnQsIGZuLCBjb250ZXh0LCBmYWxzZSk7XG59O1xuXG4vKipcbiAqIEFkZCBhIG9uZS10aW1lIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7KFN0cmluZ3xTeW1ib2wpfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2NvbnRleHQ9dGhpc10gVGhlIGNvbnRleHQgdG8gaW52b2tlIHRoZSBsaXN0ZW5lciB3aXRoLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKGV2ZW50LCBmbiwgY29udGV4dCkge1xuICByZXR1cm4gYWRkTGlzdGVuZXIodGhpcywgZXZlbnQsIGZuLCBjb250ZXh0LCB0cnVlKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBsaXN0ZW5lcnMgb2YgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgbWF0Y2ggdGhpcyBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBPbmx5IHJlbW92ZSB0aGUgbGlzdGVuZXJzIHRoYXQgaGF2ZSB0aGlzIGNvbnRleHQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9uY2UgT25seSByZW1vdmUgb25lLXRpbWUgbGlzdGVuZXJzLlxuICogQHJldHVybnMge0V2ZW50RW1pdHRlcn0gYHRoaXNgLlxuICogQHB1YmxpY1xuICovXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGZuLCBjb250ZXh0LCBvbmNlKSB7XG4gIHZhciBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW2V2dF0pIHJldHVybiB0aGlzO1xuICBpZiAoIWZuKSB7XG4gICAgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1tldnRdO1xuXG4gIGlmIChsaXN0ZW5lcnMuZm4pIHtcbiAgICBpZiAoXG4gICAgICBsaXN0ZW5lcnMuZm4gPT09IGZuICYmXG4gICAgICAoIW9uY2UgfHwgbGlzdGVuZXJzLm9uY2UpICYmXG4gICAgICAoIWNvbnRleHQgfHwgbGlzdGVuZXJzLmNvbnRleHQgPT09IGNvbnRleHQpXG4gICAgKSB7XG4gICAgICBjbGVhckV2ZW50KHRoaXMsIGV2dCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwLCBldmVudHMgPSBbXSwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGxpc3RlbmVyc1tpXS5mbiAhPT0gZm4gfHxcbiAgICAgICAgKG9uY2UgJiYgIWxpc3RlbmVyc1tpXS5vbmNlKSB8fFxuICAgICAgICAoY29udGV4dCAmJiBsaXN0ZW5lcnNbaV0uY29udGV4dCAhPT0gY29udGV4dClcbiAgICAgICkge1xuICAgICAgICBldmVudHMucHVzaChsaXN0ZW5lcnNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vXG4gICAgLy8gUmVzZXQgdGhlIGFycmF5LCBvciByZW1vdmUgaXQgY29tcGxldGVseSBpZiB3ZSBoYXZlIG5vIG1vcmUgbGlzdGVuZXJzLlxuICAgIC8vXG4gICAgaWYgKGV2ZW50cy5sZW5ndGgpIHRoaXMuX2V2ZW50c1tldnRdID0gZXZlbnRzLmxlbmd0aCA9PT0gMSA/IGV2ZW50c1swXSA6IGV2ZW50cztcbiAgICBlbHNlIGNsZWFyRXZlbnQodGhpcywgZXZ0KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYWxsIGxpc3RlbmVycywgb3IgdGhvc2Ugb2YgdGhlIHNwZWNpZmllZCBldmVudC5cbiAqXG4gKiBAcGFyYW0geyhTdHJpbmd8U3ltYm9sKX0gW2V2ZW50XSBUaGUgZXZlbnQgbmFtZS5cbiAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IGB0aGlzYC5cbiAqIEBwdWJsaWNcbiAqL1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnQpIHtcbiAgdmFyIGV2dDtcblxuICBpZiAoZXZlbnQpIHtcbiAgICBldnQgPSBwcmVmaXggPyBwcmVmaXggKyBldmVudCA6IGV2ZW50O1xuICAgIGlmICh0aGlzLl9ldmVudHNbZXZ0XSkgY2xlYXJFdmVudCh0aGlzLCBldnQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2V2ZW50cyA9IG5ldyBFdmVudHMoKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vXG4vLyBBbGlhcyBtZXRob2RzIG5hbWVzIGJlY2F1c2UgcGVvcGxlIHJvbGwgbGlrZSB0aGF0LlxuLy9cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBwcmVmaXguXG4vL1xuRXZlbnRFbWl0dGVyLnByZWZpeGVkID0gcHJlZml4O1xuXG4vL1xuLy8gQWxsb3cgYEV2ZW50RW1pdHRlcmAgdG8gYmUgaW1wb3J0ZWQgYXMgbW9kdWxlIG5hbWVzcGFjZS5cbi8vXG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgbW9kdWxlKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xufVxuIiwiZXhwb3J0IGNsYXNzIE5hdmlnYXRpb25Ob2RlIHtcbiAgICBjb25zdHJ1Y3Rvcih4LCB5LCB6KSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMueiA9IHo7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkTm9kZXMgPSBbXTtcbiAgICAgICAgdGhpcy5vY2N1cGllZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlzQ29ubmVjdGVkKG90aGVyTm9kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0ZWROb2Rlcy5maW5kKG5vZGUgPT4gbm9kZS54ID09PSBvdGhlck5vZGUueFxuICAgICAgICAgICAgJiYgbm9kZS55ID09PSBvdGhlck5vZGUueSAmJiBub2RlLnogPT09IG90aGVyTm9kZS56KSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGVxdWFscyhvdGhlck5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueCA9PT0gb3RoZXJOb2RlLnggJiYgdGhpcy55ID09PSBvdGhlck5vZGUueSAmJiB0aGlzLnogPT09IG90aGVyTm9kZS56O1xuICAgIH1cblxuICAgIGVxdWFsc1BvaW50KHgsIHksIHopIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueCA9PT0geCAmJiB0aGlzLnkgPT09IHkgJiYgdGhpcy56ID09PSB6O1xuICAgIH1cblxuICAgIGFkZENvbm5lY3RlZE5vZGUob3RoZXJOb2RlKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0Nvbm5lY3RlZChvdGhlck5vZGUpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RlZE5vZGVzLnB1c2gob3RoZXJOb2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRpc2Nvbm5lY3RlZE5vZGUob3RoZXJOb2RlKSB7XG4gICAgICAgIGNvbnN0IGNvbm5lY3RlZE5vZGVJbmRleCA9IHRoaXMuY29ubmVjdGVkTm9kZXMuZmluZEluZGV4KG5vZGUgPT4gbm9kZS5lcXVhbHMob3RoZXJOb2RlKSk7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkTm9kZXMuc3BsaWNlKGNvbm5lY3RlZE5vZGVJbmRleCwgMSk7XG4gICAgfVxufSIsImV4cG9ydCBjb25zdCBHYW1lTWFwQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdHYW1lTWFwQ29tcG9uZW50Jyk7XG5cbi8vIGluaXRpYWxpemUgY29kZSBjYWxsZWQgb25jZSBwZXIgZW50aXR5XG5HYW1lTWFwQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBJbnB1dExheWVyQ29tcG9uZW50IH0gZnJvbSAnLi9JbnB1dExheWVyQ29tcG9uZW50JztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIElucHV0TGF5ZXJNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIklucHV0TGF5ZXJNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKElucHV0TGF5ZXJNZWRpYXRvci5OQU1FKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVOb3RpZmljYXRpb24oW1xuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLkNIQU5HRV9TQ0VORV9DT01QTEVURVxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50ID0gdmlld0NvbXBvbmVudDtcbiAgICAgICAgdGhpcy52aWV3Q29tcG9uZW50Lm9uKCdwaWNrZXI6bmF2aWdhdGlvbicsIHRoaXMuaGFuZGxlUGlja2VyTmF2aWdhdGlvbiwgdGhpcyk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vbignc2Nyb2xsaW5nJywgdGhpcy5oYW5kbGVTY3JvbGxpbmcsIHRoaXMpO1xuXG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FX0NPTVBMRVRFOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlUGlja2VyTmF2aWdhdGlvbihub2RlKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX05PREUsIG5vZGUpO1xuICAgIH1cblxuICAgIGhhbmRsZVNjcm9sbGluZyhkaXJlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuSU5QVVRfRFJBR19NT1VTRSwgZGlyZWN0aW9uKTtcblxuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBHYW1lQ2FtZXJhID0gcGMuY3JlYXRlU2NyaXB0KCdHYW1lQ2FtZXJhJyk7XG5pbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tICcuLi8uLi9HYW1lRmFjYWRlJztcbmltcG9ydCB7IEdhbWVDYW1lcmFNZWRpYXRvciB9IGZyb20gJy4vR2FtZUNhbWVyYU1lZGlhdG9yJztcblxuR2FtZUNhbWVyYS5hdHRyaWJ1dGVzLmFkZCgnZGlzdGFuY2UnLCB7IHR5cGU6ICdudW1iZXInLCBkZWZhdWx0OiAxMDAsIHRpdGxlOiAnRGlzdGFuY2UnIH0pO1xuR2FtZUNhbWVyYS5hdHRyaWJ1dGVzLmFkZCgnZHJhZ011bHRpcGxpZXJYJywgeyB0eXBlOiAnbnVtYmVyJywgZGVmYXVsdDogMC41LCB0aXRsZTogJ0RyYWcgTXVsdGlwbGllcicgfSk7XG5HYW1lQ2FtZXJhLmF0dHJpYnV0ZXMuYWRkKCdkcmFnTXVsdGlwbGllclknLCB7IHR5cGU6ICdudW1iZXInLCBkZWZhdWx0OiAwLjUsIHRpdGxlOiAnRHJhZyBNdWx0aXBsaWVyJyB9KTtcblxuR2FtZUNhbWVyYS5hdHRyaWJ1dGVzLmFkZCgnbWluQ2FtZXJhSGVpZ2h0JywgeyB0eXBlOiAnbnVtYmVyJywgZGVmYXVsdDogNSwgdGl0bGU6ICdNaW4gQ2FtZXJhIEhlaWdodCcgfSk7XG5HYW1lQ2FtZXJhLmF0dHJpYnV0ZXMuYWRkKCdtYXhDYW1lcmFIZWlnaHQnLCB7IHR5cGU6ICdudW1iZXInLCBkZWZhdWx0OiAxMDAsIHRpdGxlOiAnTWF4IENhbWVyYSBIZWlnaHQnIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuR2FtZUNhbWVyYS5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKEdhbWVDYW1lcmFNZWRpYXRvci5OQU1FKSkge1xuICAgICAgICB0aGlzLmZhY2FkZS5yZW1vdmVNZWRpYXRvcihHYW1lQ2FtZXJhTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgR2FtZUNhbWVyYU1lZGlhdG9yKHRoaXMuZW50aXR5KSk7XG5cbn07XG5cbkdhbWVDYW1lcmEucHJvdG90eXBlLnNldENhbWVyYVRhcmdldCA9IGZ1bmN0aW9uIChjYW1lcmFUYXJnZXQpIHtcbiAgICB0aGlzLmNhbWVyYVRhcmdldCA9IGNhbWVyYVRhcmdldDtcbiAgICB0aGlzLnJvdGF0aW9uID0gdGhpcy5lbnRpdHkuZ2V0RXVsZXJBbmdsZXMoKS55O1xuICAgIHRoaXMuY2FtZXJhSGVpZ2h0ID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpLnk7XG59XG5cbkdhbWVDYW1lcmEucHJvdG90eXBlLmhhbmRsZURyYWcgPSBmdW5jdGlvbiAoZGlyZWN0aW9uKSB7XG4gICAgdGhpcy5yb3RhdGlvbiArPSBkaXJlY3Rpb24ueCAqIHRoaXMuZHJhZ011bHRpcGxpZXJYO1xuXG4gICAgbGV0IG5ld0NhbWVyYUhlaWdodCA9IHRoaXMuY2FtZXJhSGVpZ2h0IC0gKGRpcmVjdGlvbi55ICogdGhpcy5kcmFnTXVsdGlwbGllclkpO1xuICAgIG5ld0NhbWVyYUhlaWdodCA9IHBjLm1hdGguY2xhbXAobmV3Q2FtZXJhSGVpZ2h0LCB0aGlzLm1pbkNhbWVyYUhlaWdodCwgdGhpcy5tYXhDYW1lcmFIZWlnaHQpO1xuICAgIHRoaXMuY2FtZXJhSGVpZ2h0ID0gbmV3Q2FtZXJhSGVpZ2h0O1xufVxuXG5HYW1lQ2FtZXJhLnByb3RvdHlwZS5nZXRUYXJnZXRDYW1lcmFQb3NpdGlvbiA9IGZ1bmN0aW9uIChmb2N1c1BvaW50KSB7XG4gICAgY29uc3QgY2FtZXJhUG9zaXRpb24gPSB0aGlzLmVudGl0eS5nZXRMb2NhbFBvc2l0aW9uKClcblxuICAgIGNvbnN0IHRhcmdldFggPSBNYXRoLnNpbigodGhpcy5yb3RhdGlvbikgKiBNYXRoLlBJIC8gMTgwKSAqIHRoaXMuZGlzdGFuY2U7XG4gICAgY29uc3QgdGFyZ2V0WiA9IE1hdGguY29zKCh0aGlzLnJvdGF0aW9uKSAqIE1hdGguUEkgLyAxODApICogdGhpcy5kaXN0YW5jZTtcblxuICAgIHJldHVybiBuZXcgcGMuVmVjMyhmb2N1c1BvaW50LnggKyB0YXJnZXRYLCBjYW1lcmFQb3NpdGlvbi55LCBmb2N1c1BvaW50LnogKyB0YXJnZXRaKTtcbn1cblxuLy8gdXBkYXRlIGNvZGUgY2FsbGVkIGV2ZXJ5IGZyYW1lXG5HYW1lQ2FtZXJhLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZHQpIHtcbiAgICBpZiAodGhpcy5jYW1lcmFUYXJnZXQpIHtcbiAgICAgICAgY29uc3QgY2FtZXJhVGFyZ2V0UG9zaXRpb24gPSB0aGlzLmNhbWVyYVRhcmdldC5nZXRMb2NhbFBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IHRhcmdldFBvc2l0aW9uID0gdGhpcy5nZXRUYXJnZXRDYW1lcmFQb3NpdGlvbihjYW1lcmFUYXJnZXRQb3NpdGlvbik7XG5cbiAgICAgICAgY29uc3QgY3VycmVudFBvcyA9IHRoaXMuZW50aXR5LmdldExvY2FsUG9zaXRpb24oKTtcbiAgICAgICAgY29uc3QgdHdlZW5YID0gKHRhcmdldFBvc2l0aW9uLnggKyBjdXJyZW50UG9zLnggKiA5KSAvIDEwO1xuICAgICAgICBjb25zdCB0d2VlblkgPSAodGhpcy5jYW1lcmFIZWlnaHQgKyBjdXJyZW50UG9zLnkgKiA5KSAvIDEwO1xuICAgICAgICBjb25zdCB0d2VlblogPSAodGFyZ2V0UG9zaXRpb24ueiArIGN1cnJlbnRQb3MueiAqIDkpIC8gMTA7XG5cbiAgICAgICAgdGhpcy5lbnRpdHkuc2V0TG9jYWxQb3NpdGlvbih0d2VlblgsIHR3ZWVuWSwgdHdlZW5aKTtcblxuICAgICAgICB0aGlzLmVudGl0eS5sb29rQXQoY2FtZXJhVGFyZ2V0UG9zaXRpb24pO1xuICAgIH1cblxufTtcbiIsIlxuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUNhbWVyYSB9IGZyb20gJy4vR2FtZUNhbWVyYSc7XG5jb25zdCB7IE1lZGlhdG9yIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5cbmV4cG9ydCBjbGFzcyBHYW1lQ2FtZXJhTWVkaWF0b3IgZXh0ZW5kcyBNZWRpYXRvciB7XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJHYW1lQ2FtZXJhTWVkaWF0b3JcIiB9O1xuXG4gICAgY29uc3RydWN0b3Iodmlld0NvbXBvbmVudCkge1xuICAgICAgICBzdXBlcihHYW1lQ2FtZXJhTWVkaWF0b3IuTkFNRSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKFtcbiAgICAgICAgICAgIEdhbWVDb21tYW5kcy5DSEFOR0VfU0NFTkVfQ09NUExFVEUsIEdhbWVDb21tYW5kcy5JTlBVVF9EUkFHX01PVVNFLCBHYW1lQ29tbWFuZHMuU0VUX0NBTUVSQV9UQVJHRVRcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG5cbiAgICB9XG5cbiAgICBvblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSkge1xuICAgICAgICBzdXBlci5vblJlZ2lzdGVyKG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5TRVRfQ0FNRVJBX1RBUkdFVDpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2FtZXJhJ10uc2V0Q2FtZXJhVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuSU5QVVRfRFJBR19NT1VTRTpcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2FtZXJhJ10uaGFuZGxlRHJhZyhhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gXCJAa29yZWV6L3B1cmUtbXZjXCI7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSAnLi4vLi4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBJbnB1dExheWVyTWVkaWF0b3IgfSBmcm9tICcuL0lucHV0TGF5ZXJNZWRpYXRvcic7XG5pbXBvcnQgeyBHYW1lQ2FtZXJhTWVkaWF0b3IgfSBmcm9tICcuLi9nYW1lQ2FtZXJhL0dhbWVDYW1lcmFNZWRpYXRvcic7XG5cbmV4cG9ydCBjb25zdCBJbnB1dExheWVyQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdJbnB1dExheWVyQ29tcG9uZW50Jyk7XG5cbklucHV0TGF5ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJjYW1lcmFFbnRpdHlcIiwge1xuICAgIHR5cGU6IFwiZW50aXR5XCIsXG4gICAgdGl0bGU6IFwiQ2FtZXJhIEVudGl0eVwiXG59KTtcblxuSW5wdXRMYXllckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcImRyYWdUaW1lXCIsIHtcbiAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIHRpdGxlOiBcIkRyYWcgVGltZVwiLFxuICAgIGRlZmF1bHQ6IDAuNFxufSk7XG5cblxuSW5wdXRMYXllckNvbXBvbmVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgaWYgKHRoaXMuZmFjYWRlLmhhc01lZGlhdG9yKElucHV0TGF5ZXJNZWRpYXRvci5OQU1FKSkge1xuICAgICAgICB0aGlzLmZhY2FkZS5yZW1vdmVNZWRpYXRvcihJbnB1dExheWVyTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgSW5wdXRMYXllck1lZGlhdG9yKHRoaXMuZW50aXR5KSk7XG4gICAgdGhpcy5yYXkgPSBuZXcgcGMuUmF5KCk7XG5cbiAgICAvKnRoaXMuZW50aXR5LmVsZW1lbnQub24oJ2NsaWNrJywgKGV2dCkgPT4ge1xuICAgICAgICB0aGlzLmhhbmRsZVJheWNhc3RDb2xsaXNpb25zKGV2dC54LCBldnQueSk7XG4gICAgfSk7Ki9cblxuICAgIC8vIERyYWcgcHJvcGVydGllc1xuICAgIHRoaXMuYXBwLm1vdXNlLmRpc2FibGVDb250ZXh0TWVudSgpO1xuICAgIHRoaXMuY2xpY2tEb3duU3RhcnQgPSAwO1xuICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuXG4gICAgdGhpcy5hcHAub24oJ3BpY2tlcjpyZXN1bHQnLCB0aGlzLmhhbmRsZVBpY2tlclJlc3VsdCwgdGhpcyk7XG5cbiAgICB0aGlzLmFwcC5tb3VzZS5vbihwYy5FVkVOVF9NT1VTRU1PVkUsIHRoaXMub25Nb3VzZU1vdmUsIHRoaXMpO1xuICAgIHRoaXMuZW50aXR5LmVsZW1lbnQub24ocGMuRVZFTlRfTU9VU0VET1dOLCB0aGlzLm9uTW91c2VEb3duLCB0aGlzKTtcbiAgICB0aGlzLmFwcC5tb3VzZS5vbihwYy5FVkVOVF9NT1VTRVVQLCB0aGlzLm9uTW91c2VVcCwgdGhpcyk7XG5cbiAgICB0aGlzLmVudGl0eS5vbmNlKCdkZXN0cm95JywgKCkgPT4ge1xuICAgICAgICB0aGlzLmFwcC5tb3VzZS5vZmYocGMuRVZFTlRfTU9VU0VNT1ZFLCB0aGlzLm9uTW91c2VNb3ZlLCB0aGlzKTtcbiAgICAgICAgdGhpcy5hcHAubW91c2Uub2ZmKHBjLkVWRU5UX01PVVNFVVAsIHRoaXMub25Nb3VzZVVwLCB0aGlzKTtcblxuICAgIH0pO1xufVxuXG5JbnB1dExheWVyQ29tcG9uZW50LnByb3RvdHlwZS5vbk1vdXNlRG93biA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgIHRoaXMuY2xpY2tEb3duU3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMuY2xpY2tTdGFydFBvaW50ID0geyB4OiBldnQueCwgeTogZXZ0LnkgfTtcbn1cblxuXG5JbnB1dExheWVyQ29tcG9uZW50LnByb3RvdHlwZS5vbk1vdXNlTW92ZSA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICBpZiAodGhpcy5pc0RyYWdnaW5nKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IG5ldyBwYy5WZWMyKHRoaXMuY2xpY2tTdGFydFBvaW50LnggLSBldnQueCwgdGhpcy5jbGlja1N0YXJ0UG9pbnQueSAtIGV2dC55KTtcbiAgICAgICAgdGhpcy5lbnRpdHkuZmlyZSgnc2Nyb2xsaW5nJywgZGlyZWN0aW9uKTtcbiAgICAgICAgdGhpcy5jbGlja1N0YXJ0UG9pbnQgPSB7IHg6IGV2dC54LCB5OiBldnQueSB9O1xuICAgIH1cbn1cblxuSW5wdXRMYXllckNvbXBvbmVudC5wcm90b3R5cGUub25Nb3VzZVVwID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuXG4gICAgaWYgKERhdGUubm93KCkgLSB0aGlzLmNsaWNrRG93blN0YXJ0IDwgKHRoaXMuZHJhZ1RpbWUgKiAxMDAwKSkge1xuICAgICAgICBpZiAodGhpcy5jbGlja1N0YXJ0UG9pbnQpIHtcbiAgICAgICAgICAgIC8vIHRoaXMuZW50aXR5LmZpcmUoJ3ZhbGlkQ2xpY2snLCB0aGlzLmNsaWNrU3RhcnRQb2ludCk7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVJheWNhc3RDb2xsaXNpb25zKHRoaXMuY2xpY2tTdGFydFBvaW50LngsIHRoaXMuY2xpY2tTdGFydFBvaW50LnkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5JbnB1dExheWVyQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVSYXljYXN0Q29sbGlzaW9ucyA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgY29uc3QgY2FtZXJhRW50aXR5ID0gdGhpcy5jYW1lcmFFbnRpdHk7XG4gICAgY29uc3QgY2FtZXJhQ29tcG9uZW50ID0gdGhpcy5jYW1lcmFFbnRpdHkuY2FtZXJhO1xuICAgIGNhbWVyYUNvbXBvbmVudC5zY3JlZW5Ub1dvcmxkKHgsIHksIGNhbWVyYUNvbXBvbmVudC5mYXJDbGlwLCB0aGlzLnJheS5kaXJlY3Rpb24pO1xuICAgIHRoaXMucmF5Lm9yaWdpbi5jb3B5KGNhbWVyYUVudGl0eS5nZXRQb3NpdGlvbigpKTtcbiAgICB0aGlzLnJheS5kaXJlY3Rpb24uc3ViKHRoaXMucmF5Lm9yaWdpbikubm9ybWFsaXplKCk7XG5cbiAgICB0aGlzLmFwcC5maXJlKCdwaWNrZXI6cmF5Y2FzdCcsIHRoaXMucmF5LCB7IHgsIHkgfSk7XG59XG5cbklucHV0TGF5ZXJDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZVBpY2tlclJlc3VsdCA9IGZ1bmN0aW9uIChwaWNrZWRFbnRpdHksIGhpdFBvc2l0aW9uLCBzY3JlZW5Qb3MpIHtcbiAgICBpZiAocGlja2VkRW50aXR5LnRhZ3MuaGFzKCduYXZpZ2F0aW9uJykpIHtcbiAgICAgICAgY29uc3QgbmF2Q29tcCA9IHBpY2tlZEVudGl0eS5zY3JpcHRbJ05hdmlnYXRpb25Db21wb25lbnQnXTtcbiAgICAgICAgY29uc3QgbmVhcmVzdE5vZGUgPSBuYXZDb21wLmdldE5lYXJlc3ROb2RlKGhpdFBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5lbnRpdHkuZmlyZSgncGlja2VyOm5hdmlnYXRpb24nLCBuZWFyZXN0Tm9kZSk7XG4gICAgfVxufVxuIiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBHYW1lTWFwQ29tcG9uZW50IH0gZnJvbSAnLi9HYW1lTWFwQ29tcG9uZW50JztcbmltcG9ydCB7IElucHV0TGF5ZXJDb21wb25lbnQgfSBmcm9tICcuLi9pbnB1dExheWVyL0lucHV0TGF5ZXJDb21wb25lbnQnO1xuY29uc3QgeyBNZWRpYXRvciB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuXG5leHBvcnQgY2xhc3MgR2FtZU1hcE1lZGlhdG9yIGV4dGVuZHMgTWVkaWF0b3Ige1xuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuIFwiR2FtZU1hcE1lZGlhdG9yXCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKG1hcEdyaWQpIHtcbiAgICAgICAgc3VwZXIoR2FtZU1hcE1lZGlhdG9yLk5BTUUpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZU5vdGlmaWNhdGlvbihbXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FX0NPTVBMRVRFXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIG9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKSB7XG4gICAgICAgIHN1cGVyLm9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKTtcbiAgICB9XG5cbiAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgICAgICBzd2l0Y2ggKG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbW1hbmRzLkNIQU5HRV9TQ0VORV9DT01QTEVURTpcbiAgICAgICAgICAgICAgICBjb25zdCBnYW1lU3RhdGUgPSB0aGlzLmZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVTdGF0ZVByb3h5Lk5BTUUpLnZvO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFwcCA9IHBjLkFwcGxpY2F0aW9uLmdldEFwcGxpY2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKGFwcCkge1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJjb25zdCB7IEdhbWVNZWRpYXRvciB9ID0gcmVxdWlyZSgnLi4vdmlldy9HYW1lTWVkaWF0b3InKTtcbmltcG9ydCB7IE5hdmlnYXRpb25Ob2RlIH0gZnJvbSAnLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL05hdmlnYXRpb25Ob2RlJztcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcbmltcG9ydCB7IEdhbWVNYXBNZWRpYXRvciB9IGZyb20gJy4uL3ZpZXcvZ2FtZU1hcC9HYW1lTWFwTWVkaWF0b3InO1xuaW1wb3J0IHsgR2FtZU1hcFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZU1hcC9HYW1lTWFwUHJveHknO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlR2FtZU1hcENvbW1hbmQobXVsdGl0b25LZXksIG5vdGlmaWNhdGlvbk5hbWUpIHtcbiAgICAvLyBPbmNlIGEgZ2FtZU1hcCBzY2VuZSBpcyBsb2FkZWQsIHBhcnNlIGdhbWVNYXAgVk8sIGdlbmVyYXRlIG5hdiBtZXNoLCBldGNcbiAgICBjb25zb2xlLmxvZygnUGFyc2UgbWFwJyk7XG5cbiAgICAvLyBHZXQgbmF2aWdhdGlvbiBmbG9vcnNcbiAgICBjb25zdCBhcHAgPSBwYy5BcHBsaWNhdGlvbi5nZXRBcHBsaWNhdGlvbigpO1xuICAgIGNvbnN0IG5hdmlnYXRpb25GbG9vcnMgPSBhcHAucm9vdC5maW5kQnlUYWcoJ25hdmlnYXRpb25fZmxvb3InKTtcblxuICAgIGxldCBjb21wbGV0ZWRHcmlkID0gW107XG5cbiAgICBjb25zdCBuYXZpZ2F0aW9uQ29tcG9uZW50cyA9IFtdO1xuICAgIC8vIEZpcnN0IHBhcnNlIC0gY3JlYXRlIG5vZGVzIGFuZCBjb25uZWN0aW9ucyBmb3IgaW5kaXZpZHVhbCBcbiAgICAvLyBuYXZpZ2F0aW9uIGNvbXBvbmVudHNcbiAgICBmb3IgKGNvbnN0IGZsb29yRW50aXR5IG9mIG5hdmlnYXRpb25GbG9vcnMpIHtcbiAgICAgICAgY29uc3QgbmF2Q29tcCA9IGZsb29yRW50aXR5LnNjcmlwdFsnTmF2aWdhdGlvbkNvbXBvbmVudCddO1xuICAgICAgICBuYXZpZ2F0aW9uQ29tcG9uZW50cy5wdXNoKG5hdkNvbXApO1xuXG4gICAgICAgIGNvbnN0IGZsb29yR3JpZCA9IGNyZWF0ZVBhcnRpYWxHcmlkRnJvbUZsb29yKGZsb29yRW50aXR5KVxuICAgICAgICBuYXZDb21wLnNldEdyaWQoZmxvb3JHcmlkKTtcbiAgICB9XG5cbiAgICAvLyBTZWNvbmQgcGFyc2UgLSBzdGl0Y2ggdG9nZXRoZXIgYWRqYWNlbnQgbm9kZXMgaW4gXG4gICAgLy8gY29ubmVjdGVkIG5hdmlnYXRpb24gbWVzaGVzXG4gICAgZm9yIChjb25zdCBuYXZpZ2F0aW9uQ29tcCBvZiBuYXZpZ2F0aW9uQ29tcG9uZW50cykge1xuICAgICAgICBmb3IgKGNvbnN0IGNvbm5lY3RlZENvbXBFbnRpdHkgb2YgbmF2aWdhdGlvbkNvbXAuY29ubmVjdGVkQ29tcG9uZW50cykge1xuICAgICAgICAgICAgY29uc3QgY29ubmVjdGVkTmF2Q29tcCA9IGNvbm5lY3RlZENvbXBFbnRpdHkuc2NyaXB0WydOYXZpZ2F0aW9uQ29tcG9uZW50J107XG5cbiAgICAgICAgICAgIGpvaW5Ub0FkamFjZW50R3JpZChuYXZpZ2F0aW9uQ29tcC5nZXRHcmlkKCksIGNvbm5lY3RlZE5hdkNvbXAuZ2V0R3JpZCgpKTtcbiAgICAgICAgICAgIGNvbXBsZXRlZEdyaWQgPSBjb21wbGV0ZWRHcmlkLmNvbmNhdChuYXZpZ2F0aW9uQ29tcC5nZXRHcmlkKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVnaXN0ZXIgbWVkaWF0b3JzXG4gICAgRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KS5yZWdpc3RlclByb3h5KG5ldyBHYW1lTWFwUHJveHkoY29tcGxldGVkR3JpZCkpO1xuICAgIEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSkucmVnaXN0ZXJNZWRpYXRvcihuZXcgR2FtZU1hcE1lZGlhdG9yKCkpO1xuXG4gICAgRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5NQVBfR1JJRF9DUkVBVEVEKTtcblxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXJ0aWFsR3JpZEZyb21GbG9vcihmbG9vckVudGl0eSkge1xuICAgIC8vIHNuYXAgdG8gZ3JpZFxuICAgIGNvbnN0IGdyaWQgPSBbXTtcblxuICAgIGNvbnN0IGZsb29yUG9zaXRpb24gPSBmbG9vckVudGl0eS5nZXRMb2NhbFBvc2l0aW9uKCk7XG4gICAgY29uc3QgZmxvb3JTaXplID0gZmxvb3JFbnRpdHkuZ2V0TG9jYWxTY2FsZSgpO1xuXG4gICAgY29uc3Qgc25hcHBlZFdpZHRoID0gTWF0aC5yb3VuZChmbG9vclNpemUueCk7XG4gICAgY29uc3Qgc25hcHBlZEJyZWFkdGggPSBNYXRoLnJvdW5kKGZsb29yU2l6ZS56KTtcblxuICAgIGNvbnN0IHNuYXBwZWRYID0gTWF0aC5yb3VuZChmbG9vclBvc2l0aW9uLnggLSAoc25hcHBlZFdpZHRoIC8gMikpO1xuICAgIGNvbnN0IHNuYXBwZWRZID0gZmxvb3JQb3NpdGlvbi55O1xuICAgIGNvbnN0IHNuYXBwZWRaID0gTWF0aC5yb3VuZChmbG9vclBvc2l0aW9uLnogLSAoc25hcHBlZEJyZWFkdGggLyAyKSk7XG5cblxuXG4gICAgZm9yIChsZXQgeiA9IHNuYXBwZWRaOyB6IDwgc25hcHBlZFogKyBzbmFwcGVkQnJlYWR0aDsgeisrKSB7XG4gICAgICAgIGZvciAobGV0IHggPSBzbmFwcGVkWDsgeCA8IHNuYXBwZWRYICsgc25hcHBlZFdpZHRoOyB4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgTmF2aWdhdGlvbk5vZGUoeCwgc25hcHBlZFksIHopO1xuICAgICAgICAgICAgZ3JpZC5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ29ubmVjdCBuZWlnaGJvdXJzXG4gICAgZm9yIChjb25zdCBub2RlIG9mIGdyaWQpIHtcbiAgICAgICAgZm9yIChjb25zdCBvdGhlck5vZGUgb2YgZ3JpZCkge1xuICAgICAgICAgICAgaWYgKG90aGVyTm9kZS5lcXVhbHNQb2ludChub2RlLnggLSAxLCBub2RlLnksIG5vZGUueikgfHxcbiAgICAgICAgICAgICAgICBvdGhlck5vZGUuZXF1YWxzUG9pbnQobm9kZS54ICsgMSwgbm9kZS55LCBub2RlLnopIHx8XG4gICAgICAgICAgICAgICAgb3RoZXJOb2RlLmVxdWFsc1BvaW50KG5vZGUueCwgbm9kZS55LCBub2RlLnogLSAxKSB8fFxuICAgICAgICAgICAgICAgIG90aGVyTm9kZS5lcXVhbHNQb2ludChub2RlLngsIG5vZGUueSwgbm9kZS56ICsgMSkpIHtcbiAgICAgICAgICAgICAgICBub2RlLmFkZENvbm5lY3RlZE5vZGUob3RoZXJOb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBncmlkO1xufVxuXG5mdW5jdGlvbiBqb2luVG9BZGphY2VudEdyaWQoZ3JpZCwgZ3JpZFRvSm9pbikge1xuICAgIC8vIENvbm5lY3QgbmVpZ2hib3Vyc1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBncmlkKSB7XG4gICAgICAgIGZvciAoY29uc3Qgb3RoZXJOb2RlIG9mIGdyaWRUb0pvaW4pIHtcbiAgICAgICAgICAgIGlmIChvdGhlck5vZGUuZXF1YWxzUG9pbnQobm9kZS54IC0gMSwgbm9kZS55LCBub2RlLnopIHx8XG4gICAgICAgICAgICAgICAgb3RoZXJOb2RlLmVxdWFsc1BvaW50KG5vZGUueCArIDEsIG5vZGUueSwgbm9kZS56KSB8fFxuICAgICAgICAgICAgICAgIG90aGVyTm9kZS5lcXVhbHNQb2ludChub2RlLngsIG5vZGUueSwgbm9kZS56IC0gMSkgfHxcbiAgICAgICAgICAgICAgICBvdGhlck5vZGUuZXF1YWxzUG9pbnQobm9kZS54LCBub2RlLnksIG5vZGUueiArIDEpKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5hZGRDb25uZWN0ZWROb2RlKG90aGVyTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0dXBDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lKSB7XG4gICAgLy8gUmVnaXN0ZXIgYXBwLWxldmVsIG1lZGlhdG9ycy9wcm94aWVzL2NvbW1hbmRzIGhlcmVcblxuICAgIC8vIENyZWF0ZSBnYW1lIHN0YXRlIHByb3h5XG4gICAgRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KS5yZWdpc3RlclByb3h5KG5ldyBHYW1lU3RhdGVQcm94eSgpKTtcblxuXG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZVNjZW5lQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGFwcCA9IHBjLkFwcGxpY2F0aW9uLmdldEFwcGxpY2F0aW9uKCk7XG4gICAgY29uc3Qgc2NlbmVOYW1lID0gYXJnc1swXTtcbiAgICBjb25zb2xlLmxvZyhgQ2hhbmdpbmcgc2NlbmUgJHtzY2VuZU5hbWV9YCk7XG5cbiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHNjZW5lJ3Mgcm9vdCBvYmplY3RcbiAgICBjb25zdCBvbGRIaWVyYXJjaHkgPSBhcHAucm9vdC5maW5kQnlOYW1lKCdSb290Jyk7XG5cbiAgICAvLyBHZXQgdGhlIHBhdGggdG8gdGhlIHNjZW5lXG4gICAgY29uc3Qgc2NlbmUgPSBhcHAuc2NlbmVzLmZpbmQoc2NlbmVOYW1lKTtcblxuICAgIC8vIExvYWQgdGhlIHNjZW5lcyBlbnRpdHkgaGllcmFyY2h5XG4gICAgYXBwLnNjZW5lcy5sb2FkU2NlbmVIaWVyYXJjaHkoc2NlbmUudXJsLCBmdW5jdGlvbiAoZXJyLCBwYXJlbnQpIHtcbiAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgIGlmIChvbGRIaWVyYXJjaHkpIHtcbiAgICAgICAgICAgICAgICBvbGRIaWVyYXJjaHkuZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSkuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FX0NPTVBMRVRFLCBzY2VuZU5hbWUpO1xuICAgICAgICBGYWNhZGUuZ2V0SW5zdGFuY2UobXVsdGl0b25LZXkpLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlBBUlNFX0dBTUVNQVAsIHNjZW5lTmFtZSk7XG5cbiAgICB9KTtcbn0iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgQ29tYmF0UHJveHkgfSBmcm9tICcuLi9tb2RlbC9jb21iYXQvQ29tYmF0UHJveHknO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tICcuLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk8nO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9HYW1lQ29tbWFuZHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRDb21iYXRDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgaW5zdGlnYXRpbmdQYXJ0eUlkcyA9IGFyZ3NbMF07XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFLCBcIlN0YXJ0IENvbWJhdFwiKTtcblxuICAgIGNvbnN0IGdhbWVTdGF0ZVByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZVN0YXRlUHJveHkuTkFNRSk7XG4gICAgZ2FtZVN0YXRlUHJveHkudXBkYXRlR2FtZVN0YXRlVHlwZShnYW1lcGxheU1vZGVUeXBlcy5DT01CQVQpO1xuXG4gICAgLy8gU2V0dXAgdGhlIGNvbWJhdFxuICAgIGNvbnN0IHBhcnRpY2lwYW50cyA9IFsncGxheWVyJ10uY29uY2F0KGluc3RpZ2F0aW5nUGFydHlJZHMpO1xuICAgIGNvbnN0IGNvbWJhdFByb3h5ID0gbmV3IENvbWJhdFByb3h5KHBhcnRpY2lwYW50cyk7XG4gICAgLy8gY29uc29sZS5sb2cocGFydGljaXBhbnRzKTtcbiAgICBmYWNhZGUucmVnaXN0ZXJQcm94eShjb21iYXRQcm94eSk7XG5cbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkVYVF9DT01CQVRfUk9VTkQpO1xuXG59IiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IEdhbWVTdGF0ZVByb3h5IH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVByb3h5JztcbmltcG9ydCB7IGdhbWVwbGF5TW9kZVR5cGVzIH0gZnJvbSAnLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVZPJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4vR2FtZUNvbW1hbmRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIG5leHRDb21iYXRUdXJuQ29tbWFuZChtdWx0aXRvbktleSwgbm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgIGNvbnN0IGZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShtdWx0aXRvbktleSk7XG5cbiAgICBjb25zdCBnYW1lU3RhdGUgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKTtcbiAgICBjb25zdCBjb21iYXRQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KENvbWJhdFByb3h5Lk5BTUUpO1xuXG4gICAgaWYgKGdhbWVTdGF0ZS52by5nYW1lcGxheU1vZGUgPT09IGdhbWVwbGF5TW9kZVR5cGVzLkNPTUJBVCkge1xuICAgICAgICBjb21iYXRQcm94eS5uZXh0VHVybigpO1xuICAgIH1cblxufSIsImNvbnN0IHsgRmFjYWRlIH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBDb21iYXRQcm94eSB9IGZyb20gJy4uL21vZGVsL2NvbWJhdC9Db21iYXRQcm94eSc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBnYW1lcGxheU1vZGVUeXBlcyB9IGZyb20gJy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVWTyc7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuL0dhbWVDb21tYW5kcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Q29tYmF0Um91bmRDb21tYW5kKG11bHRpdG9uS2V5LCBub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKG11bHRpdG9uS2V5KTtcblxuICAgIGNvbnN0IGdhbWVTdGF0ZSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVTdGF0ZVByb3h5Lk5BTUUpO1xuICAgIGNvbnN0IGNvbWJhdFByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoQ29tYmF0UHJveHkuTkFNRSk7XG5cbiAgICBpZiAoZ2FtZVN0YXRlLnZvLmdhbWVwbGF5TW9kZSA9PT0gZ2FtZXBsYXlNb2RlVHlwZXMuQ09NQkFUKSB7XG4gICAgICAgIGNvbWJhdFByb3h5Lm5leHRSb3VuZCgpO1xuICAgICAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuTkVYVF9DT01CQVRfVFVSTik7XG5cbiAgICB9XG5cbn0iLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBwYXJzZUdhbWVNYXBDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL1BhcnNlR2FtZU1hcENvbW1hbmQnO1xuaW1wb3J0IHsgc3RhcnR1cENvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvU3RhcnR1cENvbW1hbmQnO1xuaW1wb3J0IHsgY2hhbmdlU2NlbmVDb21tYW5kIH0gZnJvbSAnLi9jb250cm9sbGVyL0NoYW5nZVNjZW5lQ29tbWFuZCc7XG5pbXBvcnQgeyBzdGFydENvbWJhdENvbW1hbmQgfSBmcm9tICcuL2NvbnRyb2xsZXIvU3RhcnRDb21iYXRDb21tYW5kJztcbmltcG9ydCB7IG5leHRDb21iYXRUdXJuQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9OZXh0Q29tYmF0VHVybkNvbW1hbmQnO1xuaW1wb3J0IHsgbmV4dENvbWJhdFJvdW5kQ29tbWFuZCB9IGZyb20gJy4vY29udHJvbGxlci9OZXh0Q29tYmF0Um91bmRDb21tYW5kJztcblxuZXhwb3J0IGNsYXNzIEdhbWVGYWNhZGUgZXh0ZW5kcyBGYWNhZGUge1xuICAgIHN0YXRpYyBnZXRJbnN0YW5jZShrZXkpIHtcbiAgICAgICAgaWYgKCFGYWNhZGUuaW5zdGFuY2VNYXBba2V5XSkge1xuICAgICAgICAgICAgRmFjYWRlLmluc3RhbmNlTWFwW2tleV0gPSBuZXcgR2FtZUZhY2FkZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBGYWNhZGUuaW5zdGFuY2VNYXBba2V5XTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IEtFWSgpIHsgcmV0dXJuIFwiQ2Fjb2dlblwiIH07XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJDYWNvZ2VuRmFjYWRlXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFNUQVJUVVAoKSB7IHJldHVybiBHYW1lRmFjYWRlLk5BTUUgKyBcIlN0YXJ0VXBcIiB9O1xuXG4gICAgc3RhcnR1cChnYW1lKSB7XG4gICAgICAgIHRoaXMuc2VuZE5vdGlmaWNhdGlvbihHYW1lRmFjYWRlLlNUQVJUVVAsIGdhbWUpO1xuICAgIH1cblxuICAgIHNlbmROb3RpZmljYXRpb24obm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgICAgICBzdXBlci5zZW5kTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIGluaXRpYWxpemVDb250cm9sbGVyKCkge1xuICAgICAgICBzdXBlci5pbml0aWFsaXplQ29udHJvbGxlcigpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lRmFjYWRlLlNUQVJUVVAsIHN0YXJ0dXBDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLkNIQU5HRV9TQ0VORSwgY2hhbmdlU2NlbmVDb21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLlBBUlNFX0dBTUVNQVAsIHBhcnNlR2FtZU1hcENvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuU1RBUlRfQ09NQkFULCBzdGFydENvbWJhdENvbW1hbmQpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChHYW1lQ29tbWFuZHMuTkVYVF9DT01CQVRfVFVSTiwgbmV4dENvbWJhdFR1cm5Db21tYW5kKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNvbW1hbmQoR2FtZUNvbW1hbmRzLk5FWFRfQ09NQkFUX1JPVU5ELCBuZXh0Q29tYmF0Um91bmRDb21tYW5kKTtcbiAgICB9XG5cbn0iLCJleHBvcnQgY2xhc3MgR2FtZUNvbW1hbmRzIHtcbiAgICBzdGF0aWMgZ2V0IENIQU5HRV9TQ0VORSgpIHsgcmV0dXJuIFwiQ0hBTkdFX1NDRU5FXCIgfTtcbiAgICBzdGF0aWMgZ2V0IENIQU5HRV9TQ0VORV9DT01QTEVURSgpIHsgcmV0dXJuIFwiQ0hBTkdFX1NDRU5FX0NPTVBMRVRFXCIgfTtcbiAgICBzdGF0aWMgZ2V0IEFQUF9JTklUSUFMSVNFRCgpIHsgcmV0dXJuIFwiQVBQX0lOSVRJQUxJU0VEXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFBBUlNFX0dBTUVNQVAoKSB7IHJldHVybiBcIlBBUlNFX0dBTUVNQVBcIiB9O1xuICAgIHN0YXRpYyBnZXQgTUFQX0dSSURfQ1JFQVRFRCgpIHsgcmV0dXJuIFwiTUFQX0dSSURfQ1JFQVRFRFwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IE5BVklHQVRFX1RPX05PREUoKSB7IHJldHVybiBcIk5BVklHQVRFX1RPX05PREVcIiB9O1xuICAgIHN0YXRpYyBnZXQgU0VUX0NBTUVSQV9UQVJHRVQoKSB7IHJldHVybiBcIlNFVF9DQU1FUkFfVEFSR0VUXCIgfTtcbiAgICBzdGF0aWMgZ2V0IElOUFVUX0RSQUdfTU9VU0UoKSB7IHJldHVybiBcIklOUFVUX0RSQUdfTU9VU0VcIiB9O1xuXG4gICAgc3RhdGljIGdldCBQQ19NT1ZFRF9UT19OT0RFKCkgeyByZXR1cm4gXCJQQ19NT1ZFRF9UT19OT0RFXCIgfTtcbiAgICBzdGF0aWMgZ2V0IFBDX0ZJTklTSEVEX01PVkUoKSB7IHJldHVybiBcIlBDX0ZJTklTSEVEX01PVkVcIiB9O1xuICAgIHN0YXRpYyBnZXQgU1RBUlRfQ09NQkFUKCkgeyByZXR1cm4gXCJTVEFSVF9DT01CQVRcIiB9O1xuICAgIHN0YXRpYyBnZXQgU0hPV19UT0FTVF9NRVNTQUdFKCkgeyByZXR1cm4gXCJTSE9XX1RPQVNUX01FU1NBR0VcIiB9O1xuXG4gICAgc3RhdGljIGdldCBORVhUX0NPTUJBVF9UVVJOKCkgeyByZXR1cm4gXCJORVhUX0NPTUJBVF9UVVJOXCIgfTtcbiAgICBzdGF0aWMgZ2V0IE5FWFRfQ09NQkFUX1JPVU5EKCkgeyByZXR1cm4gXCJORVhUX0NPTUJBVF9ST1VORFwiIH07XG5cbiAgICBzdGF0aWMgZ2V0IEFXQUlUX1BMQVlFUl9DT01CQVRfSU5QVVQoKSB7IHJldHVybiBcIkFXQUlUX1BMQVlFUl9DT01CQVRfSU5QVVRcIiB9O1xuXG5cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlQXJyYXkoYXJyYXkpIHtcbiAgICBsZXQgY3VycmVudEluZGV4ID0gYXJyYXkubGVuZ3RoXG4gICAgbGV0IHRlbXBvcmFyeVZhbHVlID0gdW5kZWZpbmVkO1xuICAgIGxldCByYW5kb21JbmRleCA9IC0xO1xuXG4gICAgLy8gV2hpbGUgdGhlcmUgcmVtYWluIGVsZW1lbnRzIHRvIHNodWZmbGUuLi5cbiAgICB3aGlsZSAoMCAhPT0gY3VycmVudEluZGV4KSB7XG5cbiAgICAgICAgLy8gUGljayBhIHJlbWFpbmluZyBlbGVtZW50Li4uXG4gICAgICAgIHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY3VycmVudEluZGV4KTtcbiAgICAgICAgY3VycmVudEluZGV4IC09IDE7XG5cbiAgICAgICAgLy8gQW5kIHN3YXAgaXQgd2l0aCB0aGUgY3VycmVudCBlbGVtZW50LlxuICAgICAgICB0ZW1wb3JhcnlWYWx1ZSA9IGFycmF5W2N1cnJlbnRJbmRleF07XG4gICAgICAgIGFycmF5W2N1cnJlbnRJbmRleF0gPSBhcnJheVtyYW5kb21JbmRleF07XG4gICAgICAgIGFycmF5W3JhbmRvbUluZGV4XSA9IHRlbXBvcmFyeVZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn1cbiIsImNvbnN0IHsgUHJveHkgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IHNodWZmbGVBcnJheSB9IGZyb20gJy4uLy4uL3V0aWxzL1NodWZmbGVBcnJheSc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyUHJveHkgfSBmcm9tICcuLi9nYW1lQ2hhcmFjdGVyL0dhbWVDaGFyYWN0ZXJQcm94eSc7XG5jb25zdCB7IENvbWJhdFZPIH0gPSByZXF1aXJlKCcuL0NvbWJhdFZPJyk7XG5cblxuZXhwb3J0IGNsYXNzIENvbWJhdFByb3h5IGV4dGVuZHMgUHJveHkge1xuICAgIGdldCB2bygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YSgpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkNvbWJhdFByb3h5XCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKHBhcnRpY2lwYW50cykge1xuICAgICAgICBzdXBlcihDb21iYXRQcm94eS5OQU1FLCBuZXcgQ29tYmF0Vk8ocGFydGljaXBhbnRzKSk7XG4gICAgfVxuXG4gICAgb25SZWdpc3RlcigpIHtcbiAgICAgICAgY29uc3QgcGFydGljaXBhbnRzID0gdGhpcy52by5wYXJ0aWNpcGFudHM7XG4gICAgICAgIHRoaXMucGFydGljaXBhbnRQcm94aWVzID0gbmV3IE1hcCgpO1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnRpY2lwYW50IG9mIHBhcnRpY2lwYW50cykge1xuICAgICAgICAgICAgY29uc3QgcGFydGljaXBhbnRQcm94eSA9IHRoaXMuZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBwYXJ0aWNpcGFudCk7XG4gICAgICAgICAgICB0aGlzLnBhcnRpY2lwYW50UHJveGllcy5zZXQocGFydGljaXBhbnQsIHBhcnRpY2lwYW50UHJveHkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmV4dFR1cm4oKSB7XG4gICAgICAgIGNvbnN0IHJvdW5kSW5pdGlhdGl2ZSA9IHRoaXMudm8ucm91bmRJbml0aWF0aXZlO1xuXG4gICAgICAgIGlmIChyb3VuZEluaXRpYXRpdmUgJiYgcm91bmRJbml0aWF0aXZlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRUdXJuSWQgPSByb3VuZEluaXRpYXRpdmUuc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChuZXh0VHVybklkICE9PSAnZW5kX3JvdW5kJykge1xuICAgICAgICAgICAgICAgIC8vIE5leHQgVHVyblxuICAgICAgICAgICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNIT1dfVE9BU1RfTUVTU0FHRSwgYFR1cm4gJHtuZXh0VHVybklkfWApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3h5ID0gdGhpcy5wYXJ0aWNpcGFudFByb3hpZXMuZ2V0KG5leHRUdXJuSWQpO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0VHVybklkID09PSAncGxheWVyJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5BV0FJVF9QTEFZRVJfQ09NQkFUX0lOUFVULCBwcm94eSk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5FWFRfQ09NQkFUX1RVUk4pO1xuICAgICAgICAgICAgICAgICAgICB9LCA0MDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEVuZCByb3VuZFxuICAgICAgICAgICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLlNIT1dfVE9BU1RfTUVTU0FHRSwgYEVuZCByb3VuZGApO1xuICAgICAgICAgICAgICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5FWFRfQ09NQkFUX1JPVU5EKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmV4dFJvdW5kKCkge1xuICAgICAgICBjb25zdCBpbml0aWF0aXZlcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IFtjaGFyYWN0ZXJJZCwgcHJveHldIG9mIHRoaXMucGFydGljaXBhbnRQcm94aWVzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgY29uc3Qgdm8gPSBwcm94eS52bztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdm8uaW5pdGlhdGl2ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaW5pdGlhdGl2ZXMucHVzaChjaGFyYWN0ZXJJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIGVuZCBvZiByb3VuZCB0b2tlblxuICAgICAgICBpbml0aWF0aXZlcy5wdXNoKCdlbmRfcm91bmQnKTtcblxuICAgICAgICBsZXQgc2h1ZmZsZWRJbml0aWF0aXZlID0gc2h1ZmZsZUFycmF5KGluaXRpYXRpdmVzKTtcbiAgICAgICAgLy8gZW5zdXJlIHJvdW5kIGRvZXNuJ3Qgc3RhcnQgd2l0aCBcImVuZF9yb3VuZFwiXG4gICAgICAgIHdoaWxlIChzaHVmZmxlZEluaXRpYXRpdmVbMF0gPT09IFwiZW5kX3JvdW5kXCIpIHtcbiAgICAgICAgICAgIHNodWZmbGVkSW5pdGlhdGl2ZSA9IHNodWZmbGVBcnJheShzaHVmZmxlZEluaXRpYXRpdmUpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnZvLnJvdW5kSW5pdGlhdGl2ZSA9IHNodWZmbGVkSW5pdGlhdGl2ZTtcbiAgICB9XG5cbn1cbiIsImV4cG9ydCBjbGFzcyBDb21iYXRWTyB7XG4gICAgY29uc3RydWN0b3IocGFydGljaXBhbnRzKSB7XG4gICAgICAgIHRoaXMucGFydGljaXBhbnRzID0gcGFydGljaXBhbnRzO1xuICAgICAgICB0aGlzLnJvdW5kSW5pdGlhdGl2ZSA9IFtdO1xuICAgIH1cbn0iLCJjb25zdCB7IFByb3h5IH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5jb25zdCB7IEdhbWVDaGFyYWN0ZXJWTyB9ID0gcmVxdWlyZSgnLi9HYW1lQ2hhcmFjdGVyVk8nKTtcblxuXG5leHBvcnQgY2xhc3MgR2FtZUNoYXJhY3RlclByb3h5IGV4dGVuZHMgUHJveHkge1xuICAgIGdldCB2bygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YSgpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkdhbWVDaGFyYWN0ZXJQcm94eV9cIiB9O1xuXG4gICAgY29uc3RydWN0b3IoaWQpIHtcbiAgICAgICAgc3VwZXIoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBpZCwgbmV3IEdhbWVDaGFyYWN0ZXJWTyhpZCkpO1xuICAgIH1cblxufVxuIiwiZXhwb3J0IGNsYXNzIEdhbWVDaGFyYWN0ZXJWTyB7XG4gICAgY29uc3RydWN0b3IoaWQpIHtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmN1cnJlbnROb2RlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmFncm9BcmVhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJvdW5kSW5pdGlhdGl2ZSA9IFtdO1xuXG4gICAgICAgIC8vIFRyb2lrYSBzdGF0c1xuICAgICAgICB0aGlzLmluaXRpYXRpdmUgPSAyO1xuICAgICAgICB0aGlzLm1heE1vdmVtZW50ID0gNjtcbiAgICAgICAgdGhpcy5hdmFpbGFibGVNb3ZlbWVudCA9IHRoaXMubWF4TW92ZW1lbnQ7XG5cblxuICAgIH1cbn0iLCJjb25zdCB7IFByb3h5IH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4vbmF2aWdhdGlvbi9Bc3Rhcic7XG5jb25zdCB7IEdhbWVNYXBWTyB9ID0gcmVxdWlyZSgnLi9HYW1lTWFwVk8nKTtcblxuZXhwb3J0IGNsYXNzIEdhbWVNYXBQcm94eSBleHRlbmRzIFByb3h5IHtcbiAgICBnZXQgdm8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERhdGEoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJHYW1lTWFwUHJveHlcIiB9O1xuXG4gICAgY29uc3RydWN0b3IobWFwR3JpZCkge1xuICAgICAgICBzdXBlcihHYW1lTWFwUHJveHkuTkFNRSk7XG5cbiAgICAgICAgdGhpcy5zZXREYXRhKHtcbiAgICAgICAgICAgIG1hcEdyaWQ6IG1hcEdyaWRcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25SZWdpc3RlcigpIHtcblxuICAgIH1cblxuICAgIGZpbmROZWFyZXN0Tm9kZSh0YXJnZXRQb2ludCkge1xuICAgICAgICBjb25zdCBtYXBHcmlkID0gdGhpcy52by5tYXBHcmlkO1xuXG4gICAgICAgIGxldCBuZWFyZXN0Tm9kZSA9IG1hcEdyaWRbMF07XG4gICAgICAgIGxldCBkaXN0U3FydFRvTmVhcmVzdE5vZGUgPSBBc3Rhci5nZXREaXN0U3F1YXJlZChuZWFyZXN0Tm9kZSwgdGFyZ2V0UG9pbnQpO1xuICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgbWFwR3JpZCkge1xuICAgICAgICAgICAgY29uc3QgZGlzdFRvTm9kZSA9IEFzdGFyLmdldERpc3RTcXVhcmVkKG5vZGUsIHRhcmdldFBvaW50KTtcblxuICAgICAgICAgICAgaWYgKGRpc3RUb05vZGUgPCBkaXN0U3FydFRvTmVhcmVzdE5vZGUpIHtcbiAgICAgICAgICAgICAgICBkaXN0U3FydFRvTmVhcmVzdE5vZGUgPSBkaXN0VG9Ob2RlO1xuICAgICAgICAgICAgICAgIG5lYXJlc3ROb2RlID0gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZWFyZXN0Tm9kZTtcbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgR2FtZU1hcFZPIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tYXBHcmlkID0gW107XG4gICAgfVxufSIsImV4cG9ydCBjbGFzcyBQcmlvcml0eVF1ZXVlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgfVxuXG4gICAgcHVzaCh2YWx1ZSwgcHJpb3JpdHkgPSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBwcmlvcml0eTogcHJpb3JpdHlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcG9wKCkge1xuICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICBsZXQgbWluID0gSW5maW5pdHk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcHJpb3JpdHkgPSB0aGlzLmRhdGFbaV0ucHJpb3JpdHk7XG4gICAgICAgICAgICBpZiAoTWF0aC5taW4obWluLCBwcmlvcml0eSkgPT09IHByaW9yaXR5KSB7XG4gICAgICAgICAgICAgICAgbWluID0gcHJpb3JpdHk7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuc3BsaWNlKGluZGV4LCAxKVswXS52YWx1ZTtcbiAgICB9XG5cbiAgICBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aFxuICAgIH1cblxuICAgIGVtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aCA9PT0gMDtcbiAgICB9XG59IiwiaW1wb3J0IHsgUHJpb3JpdHlRdWV1ZSB9IGZyb20gJy4vUHJpb3JpdHlRdWV1ZSc7XG5cbmV4cG9ydCBjbGFzcyBBc3RhciB7XG4gICAgc3RhdGljIGJyZWFkdGhGaXJzdFNlYXJjaChzdGFydCwgcmFuZ2VMaW1pdCkge1xuICAgICAgICBsZXQgZnJvbnRpZXIgPSBbXTtcbiAgICAgICAgY29uc3Qgc2VhcmNoZWRBcmVhID0gW107XG4gICAgICAgIGZyb250aWVyLnB1c2goc3RhcnQpO1xuXG4gICAgICAgIGNvbnN0IGNhbWVGcm9tID0gbmV3IE1hcCgpO1xuICAgICAgICBjYW1lRnJvbS5zZXQoc3RhcnQsIHN0YXJ0KTtcblxuICAgICAgICBsZXQgcmFuZ2UgPSAwO1xuXG4gICAgICAgIHdoaWxlIChmcm9udGllci5sZW5ndGggPiAwICYmIHJhbmdlIDwgcmFuZ2VMaW1pdCkge1xuICAgICAgICAgICAgY29uc3QgbmV3RnJvbnRpZXIgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY3VycmVudCBvZiBmcm9udGllcikge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudC5jb25uZWN0ZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gY3VycmVudC5jb25uZWN0ZWROb2Rlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgZGlzdFZhbHVlID0gdGhpcy5nZXREaXN0U3F1YXJlZChuZXh0LCBjdXJyZW50KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHQub2NjdXBpZWQgJiYgKCFjYW1lRnJvbS5oYXMobmV4dCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdGcm9udGllci5wdXNoKG5leHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoZWRBcmVhLnB1c2gobmV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW1lRnJvbS5zZXQobmV4dCwgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZyb250aWVyID0gbmV3RnJvbnRpZXI7XG5cbiAgICAgICAgICAgIHJhbmdlKys7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VhcmNoZWRBcmVhO1xuICAgIH1cblxuXG4gICAgc3RhdGljIGNhbGN1bGF0ZVBhdGgoc3RhcnQsIGdvYWwpIHtcbiAgICAgICAgY29uc3QgZnJvbnRpZXIgPSBuZXcgUHJpb3JpdHlRdWV1ZSgpO1xuICAgICAgICBmcm9udGllci5wdXNoKHN0YXJ0LCAwKTtcblxuICAgICAgICBjb25zdCBjYW1lRnJvbSA9IG5ldyBNYXAoKTtcbiAgICAgICAgY29uc3QgY29zdFNvRmFyID0gbmV3IE1hcCgpO1xuXG4gICAgICAgIGNhbWVGcm9tLnNldChzdGFydCwgc3RhcnQpO1xuICAgICAgICBjb3N0U29GYXIuc2V0KHN0YXJ0LCAwKTtcblxuICAgICAgICB3aGlsZSAoIWZyb250aWVyLmVtcHR5KCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBmcm9udGllci5wb3AoKTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnQuZXF1YWxzKGdvYWwpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudC5jb25uZWN0ZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBjdXJyZW50LmNvbm5lY3RlZE5vZGVzW2ldO1xuICAgICAgICAgICAgICAgIC8vIGNvbnN0IGRpc3RWYWx1ZSA9IHRoaXMuZ2V0RGlzdFNxdWFyZWQobmV4dCwgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3Q29zdCA9IGNvc3RTb0Zhci5nZXQoY3VycmVudCkgKyAxO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFuZXh0Lm9jY3VwaWVkICYmICghY29zdFNvRmFyLmhhcyhuZXh0KSB8fCBuZXdDb3N0IDwgY29zdFNvRmFyLmdldChuZXh0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29zdFNvRmFyLnNldChuZXh0LCBuZXdDb3N0KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByaW9yaXR5ID0gbmV3Q29zdCArIHRoaXMuaGV1cmlzdGljKG5leHQsIGdvYWwpO1xuICAgICAgICAgICAgICAgICAgICBmcm9udGllci5wdXNoKG5leHQsIHByaW9yaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgY2FtZUZyb20uc2V0KG5leHQsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGN1cnJlbnQgPSBnb2FsO1xuICAgICAgICBsZXQgcGF0aElzQnJva2VuID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHBhdGggPSBbXTtcbiAgICAgICAgcGF0aC5wdXNoKGN1cnJlbnQpO1xuXG5cbiAgICAgICAgd2hpbGUgKCFjdXJyZW50LmVxdWFscyhzdGFydCkgJiYgIXBhdGhJc0Jyb2tlbikge1xuICAgICAgICAgICAgaWYgKGNhbWVGcm9tLmhhcyhjdXJyZW50KSB8fCAhY3VycmVudC5lcXVhbHMoZ29hbCkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY2FtZUZyb20uZ2V0KGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIHBhdGgucHVzaChjdXJyZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGF0aElzQnJva2VuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXRoSXNCcm9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL3BhdGgucHVzaChzdGFydCk7XG4gICAgICAgICAgICAvLyBwYXRoLnJldmVyc2UoKTtcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldERpc3RTcXVhcmVkKHB0MSwgcHQyKSB7XG4gICAgICAgIHJldHVybiAoKHB0MS54IC0gcHQyLngpICogKHB0MS54IC0gcHQyLngpXG4gICAgICAgICAgICArIChwdDEueSAtIHB0Mi55KSAqIChwdDEueSAtIHB0Mi55KVxuICAgICAgICAgICAgKyAocHQxLnogLSBwdDIueikgKiAocHQxLnogLSBwdDIueikpO1xuICAgIH1cblxuICAgIHN0YXRpYyBoZXVyaXN0aWMoYSwgYikge1xuICAgICAgICByZXR1cm4gTWF0aC5hYnMoYS54IC0gYi54KSArIE1hdGguYWJzKGEueSAtIGIueSkgKyBNYXRoLmFicyhhLnogLSBiLnopO1xuICAgIH1cbn0iLCJjb25zdCB7IFByb3h5IH0gPSByZXF1aXJlKCdAa29yZWV6L3B1cmUtbXZjJyk7XG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5jb25zdCB7IEdhbWVTdGF0ZVZPIH0gPSByZXF1aXJlKCcuL0dhbWVTdGF0ZVZPJyk7XG5cblxuZXhwb3J0IGNsYXNzIEdhbWVTdGF0ZVByb3h5IGV4dGVuZHMgUHJveHkge1xuICAgIGdldCB2bygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YSgpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkdhbWVTdGF0ZVByb3h5XCIgfTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihHYW1lU3RhdGVQcm94eS5OQU1FLCBuZXcgR2FtZVN0YXRlVk8oKSk7XG4gICAgfVxuXG4gICAgdXBkYXRlR2FtZVN0YXRlVHlwZShuZXdTdGF0ZVR5cGUpIHtcbiAgICAgICAgdGhpcy52by5nYW1lcGxheU1vZGUgPSBuZXdTdGF0ZVR5cGU7XG4gICAgfVxuXG59XG4iLCJleHBvcnQgY29uc3QgZ2FtZXBsYXlNb2RlVHlwZXMgPSB7XG4gICAgRVhQTE9SQVRJT046ICdFWFBMT1JBVElPTicsXG4gICAgQ09NQkFUOiAnQ09NQkFUJyxcbiAgICBESUFMT0dVRTogJ0RJQUxPR1VFJyxcblxufVxuXG5leHBvcnQgY2xhc3MgR2FtZVN0YXRlVk8ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmdhbWVwbGF5TW9kZSA9IGdhbWVwbGF5TW9kZVR5cGVzLkVYUExPUkFUSU9OO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5cbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIEdhbWVNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkdhbWVNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJSZWdpc3RlciBtZWRpYXRvciAtIEdhbWVNZWRpYXRvclwiKTtcbiAgICAgICAgY29uc3QgYXBwID0gcGMuQXBwbGljYXRpb24uZ2V0QXBwbGljYXRpb24oKTtcbiAgICAgICAgc3VwZXIoR2FtZU1lZGlhdG9yLk5BTUUsIGFwcCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5BUFBfSU5JVElBTElTRUQpO1xuICAgIH1cblxuXG4gICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3dpdGNoIChub3RpZmljYXRpb25OYW1lKSB7XG4gICAgICAgICAgICBjYXNlIEdhbWVDb21tYW5kcy5BUFBfSU5JVElBTElTRUQ6XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJjb25zdCB7IEZhY2FkZSB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuY29uc3QgeyBHYW1lRmFjYWRlIH0gPSByZXF1aXJlKCcuLi9HYW1lRmFjYWRlJyk7XG5cbmV4cG9ydCBjb25zdCBDYWNvZ2VuR2FtZSA9IHBjLmNyZWF0ZVNjcmlwdCgnQ2Fjb2dlbkdhbWUnKTtcblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcbkNhY29nZW5HYW1lLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICB0aGlzLmZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5BUFBfSU5JVElBTElTRUQpO1xuICAgIHRoaXMuZmFjYWRlLnNlbmROb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkNIQU5HRV9TQ0VORSwgXCJNYXAxXCIpO1xufTtcblxuLy8gdXBkYXRlIGNvZGUgY2FsbGVkIGV2ZXJ5IGZyYW1lXG5DYWNvZ2VuR2FtZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGR0KSB7XG5cbn07IiwiaW1wb3J0IHsgTmF2aWdhdGlvbk5vZGUgfSBmcm9tIFwiLi4vLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL05hdmlnYXRpb25Ob2RlXCI7XG5pbXBvcnQgeyBBc3RhciB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVNYXAvbmF2aWdhdGlvbi9Bc3Rhcic7XG5cbmV4cG9ydCBjb25zdCBOYXZpZ2F0aW9uQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdOYXZpZ2F0aW9uQ29tcG9uZW50Jyk7XG5cbk5hdmlnYXRpb25Db21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJjb25uZWN0ZWRDb21wb25lbnRzXCIsIHtcbiAgICB0eXBlOiBcImVudGl0eVwiLFxuICAgIGFycmF5OiB0cnVlLFxuICAgIHRpdGxlOiBcIkNvbm5lY3RlZCBDb21wb25lbnRzXCJcbn0pO1xuXG5OYXZpZ2F0aW9uQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxTY2FsZSgpO1xuICAgIGNvbnN0IGhhbGZFeHRlbnRzID0gbmV3IHBjLlZlYzMoc2NhbGUueCAvIDIsIDAuMDUsIHNjYWxlLnogLyAyKTtcbiAgICB0aGlzLmFhYmIgPSBuZXcgcGMuQm91bmRpbmdCb3godGhpcy5lbnRpdHkuZ2V0UG9zaXRpb24oKSwgaGFsZkV4dGVudHMpO1xuICAgIHRoaXMuYXBwLm9uKCdwaWNrZXI6cmF5Y2FzdCcsIHRoaXMuaGFuZGxlUmF5Q2FzdCwgdGhpcyk7XG5cbiAgICB0aGlzLmVudGl0eS5maW5kQnlOYW1lKCdQbGFuZScpLmVuYWJsZWQgPSBmYWxzZTtcblxufVxuXG5OYXZpZ2F0aW9uQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVSYXlDYXN0ID0gZnVuY3Rpb24gKHJheSwgc2NyZWVuUG9zKSB7XG4gICAgY29uc3QgaGl0UG9zaXRpb24gPSBuZXcgcGMuVmVjMygpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYWFiYi5pbnRlcnNlY3RzUmF5KHJheSwgaGl0UG9zaXRpb24pO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgdGhpcy5hcHAuZmlyZSgncGlja2VyOnJlc3VsdCcsIHRoaXMuZW50aXR5LCBoaXRQb3NpdGlvbiwgc2NyZWVuUG9zKTtcbiAgICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxOYXZpZ2F0aW9uTm9kZT59IG5vZGVHcmlkIC0gQXJyYXkgb2Ygbm9kZXMgcmVwcmVzZW50aW5nIHBvaW50cyBvbiB0aGUgZ3JpZC5cbiAqL1xuTmF2aWdhdGlvbkNvbXBvbmVudC5wcm90b3R5cGUuc2V0R3JpZCA9IGZ1bmN0aW9uIChub2RlR3JpZCkge1xuICAgIHRoaXMubm9kZUdyaWQgPSBub2RlR3JpZDtcbn1cblxuTmF2aWdhdGlvbkNvbXBvbmVudC5wcm90b3R5cGUuZ2V0R3JpZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlR3JpZDtcbn1cblxuTmF2aWdhdGlvbkNvbXBvbmVudC5wcm90b3R5cGUuZ2V0TmVhcmVzdE5vZGUgPSBmdW5jdGlvbiAodGFyZ2V0UG9pbnQpIHtcbiAgICBsZXQgbmVhcmVzdE5vZGUgPSB0aGlzLm5vZGVHcmlkWzBdO1xuICAgIGxldCBkaXN0U3FydFRvTmVhcmVzdE5vZGUgPSBBc3Rhci5nZXREaXN0U3F1YXJlZChuZWFyZXN0Tm9kZSwgdGFyZ2V0UG9pbnQpO1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzLm5vZGVHcmlkKSB7XG4gICAgICAgIGNvbnN0IGRpc3RUb05vZGUgPSBBc3Rhci5nZXREaXN0U3F1YXJlZChub2RlLCB0YXJnZXRQb2ludCk7XG5cbiAgICAgICAgaWYgKGRpc3RUb05vZGUgPCBkaXN0U3FydFRvTmVhcmVzdE5vZGUpIHtcbiAgICAgICAgICAgIGRpc3RTcXJ0VG9OZWFyZXN0Tm9kZSA9IGRpc3RUb05vZGU7XG4gICAgICAgICAgICBuZWFyZXN0Tm9kZSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5lYXJlc3ROb2RlO1xufVxuIiwiXG5pbXBvcnQgeyBHYW1lQ29tbWFuZHMgfSBmcm9tICcuLi8uLi9jb250cm9sbGVyL0dhbWVDb21tYW5kcyc7XG5pbXBvcnQgeyBHYW1lTWFwUHJveHkgfSBmcm9tICcuLi8uLi9tb2RlbC9nYW1lTWFwL0dhbWVNYXBQcm94eSc7XG5pbXBvcnQgeyBHYW1lU3RhdGVQcm94eSB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVTdGF0ZS9HYW1lU3RhdGVQcm94eSc7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyQ29tcG9uZW50IH0gZnJvbSAnLi9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50JztcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcbmNvbnN0IHsgTWVkaWF0b3IgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcblxuZXhwb3J0IGNsYXNzIEdhbWVDaGFyYWN0ZXJNZWRpYXRvciBleHRlbmRzIE1lZGlhdG9yIHtcbiAgICBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiBcIkdhbWVDaGFyYWN0ZXJNZWRpYXRvcl9cIiB9O1xuXG4gICAgY29uc3RydWN0b3IoaWQsIHZpZXdDb21wb25lbnQsIHByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zKSB7XG4gICAgICAgIHN1cGVyKEdhbWVDaGFyYWN0ZXJNZWRpYXRvci5OQU1FICsgaWQpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG5cbiAgICAgICAgbGV0IG5vdGlmaWNhdGlvbnMgPSBbXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuQ0hBTkdFX1NDRU5FX0NPTVBMRVRFLFxuICAgICAgICAgICAgR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX05PREUsXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuU1RBUlRfQ09NQkFUXG4gICAgICAgIF07XG5cbiAgICAgICAgbm90aWZpY2F0aW9ucyA9IG5vdGlmaWNhdGlvbnMuY29uY2F0KHByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zKTtcblxuICAgICAgICB0aGlzLnN1YnNjcmliZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25zKTtcblxuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQgPSB2aWV3Q29tcG9uZW50O1xuICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQub24oJ3VwZGF0ZUN1cnJlbnROb2RlJywgdGhpcy51cGRhdGVDdXJyZW50Tm9kZSwgdGhpcyk7XG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5vbignZmluaXNoZWRNb3ZlJywgdGhpcy5oYW5kbGVGaW5pc2hlZE1vZGUsIHRoaXMpO1xuICAgIH1cblxuICAgIG9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKSB7XG4gICAgICAgIHN1cGVyLm9uUmVnaXN0ZXIobm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKTtcbiAgICB9XG5cbiAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uTmFtZSwgLi4uYXJncykge1xuICAgICAgICBpZiAodGhpcy52aWV3Q29tcG9uZW50KSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuZmlyZShub3RpZmljYXRpb25OYW1lLCB0aGlzLmlkLCAuLi5hcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuU1RBUlRfQ09NQkFUOlxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlU3RhcnRDb21iYXQoKTtcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlQ3VycmVudE5vZGUobmV3Tm9kZSkge1xuICAgICAgICAvKmNvbnN0IGdhbWVDaGFyYWN0ZXJWTyA9IHRoaXMuZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyB0aGlzLmlkKS52bztcbiAgICAgICAgZ2FtZUNoYXJhY3RlclZPLmN1cnJlbnROb2RlLm9jY3VwaWVkID0gZmFsc2U7XG4gICAgICAgIGdhbWVDaGFyYWN0ZXJWTy5jdXJyZW50Tm9kZSA9IG5ld05vZGU7XG4gICAgICAgIGdhbWVDaGFyYWN0ZXJWTy5jdXJyZW50Tm9kZS5vY2N1cGllZCA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUubG9nKCdNb3ZlZCB0byBub2RlJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKG5ld05vZGUpOyovXG4gICAgfVxuXG4gICAgaGFuZGxlRmluaXNoZWRNb2RlKG5ld05vZGUpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuUENfRklOSVNIRURfTU9WRSwgbmV3Tm9kZSk7XG4gICAgfVxuXG4gICAgbG9va0ZvckNoYXJhY3RlcihpZCwgbm9kZSkge1xuICAgICAgICBmb3IgKGNvbnN0IHNlYXJjaE5vZGUgb2YgdGhpcy5zZWFyY2hBcmVhKSB7XG4gICAgICAgICAgICBpZiAoc2VhcmNoTm9kZS5lcXVhbHMobm9kZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdDb21wb25lbnQuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10ubG9va0F0UG9pbnQobm9kZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU1RBUlRfQ09NQkFULCB0aGlzLnZpZXdDb21wb25lbnQsIFtpZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlU3RhcnRDb21iYXQoKSB7XG5cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGYWNhZGUgfSBmcm9tIFwiQGtvcmVlei9wdXJlLW12Y1wiO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4uLy4uL0dhbWVGYWNhZGUnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSBcIi4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5XCI7XG5pbXBvcnQgeyBHYW1lQ2hhcmFjdGVyTWVkaWF0b3IgfSBmcm9tICcuL0dhbWVDaGFyYWN0ZXJNZWRpYXRvcic7XG5cbmV4cG9ydCBjb25zdCBHYW1lQ2hhcmFjdGVyQ29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdHYW1lQ2hhcmFjdGVyQ29tcG9uZW50Jyk7XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJjaGFyYWN0ZXJJZFwiLCB7XG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICB0aXRsZTogXCJDaGFyYWN0ZXIgSWRcIlxufSk7XG5cbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoXCJjaGFyYWN0ZXJTcGVlZFwiLCB7XG4gICAgdHlwZTogXCJudW1iZXJcIixcbiAgICB0aXRsZTogXCJDaGFyYWN0ZXIgU3BlZWRcIixcbiAgICBkZWZhdWx0OiA0XG59KTtcblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5wcm90b3R5cGUucHJlcmVnaXN0ZXJOb3RpZmljYXRpb24gPSBmdW5jdGlvbiAobm90aWZpY2F0aW9uKSB7XG4gICAgaWYgKCF0aGlzLnByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zKSB7XG4gICAgICAgIHRoaXMucHJlcmVnaXN0ZXJlZE5vdGlmaWNhdGlvbnMgPSBbXTtcbiAgICB9XG5cbiAgICB0aGlzLnByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zLnB1c2gobm90aWZpY2F0aW9uKTtcbn1cblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcbkdhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLnBvc3RJbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubW92ZW1lbnRQYXRoID0gW107XG4gICAgdGhpcy5mYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIGlmICh0aGlzLmZhY2FkZS5oYXNNZWRpYXRvcihHYW1lQ2hhcmFjdGVyTWVkaWF0b3IuTkFNRSArIHRoaXMuY2hhcmFjdGVySWQpKSB7XG4gICAgICAgIHRoaXMuZmFjYWRlLnJlbW92ZU1lZGlhdG9yKEdhbWVDaGFyYWN0ZXJNZWRpYXRvci5OQU1FICsgdGhpcy5jaGFyYWN0ZXJJZCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnByZXJlZ2lzdGVyZWROb3RpZmljYXRpb25zKSB7XG4gICAgICAgIHRoaXMucHJlcmVnaXN0ZXJlZE5vdGlmaWNhdGlvbnMgPSBbXTtcbiAgICB9XG5cbiAgICB0aGlzLmZhY2FkZS5yZWdpc3RlclByb3h5KG5ldyBHYW1lQ2hhcmFjdGVyUHJveHkodGhpcy5jaGFyYWN0ZXJJZCkpO1xuICAgIHRoaXMuZmFjYWRlLnJlZ2lzdGVyTWVkaWF0b3IobmV3IEdhbWVDaGFyYWN0ZXJNZWRpYXRvcih0aGlzLmNoYXJhY3RlcklkLCB0aGlzLmVudGl0eSwgdGhpcy5wcmVyZWdpc3RlcmVkTm90aWZpY2F0aW9ucykpO1xufTtcblxuXG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5zZXRQYXRoID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICB0aGlzLm1vdmVtZW50UGF0aCA9IHBhdGg7XG59O1xuXG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5zdG9wTW92ZW1lbnQgPSBmdW5jdGlvbiAoY3VycmVudE5vZGUpIHtcbiAgICBjb25zb2xlLmxvZyhcIlN0b3BNb3ZlbWVudFwiKTtcbiAgICBjb25zb2xlLmxvZyhjdXJyZW50Tm9kZSk7XG4gICAgdGhpcy5tb3ZlbWVudFBhdGggPSBbXTtcbiAgICB0aGlzLmVudGl0eS5zZXRMb2NhbFBvc2l0aW9uKGN1cnJlbnROb2RlLngsIGN1cnJlbnROb2RlLnksIGN1cnJlbnROb2RlLnopO1xufTtcblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGR0KSB7XG4gICAgdGhpcy5tb3ZlQWxvbmdQYXRoKGR0KTtcbn1cblxuXG5HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5tb3ZlQWxvbmdQYXRoID0gZnVuY3Rpb24gKGR0KSB7XG5cbiAgICBpZiAodGhpcy5tb3ZlbWVudFBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBuZXh0UGF0aFBvaW50ID0gdGhpcy5tb3ZlbWVudFBhdGhbdGhpcy5tb3ZlbWVudFBhdGgubGVuZ3RoIC0gMV07XG4gICAgICAgIGNvbnN0IGxvY2FsUG9zID0gdGhpcy5lbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpO1xuICAgICAgICBjb25zdCBuZXdQb3NpdGlvbiA9IG5ldyBwYy5WZWMzKCk7XG4gICAgICAgIGNvbnN0IHNwZWVkID0gbmV3IHBjLlZlYzMoZHQgKiB0aGlzLmNoYXJhY3RlclNwZWVkLCBkdCAqIHRoaXMuY2hhcmFjdGVyU3BlZWQsIGR0ICogdGhpcy5jaGFyYWN0ZXJTcGVlZCk7XG4gICAgICAgIGNvbnN0IG5vZGVQb2ludCA9IG5ldyBwYy5WZWMzKG5leHRQYXRoUG9pbnQueCwgbmV4dFBhdGhQb2ludC55LCBuZXh0UGF0aFBvaW50LnopO1xuICAgICAgICBuZXdQb3NpdGlvbi5zdWIyKG5vZGVQb2ludCwgbG9jYWxQb3MpO1xuICAgICAgICBuZXdQb3NpdGlvbi5ub3JtYWxpemUoKTtcbiAgICAgICAgbmV3UG9zaXRpb24ubXVsKHNwZWVkKTtcbiAgICAgICAgbmV3UG9zaXRpb24uYWRkKGxvY2FsUG9zKTtcblxuICAgICAgICB0aGlzLmVudGl0eS5zZXRMb2NhbFBvc2l0aW9uKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5sb29rQXRQb2ludChuZXh0UGF0aFBvaW50KTtcbiAgICAgICAgY29uc29sZS5sb2coJ3VwZGF0ZUN1cnJlbnROb2RlJyk7XG5cbiAgICAgICAgY29uc3QgZGlzdGFuY2VUb05leHRQYXRoID0gbmV3UG9zaXRpb24uZGlzdGFuY2Uobm9kZVBvaW50KTtcbiAgICAgICAgaWYgKGRpc3RhbmNlVG9OZXh0UGF0aCA8IDAuMTUpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnROb2RlID0gdGhpcy5tb3ZlbWVudFBhdGgucG9wKCk7XG5cbiAgICAgICAgICAgIHRoaXMuZW50aXR5LmZpcmUoJ3VwZGF0ZUN1cnJlbnROb2RlJywgY3VycmVudE5vZGUpO1xuICAgICAgICAgICAgaWYgKHRoaXMubW92ZW1lbnRQYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW50aXR5LmZpcmUoJ2ZpbmlzaGVkTW92ZScsIGN1cnJlbnROb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuR2FtZUNoYXJhY3RlckNvbXBvbmVudC5wcm90b3R5cGUubG9va0F0UG9pbnQgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICBjb25zdCBsb2NhbFBvcyA9IHRoaXMuZW50aXR5LmdldExvY2FsUG9zaXRpb24oKTtcblxuICAgIGNvbnN0IGR4ID0gcG9pbnQueCAtIGxvY2FsUG9zLng7XG4gICAgY29uc3QgZHogPSBwb2ludC56IC0gbG9jYWxQb3MuejtcbiAgICBjb25zdCBhbmdsZVRvRGVzdCA9IE1hdGguYXRhbjIoZHgsIGR6KSAqIDE4MCAvIE1hdGguUEk7XG4gICAgdGhpcy5lbnRpdHkuc2V0RXVsZXJBbmdsZXMoMCwgYW5nbGVUb0Rlc3QsIDApO1xufSIsImV4cG9ydCBjb25zdCBBZ3JvR2FtZUNoYXJhY3RlckNvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnKTtcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4uLy4uLy4uL0dhbWVGYWNhZGUnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuaW1wb3J0IHsgR2FtZU1hcFByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZU1hcC9HYW1lTWFwUHJveHknO1xuaW1wb3J0IHsgQXN0YXIgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lTWFwL25hdmlnYXRpb24vQXN0YXInO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk8nO1xuXG5BZ3JvR2FtZUNoYXJhY3RlckNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZChcInNpZ2h0UmFuZ2VcIiwge1xuICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgdGl0bGU6IFwiU2lnaHQgUmFuZ2VcIixcbiAgICBkZWZhdWx0OiA1XG59KTtcblxuLy8gaW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcbkFncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW50aXR5LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnByZXJlZ2lzdGVyTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5NQVBfR1JJRF9DUkVBVEVEKTtcbiAgICB0aGlzLmVudGl0eS5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5wcmVyZWdpc3Rlck5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuUENfTU9WRURfVE9fTk9ERSk7XG5cbiAgICB0aGlzLmVudGl0eS5vbihHYW1lQ29tbWFuZHMuTUFQX0dSSURfQ1JFQVRFRCwgdGhpcy5oYW5kbGVNYXBHcmlkQ3JlYXRlZCwgdGhpcyk7XG4gICAgdGhpcy5lbnRpdHkub24oR2FtZUNvbW1hbmRzLlBDX01PVkVEX1RPX05PREUsIHRoaXMuaGFuZGxlTW92ZWRUb05vZGUsIHRoaXMpO1xufTtcblxuQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZU1hcEdyaWRDcmVhdGVkID0gZnVuY3Rpb24gKGlkLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBjb25zdCB2byA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgaWQpLnZvO1xuXG4gICAgaWYgKCF2by5jdXJyZW50Tm9kZSkge1xuICAgICAgICBjb25zdCBnYW1lTWFwUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lTWFwUHJveHkuTkFNRSk7XG4gICAgICAgIHZvLmN1cnJlbnROb2RlID0gZ2FtZU1hcFByb3h5LmZpbmROZWFyZXN0Tm9kZSh0aGlzLmVudGl0eS5nZXRMb2NhbFBvc2l0aW9uKCkpO1xuICAgICAgICB2by5jdXJyZW50Tm9kZS5vY2N1cGllZCA9IHRydWU7XG4gICAgICAgIHZvLmFncm9BcmVhID0gQXN0YXIuYnJlYWR0aEZpcnN0U2VhcmNoKHZvLmN1cnJlbnROb2RlLCB0aGlzLnNpZ2h0UmFuZ2UpO1xuXG4gICAgfVxuXG59XG5cbkFncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50LnByb3RvdHlwZS5oYW5kbGVNb3ZlZFRvTm9kZSA9IGZ1bmN0aW9uIChpZCwgdGFyZ2V0SWQsIG5vZGUpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIGNvbnN0IHZvID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBpZCkudm87XG4gICAgY29uc3QgZ2FtZVN0YXRlID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZVN0YXRlUHJveHkuTkFNRSkudm87XG5cbiAgICAvLyBJZ25vcmUgaWYgdGhlIHBsYXllciBpc24ndCBleHBsb3JpbmdcbiAgICBpZiAoZ2FtZVN0YXRlLmdhbWVwbGF5TW9kZSAhPT0gZ2FtZXBsYXlNb2RlVHlwZXMuRVhQTE9SQVRJT04pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgYWdyb05vZGUgb2Ygdm8uYWdyb0FyZWEpIHtcbiAgICAgICAgaWYgKGFncm9Ob2RlLmVxdWFscyhub2RlKSkge1xuICAgICAgICAgICAgdGhpcy5lbnRpdHkuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10ubG9va0F0UG9pbnQobm9kZSk7XG5cbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5OQVZJR0FURV9UT19OT0RFLCBub2RlKTtcbiAgICAgICAgICAgIGZhY2FkZS5zZW5kTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TVEFSVF9DT01CQVQsIGlkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIlxuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuY29uc3QgeyBNZWRpYXRvciB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuXG5leHBvcnQgY2xhc3MgVG9hc3RNZXNzYWdlTWVkaWF0b3IgZXh0ZW5kcyBNZWRpYXRvciB7XG4gICAgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gXCJUb2FzdE1lc3NhZ2VNZWRpYXRvclwiIH07XG5cbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29tcG9uZW50KSB7XG4gICAgICAgIHN1cGVyKFRvYXN0TWVzc2FnZU1lZGlhdG9yLk5BTUUpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZU5vdGlmaWNhdGlvbihbXG4gICAgICAgICAgICBHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFXG4gICAgICAgIF0pO1xuXG4gICAgICAgIHRoaXMudmlld0NvbXBvbmVudCA9IHZpZXdDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgb25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpIHtcbiAgICAgICAgc3VwZXIub25SZWdpc3Rlcihub3RpZmljYXRpb25TdWJzY3JpcHRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25OYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBHYW1lQ29tbWFuZHMuU0hPV19UT0FTVF9NRVNTQUdFOlxuICAgICAgICAgICAgICAgIHRoaXMudmlld0NvbXBvbmVudC5zY3JpcHRbJ1RvYXN0TWVzc2FnZUNvbXBvbmVudCddLmFkZE1lc3NhZ2UoYXJnc1swXSk7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEZhY2FkZSB9IGZyb20gXCJAa29yZWV6L3B1cmUtbXZjXCI7XG5pbXBvcnQgeyBHYW1lRmFjYWRlIH0gZnJvbSBcIi4uLy4uL0dhbWVGYWNhZGVcIjtcbmltcG9ydCB7IFRvYXN0TWVzc2FnZU1lZGlhdG9yIH0gZnJvbSBcIi4vVG9hc3RNZXNzYWdlTWVkaWF0b3JcIjtcblxuZXhwb3J0IGNvbnN0IFRvYXN0TWVzc2FnZUNvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnVG9hc3RNZXNzYWdlQ29tcG9uZW50Jyk7XG5cblRvYXN0TWVzc2FnZUNvbXBvbmVudC5hdHRyaWJ1dGVzLmFkZCgnbGFiZWxFbnRpdHknLCB7IHR5cGU6ICdlbnRpdHknLCB0aXRsZTogJ0xhYmVsIEVudGl0eScgfSk7XG5Ub2FzdE1lc3NhZ2VDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ21lc3NhZ2VUaW1lJywgeyB0eXBlOiAnbnVtYmVyJywgZGVmYXVsdDogNSwgdGl0bGU6ICdNZXNzYWdlIFRpbWUnIH0pO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuVG9hc3RNZXNzYWdlQ29tcG9uZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBpZiAodGhpcy5mYWNhZGUuaGFzTWVkaWF0b3IoVG9hc3RNZXNzYWdlTWVkaWF0b3IuTkFNRSkpIHtcbiAgICAgICAgdGhpcy5mYWNhZGUucmVtb3ZlTWVkaWF0b3IoVG9hc3RNZXNzYWdlTWVkaWF0b3IuTkFNRSk7XG4gICAgfVxuXG4gICAgdGhpcy5tZXNzYWdlUXVldWUgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRUaW1lb3V0ID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgVG9hc3RNZXNzYWdlTWVkaWF0b3IodGhpcy5lbnRpdHkpKTtcbn07XG5cblRvYXN0TWVzc2FnZUNvbXBvbmVudC5wcm90b3R5cGUuYWRkTWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMubWVzc2FnZVF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLm1lc3NhZ2VRdWV1ZS5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnNob3dOZXh0TWVzc2FnZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubWVzc2FnZVF1ZXVlLnB1c2gobWVzc2FnZSk7XG4gICAgfVxufVxuXG5cblRvYXN0TWVzc2FnZUNvbXBvbmVudC5wcm90b3R5cGUuc2hvd05leHRNZXNzYWdlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLm1lc3NhZ2VRdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG5leHRNZXNzYWdlID0gdGhpcy5tZXNzYWdlUXVldWVbMF07XG5cbiAgICAgICAgdGhpcy5sYWJlbEVudGl0eS5lbGVtZW50LnRleHQgPSBuZXh0TWVzc2FnZTtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZVF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICB0aGlzLnNob3dOZXh0TWVzc2FnZSgpO1xuICAgICAgICB9LCB0aGlzLm1lc3NhZ2VUaW1lICogMTAwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sYWJlbEVudGl0eS5lbGVtZW50LnRleHQgPSBcIlwiO1xuXG4gICAgfVxufSIsImV4cG9ydCBjb25zdCBOYXZpZ2F0ZVRvTm9kZUNvbXBvbmVudCA9IHBjLmNyZWF0ZVNjcmlwdCgnTmF2aWdhdGVUb05vZGVDb21wb25lbnQnKTtcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4uLy4uLy4uL0dhbWVGYWNhZGUnO1xuaW1wb3J0IHsgR2FtZUNoYXJhY3RlclByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyUHJveHknO1xuaW1wb3J0IHsgR2FtZU1hcFByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZU1hcC9HYW1lTWFwUHJveHknO1xuaW1wb3J0IHsgQXN0YXIgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lTWFwL25hdmlnYXRpb24vQXN0YXInO1xuaW1wb3J0IHsgR2FtZVN0YXRlUHJveHkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlUHJveHknO1xuaW1wb3J0IHsgZ2FtZXBsYXlNb2RlVHlwZXMgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9nYW1lU3RhdGUvR2FtZVN0YXRlVk8nO1xuXG4vLyBpbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuTmF2aWdhdGVUb05vZGVDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbnRpdHkuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10ucHJlcmVnaXN0ZXJOb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX05PREUpO1xuICAgIHRoaXMuZW50aXR5LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnByZXJlZ2lzdGVyTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5TVEFSVF9DT01CQVQpO1xuXG4gICAgdGhpcy5lbnRpdHkub24oR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX05PREUsIHRoaXMuaGFuZGxlTmF2aWdhdGVUb05vZGUsIHRoaXMpO1xuICAgIHRoaXMuZW50aXR5Lm9uKEdhbWVDb21tYW5kcy5TVEFSVF9DT01CQVQsIHRoaXMuaGFuZGxlU3RhcnRDb21iYXQsIHRoaXMpO1xuXG4gICAgdGhpcy5lbnRpdHkub24oJ3VwZGF0ZUN1cnJlbnROb2RlJywgdGhpcy51cGRhdGVDdXJyZW50Tm9kZSwgdGhpcyk7XG59O1xuXG5OYXZpZ2F0ZVRvTm9kZUNvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlTmF2aWdhdGVUb05vZGUgPSBmdW5jdGlvbiAoaWQsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCB0YXJnZXROb2RlID0gYXJnc1swXTtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIGNvbnN0IGdhbWVTdGF0ZSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVTdGF0ZVByb3h5Lk5BTUUpLnZvO1xuICAgIGlmIChnYW1lU3RhdGUuZ2FtZXBsYXlNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5FWFBMT1JBVElPTikge1xuICAgICAgICBjb25zdCBnYW1lTWFwUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lTWFwUHJveHkuTkFNRSk7XG4gICAgICAgIGNvbnN0IGdhbWVDaGFyYWN0ZXJWTyA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgaWQpLnZvO1xuXG4gICAgICAgIGlmICghZ2FtZUNoYXJhY3RlclZPLmN1cnJlbnROb2RlKSB7XG4gICAgICAgICAgICBnYW1lQ2hhcmFjdGVyVk8uY3VycmVudE5vZGUgPSBnYW1lTWFwUHJveHkuZmluZE5lYXJlc3ROb2RlKHRoaXMuZW50aXR5LmdldExvY2FsUG9zaXRpb24oKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXRoID0gQXN0YXIuY2FsY3VsYXRlUGF0aChnYW1lQ2hhcmFjdGVyVk8uY3VycmVudE5vZGUsIHRhcmdldE5vZGUpO1xuICAgICAgICBpZiAocGF0aCAmJiBwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW50aXR5LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnNldFBhdGgocGF0aCk7XG4gICAgICAgICAgICBnYW1lQ2hhcmFjdGVyVk8uY3VycmVudE5vZGUgPSB0YXJnZXROb2RlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5OYXZpZ2F0ZVRvTm9kZUNvbXBvbmVudC5wcm90b3R5cGUudXBkYXRlQ3VycmVudE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIGNvbnN0IGlkID0gdGhpcy5lbnRpdHkuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uY2hhcmFjdGVySWQ7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuUENfTU9WRURfVE9fTk9ERSwgaWQsIG5vZGUpO1xufVxuXG5OYXZpZ2F0ZVRvTm9kZUNvbXBvbmVudC5wcm90b3R5cGUuaGFuZGxlU3RhcnRDb21iYXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgaWQgPSB0aGlzLmVudGl0eS5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5jaGFyYWN0ZXJJZDtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIGNvbnN0IGdhbWVDaGFyYWN0ZXJWTyA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KEdhbWVDaGFyYWN0ZXJQcm94eS5OQU1FICsgaWQpLnZvO1xuXG4gICAgdGhpcy5lbnRpdHkuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10uc3RvcE1vdmVtZW50KGdhbWVDaGFyYWN0ZXJWTy5jdXJyZW50Tm9kZSk7XG5cbn0iLCJleHBvcnQgY29uc3QgU2V0Q2FtZXJhVGFyZ2V0Q29tcG9uZW50ID0gcGMuY3JlYXRlU2NyaXB0KCdTZXRDYW1lcmFUYXJnZXRDb21wb25lbnQnKTtcbmltcG9ydCB7IEZhY2FkZSB9IGZyb20gJ0Brb3JlZXovcHVyZS1tdmMnO1xuaW1wb3J0IHsgR2FtZUNvbW1hbmRzIH0gZnJvbSAnLi4vLi4vLi4vY29udHJvbGxlci9HYW1lQ29tbWFuZHMnO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4uLy4uLy4uL0dhbWVGYWNhZGUnO1xuXG4vLyBwb3N0SW5pdGlhbGl6ZSBjb2RlIGNhbGxlZCBvbmNlIHBlciBlbnRpdHlcblNldENhbWVyYVRhcmdldENvbXBvbmVudC5wcm90b3R5cGUucG9zdEluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBmYWNhZGUuc2VuZE5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuU0VUX0NBTUVSQV9UQVJHRVQsIHRoaXMuZW50aXR5KTtcbn07XG4iLCJleHBvcnQgY29uc3QgUGxheWVyQ29tYmF0SW5wdXRDb21wb25lbnQgPSBwYy5jcmVhdGVTY3JpcHQoJ1BsYXllckNvbWJhdElucHV0Q29tcG9uZW50Jyk7XG5pbXBvcnQgeyBGYWNhZGUgfSBmcm9tICdAa29yZWV6L3B1cmUtbXZjJztcbmltcG9ydCB7IEdhbWVDb21tYW5kcyB9IGZyb20gJy4uLy4uLy4uL2NvbnRyb2xsZXIvR2FtZUNvbW1hbmRzJztcbmltcG9ydCB7IEdhbWVGYWNhZGUgfSBmcm9tICcuLi8uLi8uLi9HYW1lRmFjYWRlJztcbmltcG9ydCB7IEFzdGFyIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZU1hcC9uYXZpZ2F0aW9uL0FzdGFyJztcbmltcG9ydCB7IEdhbWVTdGF0ZVByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVByb3h5JztcbmltcG9ydCB7IGdhbWVwbGF5TW9kZVR5cGVzIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvZ2FtZVN0YXRlL0dhbWVTdGF0ZVZPJztcbmltcG9ydCB7IENvbWJhdFByb3h5IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY29tYmF0L0NvbWJhdFByb3h5JztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJQcm94eSB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2dhbWVDaGFyYWN0ZXIvR2FtZUNoYXJhY3RlclByb3h5JztcblxuUGxheWVyQ29tYmF0SW5wdXRDb21wb25lbnQuYXR0cmlidXRlcy5hZGQoJ21vdmVUaWxlVGVtcGxhdGUnLCB7IHR5cGU6ICdhc3NldCcsIHRpdGxlOiAnTW92ZSB0aWxlIHRlbXBsYXRlJyB9KTtcblBsYXllckNvbWJhdElucHV0Q29tcG9uZW50LmF0dHJpYnV0ZXMuYWRkKCd0aWxlQ29udGFpbmVyJywgeyB0eXBlOiAnZW50aXR5JywgdGl0bGU6ICdUaWxlIENvbnRhaW5lcicgfSk7XG5cbi8vIHBvc3RJbml0aWFsaXplIGNvZGUgY2FsbGVkIG9uY2UgcGVyIGVudGl0eVxuUGxheWVyQ29tYmF0SW5wdXRDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbnRpdHkuc2NyaXB0WydHYW1lQ2hhcmFjdGVyQ29tcG9uZW50J10ucHJlcmVnaXN0ZXJOb3RpZmljYXRpb24oR2FtZUNvbW1hbmRzLkFXQUlUX1BMQVlFUl9DT01CQVRfSU5QVVQpO1xuICAgIHRoaXMuZW50aXR5LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnByZXJlZ2lzdGVyTm90aWZpY2F0aW9uKEdhbWVDb21tYW5kcy5OQVZJR0FURV9UT19OT0RFKTtcbiAgICB0aGlzLmVudGl0eS5zY3JpcHRbJ0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnXS5wcmVyZWdpc3Rlck5vdGlmaWNhdGlvbihHYW1lQ29tbWFuZHMuUENfRklOSVNIRURfTU9WRSk7XG5cblxuICAgIHRoaXMuZW50aXR5Lm9uKEdhbWVDb21tYW5kcy5BV0FJVF9QTEFZRVJfQ09NQkFUX0lOUFVULCB0aGlzLmF3YWl0UGxheWVySW5wdXQsIHRoaXMpO1xufTtcblxuUGxheWVyQ29tYmF0SW5wdXRDb21wb25lbnQucHJvdG90eXBlLmF3YWl0UGxheWVySW5wdXQgPSBmdW5jdGlvbiAoaWQsIC4uLmFyZ3MpIHtcbiAgICB0aGlzLnNob3dNb3ZlYWJsZVRpbGVzKGlkKTtcbn1cblxuUGxheWVyQ29tYmF0SW5wdXRDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZU5hdmlnYXRlVG9Ob2RlID0gZnVuY3Rpb24gKGlkLCAuLi5hcmdzKSB7XG5cblxuICAgIGNvbnN0IHRhcmdldE5vZGUgPSBhcmdzWzBdO1xuXG4gICAgY29uc3QgZmFjYWRlID0gRmFjYWRlLmdldEluc3RhbmNlKEdhbWVGYWNhZGUuS0VZKTtcbiAgICBjb25zdCBnYW1lU3RhdGUgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lU3RhdGVQcm94eS5OQU1FKS52bztcbiAgICBjb25zdCBnYW1lQ2hhcmFjdGVyUHJveHkgPSBmYWNhZGUucmV0cmlldmVQcm94eShHYW1lQ2hhcmFjdGVyUHJveHkuTkFNRSArIGlkKTtcbiAgICBjb25zdCBjb21iYXRQcm94eSA9IGZhY2FkZS5yZXRyaWV2ZVByb3h5KENvbWJhdFByb3h5Lk5BTUUpO1xuICAgIGlmIChjb21iYXRQcm94eSAmJiBnYW1lU3RhdGUuZ2FtZXBsYXlNb2RlID09PSBnYW1lcGxheU1vZGVUeXBlcy5DT01CQVQpIHtcbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMubW92ZWFibGVOb2Rlcykge1xuICAgICAgICAgICAgaWYgKG5vZGUuZXF1YWxzKHRhcmdldE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVWYWxpZE1vdmUoZ2FtZUNoYXJhY3RlclByb3h5LCB0YXJnZXROb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuUGxheWVyQ29tYmF0SW5wdXRDb21wb25lbnQucHJvdG90eXBlLmRlc3Ryb3lEaXNwbGF5VGlsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yIChjb25zdCB0aWxlIG9mIHRoaXMuZGlzcGxheVRpbGVzKSB7XG4gICAgICAgIHRpbGUuZGVzdHJveSgpO1xuICAgIH1cbn1cblxuUGxheWVyQ29tYmF0SW5wdXRDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZUZpbmlzaGVkTW92ZSA9IGZ1bmN0aW9uIChpZCwgY3VycmVudE5vZGUpIHtcbiAgICB0aGlzLnNob3dNb3ZlYWJsZVRpbGVzKGlkKTtcbn1cblxuUGxheWVyQ29tYmF0SW5wdXRDb21wb25lbnQucHJvdG90eXBlLmhhbmRsZVZhbGlkTW92ZSA9IGZ1bmN0aW9uIChjaGFyYWN0ZXJQcm94eSwgdGFyZ2V0Tm9kZSkge1xuICAgIGNvbnN0IHZvID0gY2hhcmFjdGVyUHJveHkudm87XG4gICAgY29uc3QgcGF0aCA9IEFzdGFyLmNhbGN1bGF0ZVBhdGgodm8uY3VycmVudE5vZGUsIHRhcmdldE5vZGUpO1xuICAgIGlmIChwYXRoICYmIHBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICB2by5hdmFpbGFibGVNb3ZlbWVudCAtPSAocGF0aC5sZW5ndGggLSAxKTsgLy8gRGV0cmFjdCBieSBvbmUuLi4gdGhlIGZpcnN0IHBhdGggbm9kZSBkb2Vzbid0IGNvdW50XG4gICAgICAgIHZvLmN1cnJlbnROb2RlID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgdGhpcy5kZXN0cm95RGlzcGxheVRpbGVzKCk7XG5cbiAgICAgICAgdGhpcy5lbnRpdHkub2ZmKEdhbWVDb21tYW5kcy5OQVZJR0FURV9UT19OT0RFLCB0aGlzLmhhbmRsZU5hdmlnYXRlVG9Ob2RlLCB0aGlzKTtcbiAgICAgICAgdGhpcy5lbnRpdHkub24oR2FtZUNvbW1hbmRzLlBDX0ZJTklTSEVEX01PVkUsIHRoaXMuaGFuZGxlRmluaXNoZWRNb3ZlLCB0aGlzKTtcblxuXG4gICAgICAgIHRoaXMuZW50aXR5LnNjcmlwdFsnR2FtZUNoYXJhY3RlckNvbXBvbmVudCddLnNldFBhdGgocGF0aCk7XG4gICAgfVxufVxuXG5QbGF5ZXJDb21iYXRJbnB1dENvbXBvbmVudC5wcm90b3R5cGUuc2hvd01vdmVhYmxlVGlsZXMgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICBjb25zdCBmYWNhZGUgPSBGYWNhZGUuZ2V0SW5zdGFuY2UoR2FtZUZhY2FkZS5LRVkpO1xuICAgIGNvbnN0IHByb3h5ID0gZmFjYWRlLnJldHJpZXZlUHJveHkoR2FtZUNoYXJhY3RlclByb3h5Lk5BTUUgKyBpZCk7XG4gICAgY29uc3Qgdm8gPSBwcm94eS52bztcbiAgICBjb25zb2xlLmxvZyhcIlRJTEUgQVQgQVJFQVwiKTtcbiAgICBjb25zb2xlLmxvZyh2by5jdXJyZW50Tm9kZSk7XG4gICAgY29uc29sZS5sb2codGhpcy5lbnRpdHkuZ2V0TG9jYWxQb3NpdGlvbigpKTtcbiAgICB0aGlzLm1vdmVhYmxlTm9kZXMgPSBBc3Rhci5icmVhZHRoRmlyc3RTZWFyY2godm8uY3VycmVudE5vZGUsIHZvLmF2YWlsYWJsZU1vdmVtZW50KTtcbiAgICB0aGlzLmRpc3BsYXlUaWxlcyA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMubW92ZWFibGVOb2Rlcykge1xuICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5tb3ZlVGlsZVRlbXBsYXRlLnJlc291cmNlLmluc3RhbnRpYXRlKCk7XG4gICAgICAgIHRpbGUuc2V0TG9jYWxQb3NpdGlvbihub2RlLngsIG5vZGUueSwgbm9kZS56KTtcbiAgICAgICAgdGhpcy50aWxlQ29udGFpbmVyLmFkZENoaWxkKHRpbGUpO1xuICAgICAgICB0aGlzLmRpc3BsYXlUaWxlcy5wdXNoKHRpbGUpO1xuICAgIH1cblxuXG4gICAgdGhpcy5lbnRpdHkub24oR2FtZUNvbW1hbmRzLk5BVklHQVRFX1RPX05PREUsIHRoaXMuaGFuZGxlTmF2aWdhdGVUb05vZGUsIHRoaXMpO1xuICAgIHRoaXMuZW50aXR5Lm9mZihHYW1lQ29tbWFuZHMuUENfRklOSVNIRURfTU9WRSwgdGhpcy5oYW5kbGVGaW5pc2hlZE1vdmUsIHRoaXMpO1xufVxuIiwiY29uc3QgeyBGYWNhZGUgfSA9IHJlcXVpcmUoJ0Brb3JlZXovcHVyZS1tdmMnKTtcbmNvbnN0IHsgUHVyZU1WQyB9ID0gcmVxdWlyZSgnQGtvcmVlei9wdXJlLW12YycpO1xuaW1wb3J0IHsgR2FtZUZhY2FkZSB9IGZyb20gJy4vR2FtZUZhY2FkZSc7XG5pbXBvcnQgeyBDYWNvZ2VuR2FtZSB9IGZyb20gJy4vdmlldy9DYWNvZ2VuR2FtZSc7XG5cbmltcG9ydCB7IE5hdmlnYXRpb25Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvbmF2aWdhdGlvbi9OYXZpZ2F0aW9uQ29tcG9uZW50JztcbmltcG9ydCB7IEdhbWVDaGFyYWN0ZXJDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvZ2FtZUNoYXJhY3Rlci9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50JztcbmltcG9ydCB7IEFncm9HYW1lQ2hhcmFjdGVyQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2dhbWVDaGFyYWN0ZXIvYWdncm8vQWdyb0dhbWVDaGFyYWN0ZXJDb21wb25lbnQnO1xuaW1wb3J0IHsgVG9hc3RNZXNzYWdlQ29tcG9uZW50IH0gZnJvbSAnLi92aWV3L3RvYXN0TWVzc2FnZS9Ub2FzdE1lc3NhZ2VDb21wb25lbnQnO1xuaW1wb3J0IHsgTmF2aWdhdGVUb05vZGVDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvZ2FtZUNoYXJhY3Rlci9uYXZpZ2F0ZVRvTm9kZS9OYXZpZ2F0ZVRvTm9kZUNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZXRDYW1lcmFUYXJnZXRDb21wb25lbnQgfSBmcm9tICcuL3ZpZXcvZ2FtZUNoYXJhY3Rlci9zZXRDYW1lcmFUYXJnZXQvU2V0Q2FtZXJhVGFyZ2V0Q29tcG9uZW50JztcbmltcG9ydCB7IFBsYXllckNvbWJhdElucHV0Q29tcG9uZW50IH0gZnJvbSAnLi92aWV3L2dhbWVDaGFyYWN0ZXIvY29tYmF0SW5wdXQvUGxheWVyQ29tYmF0SW5wdXRDb21wb25lbnQnO1xuXG5jbGFzcyBNYWluIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJNYWluIHN0YXJ0XCIpO1xuICAgICAgICBQdXJlTVZDLmRlYnVnID0gdHJ1ZTtcbiAgICAgICAgRmFjYWRlLmdldEluc3RhbmNlID0gR2FtZUZhY2FkZS5nZXRJbnN0YW5jZTtcbiAgICAgICAgY29uc29sZS5sb2coRmFjYWRlKTtcblxuICAgICAgICB0aGlzLmZhY2FkZSA9IEZhY2FkZS5nZXRJbnN0YW5jZShHYW1lRmFjYWRlLktFWSk7XG4gICAgICAgIHRoaXMuZmFjYWRlLnN0YXJ0dXAodGhpcyk7XG4gICAgfVxufVxuXG5jb25zdCBtYWluID0gbmV3IE1haW4oKTsiXSwic291cmNlUm9vdCI6IiJ9