(()=>{"use strict";var t={382:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(542),o=i(999),r=function(){function t(e){if(this.commandMap={},t.instanceMap[e])throw new Error("controller key for this Multiton key already constructed");this.multitonKey=e,this.logger=n.PureMVC.debug?n.PureMVC.logCommand:n.PureMVC.logNone,this.initializeController()}return t.removeController=function(t){delete this.instanceMap[t]},t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.prototype.registerCommand=function(t,e){this.commandMap[t]||this.view.registerObserver(t,this.executeCommand,this),this.commandMap[t]=e},t.prototype.hasCommand=function(t){return void 0!==this.commandMap[t]},t.prototype.removeCommand=function(t){this.hasCommand(t)&&(this.view.removeObserver(t,this.executeCommand,this),delete this.commandMap[t])},t.prototype.initializeController=function(){this.view=o.View.getInstance(this.multitonKey)},t.prototype.executeCommand=function(e){for(var i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];var o=this.commandMap[e];o&&(this.logger(t._consoleArgs,e,o.name),o.apply(void 0,[this.multitonKey,e].concat(i)))},t._consoleArgs=["","background: #3F234E","background: #6E2994","color: #D4BFE0; background: #8724BD;","background: #6E2994","background: #3F234E"],t.instanceMap={},t}();e.Controller=r},222:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(382),o=i(433),r=i(542),a=i(999),s=function(){function t(e){if(t.instanceMap[e])throw new Error("Facade instance for this Multiton key already constructed!");this.logger=r.PureMVC.debug?r.PureMVC.logNotification:r.PureMVC.logNone,this.initializeNotifier(e),this.initializeFacade()}return t.getInstance=function(e){return e?(t.instanceMap[e]||(t.instanceMap[e]=new t(e)),t.instanceMap[e]):null},t.hasCore=function(t){return void 0!==this.instanceMap[t]},t.removeCore=function(t){this.instanceMap[t]&&(o.Model.removeModel(t),a.View.removeView(t),n.Controller.removeController(t),delete this.instanceMap[t])},t.prototype.initializeFacade=function(){this.initializeModel(),this.initializeController(),this.initializeView()},t.prototype.registerCommand=function(t,e){this.controller.registerCommand(t,e)},t.prototype.removeCommand=function(t){this.controller.removeCommand(t)},t.prototype.hasCommand=function(t){return this.controller.hasCommand(t)},t.prototype.registerProxy=function(t){this.model.registerProxy(t)},t.prototype.retrieveProxy=function(t){return this.model.retrieveProxy(t)},t.prototype.removeProxy=function(t){return this.model?this.model.removeProxy(t):null},t.prototype.hasProxy=function(t){return this.model.hasProxy(t)},t.prototype.registerMediator=function(t){this.view.registerMediator(t)},t.prototype.retrieveMediator=function(t){return this.view.retrieveMediator(t)},t.prototype.removeMediator=function(t){return this.view.removeMediator(t)},t.prototype.sleepMediator=function(t){return this.view.sleepMediator(t)},t.prototype.awakeMediator=function(t){return this.view.awakeMediator(t)},t.prototype.hasMediator=function(t){return this.view.hasMediator(t)},t.prototype.sendNotification=function(e){for(var i,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];this.logger.apply(this,[t._consoleArgs,e].concat(n)),(i=this.view).notifyObservers.apply(i,[e].concat(n))},t.prototype.initializeNotifier=function(t){this.multitonKey=t},t.prototype.initializeController=function(){this.controller||(this.controller=n.Controller.getInstance(this.multitonKey))},t.prototype.initializeModel=function(){this.model||(this.model=o.Model.getInstance(this.multitonKey))},t.prototype.initializeView=function(){this.view||(this.view=a.View.getInstance(this.multitonKey))},t._consoleArgs=["","background: #757130","background: #DED434","color: #2F2E15; background: #FFF325;","background: #DED434","background: #757130"],t.instanceMap={},t}();e.Facade=s},651:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),a=i(542),s=function(t){function e(e,i){var n=t.call(this)||this;return n.logger=a.PureMVC.debug?a.PureMVC.logMediator:a.PureMVC.logNone,n.mediatorName=e||"Mediator",n.viewComponent=i,n.sleeping=!0,n.subscribedNotifications=[],n.notificationSubscriptionChange=null,n}return o(e,t),Object.defineProperty(e.prototype,"notifications",{get:function(){return this.subscribedNotifications},enumerable:!0,configurable:!0}),e.prototype.getMediatorName=function(){return this.mediatorName},e.prototype.setViewComponent=function(t){this.viewComponent=t},e.prototype.getViewComponent=function(){return this.viewComponent},e.prototype.onRegister=function(t){this.notificationSubscriptionChange=t,this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.notificationSubscriptionChange=null,this.logger(e._consoleArgs,this.constructor.name,"remove")},e.prototype.onSleep=function(){this.sleeping=!0,this.logger(e._consoleArgs,this.constructor.name,"sleep")},e.prototype.onAwake=function(){this.sleeping=!1,this.logger(e._consoleArgs,this.constructor.name,"awake")},Object.defineProperty(e.prototype,"isSleeping",{get:function(){return this.sleeping},enumerable:!0,configurable:!0}),e.prototype.subscribeNotification=function(t){this.changeSubscription(t,this.addSubscription)},e.prototype.unsubscribeNotification=function(t){this.changeSubscription(t,this.removeSubscription)},e.prototype.changeSubscription=function(t,e){var i=this,n=this.notifications.slice(),o=!1;t instanceof Array?t.forEach((function(t){o=e.call(i,t)||o})):o=e.call(this,t),o&&this.notificationSubscriptionChange&&this.notificationSubscriptionChange(this,n)},e.prototype.addSubscription=function(t){return-1===this.notifications.indexOf(t)&&(this.notifications.push(t),!0)},e.prototype.removeSubscription=function(t){var e=this.notifications.indexOf(t);return-1!==e&&(this.notifications.splice(e,1),!0)},e._consoleArgs=["","background: #2A3351","background: #364D98","color: #F4F6FE; background: #3656C1;","background: #364D98","background: #2A3351"],e}(r.Notifier);e.Mediator=s},433:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(e){if(this.proxyMap={},t.instanceMap[e])throw new Error("Model instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeModel()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeModel=function(t){delete this.instanceMap[t]},t.prototype.registerProxy=function(t){t.initializeNotifier(this.multitonKey),this.proxyMap[t.getProxyName()]=t,t.onRegister()},t.prototype.retrieveProxy=function(t){return this.proxyMap[t]},t.prototype.hasProxy=function(t){return void 0!==this.proxyMap[t]},t.prototype.removeProxy=function(t){if(this.proxyMap[t]){var e=this.proxyMap[t];return e.onRemove(),delete this.proxyMap[t],e}return null},t.prototype.initializeModel=function(){},t.instanceMap={},t}();e.Model=i},117:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(222),o=function(){function t(){}return t.prototype.initializeNotifier=function(t){this.multitonKey=t,this.facade=this.getFacade()},t.prototype.sendNotification=function(t){for(var e,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];this.facade&&(e=this.facade).sendNotification.apply(e,[t].concat(i))},t.prototype.getFacade=function(){if(null===this.multitonKey)throw new Error("multitonKey for this Notifier not yet initialized!");return n.Facade.getInstance(this.multitonKey)},t}();e.Notifier=o},413:function(t,e,i){var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});Object.defineProperty(e,"__esModule",{value:!0});var r=i(117),a=i(542),s=function(t){function e(e,i){var n=t.call(this)||this;return n.proxyName=e||"Proxy",n.logger=a.PureMVC.debug?a.PureMVC.logProxy:a.PureMVC.logNone,i&&n.setData(i),n}return o(e,t),e.prototype.getProxyName=function(){return this.proxyName},e.prototype.setData=function(t){this.data=t},e.prototype.getData=function(){return this.data},e.prototype.onRegister=function(){this.logger(e._consoleArgs,this.constructor.name,"register")},e.prototype.onRemove=function(){this.logger(e._consoleArgs,this.constructor.name,"remove")},e._consoleArgs=["","background: #295A34","background: #2FAA4A","color: #102415; background: #27D04C;","background: #2FAA4A","background: #295A34"],e}(r.Notifier);e.Proxy=s},542:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){}return t.logCommand=function(t,e,i){t[0]="%c %c %c "+e+" =>  "+i+" %c %c ",console.log.apply(console,t)},t.logNotification=function(t,e){for(var i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];t[0]="%c %c %c "+e+": args [ "+i+" ] %c %c ",console.log.apply(console,t)},t.logMediator=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logProxy=function(t,e,i){t[0]="%c %c %c "+e+": "+i+" %c %c ",console.log.apply(console,t)},t.logNone=function(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i]},t.debug=!0,t}();e.PureMVC=i},999:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(729),o=function(){function t(e){if(this.mediatorMap={},this.eventEmitter=new n,t.instanceMap[e])throw new Error("View instance for this Multiton key already constructed!");this.multitonKey=e,this.initializeView()}return t.getInstance=function(e){return e?(this.instanceMap[e]||(this.instanceMap[e]=new t(e)),this.instanceMap[e]):null},t.removeView=function(t){delete this.instanceMap[t]},t.prototype.removeObserver=function(t,e,i){this.eventEmitter.removeListener(t,e,i)},t.prototype.registerObserver=function(t,e,i){this.eventEmitter.on(t,e,i)},t.prototype.notifyObservers=function(t){for(var e,i=[],n=1;n<arguments.length;n++)i[n-1]=arguments[n];(e=this.eventEmitter).emit.apply(e,[t,t].concat(i))},t.prototype.registerMediator=function(t){this.mediatorMap[t.getMediatorName()]||(t.initializeNotifier(this.multitonKey),this.mediatorMap[t.getMediatorName()]=t,this.registerObservers(t),t.onRegister(this.onMediatorNotificationSubscriptionChange.bind(this)),t.onAwake())},t.prototype.awakeMediator=function(t){var e=this.mediatorMap[t];if(e){if(!e.isSleeping)return e;this.registerObservers(e),e.onAwake()}return e},t.prototype.retrieveMediator=function(t){return this.mediatorMap[t]},t.prototype.removeMediator=function(t){var e=this.mediatorMap[t];return e&&(this.removeObservers(e),delete this.mediatorMap[t],e.onSleep(),e.onRemove()),e},t.prototype.sleepMediator=function(t){var e=this.mediatorMap[t];if(e){if(e.isSleeping)return e;this.removeObservers(e),e.onSleep()}return e},t.prototype.hasMediator=function(t){return void 0!==this.mediatorMap[t]},t.prototype.initializeView=function(){},t.prototype.removeObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var n=0,o=i;n<o.length;n++){var r=o[n];this.removeObserver(r,t.handleNotification,t)}},t.prototype.registerObservers=function(t,e){var i=e||t.notifications;if(i.length>0)for(var n=0,o=i;n<o.length;n++){var r=o[n];this.registerObserver(r,t.handleNotification,t)}},t.prototype.onMediatorNotificationSubscriptionChange=function(t,e){this.removeObservers(t,e),this.registerObservers(t)},t.instanceMap={},t}();e.View=o},710:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(382);e.Controller=n.Controller;var o=i(222);e.Facade=o.Facade;var r=i(651);e.Mediator=r.Mediator;var a=i(433);e.Model=a.Model;var s=i(117);e.Notifier=s.Notifier;var c=i(413);e.Proxy=c.Proxy;var h=i(542);e.PureMVC=h.PureMVC;var d=i(999);e.View=d.View},729:t=>{var e=Object.prototype.hasOwnProperty,i="~";function n(){}function o(t,e,i){this.fn=t,this.context=e,this.once=i||!1}function r(t,e,n,r,a){if("function"!=typeof n)throw new TypeError("The listener must be a function");var s=new o(n,r||t,a),c=i?i+e:e;return t._events[c]?t._events[c].fn?t._events[c]=[t._events[c],s]:t._events[c].push(s):(t._events[c]=s,t._eventsCount++),t}function a(t,e){0==--t._eventsCount?t._events=new n:delete t._events[e]}function s(){this._events=new n,this._eventsCount=0}Object.create&&(n.prototype=Object.create(null),(new n).__proto__||(i=!1)),s.prototype.eventNames=function(){var t,n,o=[];if(0===this._eventsCount)return o;for(n in t=this._events)e.call(t,n)&&o.push(i?n.slice(1):n);return Object.getOwnPropertySymbols?o.concat(Object.getOwnPropertySymbols(t)):o},s.prototype.listeners=function(t){var e=i?i+t:t,n=this._events[e];if(!n)return[];if(n.fn)return[n.fn];for(var o=0,r=n.length,a=new Array(r);o<r;o++)a[o]=n[o].fn;return a},s.prototype.listenerCount=function(t){var e=i?i+t:t,n=this._events[e];return n?n.fn?1:n.length:0},s.prototype.emit=function(t,e,n,o,r,a){var s=i?i+t:t;if(!this._events[s])return!1;var c,h,d=this._events[s],p=arguments.length;if(d.fn){switch(d.once&&this.removeListener(t,d.fn,void 0,!0),p){case 1:return d.fn.call(d.context),!0;case 2:return d.fn.call(d.context,e),!0;case 3:return d.fn.call(d.context,e,n),!0;case 4:return d.fn.call(d.context,e,n,o),!0;case 5:return d.fn.call(d.context,e,n,o,r),!0;case 6:return d.fn.call(d.context,e,n,o,r,a),!0}for(h=1,c=new Array(p-1);h<p;h++)c[h-1]=arguments[h];d.fn.apply(d.context,c)}else{var l,u=d.length;for(h=0;h<u;h++)switch(d[h].once&&this.removeListener(t,d[h].fn,void 0,!0),p){case 1:d[h].fn.call(d[h].context);break;case 2:d[h].fn.call(d[h].context,e);break;case 3:d[h].fn.call(d[h].context,e,n);break;case 4:d[h].fn.call(d[h].context,e,n,o);break;default:if(!c)for(l=1,c=new Array(p-1);l<p;l++)c[l-1]=arguments[l];d[h].fn.apply(d[h].context,c)}}return!0},s.prototype.on=function(t,e,i){return r(this,t,e,i,!1)},s.prototype.once=function(t,e,i){return r(this,t,e,i,!0)},s.prototype.removeListener=function(t,e,n,o){var r=i?i+t:t;if(!this._events[r])return this;if(!e)return a(this,r),this;var s=this._events[r];if(s.fn)s.fn!==e||o&&!s.once||n&&s.context!==n||a(this,r);else{for(var c=0,h=[],d=s.length;c<d;c++)(s[c].fn!==e||o&&!s[c].once||n&&s[c].context!==n)&&h.push(s[c]);h.length?this._events[r]=1===h.length?h[0]:h:a(this,r)}return this},s.prototype.removeAllListeners=function(t){var e;return t?(e=i?i+t:t,this._events[e]&&a(this,e)):(this._events=new n,this._eventsCount=0),this},s.prototype.off=s.prototype.removeListener,s.prototype.addListener=s.prototype.on,s.prefixed=i,s.EventEmitter=s,t.exports=s},757:(t,e,i)=>{i.r(e),i.d(e,{GameFacade:()=>Qt});var n=i(68);class o{constructor(t,e,i){this.x=t,this.y=e,this.z=i,this.connectedNodes=[],this.occupied=!1}isConnected(t){return void 0!==this.connectedNodes.find((e=>e.x===t.x&&e.y===t.y&&e.z===t.z))}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}equalsPoint(t,e,i){return this.x===t&&this.y===e&&this.z===i}addConnectedNode(t){this.isConnected(t)||this.connectedNodes.push(t)}disconnectedNode(t){const e=this.connectedNodes.findIndex((e=>e.equals(t)));this.connectedNodes.splice(e,1)}}var r=i(917);pc.createScript("GameMapComponent").prototype.initialize=function(){},i(203);const{Mediator:a}=i(710);class s extends a{static get NAME(){return"GameMapMediator"}constructor(t){super(s.NAME),this.subscribeNotification([n.i.CHANGE_SCENE_COMPLETE])}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case n.i.CHANGE_SCENE_COMPLETE:this.facade.retrieveProxy(r.u.NAME).vo,pc.Application.getApplication()}}}var c=i(969);const{GameMediator:h}=i(23),{Facade:d}=i(710);function p(t,e){const i=pc.Application.getApplication(),o=function(t){const e=t.root.findByTag("navigation_floor");let i=[];const n=[];for(const t of e){const e=t.script.NavigationComponent;n.push(e);const i=f(t);e.setGrid(i)}for(const t of n)for(const e of t.connectedComponents){const n=e.script.NavigationComponent;A(t.getGrid(),n.getGrid()),i=i.concat(t.getGrid())}return i}(i),r=function(t,e){const i=[],n=t.root.findByTag("wall");for(const t of n){const n=l(t);i.push(n),u(t,e),t.destroy()}return i}(i,o),a=function(t,e){let i=[];const n=t.root.findByTag("cover");for(const t of n)i=i.concat(g(t,e)),t.destroy();return i}(i,o);console.log("COVER"),console.log(a),d.getInstance(t).registerProxy(new c.h(o,r,a)),d.getInstance(t).registerMediator(new s),d.getInstance(t).sendNotification(n.i.MAP_GRID_CREATED)}function l(t){const e=t.getLocalScale(),i=new pc.Vec3(e.x/2,e.y/2,e.z/2);return new pc.BoundingBox(t.getPosition(),i)}function u(t,e){const i=t.getPosition(),n=t.getLocalScale(),o=Math.round(i.y-.5*n.y),r=Math.round(i.x-.5*n.x),a=Math.round(i.z-.5*n.z);for(let t=r;t<r+n.x;t++)for(let i=a;i<a+n.z;i++){const n=e.findIndex((e=>e.equalsPoint(t,o,i)));if(n>-1){const t=e.splice(n,1);for(const e of t)for(const t of e.connectedNodes)t.disconnectedNode(e)}}}function f(t){const e=[],i=t.getLocalPosition(),n=t.getLocalScale(),r=Math.round(n.x),a=Math.round(n.z),s=Math.round(i.x-r/2),c=i.y,h=Math.round(i.z-a/2);for(let t=h;t<h+a;t++)for(let i=s;i<s+r;i++){const n=new o(i,c,t);e.push(n)}for(const t of e)for(const i of e)(i.equalsPoint(t.x-1,t.y,t.z)||i.equalsPoint(t.x+1,t.y,t.z)||i.equalsPoint(t.x,t.y,t.z-1)||i.equalsPoint(t.x,t.y,t.z+1))&&t.addConnectedNode(i);return e}function A(t,e){for(const i of t)for(const t of e)(t.equalsPoint(i.x-1,i.y,i.z)||t.equalsPoint(i.x+1,i.y,i.z)||t.equalsPoint(i.x,i.y,i.z-1)||t.equalsPoint(i.x,i.y,i.z+1))&&i.addConnectedNode(t)}function g(t,e){const i=[],n=t.getPosition(),o=t.getLocalScale(),r=Math.round(n.y-.5*o.y),a=Math.round(n.x-.5*o.x),s=Math.round(n.z-.5*o.z);for(let t=a;t<a+o.x;t++)for(let n=s;n<s+o.z;n++){const o=new pc.Vec3(t,r,n);i.push(o);const a=e.findIndex((e=>e.equalsPoint(t,r,n)));if(a>-1){const t=e.splice(a,1);for(const e of t)for(const t of e.connectedNodes)t.disconnectedNode(e)}}return i}const{Proxy:E}=i(710);class m extends E{get vo(){return this.getData()}static get NAME(){return"WeaponsProxy"}constructor(t){super(m.NAME,t)}getDamage(t,e){for(const i in this.vo)if(Object.hasOwnProperty.call(this.vo,i)){const n=this.vo[i];if(Object.hasOwnProperty.call(n,t))return n[t].damage[Math.min(e-1,6)]}throw new Error("Cannot find weapon:: "+t)}getWeaponCategory(t){for(const e in this.vo)if(Object.hasOwnProperty.call(this.vo,e)){const i=this.vo[e];if(Object.hasOwnProperty.call(i,t))return e}throw new Error("Cannot category for weapon:: "+t)}}const{Facade:y}=i(710);function N(t,e){y.getInstance(t).registerProxy(new r.u);const i=pc.Application.getApplication();if(i){const e=i.assets.get(40415631).resource;y.getInstance(t).registerProxy(new m(e))}}const{Facade:M}=i(710);function C(t,e,...i){const o=pc.Application.getApplication(),r=i[0];console.log("Changing scene "+r);const a=o.root.findByName("Root"),s=o.scenes.find(r);o.scenes.loadSceneHierarchy(s.url,(function(e,i){e?console.error(e):a&&a.destroy(),M.getInstance(t).sendNotification(n.i.CHANGE_SCENE_COMPLETE,r),M.getInstance(t).sendNotification(n.i.PARSE_GAMEMAP,r)}))}function v(t){let e=t.length,i=void 0,n=-1;for(;0!==e;)n=Math.floor(Math.random()*e),e-=1,i=t[e],t[e]=t[n],t[n]=i;return t}var T=i(958);const{Proxy:_}=i(710),{CombatVO:b}=i(201);class P extends _{get vo(){return this.getData()}static get NAME(){return"CombatProxy"}constructor(t,e){super(P.NAME,new b(t,e))}onRegister(){const t=this.vo.participants;this.participantProxies=new Map;for(const e of t){const t=this.facade.retrieveProxy(T.b.NAME+e);this.participantProxies.set(e,t)}}nextTurn(){const t=this.vo.roundInitiative;if(t&&t.length>0){const e=t.shift();if(this.vo.activeParticipant=e,"end_round"!==e){this.facade.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Turn "+e);const t=this.participantProxies.get(e);t.resetCombatTurnState(),t.isNPC?this.facade.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,e):this.facade.sendNotification(n.i.AWAIT_PLAYER_COMBAT_INPUT,e)}else this.facade.sendNotification(n.i.SHOW_TOAST_MESSAGE,"End round"),setTimeout((()=>{this.facade.sendNotification(n.i.NEXT_COMBAT_ROUND)}),3e3)}}nextRound(){console.log("/////////////////"),console.log("//  New round  //"),console.log("/////////////////");const t=[];for(const[e,i]of this.participantProxies.entries()){const n=i.vo;for(let i=0;i<n.initiative;i++)t.push(e)}if(0===t.length)return void this.facade.sendNotification(n.i.END_COMBAT);t.push("end_round");let e=v(t);for(;"end_round"===e[0];)e=v(e);this.vo.roundInitiative=e}get nextTurnCharacterId(){return this.vo.nextTurnCharacterId}get activeParticipant(){return this.vo.activeParticipant}set activeParticipant(t){this.vo.activeParticipant=t}get participants(){return this.vo.participants}get teams(){return this.vo.teams}removeCharacterFromCombat(t){this.participantProxies.delete(t),this.vo.roundInitiative=this.vo.roundInitiative.filter((e=>e!==t));for(const[e,i]of this.teams.entries()){const o=i.indexOf(t);o>-1&&i.splice(o,1),0===i.length&&this.facade.sendNotification(n.i.END_COMBAT,e)}}}var S=i(448);const{Facade:O}=i(710);function x(t,e,...i){const o=i[0],a=O.getInstance(t);a.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Start Combat"),a.retrieveProxy(r.u.NAME).updateGameStateType(S.gameplayModeTypes.COMBAT);const s=a.retrieveProxy(T.b.NAME+o);a.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"spotted",s);const c=new Map,h=["player"];c.set("player_team",h);const d=[o].concat(s.combatGroup).filter((function(t,e,i){return i.indexOf(t)==e}));c.set("opposing_team",d);const p=h.concat(d),l=a.retrieveProxy(T.b.NAME+"player");for(const t of p)a.sendNotification(n.i.END_MOVEMENT+t),"player"!==t?a.sendNotification(n.i.CHARACTER_LOOK_AT+t,l.currentNode):a.sendNotification(n.i.CHARACTER_LOOK_AT+t,s.currentNode);const u=new P(p,c);a.registerProxy(u),setTimeout((()=>{a.sendNotification(n.i.NEXT_COMBAT_ROUND)}),2e3)}const{Facade:I}=i(710);function w(t,e,...i){const n=I.getInstance(t),o=n.retrieveProxy(r.u.NAME),a=n.retrieveProxy(P.NAME);o.vo.gameplayMode===S.gameplayModeTypes.COMBAT&&a.nextTurn()}const{Facade:R}=i(710);function L(t,e,...i){const o=R.getInstance(t),a=o.retrieveProxy(r.u.NAME),s=o.retrieveProxy(P.NAME);a.vo.gameplayMode===S.gameplayModeTypes.COMBAT&&(s.nextRound(),o.sendNotification(n.i.NEXT_COMBAT_TURN,s.vo.nextTurnCharacterId))}const{Facade:D}=i(710);function G(t,e,...i){setTimeout((()=>{const e=D.getInstance(t),i=e.retrieveProxy(P.NAME);e.sendNotification(n.i.HIDE_WALKABLE_AREA),e.sendNotification(n.i.NEXT_COMBAT_TURN,i.nextTurnCharacterId)}),500)}var k=i(434);class V{static get SUCCESS(){return 0}static get FAILURE(){return 1}static get RUNNING(){return 2}static get ERROR(){return 3}}class H{constructor(t){this.initialize(t)}initialize(t){this.id=function(){for(var t=[],e="0123456789abcdef",i=0;i<36;i++)t[i]=e.substr(Math.floor(16*Math.random()),1);return t[14]="4",t[19]=e.substr(3&t[19]|8,1),t[8]=t[13]=t[18]=t[23]="-",t.join("")}(),this.children=t||[]}execute(t){this._enter(t),t.blackboard.get("isOpen",t.tree.id,this.id)||this._open(t);const e=this._tick(t);return e!==V.RUNNING&&this._close(t),this._exit(t),e}_enter(t){t.enterNode(this),this.enter(t)}_open(t){t.openNode(this),t.blackboard.set("isOpen",!0,t.tree.id,this.id),this.open(t)}_tick(t){return t.tickNode(this),this.tick(t)}_close(t){t.closeNode(this),t.blackboard.set("isOpen",!1,t.tree.id,this.id),this.close(t)}_exit(t){t.exitNode(this),this.exit(t)}enter(t){}open(t){}tick(t){return V.ERROR}close(t){}exit(t){}}class U extends H{tick(t){for(const e of this.children)e.execute(t);return V.SUCCESS}}class B{constructor(){this.initialise()}initialise(){this.baseMemory={},this.treeMemory={}}getTreeMemory(t){return this.treeMemory[t]||(this.treeMemory[t]={nodeMemory:{},openNodes:[]}),this.treeMemory[t]}getNodeMemory(t,e){const i=t.nodeMemory;return i.hasOwnProperty(e)||(i[e]={}),i[e]}getMemory(t,e){var i=this.baseMemory;return t&&(i=this.getTreeMemory(t),e&&(i=this.getNodeMemory(i,e))),i}set(t,e,i,n){this.getMemory(i,n)[t]=e}get(t,e,i){return this.getMemory(e,i)[t]}}class F{constructor(){this.initialise()}initialise(){this.tree=void 0,this.openNodes=[],this.nodeCount=0,this.debug=void 0,this.target=void 0,this.blackboard=void 0}enterNode(t){this.nodeCount++,this.openNodes.push(t)}openNode(t){}tickNode(t){}closeNode(t){this.openNodes.pop()}exitNode(t){}}class z{constructor(t){this.initialise(t)}initialise(t){this.id=t,this.root=void 0}tick(t,e){const i=new F;i.target=t,i.blackboard=e,i.tree=this,this.root.execute(i);const n=e.get("openNodes",this.id)||[],o=i.openNodes.slice(0);let r=0;for(let t=0;t<Math.min(n.length,o.length)&&(r=t+1,n[t]===o[t]);t++);for(let t=n.length-1;t>=r;t--)n[t].close(i);e.set("openNodes",o,this.id),e.set("nodeCount",i.nodeCount,this.id)}}class W{constructor(t){this.id="basicMeleeTree",this.blackboard=new B,this.tree=new z(t),this.initialise()}initialise(){}runCommands(t,e){this.blackboard.set("facade",t,!1,!1),this.blackboard.set("characterId",e,this.tree.id,!1),this.tree.tick(this,this.blackboard)}}class K extends H{tick(t){for(const e of this.children){const i=e.execute(t);if(i!==V.FAILURE)return i}return V.FAILURE}}class Y extends H{tick(t){return t.blackboard.set("target","player",t.tree.id,!1),V.SUCCESS}}class j extends H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1);return e.sendNotification(n.i.RESOLVE_ATTACK,i,o),V.SUCCESS}}class q extends H{tick(t){return t.blackboard.get("facade",!1,!1).sendNotification(n.i.END_COMBAT_TURN),V.SUCCESS}}class X extends H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(T.b.NAME+i).availableMovement>0?V.SUCCESS:V.FAILURE}}class Q extends H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=e.retrieveProxy(T.b.NAME+i).currentNode;return e.retrieveProxy(T.b.NAME+"player").currentNode.connectedNodes.some((t=>t.equals(n)))?V.SUCCESS:V.FAILURE}}class $ extends H{open(t){t.blackboard.set("runningChild",0,t.tree.id,this.id)}tick(t){for(let e=t.blackboard.get("runningChild",t.tree.id,this.id);e<this.children.length;e++){let i=this.children[e].execute(t);if(i!==V.SUCCESS)return i===V.RUNNING&&t.blackboard.set("runningChild",e,t.tree.id,this.id),i}return V.SUCCESS}}class J extends H{tick(t){const e=this.children[0];if(!e)return V.ERROR;let i=e.execute(t);return i==V.SUCCESS?i=V.FAILURE:i==V.FAILURE&&(i=V.SUCCESS),i}}class Z extends H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("target",t.tree.id,!1);return e.retrieveProxy(T.b.NAME+i).isDead?V.SUCCESS:V.FAILURE}}class tt extends H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1),r=e.retrieveProxy(T.b.NAME+i),a=r.currentNode,s=e.retrieveProxy(T.b.NAME+o).currentNode.connectedNodes.filter((t=>!t.occupied));if(s.length>0){let t=s.reduce(((t,e)=>et(a,t)<et(a,e)?t:e));const o=k.q.calculatePath(a,t);if(o&&o.length>0){const a=r.vo;for(;o.length>a.availableMovement;)o.shift();e.sendNotification(n.i.NAVIGATE_ALONG_PATH+i,o),r.currentNode=t}}return r.availableMovement=0,V.SUCCESS}}function et(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)}class it extends H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(T.b.NAME+i).isDead?V.SUCCESS:V.FAILURE}}class nt extends H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(T.b.NAME+i).availableActions>0?V.SUCCESS:V.FAILURE}}class ot extends H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);return e.retrieveProxy(T.b.NAME+i).availableMovement=0,V.SUCCESS}}class rt extends W{constructor(){super("basicMeleeTree")}initialise(){this.tree.root=new U([new K([new $([new Y,new J([new it]),new J([new Z]),new K([new $([new Q,new nt,new Y,new j,new ot]),new $([new X,new Y,new tt])])]),new q])])}}const{Facade:at}=i(710);function st(t,e,...i){const n=i[0],o=at.getInstance(t),r=(o.retrieveProxy(c.h.NAME),o.retrieveProxy(T.b.NAME+n).currentNode);o.retrieveProxy(T.b.NAME+"player").currentNode.connectedNodes.some((t=>t.equals(r))),(new rt).runCommands(o,n)}var ct=i(710);function ht(t,e,...i){const o=ct.Facade.getInstance(t),a=o.retrieveProxy(r.u.NAME),s=i[0];a.currentMode===S.gameplayModeTypes.EXPLORATION?o.sendNotification(n.i.NAVIGATE_TO_NODE+"player",s):a.currentMode===S.gameplayModeTypes.COMBAT&&"player"===o.retrieveProxy(P.NAME).activeParticipant&&o.sendNotification(n.i.COMBAT_NAVIGATE_TO_NODE,"player",s)}const{Facade:dt}=i(710);function pt(t,e,...i){const n=dt.getInstance(t),o=i[0],r=i[1],a=n.retrieveProxy(T.b.NAME+o),s=a.vo,c=k.q.breadthFirstSearch(s.currentNode,s.availableMovement);for(const t of c)t.equals(r)&&lt(n,a,r)}function lt(t,e,i){const o=e.vo,r=k.q.calculatePath(o.currentNode,i);r&&r.length>0&&(o.availableMovement-=r.length-1,e.currentNode=i,t.sendNotification(n.i.HIDE_WALKABLE_AREA),t.sendNotification(n.i.NAVIGATE_ALONG_PATH+o.id,r))}function ut(t,e,...i){const n=i[0],o=pc.Application.getApplication(),r=o.assets.get(40235966),a=o.root.findByName("WorldObjects");for(const t of n){const e=r.resource.instantiate();e.setLocalPosition(t.x,t.y,t.z),a.addChild(e)}}function ft(t,e,...i){const n=pc.Application.getApplication().root.findByTag("walkable_tile");for(const t of n)t.destroy()}function At(t,e,...i){const o=i[0],r=ct.Facade.getInstance(t),a=r.retrieveProxy(T.b.NAME+o).vo,s=k.q.breadthFirstSearch(a.currentNode,a.availableMovement);r.sendNotification(n.i.SHOW_WALKABLE_AREA,s)}function gt(t,e,...i){const o=ct.Facade.getInstance(t),a=i[0],s=i[1];if(o.retrieveProxy(T.b.NAME+a).currentNode=s,o.retrieveProxy(r.u.NAME).currentMode===S.gameplayModeTypes.COMBAT){const t=o.retrieveProxy(P.NAME);t&&("player"===t.activeParticipant?o.sendNotification(n.i.AWAIT_PLAYER_COMBAT_INPUT,a):o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,a))}}function Et(t){const e=t.currentNode;return new pc.Vec3(e.x,e.y+.5*t.height,e.z)}function mt(t,e,...i){const o=ct.Facade.getInstance(t),a=i[0].script.GameCharacterComponent.characterId,s=o.retrieveProxy(r.u.NAME),h=o.retrieveProxy(c.h.NAME),d=o.retrieveProxy(T.b.NAME+a),p=o.retrieveProxy(T.b.NAME+"player"),l=o.retrieveProxy(m.NAME).getWeaponCategory(p.equippedWeapon);if(s.currentMode===S.gameplayModeTypes.EXPLORATION)if("attack"===s.currentAction&&"ranged"===l)Nt(h,p,d)?(o.sendNotification(n.i.RESOLVE_RANGED_ATTACK,"player",a),o.sendNotification(n.i.START_COMBAT,a)):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"No line of sight");else{const t=yt(p,d);t&&o.sendNotification(n.i.NAVIGATE_ALONG_PATH+"player",t)}else if(s.currentMode===S.gameplayModeTypes.COMBAT){const t=o.retrieveProxy(P.NAME);if(!t||"player"!==t.activeParticipant)return;if(p.availableActions<=0)return void o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Out of actions");if("ranged"===l)Nt(h,p,d)?o.sendNotification(n.i.RESOLVE_RANGED_ATTACK,"player",a):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"No line of sight");else if(function(t,e){const i=e.currentNode;return t.currentNode.connectedNodes.some((t=>t.equals(i)))}(p,d))"attack"===s.currentAction&&"attack"===s.currentAction&&o.sendNotification(n.i.RESOLVE_ATTACK,p.id,d.id);else{const t=yt(p,d);t&&t.length-1<=p.vo.availableMovement?"attack"===s.currentAction?o.sendNotification(n.i.MOVE_ALONG_PATH_AND_ATTACK,"player",d.id,t):o.sendNotification(n.i.COMBAT_NAVIGATE_TO_NODE,"player",t.shift()):o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Cannot reach target")}}}function yt(t,e){const i=e.currentNode.connectedNodes.filter((t=>!t.occupied));if(i.length>0){const e=t.currentNode;let n=k.q.calculatePath(e,i[0]);for(let t=1;t<i.length;t++){const o=k.q.calculatePath(e,i[t]);o.length<n.length&&(n=o)}return n}}function Nt(t,e,i){const n=Et(e),o=Et(i);return!t.rayIntersectsWall(n,o)}function Mt(t,e,...i){const o=ct.Facade.getInstance(t),a=i[0],s=i[1],c=o.retrieveProxy(r.u.NAME);c.currentAction===a?c.currentAction="none":c.currentAction=a,o.sendNotification(n.i.TOGGLE_BUTTON,s)}var Ct=i(829);function vt(t,e,...i){const o=ct.Facade.getInstance(t),r=i[0],a=o.retrieveProxy(T.b.NAME+r),s=i[1],c=o.retrieveProxy(T.b.NAME+s);o.sendNotification(n.i.CHARACTER_LOOK_AT+r,c.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+s,a.currentNode);const h=_t(a.skill),d=_t(c.skill),p=o.retrieveProxy(m.NAME);if(a.availableActions-=1,h===d)o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`Attack tied(${h}/${d})`);else if(h>d){const t=Tt(h,d),e=p.getDamage(a.equippedWeapon,t);c.applyDamage(e),o.sendNotification(n.i.DISPLAY_ATTACK+r),c.isDead?(o.sendNotification(n.i.DISPLAY_DEATH+s),o.sendNotification(n.i.KILL_GAME_CHARACTER,s)):(o.sendNotification(n.i.DISPLAY_HIT+s),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${r} damages ${s} for ${e}`))}else{const t="melee"===p.getWeaponCategory(c.equippedWeapon),e=Tt(d,h),i=t?c.equippedWeapon:Ct.j.UNARMED,l=p.getDamage(i,e);a.applyDamage(l),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${s} damages ${r} for ${l}`),o.sendNotification(n.i.DISPLAY_ATTACK+s),a.isDead?(o.sendNotification(n.i.DISPLAY_DEATH+r),o.sendNotification(n.i.KILL_GAME_CHARACTER,r)):o.sendNotification(n.i.DISPLAY_HIT+r)}const l=o.retrieveProxy(P.NAME);l&&"player"!==l.activeParticipant&&setTimeout((()=>{o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,r)}),1500)}function Tt(t,e){return t-e}function _t(t){return t+bt()+bt()}function bt(){return Math.round(6*Math.random())}var Pt=i(321);const{Facade:St}=i(710);function Ot(t,e,...i){const o=St.getInstance(t),r=i[0],a=i[1],s=i[2];o.retrieveProxy(T.b.NAME+r).useMovement(s.length-1);const c=o.retrieveMediator(Pt.y.NAME+r);o.sendNotification(n.i.HIDE_WALKABLE_AREA),c.handleNavigateAlongPathWithPromise(s).then((()=>{o.sendNotification(n.i.RESOLVE_ATTACK,r,a)}))}function xt(t,e,...i){const o=ct.Facade.getInstance(t),r=i[0],a=o.retrieveProxy(T.b.NAME+r);o.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"death",a),a&&(a.currentNode.occupied=!1);const s=o.retrieveProxy(P.NAME);s&&s.removeCharacterFromCombat(r)}const{Facade:It}=i(710);function wt(t,e,...i){const o=i[0],a=It.getInstance(t);a.hasMediator(P.NAME)&&a.removeMediator(P.NAME),a.sendNotification(n.i.HIDE_WALKABLE_AREA),a.retrieveProxy(r.u.NAME).updateGameStateType(S.gameplayModeTypes.EXPLORATION),"player_team"===o?a.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Game Over"):a.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Victory")}var Rt=i(316);class Lt extends H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1);return e.sendNotification(n.i.RESOLVE_RANGED_ATTACK,i,o),V.SUCCESS}}class Dt extends H{constructor(t,e){super([]),this.minDistance=t,this.maxDistance=e}tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1),r=e.retrieveProxy(T.b.NAME+i),a=r.currentNode,s=e.retrieveProxy(T.b.NAME+o).currentNode,c=Math.pow(this.minDistance,2),h=Math.pow(this.maxDistance,2),d=r.availableMovement;r.availableMovement=0;const p=Gt(s,a);if(p>=c&&p<=h)return V.FAILURE;{const t=k.q.breadthFirstSearch(a,d);if(t.length>0){if(p<c){let o=t.reduce(((t,e)=>Gt(s,t)>Gt(s,e)?t:e));const c=k.q.calculatePath(a,o);c&&c.length>0&&(e.sendNotification(n.i.NAVIGATE_ALONG_PATH+i,c),r.currentNode=o)}else{let o=t.reduce(((t,e)=>Gt(s,t)<Gt(s,e)?t:e));const c=k.q.calculatePath(a,o);c&&c.length>0&&(e.sendNotification(n.i.NAVIGATE_ALONG_PATH+i,c),r.currentNode=o)}return V.SUCCESS}return V.FAILURE}}}function Gt(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)+Math.pow(e.z-t.z,2)}class kt extends H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1);setTimeout((()=>{setTimeout((()=>{e.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,i)}),500)}),500)}}class Vt extends H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),n=t.blackboard.get("target",t.tree.id,!1),o=e.retrieveProxy(T.b.NAME+i),r=(o.currentNode,e.retrieveProxy(T.b.NAME+n)),a=(r.currentNode,e.retrieveProxy(c.h.NAME)),s=Et(o),h=Et(r);return a.rayIntersectsWall(s,h)?(console.log("Where'd you ever go?"),V.FAILURE):(console.log("I can see you"),V.SUCCESS)}}class Ht extends H{tick(t){const e=t.blackboard.get("facade",!1,!1),i=t.blackboard.get("characterId",t.tree.id,!1),o=t.blackboard.get("target",t.tree.id,!1),r=e.retrieveProxy(T.b.NAME+i),a=r.currentNode,s=e.retrieveProxy(T.b.NAME+o),h=s.currentNode.connectedNodes,d=e.retrieveProxy(c.h.NAME),p=h.filter((t=>!t.occupied));if(p.length>0){let t=p.reduce(((t,e)=>Ut(a,t)<Ut(a,e)?t:e));const o=k.q.calculatePath(a,t);if(o&&o.length>0){const a=r.vo;for(;o.length>a.availableMovement;)o.shift();const c=Et(s);let h=0;for(let t=o.length-1;t>=0;t--){const e=o[t],i=new pc.Vec3(e.x,e.y+.5*r.height,e.z);if(!d.rayIntersectsWall(i,c)){h=t;break}}o.splice(0,h),e.sendNotification(n.i.NAVIGATE_ALONG_PATH+i,o),r.currentNode=t}}return r.availableMovement=0,V.SUCCESS}}function Ut(t,e){return Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)}class Bt extends W{constructor(){super("basicRangedTree")}initialise(){this.tree.root=new U([new K([new $([new Y,new J([new it]),new J([new Z]),new K([new $([new X,new J([new Vt]),new Ht]),new $([new X,new K([new Dt(9,12),new kt])]),new $([new nt,new Vt,new Lt])])]),new q])])}}function Ft(t,e,...i){const n=ct.Facade.getInstance(t),o=i[0];switch(n.retrieveProxy(T.b.NAME+o).botBehaviour){case Rt.r.BASIC_MELEE:(new rt).runCommands(n,o);break;case Rt.r.BASIC_RANGED:(new Bt).runCommands(n,o)}}var zt=i(852);function Wt(t,e,...i){const o=ct.Facade.getInstance(t);let r=0,a=0;const s=i[0],h=o.retrieveProxy(T.b.NAME+s),d=h.currentNode;let p=i[1],l=o.retrieveProxy(T.b.NAME+p);const u=l.currentNode;o.sendNotification(n.i.CHARACTER_LOOK_AT+s,l.currentNode),o.sendNotification(n.i.CHARACTER_LOOK_AT+p,h.currentNode),r+=Kt(h.skill),a+=Kt(l.skill);const f=o.retrieveProxy(m.NAME);o.retrieveProxy(c.h.NAME).isInCover(new pc.Vec3(u.x,u.y,u.z),new pc.Vec3(d.x,d.y,d.z))&&(a+=2);const A=o.retrieveMediator(zt.N.NAME),g=new pc.Vec3(h.currentNode.x,h.currentNode.y+1,h.currentNode.z),E=new pc.Vec3(l.currentNode.x,l.currentNode.y+1,l.currentNode.z);h.availableActions-=1,o.sendNotification(n.i.DISPLAY_ATTACK+s),A.createProjectile("crossbow_bolt",g,E).then((()=>{if(r>a){const t=o.retrieveProxy(P.NAME);if(t){const e=l.currentNode.connectedNodes,i=[p];for(const n of t.participants){const t=o.retrieveProxy(T.b.NAME+n);!t.isDead&&e.some((e=>e.equals(t.currentNode)))&&i.push(n)}p=i[Math.floor(Math.random()*i.length)],l=o.retrieveProxy(T.b.NAME+p)}const e=r-a,i=f.getDamage(h.equippedWeapon,e);l.applyDamage(i),l.isDead?(o.sendNotification(n.i.DISPLAY_DEATH+p),o.sendNotification(n.i.KILL_GAME_CHARACTER,p)):(o.sendNotification(n.i.DISPLAY_HIT+p),o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${s} damages ${p} for ${i}`))}else o.sendNotification(n.i.DISPLAY_FLOATING_STATUS,"dodge",l);const t=o.retrieveProxy(P.NAME);t&&"player"!==t.activeParticipant&&setTimeout((()=>{o.sendNotification(n.i.DETERMINE_NEXT_ENEMY_ACTION,s)}),500)}))}function Kt(t){return t+Yt()+Yt()}function Yt(){return Math.round(6*Math.random())}const{Facade:jt}=i(710);function qt(t,e,...i){const o=jt.getInstance(t);if(o.retrieveProxy(r.u.NAME).currentMode===S.gameplayModeTypes.COMBAT&&"player"!==o.retrieveProxy(P.NAME).activeParticipant)return void o.sendNotification(n.i.SHOW_TOAST_MESSAGE,"Must change weapon on your turn");const a=i[0],s=i[1];o.retrieveProxy(T.b.NAME+a).equippedWeapon=s,o.sendNotification(n.i.SHOW_TOAST_MESSAGE,`${a} equips ${s}`)}const{Facade:Xt}=i(710);class Qt extends Xt{static getInstance(t){return Xt.instanceMap[t]||(Xt.instanceMap[t]=new Qt(t)),Xt.instanceMap[t]}static get KEY(){return"Cacogen"}static get NAME(){return"CacogenFacade"}static get STARTUP(){return Qt.NAME+"StartUp"}startup(t){this.sendNotification(Qt.STARTUP,t)}sendNotification(t,...e){super.sendNotification(t,...e)}initializeController(){super.initializeController(),this.registerCommand(Qt.STARTUP,N),this.registerCommand(n.i.CHANGE_SCENE,C),this.registerCommand(n.i.PARSE_GAMEMAP,p),this.registerCommand(n.i.START_COMBAT,x),this.registerCommand(n.i.NEXT_COMBAT_TURN,w),this.registerCommand(n.i.NEXT_COMBAT_ROUND,L),this.registerCommand(n.i.END_COMBAT_TURN,G),this.registerCommand(n.i.ENEMY_TURN,st),this.registerCommand(n.i.SELECTED_NODE,ht),this.registerCommand(n.i.COMBAT_NAVIGATE_TO_NODE,pt),this.registerCommand(n.i.DETERMINE_NEXT_ENEMY_ACTION,Ft),this.registerCommand(n.i.SHOW_WALKABLE_AREA,ut),this.registerCommand(n.i.HIDE_WALKABLE_AREA,ft),this.registerCommand(n.i.AWAIT_PLAYER_COMBAT_INPUT,At),this.registerCommand(n.i.FINISHED_MOVE,gt),this.registerCommand(n.i.SELECT_GAME_CHARACTER,mt),this.registerCommand(n.i.SET_PLAYER_ACTION,Mt),this.registerCommand(n.i.RESOLVE_ATTACK,vt),this.registerCommand(n.i.RESOLVE_RANGED_ATTACK,Wt),this.registerCommand(n.i.MOVE_ALONG_PATH_AND_ATTACK,Ot),this.registerCommand(n.i.KILL_GAME_CHARACTER,xt),this.registerCommand(n.i.END_COMBAT,wt),this.registerCommand(n.i.EQUIP_WEAPON,qt)}}},316:(t,e,i)=>{i.d(e,{r:()=>n,_:()=>o});class n{static get NONE(){return 0}static get BASIC_MELEE(){return 1}static get BASIC_RANGED(){return 2}}const o=[{NONE:n.NONE},{BASIC_MELEE:n.BASIC_MELEE},{BASIC_RANGED:n.BASIC_RANGED}]},68:(t,e,i)=>{i.d(e,{i:()=>n});class n{static get CHANGE_SCENE(){return"CHANGE_SCENE"}static get CHANGE_SCENE_COMPLETE(){return"CHANGE_SCENE_COMPLETE"}static get APP_INITIALISED(){return"APP_INITIALISED"}static get PARSE_GAMEMAP(){return"PARSE_GAMEMAP"}static get MAP_GRID_CREATED(){return"MAP_GRID_CREATED"}static get NAVIGATE_TO_NODE(){return"NAVIGATE_TO_NODE"}static get COMBAT_NAVIGATE_TO_NODE(){return"COMBAT_NAVIGATE_TO_NODE"}static get SET_CAMERA_TARGET(){return"SET_CAMERA_TARGET"}static get INPUT_DRAG_MOUSE(){return"INPUT_DRAG_MOUSE"}static get MOVED_TO_NODE(){return"MOVED_TO_NODE"}static get FINISHED_MOVE(){return"FINISHED_MOVE"}static get START_COMBAT(){return"START_COMBAT"}static get SHOW_TOAST_MESSAGE(){return"SHOW_TOAST_MESSAGE"}static get NEXT_COMBAT_TURN(){return"NEXT_COMBAT_TURN"}static get NEXT_COMBAT_ROUND(){return"NEXT_COMBAT_ROUND"}static get END_COMBAT(){return"END_COMBAT"}static get END_COMBAT_TURN(){return"END_COMBAT_TURN"}static get ENEMY_TURN(){return"ENEMY_TURN"}static get SELECTED_NODE(){return"SELECTED_NODE"}static get DETERMINE_NEXT_ENEMY_ACTION(){return"DETERMINE_NEXT_ENEMY_ACTION"}static get NAVIGATE_ALONG_PATH(){return"NAVIGATE_ALONG_PATH"}static get SHOW_WALKABLE_AREA(){return"SHOW_WALKABLE_AREA"}static get HIDE_WALKABLE_AREA(){return"HIDE_WALKABLE_AREA"}static get END_MOVEMENT(){return"END_MOVEMENT"}static get AWAIT_PLAYER_COMBAT_INPUT(){return"AWAIT_PLAYER_COMBAT_INPUT"}static get SET_CHARACTER_TO_NODE(){return"SET_CHARACTER_TO_NODE"}static get SELECT_GAME_CHARACTER(){return"SELECT_GAME_CHARACTER"}static get SET_PLAYER_ACTION(){return"SET_PLAYER_ACTION"}static get TOGGLE_BUTTON(){return"TOGGLE_BUTTON"}static get USE_PLAYER_ACTION(){return"USE_PLAYER_ACTION"}static get RESOLVE_ATTACK(){return"RESOLVE_ATTACK"}static get RESOLVE_RANGED_ATTACK(){return"RESOLVE_RANGED_ATTACK"}static get MOVE_ALONG_PATH_AND_ATTACK(){return"MOVE_ALONG_PATH_AND_ATTACK"}static get UPDATE_STAMINA(){return"UPDATE_STAMINA"}static get DISPLAY_DEATH(){return"DISPLAY_DEATH"}static get DISPLAY_ATTACK(){return"DISPLAY_ATTACK"}static get DISPLAY_HIT(){return"DISPLAY_HIT"}static get KILL_GAME_CHARACTER(){return"KILL_GAME_CHARACTER"}static get CHARACTER_LOOK_AT(){return"CHARACTER_LOOK_AT"}static get CHANGE_STAMINA(){return"CHANGE_STAMINA"}static get EQUIP_WEAPON(){return"EQUIP_WEAPON"}static get USE_ACTION(){return"USE_ACTION"}static get DISPLAY_FLOATING_STATUS(){return"DISPLAY_FLOATING_STATUS"}}},829:(t,e,i)=>{i.d(e,{j:()=>n,E:()=>o});class n{static get SWORD(){return"sword"}static get AXE(){return"axe"}static get KNIFE(){return"knife"}static get STAFF(){return"staff"}static get HAMMER(){return"hammer"}static get SPEAR(){return"spear"}static get MACE(){return"mace"}static get POLEARM(){return"polearm"}static get MAUL(){return"maul"}static get GREATSWORD(){return"greatsword"}static get CLUB(){return"club"}static get UNARMED(){return"unarmed"}static get SHIELD(){return"shield"}static get FUSIL(){return"fusil"}static get BOW(){return"bow"}static get CROSSBOW(){return"crossbow"}static get PISTOLET(){return"pistolet"}}const o=Object.entries(Object.getOwnPropertyDescriptors(n)).filter((([t,e])=>"function"==typeof e.get)).map((([t])=>({[t]:n[t]})))},201:(t,e,i)=>{i.r(e),i.d(e,{CombatVO:()=>n});class n{constructor(t,e){this.participants=t,this.roundInitiative=[],this.activeParticipant=void 0,this.teams=e}get nextTurnCharacterId(){return this.roundInitiative[0]}}},958:(t,e,i)=>{i.d(e,{b:()=>a});var n=i(68);const{Proxy:o}=i(710),{GameCharacterVO:r}=i(940);class a extends o{get vo(){return this.getData()}static get NAME(){return"GameCharacterProxy_"}constructor(t){super(a.NAME+t.id,new r(t))}resetCombatTurnState(){this.vo.availableMovement=this.vo.maxMovement,this.vo.availableActions=this.vo.maxActionsPerTurn}useMovement(t){this.vo.availableMovement-=t}applyDamage(t){this.vo.currentStamina-=t,this.vo.currentStamina=Math.max(0,this.vo.currentStamina),this.vo.currentStamina>0?this.facade.sendNotification(n.i.UPDATE_STAMINA+this.id,this.vo.currentStamina,this.vo.maximumStamina):console.log(this.id+" died"),this.facade.sendNotification(n.i.CHANGE_STAMINA+this.id,this.vo.currentStamina,this.vo.maxStamina)}get id(){return this.vo.id}get currentNode(){return this.vo.currentNode}set currentNode(t){this.vo.currentNode&&(this.vo.currentNode.occupied=!1),this.vo.currentNode=t,this.vo.currentNode.occupied=!0}get combatGroup(){return this.vo.combatGroup}get isNPC(){return this.vo.isNPC}get availableMovement(){return this.vo.availableMovement}set availableMovement(t){this.vo.availableMovement=t}get availableActions(){return this.vo.availableActions}set availableActions(t){this.vo.availableActions=t,this.facade.sendNotification(n.i.USE_ACTION+this.id,this.availableActions,this.maxActionsPerTurn)}get maxActionsPerTurn(){return this.vo.maxActionsPerTurn}get skill(){return this.vo.skill}get currentStamina(){return this.vo.currentStamina}get currentLuck(){return this.vo.currentStamina}get isDead(){return this.vo.currentStamina<=0}get botBehaviour(){return this.vo.botBehaviour}get equippedWeapon(){return this.vo.equippedWeapon}set equippedWeapon(t){this.vo.equippedWeapon=t}get height(){return this.vo.height}}},940:(t,e,i)=>{i.r(e),i.d(e,{GameCharacterVO:()=>n});class n{constructor(t){this.id=t.id,this.isNPC=t.isNPC,this.combatGroup=t.combatGroup||[],this.currentNode=void 0,this.initiative=t.initiative||2,this.maxMovement=t.maxMovement||6,this.height=t.height||1.8,this.maxActionsPerTurn=1,this.availableActions=this.maxActionsPerTurn,this.availableMovement=this.maxMovement,this.skill=t.skill||1,this.maxStamina=t.maxStamina||1,this.currentStamina=this.maxStamina,this.maxLuck=t.maxLuck||1,this.currentLuck=this.maxLuck,this.advancedSkills=t.advancedSkills||{},this.botBehaviour=t.botBehaviour||0,this.equippedWeapon=t.equippedWeapon||"unarmed"}}},969:(t,e,i)=>{i.d(e,{h:()=>a});var n=i(434);const{Proxy:o}=i(710),{GameMapVO:r}=i(438);class a extends o{get vo(){return this.getData()}static get NAME(){return"GameMapProxy"}constructor(t,e,i){super(a.NAME),this.setData({mapGrid:t,wallBoundingBoxes:e,cover:i})}onRegister(){}findNearestNode(t){const e=this.vo.mapGrid;let i=e[0],o=n.q.getDistSquared(i,t);for(const r of e){const e=n.q.getDistSquared(r,t);e<o&&(o=e,i=r)}return i}rayIntersectsWall(t,e){const i=t.distance(e),n=e.clone().sub(t.clone()).normalize(),o=new pc.Ray(t,n),r=this.vo.wallBoundingBoxes;for(const e of r){const n=new pc.Vec3;if(e.intersectsRay(o,n)&&n.distance(t)<i)return!0}return!1}get cover(){return this.vo.cover}isInCover(t,e){const i=[],n=function(t){const e=[];return e.push(new pc.Vec3(t.x,t.y,t.z-1)),e.push(new pc.Vec3(t.x+1,t.y,t.z)),e.push(new pc.Vec3(t.x-1,t.y,t.z)),e.push(new pc.Vec3(t.x,t.y,t.z+1)),e}(t);for(const t of n)this.cover.find((e=>t.equals(e)))&&i.push(t);if(i.length>0){const n=t.distance(e);for(const t of i)if(t.distance(e)<n)return!0;return!1}return!1}}},438:(t,e,i)=>{i.r(e),i.d(e,{GameMapVO:()=>n});class n{constructor(){this.mapGrid=[]}}},434:(t,e,i)=>{i.d(e,{q:()=>o});class n{constructor(){this.data=[]}push(t,e=0){return this.data.push({value:t,priority:e})}pop(){let t=0,e=1/0;for(let i=0;i<this.data.length;i++){let n=this.data[i].priority;Math.min(e,n)===n&&(e=n,t=i)}return this.data.splice(t,1)[0].value}size(){return this.data.length}empty(){return 0===this.data.length}}class o{static breadthFirstSearch(t,e){let i=[];const n=[];i.push(t);const o=new Map;o.set(t,t);let r=0;for(;i.length>0&&r<e;){const t=[];for(const e of i)for(let i=0;i<e.connectedNodes.length;i++){const r=e.connectedNodes[i];r.occupied||o.has(r)||(t.push(r),n.push(r),o.set(r,e))}i=t,r++}return n}static calculatePath(t,e){const i=new n;i.push(t,0);const o=new Map,r=new Map;for(o.set(t,t),r.set(t,0);!i.empty();){const t=i.pop();if(t.equals(e))break;for(let n=0;n<t.connectedNodes.length;n++){const a=t.connectedNodes[n],s=r.get(t)+1;if(!a.occupied&&(!r.has(a)||s<r.get(a))){r.set(a,s);let n=s+this.heuristic(a,e);i.push(a,n),o.set(a,t)}}}let a=e,s=!1;const c=[];for(c.push(a);!a.equals(t)&&!s;)o.has(a)||!a.equals(e)?(a=o.get(a),c.push(a)):s=!0;return s?void 0:c}static getDistSquared(t,e){return(t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y)+(t.z-e.z)*(t.z-e.z)}static heuristic(t,e){return Math.abs(t.x-e.x)+Math.abs(t.y-e.y)+Math.abs(t.z-e.z)}}},917:(t,e,i)=>{i.d(e,{u:()=>r});const{Proxy:n}=i(710),{GameStateVO:o}=i(448);class r extends n{get vo(){return this.getData()}static get NAME(){return"GameStateProxy"}constructor(){super(r.NAME,new o)}updateGameStateType(t){this.vo.gameplayMode=t}get currentMode(){return this.vo.gameplayMode}get currentAction(){return this.vo.selectedAction}set currentAction(t){this.vo.selectedAction=t}}},448:(t,e,i)=>{i.r(e),i.d(e,{gameplayModeTypes:()=>n,GameStateVO:()=>o});const n={EXPLORATION:"EXPLORATION",COMBAT:"COMBAT",DIALOGUE:"DIALOGUE"};class o{constructor(){this.gameplayMode=n.EXPLORATION,this.selectedAction="none"}}},23:(t,e,i)=>{i.r(e),i.d(e,{GameMediator:()=>r});var n=i(68);const{Mediator:o}=i(710);class r extends o{static get NAME(){return"GameMediator"}constructor(){console.log("Register mediator - GameMediator");const t=pc.Application.getApplication();super(r.NAME,t),this.subscribeNotification(n.i.APP_INITIALISED)}handleNotification(t,...e){switch(t){case n.i.APP_INITIALISED:}}}},442:(t,e,i)=>{var n=i(710),o=i(757),r=i(958),a=i(321),s=i(316),c=i(829);const h=pc.createScript("GameCharacterComponent");h.attributes.add("characterId",{type:"string",title:"Character Id"}),h.attributes.add("characterSpeed",{type:"number",title:"Character Speed",default:4}),h.attributes.add("characterHeight",{type:"number",title:"Character Height",default:1.8}),h.attributes.add("isNPC",{type:"boolean",title:"is NPC",default:!0}),h.attributes.add("statsOverrides",{type:"json",title:"Stats Overrides",schema:[{name:"skill",title:"Skill",type:"number",default:1},{name:"maxStamina",title:"Stamina",type:"number",default:1},{name:"maxLuck",title:"Luck",type:"number",default:1},{name:"initiative",title:"Initiative",type:"number",default:2},{name:"maxMovement",title:"Movement",type:"number",default:6}]}),h.attributes.add("advancedSkills",{type:"json",title:"Advanced Skills",schema:[{name:"skillName",title:"Skill Name",type:"string"},{name:"skillValue",title:"Skill Value",type:"string"}],array:!0}),h.attributes.add("combatGroupName",{type:"string",title:"Combat Group Name"}),h.attributes.add("botBehaviour",{type:"number",title:"Bot Behaviour",enum:s._,default:0}),h.attributes.add("equippedWeapon",{type:"string",title:"Equipped Weapon",enum:c.E,default:"unarmed"}),h.prototype.preregisterNotification=function(t){this.preregisteredNotifications||(this.preregisteredNotifications=[]),this.preregisteredNotifications.push(t)},h.prototype.postInitialize=function(){this.movementPath=[],this.facade=n.Facade.getInstance(o.GameFacade.KEY),this.facade.hasMediator(a.y.NAME+this.characterId)&&this.facade.removeMediator(a.y.NAME+this.characterId),this.preregisteredNotifications||(this.preregisteredNotifications=[]);const t=this.statsOverrides,e={id:this.characterId,isNPC:this.isNPC,height:this.characterHeight,advancedSkills:this.advancedSkills,equippedWeapon:this.equippedWeapon,...t,botBehaviour:this.botBehaviour};if(this.combatGroupName&&""!==this.combatGroupName){const t=this.app.root.findByTag("combatGroup:"+this.combatGroupName),i=[];for(const e of t)if(e.enabled){const t=e.script.GameCharacterComponent.characterId;i.push(t)}e.combatGroup=i}this.facade.registerProxy(new r.b(e)),this.facade.registerMediator(new a.y(this.characterId,this.entity,this.preregisteredNotifications)),this.entity.animation.play("idle.glb",.1)},h.prototype.setPath=function(t){this.movementPath&&this.movementPath.length>0&&this.entity.fire("cancelMove"),this.movementPath=t,this.entity.animation.loop=!0,this.entity.animation.play("walk.glb",.1)},h.prototype.stopMovement=function(t){this.movementPath=[],this.entity.setLocalPosition(t.x,t.y,t.z),this.entity.animation.loop=!0,this.entity.animation.play("idle.glb",.1)},h.prototype.update=function(t){this.moveAlongPath(t)},h.prototype.moveAlongPath=function(t){if(this.movementPath.length>0){const e=this.movementPath[this.movementPath.length-1],i=this.entity.getLocalPosition(),n=new pc.Vec3,o=new pc.Vec3(t*this.characterSpeed,t*this.characterSpeed,t*this.characterSpeed),r=new pc.Vec3(e.x,e.y,e.z);if(n.sub2(r,i),n.normalize(),n.mul(o),n.add(i),this.entity.setLocalPosition(n),this.lookAtPoint(e),n.distance(r)<=t*this.characterSpeed){const t=this.movementPath.pop();0===this.movementPath.length&&(this.entity.fire("finishedMove",t),this.entity.animation.loop=!0,this.entity.animation.play("idle.glb",.1)),this.entity.fire("updateCurrentNode",t)}}},h.prototype.lookAtPoint=function(t){const e=this.entity.getLocalPosition(),i=t.x-e.x,n=t.z-e.z,o=180*Math.atan2(i,n)/Math.PI;this.entity.setEulerAngles(0,o,0)},h.prototype.animateDeath=function(){this.entity.animation.loop=!1,this.entity.animation.play("die.glb",.1)},h.prototype.animateHit=function(){this.entity.animation.loop=!1,this.entity.animation.play("hit.glb",.1)},h.prototype.animateAttack=function(){this.entity.animation.loop=!1,this.entity.animation.play("attack.glb",.1)}},321:(t,e,i)=>{i.d(e,{y:()=>c});var n=i(68),o=i(969),r=(i(917),i(442),i(434)),a=i(958);i(448);const{Mediator:s}=i(710);class c extends s{static get NAME(){return"GameCharacterMediator_"}constructor(t,e,i){super(c.NAME+t),this.id=t;let o=[n.i.CHANGE_SCENE_COMPLETE,n.i.NAVIGATE_TO_NODE+this.id,n.i.NAVIGATE_ALONG_PATH+this.id,n.i.SET_CHARACTER_TO_NODE+this.id,n.i.DISPLAY_DEATH+this.id,n.i.DISPLAY_ATTACK+this.id,n.i.DISPLAY_HIT+this.id,n.i.CHARACTER_LOOK_AT+this.id,n.i.START_COMBAT,n.i.MAP_GRID_CREATED];o=o.concat(i),this.subscribeNotification(o),this.viewComponent=e,this.viewComponent.on("updateCurrentNode",this.updateCurrentNode,this),this.viewComponent.on("finishedMove",this.handleFinishedMode,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...e){this.viewComponent&&this.viewComponent.fire(t,this.id,...e);for(const i in this.viewComponent.script)if(Object.hasOwnProperty.call(this.viewComponent.script,i)){const n=this.viewComponent.script[i];"function"==typeof n.handleNotification&&n.handleNotification(t,this.id,...e)}switch(t){case n.i.START_COMBAT:this.handleStartCombat();break;case n.i.MAP_GRID_CREATED:const t=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(a.b.NAME+this.id);i.currentNode||(i.currentNode=t.findNearestNode(this.viewComponent.getLocalPosition()));break;case n.i.NAVIGATE_TO_NODE+this.id:this.handleNavigateToNode(e[0]);break;case n.i.NAVIGATE_ALONG_PATH+this.id:this.handleNavigateAlongPath(e[0]);break;case n.i.SET_CHARACTER_TO_NODE+this.id:this.handleSetCharacterToNode(e[0]);break;case n.i.CHARACTER_LOOK_AT+this.id:const r=e[0];this.viewComponent.script.GameCharacterComponent.lookAtPoint(r);break;case n.i.DISPLAY_DEATH+this.id:const s=this.viewComponent.findByName("Hitbox");s&&s.fire("stopListening"),this.viewComponent.script.GameCharacterComponent.animateDeath();break;case n.i.DISPLAY_ATTACK+this.id:this.viewComponent.script.GameCharacterComponent.animateAttack();break;case n.i.DISPLAY_HIT+this.id:this.viewComponent.script.GameCharacterComponent.animateHit()}}handleNavigateToNode(t){const e=this.facade.retrieveProxy(o.h.NAME),i=this.facade.retrieveProxy(a.b.NAME+this.id);i.currentNode||(i.currentNode=e.findNearestNode(this.viewComponent.getLocalPosition()));const n=r.q.calculatePath(i.currentNode,t);n&&n.length>0&&(this.viewComponent.script.GameCharacterComponent.setPath(n),i.currentNode=t)}handleNavigateAlongPath(t){this.viewComponent.script.GameCharacterComponent.setPath(t)}handleNavigateAlongPathWithPromise(t){return this.viewComponent.script.GameCharacterComponent.setPath(t),new Promise(((t,e)=>{this.viewComponent.on("finishedMove",(()=>{t()})),this.viewComponent.on("cancelMove",(()=>{e()}))}))}updateCurrentNode(t){this.facade.sendNotification(n.i.MOVED_TO_NODE+this.id,t)}handleFinishedMode(t){setTimeout((()=>{this.facade.sendNotification(n.i.FINISHED_MOVE,this.id,t)}),500)}lookForCharacter(t,e){for(const i of this.searchArea)i.equals(e)&&(this.viewComponent.script.GameCharacterComponent.lookAtPoint(e),this.facade.sendNotification(n.i.START_COMBAT,this.viewComponent,[t]))}handleStartCombat(){this.facade.retrieveProxy(a.b.NAME+this.id).vo}handleSetCharacterToNode(t){this.facade.retrieveProxy(a.b.NAME+this.id).currentNode=t,this.viewComponent.script.GameCharacterComponent.stopMovement(t)}}},203:(t,e,i)=>{var n=i(710),o=i(757),r=i(68);i(917);const{Mediator:a}=i(710);class s extends a{static get NAME(){return"InputLayerMediator"}constructor(t){super(s.NAME),this.subscribeNotification([r.i.CHANGE_SCENE_COMPLETE]),this.viewComponent=t,this.viewComponent.on("picker:gameCharacter",this.handlePickerGameCharacter,this),this.viewComponent.on("picker:navigation",this.handlePickerNavigation,this),this.viewComponent.on("scrolling",this.handleScrolling,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case r.i.CHANGE_SCENE_COMPLETE:}}handlePickerGameCharacter(t){this.facade.sendNotification(r.i.SELECT_GAME_CHARACTER,t)}handlePickerNavigation(t){this.facade.sendNotification(r.i.SELECTED_NODE,t)}handleScrolling(t){this.facade.sendNotification(r.i.INPUT_DRAG_MOUSE,t)}}const c=pc.createScript("GameCamera");c.attributes.add("distance",{type:"number",default:100,title:"Distance"}),c.attributes.add("dragMultiplierX",{type:"number",default:.5,title:"Drag Multiplier"}),c.attributes.add("dragMultiplierY",{type:"number",default:.5,title:"Drag Multiplier"}),c.attributes.add("verticalScroll",{type:"boolean",default:!1,title:"Vertical Scroll"}),c.attributes.add("minCameraHeight",{type:"number",default:5,title:"Min Camera Height"}),c.attributes.add("maxCameraHeight",{type:"number",default:100,title:"Max Camera Height"}),c.prototype.initialize=function(){this.facade=n.Facade.getInstance(o.GameFacade.KEY),this.facade.hasMediator(d.NAME)&&this.facade.removeMediator(d.NAME),this.facade.registerMediator(new d(this.entity))},c.prototype.setCameraTarget=function(t){this.cameraTarget=t,this.rotation=this.entity.getEulerAngles().y,this.cameraHeight=this.entity.getLocalPosition().y},c.prototype.handleDrag=function(t){if(this.rotation+=t.x*this.dragMultiplierX,this.verticalScroll){let e=this.cameraHeight-t.y*this.dragMultiplierY;e=pc.math.clamp(e,this.minCameraHeight,this.maxCameraHeight),this.cameraHeight=e}},c.prototype.getTargetCameraPosition=function(t){const e=this.entity.getLocalPosition(),i=Math.sin(this.rotation*Math.PI/180)*this.distance,n=Math.cos(this.rotation*Math.PI/180)*this.distance;return new pc.Vec3(t.x+i,e.y,t.z+n)},c.prototype.update=function(t){if(this.cameraTarget){const t=this.cameraTarget.getLocalPosition(),e=this.getTargetCameraPosition(t),i=this.entity.getLocalPosition(),n=(e.x+9*i.x)/10,o=(this.cameraHeight+9*i.y)/10,r=(e.z+9*i.z)/10;this.entity.setLocalPosition(n,o,r),this.entity.lookAt(t)}};const{Mediator:h}=i(710);class d extends h{static get NAME(){return"GameCameraMediator"}constructor(t){super(d.NAME),this.subscribeNotification([r.i.CHANGE_SCENE_COMPLETE,r.i.INPUT_DRAG_MOUSE,r.i.SET_CAMERA_TARGET]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...e){switch(t){case r.i.SET_CAMERA_TARGET:this.viewComponent.script.GameCamera.setCameraTarget(e[0]);break;case r.i.INPUT_DRAG_MOUSE:this.viewComponent.script.GameCamera.handleDrag(e[0])}}}const p=pc.createScript("InputLayerComponent");p.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),p.attributes.add("dragTime",{type:"number",title:"Drag Time",default:.4}),p.prototype.window=window,p.prototype.initialize=function(){this.facade=n.Facade.getInstance(o.GameFacade.KEY),this.facade.hasMediator(s.NAME)&&this.facade.removeMediator(s.NAME),this.facade.registerMediator(new s(this.entity)),this.ray=new pc.Ray,this.inputQueue=[],this.app.mouse.disableContextMenu(),this.clickDownStart=0,this.isDragging=!1,this.app.on("picker:result",this.handlePickerResult,this),this.app.mouse&&(this.app.mouse.on(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.entity.element.on(pc.EVENT_MOUSEDOWN,this.onMouseDown,this),this.app.mouse.on(pc.EVENT_MOUSEUP,this.onMouseUp,this),this.entity.once("destroy",(()=>{this.app.mouse.off(pc.EVENT_MOUSEMOVE,this.onMouseMove,this),this.app.mouse.off(pc.EVENT_MOUSEUP,this.onMouseUp,this)}))),this.app.touch&&(this.app.touch.on(pc.EVENT_TOUCHMOVE,(t=>{this.onMouseMove(t.touches[0])})),this.entity.element.on(pc.EVENT_TOUCHSTART,(t=>{console.log(t),this.onMouseDown(t.touches[0])})),this.entity.element.on(pc.EVENT_TOUCHEND,(t=>{this.onMouseUp()}))),this.onResize(),this.window.addEventListener("resize",this.onResize.bind(this),!1)},p.prototype.onResize=function(){const t=this.app.graphicsDevice;console.log("size",t.width,t.height),t.width<t.height?this.entity.element.screen.screen.scaleBlend=1:this.entity.element.screen.screen.scaleBlend=0},p.prototype.onMouseDown=function(t){this.isDragging=!0,this.clickDownStart=Date.now(),this.clickStartPoint={x:t.x,y:t.y}},p.prototype.onMouseMove=function(t){if(this.isDragging){const e=new pc.Vec2(this.clickStartPoint.x-t.x,this.clickStartPoint.y-t.y);this.entity.fire("scrolling",e),this.clickStartPoint={x:t.x,y:t.y}}},p.prototype.onMouseUp=function(){this.isDragging=!1,Date.now()-this.clickDownStart<1e3*this.dragTime&&this.clickStartPoint&&this.handleRaycastCollisions(this.clickStartPoint.x,this.clickStartPoint.y)},p.prototype.handleRaycastCollisions=function(t,e){const i=this.cameraEntity,n=this.cameraEntity.camera;n.screenToWorld(t,e,n.farClip,this.ray.direction),this.ray.origin.copy(i.getPosition()),this.ray.direction.sub(this.ray.origin).normalize(),this.app.fire("picker:raycast",this.ray,{x:t,y:e})},p.prototype.handlePickerResult=function(t,e,i){this.inputQueue.push({entity:t,hitPosition:e,screenPosition:i})},p.prototype.update=function(t){this.processInputQueue()},p.prototype.processInputQueue=function(){if(this.inputQueue.length>0){let e=this.inputQueue[0],i=-1;for(const n of this.inputQueue)((t=n.entity).tags.has("gameCharacter")?2:t.tags.has("navigation")?1:-1)>i&&(e=n);e.entity.tags.has("gameCharacter")&&this.pickedGameCharacter(e.entity,e.hitPosition),e.entity.tags.has("navigation")&&this.pickedNavigation(e.entity,e.hitPosition),this.inputQueue=[]}var t},p.prototype.pickedGameCharacter=function(t,e){this.entity.fire("picker:gameCharacter",t)},p.prototype.pickedNavigation=function(t,e){const i=t.script.NavigationComponent.getNearestNode(e);this.entity.fire("picker:navigation",i)}},852:(t,e,i)=>{i.d(e,{N:()=>o});const{Mediator:n}=i(710);class o extends n{static get NAME(){return"ProjectileCreatorMediator"}constructor(t){super(o.NAME),this.subscribeNotification([]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...e){}createProjectile(t,e,i){return this.viewComponent.script.ProjectileCreatorComponent.createProjectile(t,e,i)}}}},e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t=i(757),e=i(68);const{Facade:n}=i(710),{GameFacade:o}=i(757),r=pc.createScript("CacogenGame");r.prototype.initialize=function(){this.facade=n.getInstance(o.KEY),this.facade.sendNotification(e.i.APP_INITIALISED),this.facade.sendNotification(e.i.CHANGE_SCENE,"Map1")},r.prototype.update=function(t){};var a=i(434);const s=pc.createScript("NavigationComponent");s.attributes.add("connectedComponents",{type:"entity",array:!0,title:"Connected Components"}),s.prototype.initialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,.05,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.findByName("Plane").enabled=!1},s.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity,i,e)},s.prototype.setGrid=function(t){this.nodeGrid=t},s.prototype.getGrid=function(){return this.nodeGrid},s.prototype.getNearestNode=function(t){let e=this.nodeGrid[0],i=a.q.getDistSquared(e,t);for(const n of this.nodeGrid){const o=a.q.getDistSquared(n,t);o<i&&(i=o,e=n)}return e},i(442);var c=i(710),h=i(958),d=i(969),p=i(917),l=i(448);const u=pc.createScript("AgroGameCharacterComponent");u.attributes.add("sightRange",{type:"number",title:"Sight Range",default:5}),u.prototype.initialize=function(){this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MAP_GRID_CREATED),this.entity.script.GameCharacterComponent.preregisterNotification(e.i.MOVED_TO_NODE+"player"),this.entity.on(e.i.MAP_GRID_CREATED,this.handleMapGridCreated,this),this.entity.on(e.i.MOVED_TO_NODE+"player",this.handleMovedToNode,this)},u.prototype.handleMapGridCreated=function(e,...i){const n=c.Facade.getInstance(t.GameFacade.KEY);this.characterProxy=n.retrieveProxy(h.b.NAME+e)},u.prototype.handleMovedToNode=function(i,n){const o=c.Facade.getInstance(t.GameFacade.KEY);if(o.retrieveProxy(p.u.NAME).vo.gameplayMode!==l.gameplayModeTypes.EXPLORATION||this.characterProxy.isDead)return;const r=this.characterProxy.currentNode,a=new pc.Vec3(r.x,r.y,r.z),s=new pc.Vec3(n.x,n.y,n.z);if(a.distance(s)<=this.sightRange){const t=o.retrieveProxy(d.h.NAME);a.y+=this.characterProxy.height,console.log("FROMTO"),console.log(a),console.log(s),t.rayIntersectsWall(a,s)||(o.sendNotification(e.i.SET_CHARACTER_TO_NODE+"player",n),o.sendNotification(e.i.START_COMBAT,i))}};const{Mediator:f}=i(710);class A extends f{static get NAME(){return"ToastMessageMediator"}constructor(t){super(A.NAME),this.subscribeNotification([e.i.SHOW_TOAST_MESSAGE]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.SHOW_TOAST_MESSAGE:this.viewComponent.script.ToastMessageComponent.addMessage(i[0])}}}const g=pc.createScript("ToastMessageComponent");g.attributes.add("labelEntity",{type:"entity",title:"Label Entity"}),g.attributes.add("messageTime",{type:"number",default:5,title:"Message Time"}),g.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(A.NAME)&&this.facade.removeMediator(A.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new A(this.entity))},g.prototype.addMessage=function(t){0===this.messageQueue.length?(this.messageQueue.push(t),this.showNextMessage()):this.messageQueue.push(t)},g.prototype.showNextMessage=function(){if(this.messageQueue.length>0){const t=this.messageQueue[0];this.labelEntity.element.text=t,setTimeout((()=>{this.messageQueue.shift(),this.showNextMessage()}),1e3*this.messageTime)}else this.labelEntity.element.text=""},pc.createScript("SetCameraTargetComponent").prototype.postInitialize=function(){c.Facade.getInstance(t.GameFacade.KEY).sendNotification(e.i.SET_CAMERA_TARGET,this.entity)},i(203);const{Mediator:E}=i(710);class m extends E{static get NAME(){return"PlayerCombatPanelMediator"}constructor(t){super(m.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.AWAIT_PLAYER_COMBAT_INPUT,e.i.END_COMBAT_TURN]),this.viewComponent=t,this.viewComponent.on("click:endTurn",this.handleEndTurn,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:this.viewComponent.enabled=!1;break;case e.i.AWAIT_PLAYER_COMBAT_INPUT:this.viewComponent.enabled=!0;break;case e.i.END_COMBAT_TURN:this.viewComponent.enabled=!1}}handleEndTurn(t){this.sendNotification(e.i.END_COMBAT_TURN)}}const y=pc.createScript("PlayerCombatPanelComponent");y.attributes.add("endTurnButton",{type:"entity",title:"End Turn button"}),y.prototype.initialize=function(){},y.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(m.NAME)&&this.facade.removeMediator(m.NAME),this.messageQueue=[],this.currentTimeout=void 0,this.facade.registerMediator(new m(this.entity)),this.endTurnButton.element.on("click",this.clickEndTurn,this)},y.prototype.clickEndTurn=function(t){this.entity.fire("click:endTurn")};const N=pc.createScript("HitboxComponent");N.prototype.initialize=function(){const t=this.entity.getLocalScale(),e=new pc.Vec3(t.x/2,t.y/2,t.z/2);this.aabb=new pc.BoundingBox(this.entity.getPosition(),e),this.app.on("picker:raycast",this.handleRayCast,this),this.entity.on("stopListening",(()=>{this.app.off("picker:raycast",this.handleRayCast,this)})),this.entity.model.enabled=!1},N.prototype.handleRayCast=function(t,e){const i=new pc.Vec3;this.aabb.intersectsRay(t,i)&&this.app.fire("picker:result",this.entity.parent,i,e)},N.prototype.update=function(t){this.aabb.center.copy(this.entity.getPosition())};const{Mediator:M}=i(710);class C extends M{static get NAME(){return"ActionPanelMediator"}constructor(t){super(C.NAME),this.subscribeNotification([e.i.SET_PLAYER_ACTION,e.i.TOGGLE_BUTTON,e.i.USE_PLAYER_ACTION]),this.viewComponent=t,this.viewComponent.on("click:fireCommand",this.handleFireCommand,this)}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.TOGGLE_BUTTON:const t=i[0];this.viewComponent.script.ActionPanelComponent.selectAction(t);break;case e.i.USE_PLAYER_ACTION:}}handleFireCommand(t,...e){this.facade.sendNotification(t,...e)}}const v=pc.createScript("ActionButtonComponent");v.attributes.add("highlightEntity",{type:"entity",title:"Highlight Entity"}),v.attributes.add("iconEntity",{type:"entity",title:"Icon Entity"}),v.attributes.add("commands",{type:"json",schema:[{name:"commandName",title:"Command name",type:"string"},{name:"commandArgs",title:"Command arguments",type:"string",array:!0}],title:"Command name",array:!0}),v.prototype.initialize=function(){this.highlightEntity.enabled=!1,this.entity.on("select:action",this.handleChangeAction,this),this.entity.element.on("click",this.handleClick,this)},v.prototype.handleClick=function(t){for(const t of this.commands){const e=t.commandName,i=t.commandArgs;this.entity.parent.fire("click:fireCommand",e,...i)}},v.prototype.handleChangeAction=function(t){this.entity.name===t?this.highlightEntity.enabled=!this.highlightEntity.enabled:this.highlightEntity.enabled=!1};const T=pc.createScript("ActionPanelComponent");T.attributes.add("actionButtons",{type:"entity",title:"Action Buttons",array:!0}),T.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(C.NAME)&&this.facade.removeMediator(C.NAME),this.facade.registerMediator(new C(this.entity))},T.prototype.selectAction=function(t){for(const e of this.actionButtons)e.fire("select:action",t)},pc.createScript("UIStopPropagation").prototype.initialize=function(){this.entity.element.on(pc.EVENT_MOUSEDOWN,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_MOUSEDOWN,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHSTART,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHMOVE,(t=>{t.stopPropagation()})),this.entity.element.on(pc.EVENT_TOUCHEND,(t=>{t.stopPropagation()}))};var _=i(852);const b=pc.createScript("ProjectileCreatorComponent");b.attributes.add("projectileTypes",{type:"json",title:"Projectile Types",schema:[{name:"projectileName",title:"Projectile Name",type:"string"},{name:"projectileTemplate",title:"Projectile Template",type:"asset"}],array:!0}),b.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(_.N.NAME)&&this.facade.removeMediator(_.N.NAME),this.facade.registerMediator(new _.N(this.entity))},b.prototype.createProjectile=function(t,e,i){return new Promise(((n,o)=>{const r=this.projectileTypes.find((e=>e.projectileName===t));if(!r)throw o(),new Error(`Unable to create projectile "${t}"`);{const t=r.projectileTemplate.resource.instantiate();this.entity.addChild(t),t.once("projectileArrived",(()=>{n()})),t.script.ProjectileComponent.setTarget(e,i)}}))};const P=pc.createScript("ProjectileComponent");P.attributes.add("projectileSpeed",{type:"number",title:"Projectile Speed",default:8}),P.prototype.initialize=function(){},P.prototype.setTarget=function(t,e){this.entity.setLocalPosition(t.x,t.y,t.z),this.targetPoint=e,this.lookAtPoint(this.targetPoint)},P.prototype.update=function(t){if(this.targetPoint){const e=this.entity.getLocalPosition(),i=new pc.Vec3,n=new pc.Vec3(t*this.projectileSpeed,t*this.projectileSpeed,t*this.projectileSpeed);i.sub2(this.targetPoint.clone(),e),i.normalize(),i.mul(n),i.add(e),this.entity.setLocalPosition(i),i.distance(this.targetPoint)<=t*this.projectileSpeed&&(this.entity.fire("projectileArrived"),this.entity.destroy())}},P.prototype.lookAtPoint=function(t){const e=this.entity.getLocalPosition(),i=t.x-e.x,n=t.z-e.z,o=180*Math.atan2(i,n)/Math.PI;this.entity.setEulerAngles(0,o,0)};const{Mediator:S}=i(710);class O extends S{static get NAME(){return"StaminaBarMediator"}constructor(t){super(O.NAME),this.subscribeNotification([e.i.CHANGE_STAMINA+"player"]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_STAMINA+"player":const t=i[0],n=i[1];this.viewComponent.script.StaminaBarComponent.updateStamina(t,n)}}}const x=pc.createScript("StaminaBarComponent");x.attributes.add("barEntity",{type:"entity",title:"Bar Entity"}),x.attributes.add("staminaLabel",{type:"entity",title:"Stamina Label"}),x.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(O.NAME)&&this.facade.removeMediator(O.NAME),this.facade.registerMediator(new O(this.entity)),this.barEntityMaxWidth=this.barEntity.element.width},x.prototype.updateStamina=function(t,e){const i=pc.math.clamp(t/e,0,1),n=pc.math.lerp(0,this.barEntityMaxWidth,i);this.barEntity.element.width=n,this.barEntity.element.rect.z=i,this.barEntity.element.rect=this.barEntity.element.rect,this.staminaLabel.element.text=`${t}/${e}`};const{Mediator:I}=i(710);class w extends I{static get NAME(){return"ActionsRemainingPanelMediator"}constructor(t){super(w.NAME),this.subscribeNotification([e.i.CHANGE_SCENE_COMPLETE,e.i.AWAIT_PLAYER_COMBAT_INPUT,e.i.END_COMBAT_TURN,e.i.USE_ACTION+"player"]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.CHANGE_SCENE_COMPLETE:this.viewComponent.enabled=!1;break;case e.i.AWAIT_PLAYER_COMBAT_INPUT:const t=this.facade.retrieveProxy(h.b.NAME+"player"),n=t.availableActions,o=t.maxActionsPerTurn;this.viewComponent.script.ActionsRemainingPanelComponent.showAvailableAction(n,o),this.viewComponent.enabled=!0;break;case e.i.USE_ACTION+"player":this.viewComponent.script.ActionsRemainingPanelComponent.showAvailableAction(i[0],i[1]);break;case e.i.END_COMBAT_TURN:this.viewComponent.enabled=!1}}}const R=pc.createScript("ActionsRemainingPanelComponent");R.attributes.add("pipTemplate",{type:"asset",title:"Pip Template"}),R.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(w.NAME)&&this.facade.removeMediator(w.NAME),this.facade.registerMediator(new w(this.entity)),this.pips=[]},R.prototype.showAvailableAction=function(t,e){for(;this.pips.length<e;)this.createPip();for(let e=0;e<this.pips.length;e++)e<t?this.pips[e].fire("togglePip",!0):this.pips[e].fire("togglePip",!1)},R.prototype.createPip=function(){const t=this.pipTemplate.resource.instantiate();this.entity.addChild(t),this.pips.push(t)};const L=pc.createScript("ActionsRemainingPipComponent");L.attributes.add("pipFront",{type:"entity",title:"Pip front"}),L.prototype.initialize=function(){this.entity.on("togglePip",(t=>{this.pipFront.enabled=t}))};const{Mediator:D}=i(710);class G extends D{static get NAME(){return"FloatingStatusCreatorMediator"}constructor(t){super(G.NAME),this.subscribeNotification([e.i.DISPLAY_FLOATING_STATUS]),this.viewComponent=t}onRegister(t){super.onRegister(t)}handleNotification(t,...i){switch(t){case e.i.DISPLAY_FLOATING_STATUS:const t=this.viewComponent.script.FloatingStatusCreatorComponent,n=i[0],o=i[1];t.displayStatus(n,o)}}}const k=pc.createScript("TemporaryFloatingStatusComponent");k.prototype.initialize=function(){},k.prototype.setWorldPosition=function(t,e,i){this.entity.enabled=!0,this.worldPosition=t,this.device=this.app.graphicsDevice,this.cameraEntity=e,this.screenEntity=i,setTimeout((()=>{this.entity.destroy()}),1e3)},k.prototype.update=function(t){const e=this.worldSpaceToScreenSpace(this.worldPosition.clone());e&&this.entity.setLocalPosition(e)},k.prototype.worldSpaceToScreenSpace=function(t){if(this.device&&this.cameraEntity&&this.screenEntity){const e=t.clone(),i=new pc.Vec3;this.cameraEntity.camera.worldToScreen(e,i);const n=this.screenEntity.screen,o=n.referenceResolution.x/n.resolution.x,r=i.x*o,a=-1*i.y*o+this.screenEntity.screen.resolution.y*o;return new pc.Vec3(r,a,0)}};const V=pc.createScript("FloatingStatusCreatorComponent");V.attributes.add("screenEntity",{type:"entity",title:"Screen Entity"}),V.attributes.add("cameraEntity",{type:"entity",title:"Camera Entity"}),V.attributes.add("floatingStatuses",{type:"json",schema:[{name:"name",title:"Name",type:"string"},{name:"template",title:"Template",type:"asset"}],title:"Floating Statuses",array:!0}),V.prototype.initialize=function(){this.facade=c.Facade.getInstance(t.GameFacade.KEY),this.facade.hasMediator(G.NAME)&&this.facade.removeMediator(G.NAME),this.facade.registerMediator(new G(this.entity))},V.prototype.displayStatus=function(t,e,...i){const n=this.floatingStatuses.find((e=>e.name===t));if(!n)throw new Error("Cannot create floating status: "+t);{const t=e.currentNode,i=new pc.Vec3(t.x,t.y+e.height,t.z),o=n.template.resource.instantiate();o.script.TemporaryFloatingStatusComponent.setWorldPosition(i,this.cameraEntity,this.screenEntity),this.entity.addChild(o)}};const{Facade:H}=i(710),{PureMVC:U}=i(710);new class{constructor(){console.log("Main start"),U.debug=!0,H.getInstance=t.GameFacade.getInstance,console.log(H),this.facade=H.getInstance(t.GameFacade.KEY),this.facade.startup(this)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,